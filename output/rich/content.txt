================================================
FILE: README.cn.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

Rich 是一个 Python 库，可以为您在终端中提供富文本和精美格式。

[Rich 的 API](https://rich.readthedocs.io/en/latest/) 让在终端输出颜色和样式变得很简单。此外，Rich 还可以绘制漂亮的表格、进度条、markdown、语法高亮的源代码以及栈回溯信息（tracebacks）等——开箱即用。

![功能纵览](https://github.com/textualize/rich/raw/master/imgs/features.png)

有关 Rich 的视频介绍，请参见
[@fishnets88](https://twitter.com/fishnets88) 录制的
[calmcode.io](https://calmcode.io/rich/introduction.html)。

## 兼容性

Rich 适用于 Linux，OSX 和 Windows。真彩色/表情符号可与新的 Windows 终端一起使用，Windows 的经典终端仅限 8 种颜色。

Rich 还可以与 [Jupyter 笔记本](https://jupyter.org/)一起使用，而无需其他配置。

## 安装说明

使用`pip`或其他 PyPI 软件包管理器进行安装。

```sh
python -m pip install rich
```

## Rich 的打印功能

想毫不费力地将 Rich 的输出功能添加到您的应用程序中，您只需导入 [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) 方法，它和 Python 内置的同名函数有着完全一致的函数签名。试试看：

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## 在交互式命令行（REPL）中使用 Rich

Rich 可以被安装到 Python 交互式命令行中，那样做以后，任何数据结构都可以被漂亮的打印出来，自带语法高亮。

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## 使用控制台

想要对 Rich 终端内容进行更多控制，请您导入并构造一个[控制台](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console)对象。

```python
from rich.console import Console

console = Console()
```

Console 对象包含一个`print`方法，它和语言内置的`print`函数有着相似的接口。下面是一段使用样例：

```python
console.print("Hello", "World!")
```

您可能已经料到，这时终端上会显示“ Hello World！”。请注意，与内置的“print”函数不同，Rich 会将文字自动换行以适合终端宽度。

有好几种方法可以为输出添加颜色和样式。您可以通过添加`style`关键字参数来为整个输出设置样式。例子如下：

```python
console.print("Hello", "World!", style="bold red")
```

输出如下图：

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

这个范例一次只设置了一行文字的样式。如果想获得更细腻更复杂的样式，Rich 可以渲染一个特殊的标记，其语法类似于[bbcode](https://en.wikipedia.org/wiki/BBCode)。示例如下：

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![控制台标记](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

使用`Console`对象，你可以花最少的工夫生成复杂的输出。更详细的内容可查阅 [Console API](https://rich.readthedocs.io/en/latest/console.html) 文档。

## Rich Inspect

Rich 提供一个 [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) 函数来给任意的 Python 对象打印报告，比如类（class）、实例（instance）和内置对象（builtin）等。

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

查看  [inspect 文档](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect)详细了解。

# Rich 库内容

Rich 包含了一系列内置的 _可渲染类型(renderables)_ ，你可以用它们为命令行程序构建出优雅的输出，也可以拿它们来辅助调试你的代码。

点击以下标题查看详细：

<details>
<summary>日志（Log）</summary>

Console 对象有一个与`print()`类似的`log()`方法，但它会多输出一列内容，里面包含当前时间以及调用方法的文件行号。默认情况下，Rich 将针对 Python 结构和 repr 字符串添加语法高亮。如果您记录一个集合（如字典或列表），Rich 会把它漂亮地打印出来，使其切合可用空间。下面是其中一些功能的示例：

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

以上范例的输出如下：

![日志](https://github.com/textualize/rich/raw/master/imgs/log.png)

注意其中的`log_locals`参数会输出一个表格，该表格包含调用 log 方法的局部变量。

log 方法既可用于将常驻进程（例如服务器进程）的日志打印到终端，在调试时也是个好帮手。

</details>
<details>
<summary>日志处理器（Logging Handler）</summary>

您还可以使用内置的[处理器类](https://rich.readthedocs.io/en/latest/logging.html)来对 Python 的 logging 模块的输出进行格式化和着色。下面是输出示例：

![记录](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji 表情</summary>

将名称放在两个冒号之间即可在控制台输出中插入 emoji 表情符。示例如下：

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

请谨慎地使用此功能。

</details>

<details>
<summary>表格（Tables）</summary>

Rich 可以使用 Unicode 框字符来呈现多变的[表格](https://rich.readthedocs.io/en/latest/tables.html)。Rich 包含多种边框，样式，单元格对齐等格式设置的选项。下面是一个简单的示例：

```python
from rich.console import Console
from rich.table import Column, Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

该示例的输出如下：

![表格](https://github.com/textualize/rich/raw/master/imgs/table.png)

请注意，控制台标记的呈现方式与`print()`和`log()`相同。实际上，由 Rich 渲染的任何内容都可以添加到标题/行（甚至其他表格）中。

`Table`类很聪明，可以调整列的大小以适合终端的可用宽度，并能根据需要对文字折行。下面是相同的示例，输出与比上表小的终端上：

![表格 2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>进度条（Progress Bars）</summary>

Rich 可以渲染多种“无闪烁”的[进度](https://rich.readthedocs.io/en/latest/progress.html)条图形，以跟踪长时间运行的任务。

基本用法：用`track`函数调用任何程序并迭代结果。下面是一个例子：

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

添加多个进度条并不难。以下是从文档中获取的示例：

![进度](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

这些列可以配置为显示您所需的任何详细信息。内置列包括完成百分比，文件大小，文件速度和剩余时间。下面是显示正在进行的下载的示例：

![进度](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

要自己尝试一下，请参阅[examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py)，它可以在显示进度的同时下载多个 URL。

</details>

<details>
<summary>状态动画（Status）</summary>

对于那些很难计算进度的情况，你可以使用 [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) 方法，它会展示一个“环形旋转（spinner）”的动画和文字信息。这个动画并不会妨碍你正常使用控制台。下面是个例子：

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

这会往终端生成以下输出：

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

这个旋转动画借鉴自 [cli-spinners](https://www.npmjs.com/package/cli-spinners) 项目。你可以通过`spinner`参数指定一种动画效果。执行以下命令来查看所有可选值：

```
python -m rich.spinner
```

这会往终端输出以下内容：

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>树（Tree）</summary>

Rich 可以渲染一个包含引导线的[树（tree）](https://rich.readthedocs.io/en/latest/tree.html)。对于展示文件目录结构和其他分级数据来说，树是理想选择。

树的标签可以是简单文本或任何 Rich 能渲染的东西。执行以下命令查看演示：

```
python -m rich.tree
```

这会产生以下输出：

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

[tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) 是一个展示任意目录的文件树视图的样例文件，类似于 Linux 中的 `tree` 命令。

</details>

<details>
<summary>列（Columns）</summary>

Rich 可以将内容通过排列整齐的，具有相等或最佳的宽度的[列](https://rich.readthedocs.io/en/latest/columns.html)来呈现。下面是（macOS / Linux）`ls`命令的一个非常基本的克隆，用于用列来显示目录列表：

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

以下屏幕截图是[列示例](https://github.com/textualize/rich/blob/master/examples/columns.py)的输出，该列显示了从 API 提取的数据：

![列](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich 可以呈现[markdown](https://rich.readthedocs.io/en/latest/markdown.html)，并可相当不错的将其格式转移到终端。

为了渲染 markdown，请导入`Markdown`类，并使用包含 markdown 代码的字符串来构造它，然后将其打印到控制台。例子如下：

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

该例子的输出如下图：

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>语法高亮（Syntax Highlighting）</summary>

Rich 使用[pygments](https://pygments.org/)库来实现[语法高亮显示](https://rich.readthedocs.io/en/latest/syntax.html)。用法类似于渲染 markdown。构造一个`Syntax`对象并将其打印到控制台。下面是一个例子：

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

输出如下：

![语法](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>栈回溯信息（Tracebacks）</summary>

Rich 可以渲染出漂亮的[栈回溯信息](https://rich.readthedocs.io/en/latest/traceback.html)，它比标准的 Python 格式更容易阅读，且能显示更多的代码。您可以将 Rich 设置为默认的栈回溯处理程序，这样所有未捕获的异常都将由 Rich 为渲染。

下面是在 OSX（在 Linux 上也类似）系统的效果：

![回溯](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

所有的 Rich 可渲染对象都采用了 [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html) 协议，你可以用该协议实现你独有的 Rich 内容。

## 使用 Rich 的项目

这里是一些使用 Rich 的项目:

- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  一个用于三维神经解剖数据可视化的 python 包
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  自动解密工具
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  一个高性能、高精度的 Python CPU 和内存剖析器
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  通过命令行浏览 GitHub 热门项目
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  这个工具可以扫描一些常见的、有漏洞的组件（openssl、libpng、libxml2、expat和其他一些组件），让你知道你的系统是否包含有已知漏洞的常用库。
- [nf-core/tools](https://github.com/nf)
  包含 nf-core 社区帮助工具的 Python 包
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  pdb + rich 的库，增强调试功能
- [plant99/felicette](https://github.com/plant99/felicette)
  傻瓜式卫星图像
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  使用 Selenium 和 pytest 使自动化和测试速度提高10倍，包括电池
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  自动将字幕与视频同步
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  轻量级 Python 库，用于向任何检测器添加实时 2D 对象跟踪
- +[还有很多](https://github.com/textualize/rich/network/dependents)!



================================================
FILE: README.de-ch.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

Rich isch ä Python Library för _rich_ Text ond ganz schöni formatiärig im Törminäl

D [Rich API](https://rich.readthedocs.io/en/latest/) machts ganz eifach zom Farbä ond Stiil zu de Törminälusgob hinzu z füäge. Rich cha au schöni Tabelle, Progressbare, Markdown, Syntax hervorhebe, Tracebäcks und meh darstelle — fix fertig usem Böxli.

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

E Video Iifüärig öber Rich geds onder [calmcode.io](https://calmcode.io/rich/introduction.html) vo [@fishnets88](https://twitter.com/fishnets88).

Lueg was [anderi öber Rich säged](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).

## Kompatibilität

Rich funktioniert mit Linux, OSX ond Windows. True color / emoji funktioniert mit em neue Windows Törminäl, s klassische Törminäl isch of 16 Farbe limitiärt. Rich brucht Python 3.6.3 oder neuer.

Rich funktioniert mit [Jupyter notebooks](https://jupyter.org/) ohni irgendwelchä zuäsätzloche konfiguration.

## Installation

Installation mit `pip` oder mit dim liäblings PyPI Päckli-Manager.

```sh
python -m pip install rich
```

Für das do us zum d Rich usgob im Törminäl z teste:

```sh
python -m rich
```

## Rich Print

Zom ohni Ufwand Rich Usgob zu dinnere Applikation hinzuäfüäge, chasch eifach d [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) Methodä importiäre, weli di glich Signatuur hed wiä d Builtin Python Funktion. Versuech das:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich cha i de Python REPL installiert werde so dass irgend e Datestruktuur hübsch usgeh ond Highlighted wird.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Console bruchä

Für meh kontrolle öber de Törminäl inhalt, importiär und instanziär e [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) Objekt.

```python
from rich.console import Console

console = Console()
```

S Console Objekt hät e `print` Methode mitäre absichtloch gliche Schnittstell wiä d Builtin `print` Funktion. Do es Bispiil wiä mos brucht:

```python
console.print("Hello", "World!")
```

Wiä erwartet wird `"Hello World!"` im Törminäl usgeh. Beach das im gägesatz zu de Builtin `print` Funktion, Rich de text so ombricht das es id Törminäl breiti ine passt.

Es ged es paar Wäg zom Farb und Stiil zu de Usgob hinzuä z füäge. Me cha en stiil a de ganze Usgob zuäwiise i dem mo s Schlösselwortargument `style` verwendet. Do es Bispiil:

```python
console.print("Hello", "World!", style="bold red")
```

D Usgob gsiät öppe ä so us:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

Da isch guät für d Gstalltig vom Text pro Liniä. Vör ä granularäri Gstalltig hed Rich e spezielli Markup mitäre ähnloche Befehlsufbau wiä [bbcode](https://en.wikipedia.org/wiki/BBCode). Do es Bispiil:

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

Du chasch mitmäne Console Objekt mit wenig Ufwand aasprechendi Usgob erziile. Lueg do d [Console API](https://rich.readthedocs.io/en/latest/console.html) Dokumentation für d Details a.

## Rich Inspect

Rich hät e [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) Funktion wo cha Bricht öber jeglochi Python Objekt, wie Class, Instanz oder Builtin erstelle.

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

Lueg do d [inspect Dokumentation](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) für d Details a.

# Rich-Bibliothek

Rich häd ä Aazahl vo integriäte _renderables_ wo du chasch verwende zum eleganti Usgobe i dinner e CLI generiäre ond der hälfed bim debugge vo dim Code.

Drock of di folgende Öberschrifte für d Details:

<details>
<summary>Log</summary>

S Console Objekt hät e `log()` Methode wo verglichbar zu de `print()` Schnittstell isch aber zuäsätzloch no e Spaltä för di aktuäll Zitt und d Datai mit de Zille wo de Ufruäf macht us git. Standardmässig tuät Rich es Syntax Highlighting für Python Strukturä sowiä repr Text machä. Went e Collection (wiä zum Bispiil dict oder list) loggsch wird Rich das hübsch Usgeh so dass es i de verfüägbari Platz ine passt. Do es Bispiil für e paar vo dene Funktionä.

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

Das do obe gid di folgend Usgob:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

Beachte s Argument `log_locals` wo innere Tabelle di lokalä Variable us gid zur Zitt wo d Methodä ufgruäfä worde isch.

D log Methodä cha zum is Törminäl inne z Logge für langläbige Applikationä wie Server brucht werde isch aber au fürs Debuggä ganz e netti Hilf.

</details>
<details>
<summary>Logging Handler</summary>

Du chasch au d Builtin [Handler Class](https://rich.readthedocs.io/en/latest/logging.html) verwende zum d Usgob vom Python logging Module z formatiäre und iifärbe. Do es Bispiil vo de Usgob:

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji</summary>

Zom e Emoji i de Konsoleusgob iizfüäge tuä de name züschet zwei Doppelpünkt. Do es Bispiil:

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

Bitte verwend diä Funktion gschiid.

</details>

<details>
<summary>Tabelle</summary>

Rich cha flexiibäl [Tabelle](https://rich.readthedocs.io/en/latest/tables.html) mit Boxä us Unicodezeiche generiäre. Es gid e Viilzahl vo Formatiärigsoptionä für Ränder, Stiil, Zelleusrichtig ond so witter.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

D Animation obe isch mit [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) us em Bispiil-Ordner erstellt worde.

Do es eifachs Tabelle-Bispiil:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

Das gid di folgend Usgob:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

Beacht das d Konsole Markup glich wie bi `print()` ond `log()` generiärt wird. Ond zwor cha alles wo vo Rich generiert werde cha au im Chopf / Zille iigfüägt werde (sogar anderi Tabellene).

D Klass `Table` isch gschiid gnuäg yum d Spaltebreite am verfüägbare Platz im Törminäl aazpasse und de Text gegäbenefalls umzbreche. Do isch s gliche Bispiil mit em Törminäl chlinner als d Tabelle vo obe:

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Progress Bars</summary>

Rich cha meereri flackerfreii [Progress](https://rich.readthedocs.io/en/latest/progress.html) Bars darstelle zum langläbigi Tasks verfolgä.

Zur eifache Benutzig irgend e Sequenz id `track` Funktion ine packe und über s Resultat iteriäre. Do es Bispiil:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

Es isch nöd vill schwiriger zum mehräri Progress Bars hinzuä zfüäge. Do es Bispiil us de Doku:

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

D Spaltä cha so konfiguriärt werde das alli gwünschte Details aazeigt werded. D Built-in Spalte beinhaltät Prozentsatz, Dateigrössi, Dateigschwindikeit ond öbrigi Zitt. Do isch e andos Bispiil wo en laufände Download zeigt:

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

Zums selber usprobiäre lueg [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) a, wo cha glichzittig mehräri URLs abelade und de Fortschritt aazeige.

</details>

<details>
<summary>Status</summary>

För Situatione wos schwär isch zum de Fortschritt z berechne, chasch d [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) Methode verwende wo en 'spinner' animiärt und e Nochricht darstellt. D Animation haltet di nöd ab d Konsole witter normal z bruche. Do es Bispiil:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

Das gid di folgendi Usgob im Törminäl.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

D Spinner Animatione sind vo [cli-spinners](https://www.npmjs.com/package/cli-spinners) usglehnt. Du chasch en speziifischä Spinner mit em `spinner` Parameter uswähle. Start de folgend Befehl zom die verfüägbare Wert z gsiä:

```
python -m rich.spinner
```

De Befehl obe generiärt di folgändi Usgob im Törminäl:

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Tree</summary>

Rich cha en [tree](https://rich.readthedocs.io/en/latest/tree.html) mit Hilfsliniä generiäre. En Tree isch ideal zom darstelle vo Dateistruktuure oder anderi hirarchischi Date.

S Label vom Tree cha en eifache Text or alles andere wo Rich cha rendere. Start das Folgendi für e Demonstation:

```
python -m rich.tree
```

Das generiärt di folgend Usgob:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

Lueg s Bispiil Script [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) für e Darstellig vo irgend eim Ordner als Tree, glich wie de Linux Befehl `tree`.

</details>

<details>
<summary>Spaltene</summary>

Rich cha Inhalt i hübsche [Spaltene](https://rich.readthedocs.io/en/latest/columns.html) darstelle mit glichä oder optimale Breiti. Do isch e ganz eifachi kopii vom (MacOS / Linux) `ls` Befehl wo Ordner in Spaltene darstellt

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

De folgend Screenshot isch d Usgob vom [Spalte-Bispiil](https://github.com/textualize/rich/blob/master/examples/columns.py), wo Date vonnere API hollt ond in Spaltene darstellt:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich cha [markdown](https://rich.readthedocs.io/en/latest/markdown.html) übersetze ond leistet vernünftigi Ärbät bim formatiärige is Törminäl z übersetze.

Zum Markdown z übersetze importier d Klass `Markdown` und instanzier es mitem Markdown Text. Nocher gid mos uf de Konsolä us. Do es Bispiil:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

Das wird d Usgob ungefär wie s Folgende geh:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Syntax Highlighting</summary>

Rich brucht d [pygments](https://pygments.org/) Library für d [Syntax Highlighting](https://rich.readthedocs.io/en/latest/syntax.html). S Bruche isch ähnloch zum Markdown übersetze; instanziär e `Syntax` Objekt ond gibs uf de Konsolä us. Do es Bispiil:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

Das wird d Usgob ungefär wie s Folgende geh:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tracebacks</summary>

Rich cha [wunderschöni Tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) generiäre wo eifach zum läse sind und meh Code als de Standard-Python-Traceback darstellt. Du chasch Rich als default Traceback Handler setzä ond alli nöd abfangene Exceptions werded mit Rich dargstellt.

So gsiets ungefär ufemen OSX (ähnloch uf Linux) us:

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

Alli Rich Renderables bruched s [Console-Protokoll](https://rich.readthedocs.io/en/latest/protocol.html), wo mo au für d eige Entwicklig vo Rich-Inhalt cha bruche.

# Rich für Ondernemä

Verfüägbar als Tidelift Abo.

De Betreue vo Rich ond tuusigi anderi Päkli schaffed mit Tidelift zum komerziälle Support und Wartig für Open Source Päkli wo du zum Baue vo dinnere Applikation bruchsch. Spar Zit, reduziär s Risiko ond verbessere d Code Health mit em bezahle vo de Wartig für gnau die Päkli wo mo brucht. [Lärn meh.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

# Projekt wo Rich bruched

Do es paar Projekt wo Rich verwended:

- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  a python package for the visualization of three dimensional neuro-anatomical data
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  Automated decryption tool
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  a high-performance, high-precision CPU and memory profiler for Python
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  Browse GitHub trending projects from your command line
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  This tool scans for a number of common, vulnerable components (openssl, libpng, libxml2, expat and a few others) to let you know if your system includes common libraries with known vulnerabilities.
- [nf-core/tools](https://github.com/nf-core/tools)
  Python package with helper tools for the nf-core community.
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  pdb + Rich library for enhanced debugging
- [plant99/felicette](https://github.com/plant99/felicette)
  Satellite imagery for dummies.
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  Automate & test 10x faster with Selenium & pytest. Batteries included.
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  Automagically synchronize subtitles with video.
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  Lightweight Python library for adding real-time 2D object tracking to any detector.
- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint checks playbooks for practices and behaviour that could potentially be improved
- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule testing framework
- +[Vieli meh](https://github.com/textualize/rich/network/dependents)!

<!-- This is a test, no need to translate -->



================================================
FILE: README.de.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

Rich ist eine Python-Bibliothek für _rich_ Text und schöne Formatierung im Terminal.

Die [Rich API](https://rich.readthedocs.io/en/latest/) erleichtert das Hinzufügen von Farbe und Stil zur Terminalausgabe. Rich kann auch schöne Tabellen, Fortschrittsbalken, Markdowns, durch Syntax hervorgehobenen Quellcode, Tracebacks und mehr sofort rendern.

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

Eine Video-Einführung in Rich findest du unter [quietcode.io](https://calmcode.io/rich/introduction.html) von [@ fishnets88](https://twitter.com/fishnets88).

Schau hier, was [andere über Rich sagen](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).

## Kompatibilität

Rich läuft unter Linux, OSX und Windows. True Color / Emoji funktionieren mit dem neuen Windows-Terminal. Das klassische Terminal ist auf 16 Farben beschränkt. Rich benötigt Python 3.6.3 oder höher.

Rich funktioniert ohne zusätzliche Konfiguration mit [Jupyter Notebooks](https://jupyter.org/).

## Installation

Installation mit `pip` oder deinem bevorzugten PyPI-Paketmanager.

```sh
python -m pip install rich
```

Führe die folgenden Schritte aus, um die Rich-Ausgabe auf deinem Terminal zu testen:

```sh
python -m rich
```

## Rich Print

Um deiner Anwendung mühelos eine Rich-Ausgabe hinzuzufügen, kannst du die Methode [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) importieren, die dieselbe Signatur wie die integrierte Python-Funktion hat. Versuche das:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich kann in Python REPL installiert werden, so dass alle Datenstrukturen schön ausgegeben und hervorgehoben werden.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Verwenden der Konsole

Importiere und erstelle ein [Konsolen-Objekt](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console), um mehr Kontrolle über umfangreiche Terminalinhalte zu erhalten.

```python
from rich.console import Console

console = Console()
```

Das Konsolenobjekt verfügt über eine `print`-Methode, die eine absichtlich gleiche Schnittstelle zur integrierten `print`-Funktion aufweist. Hier ein Anwendungsbeispiel:

```python
console.print("Hello", "World!")
```

Wie zu erwarten, wird `"Hello World!"` im Terminal ausgegeben. Beachte, dass Rich im Gegensatz zur integrierten `print`-Funktion deinen Text so umbricht, dass er in die Terminalbreite passt.

Es gibt verschiedene Möglichkeiten, deiner Ausgabe Farbe und Stil hinzuzufügen. Du kannst einen Stil für die gesamte Ausgabe festlegen, indem du ein Schlüsselwortargument `style` hinzufügst. Hier ein Beispiel:

```python
console.print("Hello", "World!", style="bold red")
```

Die Ausgabe wird in etwa wie folgt aussehen:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

Das ist gut, um jeweils eine Textzeile zu stylen. Für eine detailliertere Gestaltung bietet Rich ein spezielles Markup an, das in der Syntax ähnlich [bbcode](https://en.wikipedia.org/wiki/BBCode) ist. Hier ein Beispiel:

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

Du kannst ein Console-Objekt verwenden, um mit minimalem Aufwand anspruchsvolle Ausgaben zu erzeugen. Siehe [Konsolen-API](https://rich.readthedocs.io/en/latest/console.html) für Details.

## Rich Inspect

Rich hat eine Funktion [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect), die einen Bericht über jedes Python-Objekt, wie Klasse, Instanz oder builtin, erzeugen kann.

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

Siehe [Doks Inspektor](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) für Details.

# Rich-Bibliothek

Rich enthält eine Reihe von eingebauten _renderables_, die du verwenden kannst, um elegante Ausgaben in deiner CLI zu erzeugen und dir beim Debuggen deines Codes zu helfen.

Klicke auf die folgenden Überschriften, um Details zu erfahren:

<details>
<summary>Log</summary>

Das Console-Objekt hat eine `log()`-Methode, die die gleiche Schnittstelle wie `print()` hat, aber zusätzlich eine Spalte für die aktuelle Zeit und die Datei und Zeile, die den Aufruf gemacht hat, ausgibt. Standardmäßig führt Rich die Syntaxhervorhebung für Python-Strukturen und für repr-Strings durch. Wenn du eine Sammlung (z.B. ein Diktat oder eine Liste) protokollierst, wird Rich diese so hübsch ausgeben, dass sie in den verfügbaren Platz passt. Hier ein Beispiel für einige dieser Funktionen.

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

Die obige Funktion erzeugt die folgende Ausgabe:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

Beachte das Argument `log_locals`, das eine Tabelle mit den lokalen Variablen ausgibt, in der die log-Methode aufgerufen wurde.

Die log-Methode kann für die Protokollierung auf dem Terminal für langlaufende Anwendungen wie Server verwendet werden, ist aber auch eine sehr schöne Hilfe bei der Fehlersuche.

</details>
<details>
<summary>Logging Handler</summary>

Du kannst auch die eingebaute [Handler-Klasse](https://rich.readthedocs.io/en/latest/logging.html) verwenden, um die Ausgabe von Pythons Logging-Modul zu formatieren und einzufärben. Hier ein Beispiel für die Ausgabe:

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji</summary>

Um ein Emoji in die Konsolenausgabe einzufügen, setze den Namen zwischen zwei Doppelpunkte. Hier ein Beispiel:

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

Bitte verwenden Sie diese Funktion mit Bedacht.

</details>

<details>
<summary>Tabellen</summary>

Rich kann flexible [Tabellen](https://rich.readthedocs.io/en/latest/tables.html) mit Unicode-Box-Characters darstellen. Es gibt eine Vielzahl von Formatierungsmöglichkeiten für Rahmen, Stile, Zellausrichtung usw.

![Film-Tabelle](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

Die obige Animation wurde mit [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) im Verzeichnis `examples` erzeugt.

Hier ist ein einfacheres Tabellenbeispiel:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

Dies erzeugt diese Ausgabe:

![Tabelle](https://github.com/textualize/rich/raw/master/imgs/table.png)

Beachte, dass das Konsolen-Markup auf die gleiche Weise gerendert wird wie `print()` und `log()`. Tatsächlich kann alles, was von Rich gerendert werden kann, in den Kopfzeilen/Zeilen enthalten sein (sogar andere Tabellen).

Die Klasse `Table` ist intelligent genug, um die Größe der Spalten an die verfügbare Breite des Terminals anzupassen und den Text wie erforderlich umzubrechen. Hier ist das gleiche Beispiel, wobei das Terminal kleiner als bei der obigen Tabelle ist:

![Tabelle2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Fortschrittsbalken</summary>

Rich kann mehrere flackerfreie [Fortschrittsbalken](https://rich.readthedocs.io/en/latest/progress.html) darstellen, um langlaufende Aufgaben zu verfolgen.

Einfachste Anwendung ist, eine beliebige Sequenz in die Funktion `track` einzupacken und  über das Ergebnis zu iterieren. Hier ein Beispiel:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

Es ist nicht viel schwieriger, mehrere Fortschrittsbalken hinzuzufügen. Hier ein Beispiel aus der Doku:

![Fortschritt](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

Die Spalten können so konfiguriert werden, dass sie alle gewünschten Details anzeigen. Zu den eingebauten Spalten gehören Prozentsatz der Fertigstellung, Dateigröße, Downloadgeschwindigkeit und verbleibende Zeit. Hier ist ein weiteres Beispiel, das einen laufenden Download anzeigt:

![Fortschritt](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

Um dies selbst auszuprobieren, sieh dir [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) an, das mehrere URLs gleichzeitig herunterladen kann und dabei den Fortschritt anzeigt.

</details>

<details>
<summary>Status</summary>

Für Situationen, in denen es schwierig ist, den Fortschritt zu berechnen, kannst du die Methode [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) verwenden, die eine 'Spinner'-Animation und eine Meldung anzeigt. Die Animation hindert dich nicht daran, die Konsole wie gewohnt zu verwenden. Hier ein Beispiel:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

Dies erzeugt diese Ausgabe im Terminal.

![Status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

Die Spinner-Animationen wurden von [cli-spinners](https://www.npmjs.com/package/cli-spinners) geliehen. Du kannst einen Spinner auswählen, indem du den Parameter `spinner` angibst. Führe den folgenden Befehl aus, um die verfügbaren Werte zu sehen:

```
python -m rich.spinner
```

Der obige Befehl erzeugt die folgende Ausgabe im Terminal:

![Spinner](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Baum</summary>

Rich kann einen [Baum](https://rich.readthedocs.io/en/latest/tree.html) mit Hilfslinien darstellen. Ein Baum ist ideal, um eine Dateistruktur oder andere hierarchische Daten darzustellen.

Die Beschriftungen des Baums können einfacher Text oder alles andere sein, was Rich rendern kann. Führe den folgenden Befehl zur Demonstration aus:

```
python -m rich.tree
```

Dies erzeugt diese Ausgabe:

![Markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

Siehe das Beispiel [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) für ein Skript, das eine Baumansicht eines beliebigen Verzeichnisses anzeigt, ähnlich dem Linux-Befehl `tree`.

</details>

<details>
<summary>Spalten</summary>

Rich kann Inhalte sauber in [Spalten](https://rich.readthedocs.io/en/latest/columns.html) mit gleicher oder optimaler Breite darstellen. Hier ist ein sehr einfacher Klon des (MacOS / Linux) `ls`-Befehls, der eine Verzeichnisliste in Spalten anzeigt:

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

Der folgende Screenshot ist die Ausgabe von [Spalten-Beispiel](https://github.com/textualize/rich/blob/master/examples/columns.py), das Daten, die aus einer API kommen, in Spalten anzeigt:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich kann [Markdown](https://rich.readthedocs.io/en/latest/markdown.html) rendern und leistet vernünftige Arbeit bei der Übersetzung der Formatierung ins Terminal.

Um Markdown zu rendern, importiere die Klasse `Markdown` und konstruiere einen String mit Markdown-Code. Gib ihn dann auf der Konsole aus. Hier ein Beispiel:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

Dies erzeugt diese Ausgabe:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Syntax-Hervorhebung</summary>

Rich verwendet die Bibliothek [pygments](https://pygments.org/) zur Implementierung von [Syntax-Hervorhebung](https://rich.readthedocs.io/en/latest/syntax.html). Die Verwendung ist gleich dem Rendern von Markdown; konstruieren Sie ein `Syntax`-Objekt und gib es auf der Konsole aus. Hier ein Beispiel:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

Dies erzeugt die folgende Ausgabe:

![Syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tracebacks</summary>

Rich kann [schöne Tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) rendern, die einfacher zu lesen sind und mehr Code anzeigen, als die Standard-Python-Tracebacks. Du kannst Rich als Standard-Traceback-Handler festlegen, so dass alle nicht abgefangenen Exceptions von Rich gerendert werden.

So sieht es unter OSX aus (ähnlich unter Linux):

![Traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

Alle Rich-Renderables verwenden das [Konsolen-Protokoll](https://rich.readthedocs.io/en/latest/protocol.html), das du auch für die Implementierung deiner eigenen Rich-Inhalte verwenden kannst.

# Rich für Unternehmen

Verfügbar als Teil des Tidelift-Abonnements.

Die Betreuer von Rich und tausenden anderen Paketen arbeiten mit Tidelift zusammen, um kommerziellen Support und Wartung für die Open-Source-Pakete zu bieten, die du zur Erstellung deiner Anwendungen verwendest. Spare Zeit, reduziere Risiken und verbessere den Zustand des Codes, während du die Betreuer genau der Pakete bezahlen, die du verwendest. [Erfahre hier mehr.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

# Projekte, die Rich verwenden

Hier sind ein paar Projekte, die Rich verwenden:

- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  ein Python-Paket zur Visualisierung dreidimensionaler neuro-anatomischer Daten
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  Automatisiertes Entschlüsselungswerkzeug
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  ein leistungsstarker, hochpräziser CPU- und Speicher-Profiler für Python
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  Durchsuchen von GitHub-Trending-Projekten in der Kommandozeile
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  Dieses Tool scannt nach einer Reihe von verbreiteten, verwundbaren Komponenten (openssl, libpng, libxml2, expat und ein paar andere), um dir mitzuteilen, ob dein System verbreitete Bibliotheken mit bekannten Sicherheitslücken enthält.
- [nf-core/tools](https://github.com/nf-core/tools)
  Python-Paket mit Hilfswerkzeugen für die nf-core-Gemeinschaft.
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  pdb + Rich-Bibliothek für erweitertes Debugging
- [plant99/felicette](https://github.com/plant99/felicette)
  Satellitenbilder für Dummies.
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  Automatisiere & Teste 10x schneller mit Selenium & pytest. Inklusive Batterien.
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  Automatisch Untertitel mit Video synchronisieren.
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  Leichtgewichtige Python-Bibliothek zum Hinzufügen von 2D-Objektverfolgung in Echtzeit zu jedem Detektor.
- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint prüft Playbooks auf Praktiken und Verhalten, die möglicherweise verbessert werden könnten
- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule-Testing-Framework
- +[Viele weitere](https://github.com/textualize/rich/network/dependents)!



================================================
FILE: README.es.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

Rich es un paquete de Python para texto _enriquecido_ y un hermoso formato en la terminal.

La [API Rich](https://rich.readthedocs.io/en/latest/) facilita la adición de color y estilo a la salida del terminal. Rich también puede representar tablas bonitas, barras de progreso, markdown, código fuente resaltado por sintaxis, trazas y más — listo para usar.

![Funciones](https://github.com/textualize/rich/raw/master/imgs/features.png)

Para ver un vídeo de introducción a Rich, consulte [calmcode.io](https://calmcode.io/rich/introduction.html) de [@fishnets88](https://twitter.com/fishnets88).

Vea lo que [la gente dice sobre Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).

## Compatibilidad

Rich funciona con Linux, OSX y Windows. True color / emoji funciona con la nueva Terminal de Windows, la terminal clásica está limitada a 8 colores. Rich requiere Python 3.6.3 o posterior.

Rich funciona con [Jupyter notebooks](https://jupyter.org/) sin necesidad de configuración adicional.

## Instalación

Instale con `pip` o su administrador de paquetes PyPI favorito.

```sh
python -m pip install rich
```

Ejecute lo siguiente para probar la salida de Rich sobre su terminal:

```sh
python -m rich
```

## Función print de Rich

Para agregar sin esfuerzo resultados enriquecidos a su aplicación, puede importar el método [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start), que tiene la misma firma que el método incorporado de Python. Prueba esto:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich se puede instalar en Python REPL, por lo que cualquier estructura de datos se imprimirá y resaltará bastante.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Usando la consola

Para tener más control sobre el contenido enriquecido del terminal, importe y cree un objeto [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console).

```python
from rich.console import Console

console = Console()
```

El objeto Console tiene un método `print` que tiene una interfaz intencionalmente similar a la función incorporada `print`. Aquí tienes un ejemplo de uso:

```python
console.print("Hello", "World!")
```

Como era de esperar, esto imprimirá `"Hello World!"` en la terminal. Tenga en cuenta que, a diferencia de la función `print` incorporada, Rich ajustará su texto para ajustarlo al ancho de la terminal.

Hay algunas formas de agregar color y estilo a su salida. Puede establecer un estilo para toda la salida agregando un argumento de palabra clave `style`. He aquí un ejemplo:

```python
console.print("Hello", "World!", style="bold red")
```

La salida será similar a la siguiente:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

Eso está bien para diseñar una línea de texto a la vez. Para un estilo más fino, Rich presenta un marcado especial que es similar en sintaxis a [bbcode](https://en.wikipedia.org/wiki/BBCode). He aquí un ejemplo:

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

Usted puede usar el objeto Console para generar salida sofisticada con mínimo esfuerzo. Ver la documentación [API Console](https://rich.readthedocs.io/en/latest/console.html) para detalles.

## Rich Inspector

Rich tiene ua función [inspeccionar](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) cual puede producir un reporte sobre cualquier objeto Python, como clases, instancia o builtin.

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

Ver la [documentación inspector](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) para detalles.

# Paquete Rich

Rich contiene un número de builtin _renderables_ que puedes usar para crear salida elegante en su CLI y ayudarle a depurar su código.

Haga clic en los siguientes títulos para obtener más detalles:

<details>
<summary>Registro de consola</summary>

El objeto Console tiene un método `log()` que tiene una interfaz similar a `print()`, pero también muestra una columna para la hora actual y el archivo y la línea que realizó la llamada. De forma predeterminada, Rich resaltará la sintaxis de las estructuras de Python y de las cadenas de reproducción. Si registra una colección (es decir, un diccionario o una lista), Rich la imprimirá de forma bonita para que quepa en el espacio disponible. A continuación, se muestra un ejemplo de algunas de estas funciones.

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

Lo anterior produce el siguiente resultado:

![Registro](https://github.com/textualize/rich/raw/master/imgs/log.png)

Tenga en cuenta el argumento `log_locals`, que genera una tabla que contiene las variables locales donde se llamó al método log.

El método de registro podría usarse para iniciar sesión en el terminal para aplicaciones de larga ejecución, como servidores, pero también es una ayuda de depuración muy buena.

</details>
<details>
<summary>Controlador de registro</summary>

También puede usar la [Handler class](https://rich.readthedocs.io/en/latest/logging.html) incorporada  para formatear y colorear la salida del módulo de registro de Python. Aquí hay un ejemplo de la salida:

![Registro](https://github.com/textualize/rich/raw/master/imgs/logging.png)
</details>

<details>
<summary>Emoji</summary>

Para insertar un emoji en la salida de la consola, coloque el nombre entre dos puntos. He aquí un ejemplo:

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

Utilice esta función con prudencia.
</details>

<details>
<summary>Tablas</summary>

Rich puede renderizar [tablas](https://rich.readthedocs.io/en/latest/tables.html) flexibles con caracteres de cuadro Unicode. Existe una gran variedad de opciones de formato para bordes, estilos, alineación de celdas, etc.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

La animación anterior se generó con [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) en el directorio de ejemplos.

Aquí hay un ejemplo de tabla más simple:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

Esto produce la siguiente salida:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

Tenga en cuenta que el marcado de la consola se representa de la misma manera que `print()` y `log()`. De hecho, cualquier cosa que Rich pueda representar se puede incluir en los encabezados / filas (incluso en otras tablas).

La clase `Table` es lo suficientemente inteligente como para cambiar el tamaño de las columnas para que se ajusten al ancho disponible de la terminal, ajustando el texto según sea necesario. Este es el mismo ejemplo, con la terminal más pequeña que la tabla anterior:

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Barras de progreso</summary>

Rich puede representar varias barras de [progreso](https://rich.readthedocs.io/en/latest/progress.html) sin parpadeos para realizar un seguimiento de las tareas de larga duración.

Para un uso básico, envuelva cualquier secuencia en la función `track` e itere sobre el resultado. He aquí un ejemplo:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

No es mucho más difícil agregar varias barras de progreso. Aquí hay un ejemplo tomado de la documentación:

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

Las columnas pueden configurarse para mostrar los detalles que desee. Las columnas integradas incluyen porcentaje completado, tamaño de archivo, velocidad de archivo y tiempo restante. Aquí hay otro ejemplo que muestra una descarga en progreso:

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

Para probar esto usted mismo, consulte [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) que puede descargar varias URL simultáneamente mientras muestra el progreso.

</details>

<details>
<summary>Estado</summary>

Para situaciones en las que es difícil calcular el progreso, puede utilizar el método [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) que mostrará una animación y un mensaje de "spinner". La animación no le impedirá usar la consola con normalidad. He aquí un ejemplo:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

Esto genera la siguiente salida en el terminal.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

Las animaciones de spinner fueron tomadas de [cli-spinners](https://www.npmjs.com/package/cli-spinners). Puede seleccionar un spinner especificando el `spinner` parameter. Ejecute el siguiente comando para ver los valores disponibles:

```
python -m rich.spinner
```

El comando anterior genera la siguiente salida en la terminal:

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Árbol</summary>

Rich genera un [tree](https://rich.readthedocs.io/en/latest/tree.html) con líneas de guía. Un árbol es ideal para mostrar una estructura de archivos, o cualquier otro dato jerárquico.

Las etiquetas del árbol pueden ser texto simple o cualquier otra cosa que Rich pueda mostar. Ejecuta lo siguiente para una demostración:

```
python -m rich.tree
```

Esto genera la siguiente salida:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

Ver el ejemplo [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) para un script que muestra una vista de  árbol de cualquier directorio, similar a el comando de linux `tree`.

</details>

<details>
<summary>Columnas</summary>

Rich puede representar contenido en [columnas](https://rich.readthedocs.io/en/latest/columns.html) ordenadas con un ancho igual u óptimo. Aquí hay un clon muy básico del comando (MacOS / Linux) `ls` que muestra una lista de directorios en columnas:

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

La siguiente captura de pantalla es el resultado del [ejemplo de columnas](https://github.com/textualize/rich/blob/master/examples/columns.py) que muestra los datos extraídos de una API en columnas:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich puede renderizar [markdown](https://rich.readthedocs.io/en/latest/markdown.html) y hace un trabajo razonable al traducir el formato al terminal.

Para renderizar markdown, importe la clase `Markdown` y constrúyala con una cadena que contenga el código de markdown. Luego imprímalo en la consola. He aquí un ejemplo:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

Esto producirá una salida similar a la siguiente:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Resaltado de sintaxis</summary>

Rich usa el paquete [pygments](https://pygments.org/) para implementar [resaltado de sintaxis](https://rich.readthedocs.io/en/latest/syntax.html). El uso es similar a renderizar markdown; construya un objeto `Syntax` e imprímalo en la consola. He aquí un ejemplo:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

Esto producirá el siguiente resultado:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tracebacks</summary>

Rich puede representar [tracebacks hermosos](https://rich.readthedocs.io/en/latest/traceback.html) que son más fáciles de leer y muestran más código que los tracebacks estándar de Python. Puede configurar Rich como el controlador tracebacks predeterminado para que todas las excepciones sin capturar sean procesadas por Rich.

Así es como se ve en OSX (similar en Linux):

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

Todos los renderizables enriquecidos utilizan el [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), que también puede utilizar para implementar su propio contenido Rich.

# Rich para empresas

Disponible como parte de la suscripción a Tidelift.

Los mantenedores de Rich y miles de otros paquetes están trabajando con Tidelift para brindar soporte comercial y mantenimiento para los paquetes de código abierto que usa para construir sus aplicaciones. Ahorre tiempo, reduzca el riesgo y mejore el estado del código, mientras paga a los mantenedores de los paquetes exactos que utiliza. [Más información](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

# Proyecto usando Rich

Aquí hay algunos proyectos que usan Rich:

- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  un paquete de Python para la visualización de datos neuroanatómicos tridimensionales
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  Herramienta de descifrado automatizado
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  un perfilador de memoria y CPU de alta precisión y alto rendimiento para Python
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  Explore los proyectos de tendencias de GitHub desde su línea de comando
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  Esta herramienta busca una serie de componentes vulnerables comunes (openssl, libpng, libxml2, expat y algunos otros) para informarle si su sistema incluye bibliotecas comunes con vulnerabilidades conocidas.
- [nf-core/tools](https://github.com/nf)
  Paquete de Python con herramientas auxiliares para la comunidad nf-core.
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  pdb + biblioteca Rich para una depuración mejorada
- [plant99/felicette](https://github.com/plant99/felicette)
  Imágenes de satélite para tontos.
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  Automatice y pruebe 10 veces más rápido con Selenium y pytest. Baterias incluidas.
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  Sincronice automáticamente los subtítulos con el video.
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  Libreria de Python para agregar tracking a cualquier detector.
- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint comprueba los playbooks en busca de prácticas y comportamientos que podrían mejorarse
- [ansible-community/molecule](https://github.com/ansible-community/molecule) Marco de prueba de Ansible Molecule
- +¡[Muchos más](https://github.com/textualize/rich/network/dependents)!



================================================
FILE: README.fa.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
 • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

ریچ یک کتاب خانه پایتون برای متن های _باشکوه_ و قالب بندی زیبا در ترمینال است.

[ریچ](https://rich.readthedocs.io/en/latest/) افزودن رنگ و سبک به خروجی ترمینال را آسان می‌کند.
ریچ همچنین می‌تواند جدول های زیبا، نوار های پیشرفت
(progress bars),
مارک داون
(MarkDown),
ترکیب سورس کد های برجسته شده,
ردیاب ها
(Tracebacks),
و غیره را به صورت خودکار در ترمینال نمایش دهد.


![قابلیت ها](https://github.com/textualize/rich/raw/master/imgs/features.png)

برای معرفی ویدئویی ریچ این ویدئو را ببینید [calmcode.io](https://calmcode.io/rich/introduction.html) توسط [@fishnets88](https://twitter.com/fishnets88).

ببینید [مردم در مورد ریچ چه میگویند](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).

## سازگاری

ریچ با لینوکس، مک او اس و ویندوز کار می کند.
رنگ واقعی / ایموجی با ترمینال جدید ویندوز کار می کند، ترمینال کلاسیک به 16 رنگ محدود شده است.
ریچ به پایتون
3.6.3
یا جدیدتر نیاز دارد.

ریچ با  [ژوپیتر نوت بوک (Jupyter notebooks)](https://jupyter.org/)
بدون نیازمندی اضافه ای کار می کند.

## نصب کردن

با `pip`
یا با مدیر بسته (package manager)
مورد علاقه خودتان نصب کنید.

```sh
python -m pip install rich
```

برای آزمایش ریچ در ترمینال خودتان، این را اجرا کنید:

```sh
python -m rich
```

## Rich Print

برای اضافه کردن راحت خروجی ریچ به برنامه خودتان، شما می توانید 
[rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start)
را به پروژه خودتان اضافه
(Import)
کنید که اثر یکسانی مشابه تابع داخلی پایتون دارد. 
این قطعه کد را امتحان کنید:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

ریچ می تواند در Python REPL,
نصب شود.
که هر نوعی از اطلاعات را به زیبایی چاپ می کند و به زیبایی برجسته می کند.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## استفاده از Console

برای پایش بیشتر از محتوای ترمینال ریچ،
[Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console)
را اضافه (Import)
کنید و یک شیء (Object) بسازید.

```python
from rich.console import Console

console = Console()
```

شی Console
یک تابع با نام `print`
دارد که مشابه تابع `print`
داخلی پایتون است.
کد زیر یک مثال از استفاده آن است:

```python
console.print("Hello", "World!")
```

همانطور که احتمالا انتظار داشتید، این کد در ترمینال
`"Hello World!"`
چاپ می کند.
در نظر داشته باشید که این شبیه به تابع
`print`
داخلی پایتون نیست.
ریچ متن شما را به صورت کلمه‌ای
(واژه بندی شده)
در نظر میگیرد تا در عرض
(width)
ترمینال قرار بگیرد.

اینها تعدادی راه برای افزودن رنگ و سبک (Style)
به خروجی خودتان است.
شما می توانید با اضافه کردن کلمه کلیدی
`style`
برای خروجی های خود سبک و استایل در نظر بگیرید.
کد زیر مثال استفاده از آن است:

```python
console.print("Hello", "World!", style="bold red")
```

خروجی چیزی شبیه به این است:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

تا اینجا برای سبک و استایل دادن به یک خط خوب است. برای سبکی با دانه بندی (Finely Grained Styling)، ریچ یک نشانه گذاری خاص ارائه می دهند که چیزی شبیه به [bbcode](https://en.wikipedia.org/wiki/BBCode) است. مثال آن به صورت زیر است:

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

شما می توانید از یک شیء Console برای تولید خروجی پیچیده، با کمترین تلاش استفاده کنید. برای جزئیات بیشتر به  [Console API](https://rich.readthedocs.io/en/latest/console.html)  مراجعه کنید.

## Rich Inspect

ریچ دارای یک تابع `inspect` است که می تواند یک گزارش از هر شیء از پایتون، مثل کلاس (Class)، نمونه (Instance) یا توابع (Builtin) را تولید کند.

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

برای جزئیات بیشتر به [inspect docs](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) مراجعه کنید.

# Rich Library

ریچ شامل تعدادی از توابع _قابل اجرا_ داخلی است که شما می توانید برای ایجاد خروجی برازنده و مناسب در ترمینال (CLI) خود استفاده کنید و به شما برای تصحیح (Debug) کد کمک می کند.

برای جزئیات بیشتر روی سر فصل های زیر کلیک کنید:

<details>
<summary>Log</summary>

شیء Console دارای یک تابع `()log` است که رفتاری مشابه `()print` دارد، اما همچنین یک ستون برای نمایش زمان، فایل مربوطه و شماره خطِ کدِ اجرا شده در نظر می گیرد. به صورت پیشفرض، ریچ علائم (syntax) را برای ساختار های پایتون و برای رشته (String)
های repr برجسته می کند. اگر شما یک مجموعه (دیکشنری یا لیست) را چاپ کنید، ریچ به زیبایی آن را در فضای موجود چاپ می کند. مثال زیر نمایش برخی ویژگی های آن است:


```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

قطعه کد بالا، خروجی زیر را تولد می کند:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

به متغیر های `log_locals` توجه کنید، جایی که تابع log صدا زده می شود، یک جدول که شامل متغیر های محلی است در خروجی نمایش داده می شود.

تابع log میتواند برای گزارش گیری در ترمینال برای برنامه هایی با اجراهای طولانی مدت، مثل سرور استفاده شود؛ اما همچنین کمک بسیار مناسب و خوبی برای تصحیح (debugging) برخی خطاهاست.

</details>
<details>
<summary>Logging Handler</summary>

همچنین شما می توانید از [Handler class](https://rich.readthedocs.io/en/latest/logging.html) های داخلی برای فرمت دادن و رنگی کردن خروجی از ماژول گزارش پایتون (Python's logging module) استفاده کنید. کد زیر یک مثال از خروجی را نشان می دهد:

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji</summary>

برای افزودن یک ایموجی به خروجی ترمینال، اسم آن را بین دو نقطه (colon) قرار دهید. قطعه کد زیر مثال آن است:

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

لطفا از این ویژگی خردمندانه و عاقلانه استفاده کنید.

</details>

<details>
<summary>Tables</summary>

ریچ توانایی آن را دارد که [جداول](https://rich.readthedocs.io/en/latest/tables.html) انعطاف پذیری را با کارکتر های یونیکد (unicode) بسازد.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

انیمشن بالا با استفاده از [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) در دایرکتوری (پوشه) تست ساخته شده است.

این یک مثال ساده از جدول است:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

این کد خروجی زیر را تولید می کند:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

توجه داشته باشید که نشانه گذاری کنسول به همان روش  `print()` و `log()` پردازش می شود. در واقع، هر چیزی که توسط Rich قابل رندر است در هدرها / ردیف ها (حتی جداول دیگر) ممکن است گنجانده شود.

کلاس `Table` به اندازه کافی هوشمند است که اندازه ستون ها را متناسب با عرض موجود ترمینال تغییر دهد و متن را در صورت لزوم بسته بندی کند. این همان مثال با ترمینال کوچکتر از جدول بالاست:

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Progress Bars</summary>

ریچ می تواند چندین نوار پیشرفت ([progress](https://rich.readthedocs.io/en/latest/progress.html)) را بدون ناهماهنگی و اختلال برای پیگیری وظایف طولانی مدت پردازش کند.

برای استفاده اولیه، هر دنباله ای را در تابع `track` بسته بندی کنید و روی نتیجه تکرار کنید. مثال آن به صورت زیر است:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

اضافه کردن چندین نوار پیشرفت خیلی سخت نیست. مثال آن که برگرفته از اسناد و داکیومنت میباشد به صورت زیر است:

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

ستون ها ممکن است به گونه ای پیکربندی شوند که جزئیاتی را که می خواهید نشان دهند. ستون های از پیش تعیین شده شامل درصد کامل شده، اندازه فایل، سرعت فایل و زمان باقی مانده است. در زیر مثال دیگری وجود دارد که دانلود در حال انجام را نشان می دهد:

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

برای اینکه خودتان این را امتحان کنید، فایل [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) را ببینید که می‌تواند چندین لینک URL را به طور همزمان بارگیری کند و پیشرفت را نشان دهد.

</details>

<details>
<summary>Status</summary>

برای موقعیت هایی که محاسبه پیشرفت، دشوار است، می توانید از روش [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) استفاده کنید که یک پیام و یک انیمیشن چرخنده (spinner) را نمایش می‌دهد. این انیمیشن شما را از استفاده عادی از کنسول باز نمی دارد. مثال آن به صورت زیر است:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

این کد خروجی زیر را در ترمینال ایجاد می کند.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

در انیمیشن های چرخنده از [cli-spinners](https://www.npmjs.com/package/cli-spinners) استفاده شده است. شما می توانید با تعیین پارامتر `spinner` یک چرخنده را انتخاب کنید. برای مشاهده موارد موجود، دستور زیر را اجرا کنید:

```
python -m rich.spinner
```

دستور بالا خروجی زیر را در ترمینال ایجاد می کند:

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Tree</summary>

ریچ می تواند یک [tree](https://rich.readthedocs.io/en/latest/tree.html) را با خطوط راهنما نمایش دهد. یک درخت برای نمایش ساختار فایل یا هر داده سلسله مراتبی دیگر مناسب است.

برچسب (labels) های درخت می توانند متن ساده یا هر چیز دیگری که ریچ می تواند نمایش دهد باشد. برای نمایش موارد گفته شده دستور زیر را اجرا کنید:

```
python -m rich.tree
```

این کد خروجی زیر را ایجاد می کند:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

مثال [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) را برای اسکریپتی ببینید که نمایش درختی از هر دایرکتوری را نمایش می دهد، شبیه به فرمان `tree` در لینوکس است.

</details>

<details>
<summary>Columns</summary>

ریچ می تواند محتوا را به صورت [columns](https://rich.readthedocs.io/en/latest/columns.html) مرتب با عرض مساوی یا بهینه ارائه دهد. مثال زیر یک شبیه سازی بسیار ابتدایی از دستور `ls` در (مک او اس / لینوکس) است که فهرست دایرکتوری را در ستون ها نمایش می دهد:


```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

تصویر زیر خروجی [columns example](https://github.com/textualize/rich/blob/master/examples/columns.py) است که داده های استخراج شده از یک API را در ستون ها نمایش می دهد:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

ریچ میتواند [markdown](https://rich.readthedocs.io/en/latest/markdown.html) را پردازش کند و کار مناسبی را برای فرمت بندی آن در ترمینال انجام میدهد.

برای پردازش markdown کافی است تا کلاس `Markdown` آنرا فرا خوانی کرده و یک شی از آن را بسازید و متن حاوی markdown  را به آن بدهید. در نهایت آنرا در کنسول و ترمینال چاپ کنید. مثال آن به صورت زیر است:


```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

خروجی کد بالا چیزی شبیه به تصویر زیر را تولید می کند:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Syntax Highlighting</summary>

ریچ از کتابخانه [pygments](https://pygments.org/) برای پیاده سازی[syntax highlighting](https://rich.readthedocs.io/en/latest/syntax.html) استفاده می کند. استفاده از آن مشابه پردازش markdown هاست؛ یک شی `Syntax` بسازید و آن را برای کنسول چاپ کنید. مثال آن به صورت زیر است:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

این کد خروجی زیر را ایجاد می کند:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tracebacks</summary>

ریچ می تواند [tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) های زیبایی را نمایش دهد که خواندن آن آسان تر است و کد بیشتری را نسبت به `traceback` های استاندارد پایتون نشان می دهد. شما می توانید ریچ را به عنوان کنترل کننده اصلی `tracebacks` تنظیم کنید تا همه استثناهای کشف نشده توسط ریچ ارائه شوند.

در مک او اس به صورت زیر نمایش داده می شود (در لینوکس نیز مشابه این است):

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

همه ریچ های قابل نمایش از
[Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html)
استفاده می کنند،
بنابراین شما می توانید برای پیاده سازی محتوای ریچ خود نیز از آن استفاده کنید.

# Rich CLI

همچنین [Rich CLI](https://github.com/textualize/rich-cli) را که برای برنامه های دستوری (command line)، توسط Rich ساخته شده است ببینید. برجسته سازی کد (Syntax highlight code)، پردازش کردن مارک دون، نمایش فایل های CSV در جدول ها و موارد بیشتر، به صورت مستقیم از خط فرمان و ترمینال.



![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)

# Textual

همچنین (پروژه) خواهر ریچ [Textual](https://github.com/Textualize/textual) را ببینید، که با استفاده از آن شما می توانید رابط های کاربری پیچیده را در ترمینال بسازید.

![Textual screenshot](https://raw.githubusercontent.com/Textualize/textual/main/imgs/textual.png)

# پروژه هایی که از ریچ استفاده می کنند

برای دیدن چند نمونه از پروژه هایی که از ریچ استفاده می کنند، به [Rich Gallery](https://www.textualize.io/rich/gallery) در [Textualize.io](https://www.textualize.io) سر بزنید.

آیا می خواهید پروژه خودتان را به گالری اضافه کنید؟ شما می توانید! کافیست [از این دستورات](https://www.textualize.io/gallery-instructions) پیروی کنید.



================================================
FILE: README.fr.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

Rich est une bibliothèque Python pour le _rich_ texte et la mise en forme dans le terminal.

L'[API Rich](https://rich.readthedocs.io/en/latest/) permet d'ajouter facilement de la couleur et du style sur le texte du terminal. Rich peut également rendre de jolis tableaux, des barres de progression, du markdown, du code source avec de la coloration syntaxique, des messages d'erreurs et bien d'autres choses encore, et ce dès le départ.

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

Pour une introduction vidéo à Rich, voir [camelcode.io](https://calmcode.io/rich/introduction.html) par [@ fishnets88](https://twitter.com/fishnets88)

Voyez ce que [les gens disent de Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/)

## Compatibilité

Rich fonctionne avec Linux, OSX et Windows. True color / emoji fonctionne avec le nouveau Terminal Windows, le terminal classique est limité à 16 couleurs. Rich nécessite Python 3.6.3 ou plus.

Rich fonctionne avec les notebooks Jupyter sans configuration supplémentaire.

## Installation

Installez avec `pip` ou votre gestionnaire de paquets PyPI préféré.

```sh
python -m pip install rich
```

Exécutez ce qui suit pour tester la sortie de Rich sur votre terminal :

```sh
python -m rich
```

## Rich Print

Pour ajouter sans effort une sortie Rich à votre application, vous pouvez importer la méthode [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start), qui a la même signature que la fonction Python intégrée. Essayez ceci :

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich peut être installé dans le REPL de Python, de sorte que toutes les structures de données soient joliment affichées et mises en évidence.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Utilisation de Console

Pour mieux contrôler le contenu rich du terminal, importez et construisez une classe [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console)

```python
from rich.console import Console

console = Console()
```

La classe Console possède une méthode `print` dont l'interface est intentionnellement similaire à celle de la fonction `print` native. Voici un exemple d'utilisation :

```python
console.print("Hello", "World!")
```

Comme vous pouvez vous y attendre, cela va afficher "Hello World !" sur le terminal. Notez que, contrairement à la fonction d'affichage intégrée, Rich mettra votre texte en forme pour qu'il tienne dans la largeur du terminal.

Il y a plusieurs façons d'ajouter de la couleur et du style à votre sortie de texte. Vous pouvez définir un style pour l'ensemble de la sortie de texte en ajoutant un argument de mot-clé style. Voici un exemple :

```python
console.print("Hello", "World!", style="bold red")
```

La sortie de texte sera quelque chose comme ce qui suit :

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

C'est très bien pour styliser une ligne de texte à la fois. Pour un style plus fin, Rich rend un balisage spécial dont la syntaxe est similaire à celle du [bbcode](https://en.wikipedia.org/wiki/BBCode). Voici un exemple :

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

Vous pouvez utiliser un objet Console pour générer une sortie sophistiquée avec un effort minimal. Consultez la documentation de l'[API Console](https://rich.readthedocs.io/en/latest/console.html) pour plus de détails.

## Rich Inspect

Rich possède une fonction [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) qui peut produire un rapport sur n'importe quel objet Python, comme une classe, une instance ou une fonction intégrée.

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

Consultez la [documentation d'inspect](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) pour plus de détails.

## Bibliothèque Rich
Rich contient un certain nombre _d'éléments de rendu_ intégrés que vous pouvez utiliser pour créer une sortie élégante dans votre CLI et vous aider à déboguer votre code.

Cliquez sur les rubriques suivantes pour plus de détails :

<details>
<summary>Log</summary>

L'objet Console a une méthode `log()` qui a une interface similaire à `print()`, mais qui rend aussi une colonne pour l'heure actuelle, le fichier et la ligne qui ont fait l'appel. Par défaut, Rich fera la coloration syntaxique des structures Python et des chaînes repr. Si vous enregistrez une collection (i.e. un dict ou une liste) Rich affichera la collection de façon à ce qu'elle tienne dans l'espace disponible. Voici un exemple de certaines de ces fonctionnalités.

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

L'opération ci-dessus produit le résultat suivant :

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

Notez l'argument `log_locals`, qui produit un tableau contenant les variables locales où la méthode log a été appelée.

La méthode log peut être utilisée pour la journalisation vers le terminal pour les applications qui tournent longtemps, comme les serveurs, mais c'est aussi une très bonne aide au débogage.
</details>

<details>
<summary>Journalisation</summary>

Vous pouvez également utiliser la classe intégrée [Handler](https://rich.readthedocs.io/en/latest/logging.html) pour formater et coloriser les textes de sortie du module de journalisation de Python. Voici un exemple de texte de sortie :

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)
</details>

<details>
<summary>Emoji</summary>

Pour insérer un emoji dans la sortie de la console, placez le nom entre deux points. Voici un exemple :

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

Veuillez utiliser cette fonction à bon escient.
</details>

<details>
<summary>Tableaux</summary>

Rich peut rendre des [tableaux](https://rich.readthedocs.io/en/latest/tables.html) flexibles avec des caractères unicodes. Il existe une grande variété d'options de formatage pour les bordures, les styles, l'alignement des cellules, etc.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

L'animation ci-dessus a été générée avec [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) dans le répertoire des exemples.

Voici un exemple de tableau plus simple :

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

Cela produit le résultat suivant :

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

Notez que les balises de la console sont rendues de la même manière que `print()` et `log()`. De fait, tout ce qui peut être rendu par Rich peut être inclus dans les en-têtes / lignes (même d'autres tables).

La classe `Table` est suffisamment intelligente pour redimensionner les colonnes en fonction de la largeur disponible du terminal, en enveloppant et en réduisant le texte si nécessaire. Voici le même exemple, avec un terminal plus petit que le tableau ci-dessus :

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)
</details>

<details>
<summary>Barres de progression</summary>

Rich peut afficher plusieurs [barres de progression](https://rich.readthedocs.io/en/latest/progress.html) sans scintillement pour suivre les tâches de longue périodes.

Pour une utilisation basique, créez une boucle sur n'importe quelle séquence dans la fonction `track` et itérez sur le résultat. Voici un exemple :

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

Il n'est pas beaucoup plus difficile d'ajouter plusieurs barres de progression. Voici un exemple tiré de la documentation :

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

Les colonnes peuvent être configurées pour afficher tous les détails que vous souhaitez. Les colonnes intégrées comprennent le pourcentage d'achèvement, la taille du fichier, la vitesse du fichier et le temps restant. Voici un autre exemple montrant un téléchargement en cours :

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

Pour l'essayer vous-même, testez [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) qui peut télécharger plusieurs URL simultanément tout en affichant la progression au fil du temps.

</details>

<details>
<summary>Statut</summary>

Pour les situations où il est difficile de calculer la progression, vous pouvez utiliser la méthode [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) qui affichera une animation et un message de type "spinner". L'animation ne vous empêchera pas d'utiliser la console normalement. Voici un exemple :

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

Cela génère la sortie suivante dans le terminal.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

Les animations des characteres d'animations ont été empruntées à [cli-spinners](https://www.npmjs.com/package/cli-spinners). Vous pouvez en sélectionner un en spécifiant le paramètre `spinner`. Exécutez la commande suivante pour voir les valeurs disponibles :

```
python -m rich.spinner
```

La commande ci-dessus génère la sortie suivante dans le terminal :

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)
</details>

<details>
<summary>Arborescence</summary>

Rich peut affiché une [arborescence](https://rich.readthedocs.io/en/latest/tree.html) avec des lignes de repère. Une arborescence est idéale pour afficher une structure de fichiers, ou toute autre donnée hiérarchique.

Les étiquettes de cette arborescence peuvent être du texte simple ou tout autre élément que Rich peut rendre. Exécutez ce qui suit pour une démonstration :

```
python -m rich.tree
```

La commande ci-dessus génère la sortie suivante dans le terminal :

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

Voir l'exemple [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) pour un script qui affiche une vue arborescente de n'importe quel répertoire, similaire à la commande linux `tree`.

</details>

<details>
<summary>Colonnes</summary>

Rich peut rendre du contenu en [colonnes](https://rich.readthedocs.io/en/latest/columns.html) avec une largeur égale ou optimale. Voici un clone très basique de la commande `ls` (MacOS / Linux) qui affiche une liste de répertoires en colonnes :

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

La capture d'écran suivante est le résultat de [columns example](https://github.com/textualize/rich/blob/master/examples/columns.py) qui affiche les données extraites d'une API en colonnes :

![colonne](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich peut rendre le [markdown](https://rich.readthedocs.io/en/latest/markdown.html) et fait un travail raisonnable pour traduire le formatage dans le terminal.

Pour rendre du markdown, importez la classe `Markdown` et construisez-la avec une chaîne contenant du code markdown. Ensuite, affichez-la dans la console. Voici un exemple :

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

Cela produira un résultat semblable à ce qui suit :

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)
 
</details>

<details>
<summary>Mise en couleur de la syntaxe</summary>

Rich utilise la bibliothèque [pygments](https://pygments.org/) pour implémenter la [coloration syntaxique](https://rich.readthedocs.io/en/latest/syntax.html). L'utilisation est similaire au rendu de markdown ; construire un objet `Syntax` et afficher celui-ci sur la console. Voici un exemple :

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

Cela produira le résultat suivant :

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)
</details>

<details>
<summary>Tracebacks</summary>

Rich peut rendre des [traçages d'erreurs](https://rich.readthedocs.io/en/latest/traceback.html) plus faciles à lire et qui montrent plus de code que les traçages d'erreurs standard de Python. Vous pouvez définir Rich comme le gestionnaire d'erreurs par défaut afin que toutes les exceptions/erreurs non capturées soient rendues par Rich.

Voici à quoi cela ressemble sous OSX (similaire sous Linux) :

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

Tous les éléments de rendu utilisent le [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), que vous pouvez également utiliser pour mettre en œuvre votre propre contenu Rich.

# Rich pour les entreprises

Disponible dans le cadre de l'abonnement Tidelift.

Les mainteneurs de Rich et de milliers d'autres paquets collaborent avec Tidelift pour fournir un support et une maintenance commerciale pour les paquets open source que vous utilisez pour construire vos applications. Gagnez du temps, réduisez les risques et améliorez votre qualité de code, tout en payant les mainteneurs des paquets que vous utilisez. [En savoir plus](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

# Projets utilisant Rich

- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  un package python pour la visualisation de données neuro-anatomiques tridimensionnelles
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  Outil de déchiffrage automatisé
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  un profileur de CPU et de mémoire haute performance et haute précision pour Python
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  Parcourir les projets tendances de GitHub à partir de votre ligne de commande
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  Cet outil recherche un certain nombre de composants courants et vulnérables (openssl, libpng, libxml2, expat et quelques autres) pour vous indiquer si votre système comprend des bibliothèques présentant des vulnérabilités connues.
- [nf-core/tools](https://github.com/nf-core/tools)
  Paquet Python contenant des outils d'aide pour la communauté nf-core.
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  pdb + bibliothèque Rich pour un débogage amélioré
- [plant99/felicette](https://github.com/plant99/felicette)
  L'imagerie satellite pour les nuls.
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  Automatisez et testez 10 fois plus vite avec Selenium et pytest. Piles incluses.
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  Synchronisation automatique des sous-titres avec la vidéo.
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  Bibliothèque Python légère pour ajouter le suivi d'objets 2D en temps réel à n'importe quel détecteur.
- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint vérifie dans les playbooks les pratiques et comportements qui pourraient être améliorés.
- [ansible-community/molecule](https://github.com/ansible-community/molecule) Cadre de test Ansible Molecule.
- [Beaucoup d'autres](https://github.com/textualize/rich/network/dependents) !



================================================
FILE: README.hi.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

Rich टर्मिनल में _समृद्ध_ पाठ और सुंदर स्वरूपण के लिए एक Python संग्रह है।


[Rich API](https://rich.readthedocs.io/en/latest/) टर्मिनल उत्पादन में रंग और शैली डालना आसान बनाता है। Rich सुंदर सारणियाँ, प्रगति सूचक डंडे, markdown, रचनाक्रम चिन्हांकित स्त्रोत कोड, ट्रेसबैक आदि प्रस्तुत कर सकता है - बिना कुछ बदले।

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

Rich के वीडियो परिचय के लिए देखें [@fishnets88](https://twitter.com/fishnets88) द्वारा बनाई गई [calmcode.io](https://calmcode.io/rich/introduction.html)।


देखें [लोग रिच के बारे में क्या कह रहे हैं](https://www.willmcgugan.com/blog/pages/post/rich-tweets/)।

## अनुकूलता

Rich Linux, OSX, और Windows के साथ चल सकता है। सच्चा रंग/इमोजी नए Windows टर्मिनल के साथ काम करता है, पुराना टर्मिनल १६ रंगों तक ही सीमित है। Rich के लिए Python ३.६.१ या बाद का होना आवश्यक है।

Rich बिना किसी अतिरिक्त विन्यास के [Jupyter नोटबुक](https://jupyter.org/) के साथ काम करता है।

## स्थापना करना

`pip` या अपने पसंदीदा PyPI संकुल प्रबंधक (package manager) के द्वारा आप इसे स्थापित कर सकते हैं।

```sh
python -m pip install rich
```

आपके टर्मिनल पर Rich उत्पादन का परीक्षण करने के लिए यह चलाएं:
```sh
python -m rich
```

## Rich Print

अपने अनुप्रयोग में सरलता से समृद्ध उत्पादन जोड़ने के लिए, आप [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) क्रिया को आयात कर सकते हैं, जिसका हस्ताक्षर अंतर्निहित Python क्रिया के समान है। यह चलाने की कोशिश करें:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich को Python REPL में स्थापित किया जा सकता है, ताकि कोई भी डेटा संरचनाएं सुंदरता से छपे तथा चिह्नांकित हों।
```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## कॉनसोल (Console) का इस्तेमाल करना

समृद्ध टर्मिनल वस्तुओं पर अधिक नियंत्रण के लिए, आयात और निर्मित करें एक [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) वस्तु को।

```python
from rich.console import Console

console = Console()
```

Console वस्तु के पास एक `print` क्रिया है जिसका अंतरापृष्ठ जानबूझ कर अंतर्निहित `print` क्रिया के सामान है। इसके इस्तेमाल का एक उदाहरण :
```python
console.print("Hello", "World!")
```


जैसा आप उम्मीद कर रहे होंगे, यह टर्मिनल पर `"Hello World!"` छाप देगा। ध्यान दें की अंतर्निहित `print` क्रिया के भिन्न, Rich आपके पाठ को "वर्ड-रैप" कर देगा ताकि वह टर्मिनल की चौड़ाई में फस सके।

अपने उत्पादन में रंग और शैली डालने के लिए एक से अधिक तरीके हैं। `style` कीवर्ड तर्क जोड़कर आप सम्पूर्ण उत्पादन के लिए शैली निर्धारित कर सकते हैं। इसका एक उदाहरण:
```python
console.print("Hello", "World!", style="bold red")
```

उत्पादन कुछ इस प्रकार का होगा:
![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)


ये एक बारी में एक पंक्ति का शैलीकरण करने के लिए तो ठीक है। अधिक बारीकी से शैलीकरण करने के लिए, Rich एक विशेष मार्कअप को प्रदर्शित करता है जो रचनाक्रम में [bbcode](https://en.wikipedia.org/wiki/BBCode) से मिलता-जुलता है। इसका एक उदाहरण:

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

कम-से-कम मेहनत में परिष्कृत उत्पादन उत्पन्न करने के लिए आप एक Console वस्तु का उपयोग कर सकते हैं। अधिक जानकारी के लिए आप [Console API](https://rich.readthedocs.io/en/latest/console.html) का प्रलेख पढ़ सकते हैं।

## Rich Inspect

Rich में एक [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) फलन उपलब्ध है जो किसी भी Python वस्तु, जैसे की क्लास, इन्स्टैन्स या अंतर्निहित पर प्रतिवेदन उत्पादित कर सकता है।
```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

अधिक जानकारी के लिए [inspect का प्रलेखन](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) पढ़ें।

# Rich संग्रह

Rich में कई अंतर्निहित _प्रतिपाद्य_ मौजूद हैं जिनका इस्तेमाल करके आप अपने CLI में सुंदर उत्पादन उत्पन्न कर सकते हैं तथा अपने कोड का दोषमार्जन (डीबग) करने में सहायता प सकते हैं।


जानकारी के लिए निम्न शीर्षकों पर क्लिक करें:

<details>
<summary>लॉग (Log)</summary>

Console वस्तु के पास एक `log()` फलन होता है जिसका अंतरापृष्ठ `print()` से मिलता है, पर साथ में वर्तमान समय और आवाहन करने वाली पंक्ति के लिए एक खाना प्रस्तुत करता है। व्यक्तिक्रम तौर पर Rich Python संरचनाएं एवं repr मालाओं (स्ट्रिंगों) पर रचनाक्रम चिह्नांकन करेगा। यदि आप एक संग्रह (यानि एक डिक्शनेरी या एक सूची) को लॉग करते हैं तो Rich उसे सुंदरता से छापेगा ताकि वह उपलब्ध जगह में फस सके। इनमें से कुछ विशेषताओं का उदहरण प्रस्तुत है:

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

उपर्युक्त कोड से निम्न उत्पादन उत्पन्न होता है:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

ध्यान दें `log_levels` तर्क की तरफ, जो एक सारणी उत्पादित करता है जिसमे लॉग फलन के आवाहन के स्थान के स्थानिये चर युक्त हैं।

लॉग फलन का इस्तेमाल परिसेवकों (सर्वर) जैसे लंबे समय के लिये चलने वाले अनुप्रयोगों के लिए टर्मिनल पर प्रचालेखन के लिए किया जा सकता है, पर यह एक बहुत अच्छा दोषमार्जन सहायक भी है।

</details>
<details>
<summary>प्रचालेखन संचालक</summary>

Python के `logging` मापांक से आए हुए उत्पादन का संरूपण एवं रंगीकरण करने के लिए आप अंतर्निहित [Handler वर्ग](https://rich.readthedocs.io/en/latest/logging.html) का भी इस्तेमाल कर सकते हैं। उत्पादन का एक उपहरण प्रस्तुत है:

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>इमोजी</summary>

Console उत्पादन में इमोजी डालने के लिए नाम को दो अपूर्ण विरामों (:) के बीच रखें। इसका एक उदाहरण:
```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

कृपया इसका इस्तेमाल समझदारी से करें।
</details>

<details>
<summary>सारणियाँ</summary>

Rich यूनिकोड डिब्बा अक्षरों की सहायता से लचीली [सारणियाँ](https://rich.readthedocs.io/en/latest/tables.html) प्रदर्शित कर सकता है। सीमाएँ, शैलियाँ, कक्ष संरेखण आदि के लिए कई सारे स्वरूपण विकल्प उपलब्ध हैं।

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

उपर्युक्त अनुप्राणन examples डायरेक्टरी के [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) से बनाया गया है।

इससे सरल संचिका का उदाहरण:
```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

इससे निम्नलिखित उत्पादन उत्पन्न होता है:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

ध्यान दें की कॉनसोल मार्कअप `print()` और `log()` की तरह ही प्रदर्शित होते हैं। वास्तव में, कोई भी वस्तु जो Rich के द्वारा प्रदर्शनीय है वह शीर्षकों / पंक्तियों (दूसरी संचिकाओं में भी) में युक्त किया जा सकता है।

`Table` वर्ग इतनी बुद्धिमान है की वह टर्मिनल की उपलब्ध चौड़ाई में फ़साने के लिए स्तंभों का आकार बदल सकता है, आवश्यकता के अनुसार पाठ को लपेटते हुए। यह वही उदाहरण है, टर्मिनल को उपर्युक्त संचिका से छोटा रखते हुए:

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>प्रगति सूचक डंडे</summary>

लंबे समय तक चलने वाले कार्यों पर नज़र रखने के लिए Rich अनेक झिलमिलाहट-मुक्त [प्रगति सूचक](https://rich.readthedocs.io/en/latest/progress.html) डंडे प्रदर्शित कर सकता है।

बुनियादी उपयोग के लिए, किसी भी क्रम को `track` फलन में लपेटें और परिणाम पर पुनरावर्तन करें। इसका एक उदाहरण:
```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

अनेक प्रगति सूचक डंडे जोड़ने इससे अधिक कठिन नहीं है। ये रहा एक उदाहरण जो प्रलेखन से उठाया गया है:
![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

स्तंभों का विन्यास इस प्रकार किया जा सकता है की आपकी इच्छानुसार विवरण दिखाए जाएँ। अंतर्निहित स्तंभ में प्रतिशत पूरा, संचिका आकार, संचिका गति तथा शेष समय युक्त होते हैं। ये रहा एक और उदाहरण एक चालू डाउनलोड को दर्शाते हुए।
![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

इसे स्वयं आजमाने के लिए, देखें [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) जो अनेक URL एक साथ डाउनलोड करते हुए प्रगति दर्शाता है।
</details>

<details>
<summary>स्थिति</summary>

ऐसी परिस्थितियों में जहां प्रगति की गणना करना कठिन हों, आप [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) (स्थिति) फलन का उपयोग कर सकते हैं जो एक 'स्पिनर' अनुप्राणन और संदेश दर्शाएगा। अनुप्राणन आपको सामान्य तरीके से कॉनसोल को इस्तेमाल करने से नहीं रोकेगा। ये एक उदाहरण:
```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

इससे टर्मिनल में निम्नलिखित उत्पादन उत्पन्न होता है:
![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

स्पिनर अनुप्राणन [cli-spinners](https://www.npmjs.com/package/cli-spinners) से उधारे गए थे। आप `spinner` प्राचल को उल्लिखित करके स्पिनर चुन सकते हैं। उपलब्ध विकल्प देखने के लिए निम्नलिखित आदेश चलकर देखें:
```
python -m rich.spinner
```

उपर्युक्त आदेश टर्मिनल में निम्नलिखित उत्पादन उतपन्न करता है:
![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>वृक्ष</summary>

Rich मरकदर्शक रेखाओं से [tree](https://rich.readthedocs.io/en/latest/tree.html) (वृक्ष) प्रदर्शित कर सकता है। संचिता संरचना, अथवा कोई भी और पदानुक्रमित डेटा दर्शाने के लिए वृक्ष एक आदर्श विकल्प है।

वृक्ष के नाम सरल पाठ्यांश या कुछ भी और जो Rich प्रदर्शित कर सके। इसके एक प्रदर्शन के लिए निम्नलिखित को चलाएं:
```
python -m rich.tree
```

इससे निम्न उत्पादन उत्पन्न होता है:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

देखें उदाहरण [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) एक क्रमादेश के लिए जो किसी भी डायरेक्टरी का वृक्ष दृश्य (ट्री व्यू) दर्शाएगा, लिनक्स के `tree` आदेश के समान।

</details>

<details>
<summary>स्तंभ</summary>


Rich सामग्री को समान अथवा श्रेष्ट चौड़ाई के साथ स्पष्ट [स्तंभ](https://rich.readthedocs.io/en/latest/columns.html) प्रदर्शित कार सकता है। यही (MacOS / Linux) `ls` आदेश का बहुत बुनियादी प्रतिरूप प्रस्तुत किया गया है जो स्तंभों में डायरेक्टरी सूची को दर्शाता है।

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

निम्न स्क्रीनशॉट [स्तंभों के उदाहरण](https://github.com/textualize/rich/blob/master/examples/columns.py) का उत्पादन है जो एक API से खींचे गए डेटा को स्तंभों में प्रदर्शित करता है:
![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich [markdown](https://rich.readthedocs.io/en/latest/markdown.html) को प्रदर्शित कार सकता है और स्वरूपण का अनुवाद टर्मिनल पर करने में उचित कार्य करता है।


Markdown प्रदर्शित करने के लिए आप `Markdown` वर्ग को आयात कार सकते हैं और उसे markdown कोड युक्त अक्षरमाला के साथ निर्मित कर सकते हैं। फिर उसे कॉनसोल पर छापें। एक उदाहरण प्रस्तुत है:
```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

इससे कुछ इस प्रकार का उत्पादन उत्पन्न होगा:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>रचनाक्रम चिह्नांकन</summary>

Rich [रचनाक्रम चिह्नांकन](https://rich.readthedocs.io/en/latest/syntax.html) के लिए [pygments](https://pygments.org/) संग्रह का उपयोग करता है। उपयोग markdown को प्रदर्शित करने से मिलता-जुलता है; एक `Syntax` वस्तु निर्मित करें और उसे कॉनसोल पर छापें। एक उदाहरण:
```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

This will produce the following output:
इससे निम्न उत्पादन उत्पन्न होता है:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>ट्रेसबैक</summary>

Rich [खूबसूरत ट्रेसबैक](https://rich.readthedocs.io/en/latest/traceback.html) दर्शा सकता है जो पढ़ने में आसान तथा मानक Python ट्रेसबैकों से अधिक कोड दिखाता है। आप Rich को व्यक्तीक्रम ट्रेसबैक संचालक भी निर्धारित कार सकते हैं ताकि सभी बेपकड़ अपवाद Rich के द्वारा प्रदर्शित हों।

OSX (Linux पर समान) पर यह कुछ इस प्रकार दिखता है:
![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

सभी Rich प्रतिपाद्य [कॉनसोल प्रोटोकॉल](https://rich.readthedocs.io/en/latest/protocol.html) का उपयोग करते हैं, जिसे आप स्वयं की Rich सामग्री बनाने के लिए भी इस्तेमाल कार सकते हैं।

# उद्यम के लिए Rich

Tidelift Subscription के हिस्से के तौर पर उपलब्ध।

Rich एवं सहस्त्रों और संग्रहों के पालक आपके अनुप्रयोगों को बनाने के लिए इस्तेमाल किए जाने वाले खुले स्त्रोत संग्रहों के लिए व्यावसायिक सहायता तथा रखरखाव देने के लिए Tidelift के साथ काम कार रहे हैं। समय बचाइए, जोखिम काम कीजिए, और कोड स्वास्थ सुधारें, और साथ में जिन संग्रहों को आप इस्तेमाल करते हैं उनके पालकों को भुगतान करें। [अधिक जानें।](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

# Rich का उपयोग करने वाली परियोजनाएँ

ये रहे कुछ परियोजनाएँ जो Rich इस्तेमाल करते हैं।
- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  त्रिविम न्यूरो-संरचनात्मक डेटा का चित्रण करने के लिए एक Python संग्रह
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  स्वचालित विकोडन उपकरण
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  Python के लिए एक उच्च-प्रदर्शन, उच्च-सूक्ष्मता CPU एवं स्मृति प्रोफाइलर
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  अपनी आदेश पंक्ति (कमांड लाइन) से GitHub रुझानि परियोजिनाएं ब्राउज़ करें
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  यह उपकरण कई साधारण, भेद्य घटकों (openssl, libpng, libxml2, expat और कुछ और) के लिए जांच करता है ताकि आपको बता सके की क्या आपके तंत्र में जानी हुई कमज़ोरियों वाले संग्रह युक्त हैं।
- [nf-core/tools](https://github.com/nf-core/tools)
  nf-core समुदाय के लिए सहायक उपकरणों युक्त Python संग्रह
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  उन्नत दोषमार्जन के लिए pdb + Rich संग्रह
- [plant99/felicette](https://github.com/plant99/felicette)
  पुतलों के लिए उपग्रह चित्र
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  Selenium और pytest के साथ १० गुना तेज़ स्वचालन एवं परीक्षण करें। बैटरी शामिल।
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  स्वतः उपशीर्षकों को वीडियो के साथ समकालित करें।
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  किसी भी संसूचक में सद्य-अनुक्रिया द्विविम वस्तु ट्रैकिंग जोड़ने के लिए एक हल्का Python संग्रह।
- [ansible/ansible-lint](https://github.com/ansible/ansible-lint)
  Ansible-lint उन आचरणों और व्यवहारों के लिए प्लेबुकों में जाँच करता है जिन्हे संभावित रूप से सुधारा जा सकता है
- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule testing framework
  Ansible Molecule परीक्षण ढांचा
- +[कई और](https://github.com/textualize/rich/network/dependents)!

<!-- This is a test, no need to translate -->



================================================
FILE: README.id.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
 • [Indonesian readme](https://github.com/textualize/rich/blob/master/README.id.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

Rich adalah library Python yang membantu _memperindah_ tampilan output suatu program di terminal.

[Rich API](https://rich.readthedocs.io/en/latest/) dapat digunakan untuk mempermudah dalam penambahan gaya dan pewarnaan output di terminal. Rich juga mendukung fitur lain seperti pembuatan tabel, bar progress, penulisan markdown, penghilightan syntax source code, tracebacks, dan masih banyak lagi.

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

Sebagai pengenalan Rich saksikan video berikut [calmcode.io](https://calmcode.io/rich/introduction.html) oleh [@fishnets88](https://twitter.com/fishnets88).

Lihat pendapat [pengguna yang telah menggunakan Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).

## Kompabilitas

Rich dapat berjalan di Linux, OSX, dan Windows. Warna tambahan / emoji dapat berjalan di Windows Terminal baru, untuk terminal lama pewarnaan terbatas ke dalam 16 warna. Rich memerlukan versi Python 3.6.3 atau ke atas.

Rich dapat berjalan di [Jupyter notebooks](https://jupyter.org/) tanpa memerlukan konfigurasi tambahan.

## Instalasi

Install dengan `pip` atau paket manager favorit anda.

```sh
python -m pip install rich
```

Jalankan perintah berikut untuk menguji Rich di terminal anda:

```sh
python -m rich
```

## Rich Print

Untuk menambahkan rich sebagai output program anda, lakukan import method [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start), yang memiliki signature sama dengan fungsi built-in Python. Coba jalankan program berikut:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich dapat diinstal ke dalam Python REPL sehingga setiap struktur data akan ditampilkan dengan indah dan terhighlight.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Penggunaan Console

Untuk kontrol lebih terhadap konten terminal, lakukan import dan susun suatu [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) object.

```python
from rich.console import Console

console = Console()
```

Console object memiliki method `print` yang berfungsi serupa dengan built-in `print`. Berikut adalah contoh penggunaannya:

```python
console.print("Hello", "World!")
```

Seperti yang anda perkirakan, perintah tersebut akan menampilkan `"Hello World!"` sebagai output di terminal. Catatan, perbedaan dengan fungsi built-in `print`, Rich membuat teks termampatkan disesuaikan dengan lebar terminal.

Terdapat beberapa cara untuk melakukan penambahan warna dan gaya output dari program anda. Anda dapat mengatur keseluruhan output dengan menambahkan keyword argumen `style`. Berikut adalah contoh penerapannya:

```python
console.print("Hello", "World!", style="bold red")
```

Output dari perintah tersebut akan tampak sebagai berikut:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

Melakukan perubahan tampilan teks output dalam satu waktu mungkin sudah baik. Tetapi untuk membuat tampilan lebih rapi, Rich mendukung fitur rendering menggunakan pemformatan spesial dimana syntaxnya serupa dengan [bbcode](https://en.wikipedia.org/wiki/BBCode). Berikut adalah contoh penerapannya:

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

Anda dapat menggunakan console object untuk menciptakan keluaran yang indah dengan usaha yang sedikit. Kunjungi [Console API](https://rich.readthedocs.io/en/latest/console.html) untuk informasi lebih lengkap.

## Rich Inspect

Rich memiliki fungsi [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) yang dapat membuat laporan untuk setiap Python object, seperti class, instance, atau built-in.

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

Kunjungi [dokumentasi inspect](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) untuk detail lebih lanjut.

# Rich Library

Rich mengandung sejumlah built-in yang bersifat _renderables_, artinya anda dapat menciptakan output yang elegant pda program CLI anda serta dapat membantu dalam proses debugging program anda.

Klik pilihan berikut untuk detail lebih lanjut:

<details>
<summary>Log</summary>

Console object mempunyai method bernama `log()` yang serupa dengan `print()`, tetapi juga mendukung fitur perenderan kolom waktu terkini serta baris file yang melakukan pemanggilan fungsi tertentu. Secara default Rich akan menghilight syntax untuk struktur python dan REPR strings. Jika anda melakukan log pada sekumpulan data (misal dictionary atau list) Rich akan memperindah output yang ditampilkan serta disesuaikan dengan ukuran terminal yang tersedia. Berikut adalah contoh penerapan dari beberapa fitur ini.

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

Perintah di atas akan menampilkan output sebagai berikut:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

Sebagai catatan, argumen `log_locals` berupa tabel yang berisikan variabel lokal yang menunjukkan lokasi dimana log tersebut dipanggil.

Method log ini dapat digunakan untuk mencatat aktivitas terminal yang berjalan lama seperti servers, tetapi method ini juga sangat baik untuk membantu dalam proses debugging.

</details>
<details>
<summary>Penanganan Logging</summary>

Anda dapat juga menggunakan builtin [Handler class](https://rich.readthedocs.io/en/latest/logging.html) untuk memformat dan mewarnai output dari module logging Python. Berikut adalah contoh penerapannya:

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji</summary>

Untuk menambahkan emoji sebagai output di console, tuliskan nama emoji diantara dua buah titik dua (:). Berikut adalah contoh penerapannya:

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

Mohon gunakan fitur ini dengan bijak.

</details>

<details>
<summary>Tabel</summary>

Rich mendukung perenderan [tabel](https://rich.readthedocs.io/en/latest/tables.html) secara fleksibel dengan karakter unicode. Terdapat variasi sangat besar untuk opsi pemformatan seperti pengaturan border, gaya tabel, perataan teks di dalam cell, dan lain sebagainya.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

Animasi di atas dibuat dengan program [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) pada direktori examples.

Berikut adalah contoh tabel sederhana:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

Program di atas akan menghasilkan output sebagai berikut:

![tabel](https://github.com/textualize/rich/raw/master/imgs/table.png)

Sebagai catatan console markup dirender sama seperti `print()` dan `log()`. Faktanya, untuk segala bentuk hal yang dapat dirender menggunakan Rich dapat disisipkan ke dalam header / baris (bahkan tabel lain).

Class `Table` memiliki kemampuan yang baik untuk mengatur ukuran kolom supaya sesuai dengan lebar yang disediakan oleh terminal. Berikut adalah contoh penerapannya, dengan terminal memiliki ukuran yang lebih kecil dibandingkan tabel di atas:

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Bar Progress</summary>

Rich dapat merender beragam bar [progress](https://rich.readthedocs.io/en/latest/progress.html) interaktif untuk memantau kemajuan yang telah dicapai oleh program yang berjalan lama.

Untuk penggunaan dasar, masukan setiap urutan yang hendak dijadikan ke dalam bentuk progress ke dalam fungsi 'track' dan  iterasikan urutan tersebut di atas outputnya. Berikut adalah contoh penerapannya:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

Tidaklah sulit untuk menambahkan beberapa bar progress sekaligus. Berikut adalah contoh implementasi yang diambil dari file dokumentasi:

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

Bagian kolom dapat dikonfigurasikan sesuai dengan kebutuhan. Built-in kolom juga memiliki fitur presentasi seleasi, ukuran file, kecepatan file, dan waktu sisa. Berikut adalah contoh menampilkan bar progress ketika mengunduh suatu file:

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

Untuk bereksperimen, periksa [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) yang dapat menampilkan beberapa progress bar  pengunduhan dari beberapa alamat URL sekaligus.

</details>

<details>
<summary>Status</summary>

Untuk kondisi dimana perhitungan sulit dilakukan dengan perhitunggan progress, gunakan method [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) berikut yang menampilkan animasi 'spinner' dan pesan. Animasi tersebut tidak mencegah penggunaan console seperti keadaan normal. Berikut adalah contoh penerapannya:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

Program di atas akan menghasilkan output sebagai berikut.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

Animasi spinner tersebut diambil dari [cli-spinners](https://www.npmjs.com/package/cli-spinners). Anda dapat menentukan spinner yang hendak digunakan dengan menspesifikannya di parameter `spinner`. Jalankan perintah berikut untuk melihat parameter yang tersedia:

```
python -m rich.spinner
```

Perintah di atas akan menghasilkan output sebagai berikut:

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Tree</summary>

Rich dapat merender perintah [tree](https://rich.readthedocs.io/en/latest/tree.html) beserta dengan garis penunjuk. Suatu perintah tree idealnya digunakan untuk menampilkan struktur suatu file atau data hierarki lainnya.

Label dari tree dapat berupa teks sederhana atau apapun yang dapat dirender oleh Rich, untuk contoh, jalankan perintah berikut:

```
python -m rich.tree
```

Program di atas akan menghasilkan output sebagai berikut:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

Periksa contoh program [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) untuk menampilkan tampilan tree view dari direktori apapun, perintah ini serupa dengan `tree` pada linux.

</details>

<details>
<summary>Kolom</summary>

Rich dapat merender konten [kolom](https://rich.readthedocs.io/en/latest/columns.html) secara rapi dengan ukuran lebar yang sama atau optimal. Berikut adalah hasil kloning perintah dasar dari (MacOS / Linux) yaitu `ls` untuk melakukan listing direktori menggunakan kolom:

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

Screenshot berikut merupakan output dari [contoh kolom](https://github.com/textualize/rich/blob/master/examples/columns.py) yang menampilkan data yang diambil melalui API ke dalam bentuk kolom:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich dapat merender [markdown](https://rich.readthedocs.io/en/latest/markdown.html) dan melakukan tugasnya untuk menerjemahkan format tersebut supaya dapat ditampilkan di terminal.

Untuk dapat merender markdown, import class `Markdown` dan inputkan string yang mengandung markdown tersebut. Lalu cetak ke dalam console. Berikut adalah contoh penerapannya:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

Program di atas akan menghasilkan output seperti berikut:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Penghilightan Syntax</summary>

Rich memanfaatkan library [pygments](https://pygments.org/) supaya dapat melakukan [penghilightan syntax](https://rich.readthedocs.io/en/latest/syntax.html). Penggunaannya serupa dengan merender markdown; susun object `Syntax` dan cetak output pada console. Berikut adalah contoh penerapannya:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

Program di atas akan menghasilkan output sebagai berikut:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tracebacks</summary>

Rich dapat merender [tracebacks dengan indah](https://rich.readthedocs.io/en/latest/traceback.html) yang membuatnya mudah untuk dibaca dan menampilkan program yang dibuat lebih baik dibandingkan fitur standar Python. Anda dapat mengatur Rich sebagai traceback handler secara default sehingga setiap pesan exceptions akan dirender melalui Rich.

Berikut adalah tampilannya pada OSX (serupa dengan Linux):

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

Semua perenderan Rich menggunakan [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), anda dapat juga mengimplementasikannya pada konten Rich milik anda.

# Rich CLI


Baca juga [Rich CLI](https://github.com/textualize/rich-cli) sebuah program command line yang dibuat menggunakan Rich. Penghilightan syntax, perenderan markdown, menampilkan CSVs ke dalam tabel, dan masih banyak lagi, secara langsung melalui command prompt.


![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)


# Projek yang telah menggunakan Rich

Berikut adalah beberpa projek yang menggunakan Rich:

- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  Sebuah package Python untuk visualisasi data neuro-anatomi tiga dimensi.
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  Tools yang digunakan untuk melakukan deskripsi otomatis.
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  profiler memori dan CPU untuk Python yang memiliki nilai performa dan presisi tinggi.
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  Melakukan penelusuran projek terkenal GitHub melalui command line.
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  Tools ini dapat digunakan untuk melakukan scanning pada komponen yang rentan  (openssl, libpng, libxml2, expat and a few others) untuk membuat anda mengetahui sistem anda mempunyai library yang telah diketahui kerentanannya.
- [nf-core/tools](https://github.com/nf-core/tools)
  package Python dengan tools bantuan untuk komunitas nf-core.
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  gabungan library pdb + Rich library untuk memperindah proses debugging.
- [plant99/felicette](https://github.com/plant99/felicette)
  gambar citra satelit untuk pemula.
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  tools otomatisasi dan test testing 10x lebih cepat dibandingkan dengan Selenium & pytest. Termasuk didalamnya baterai.
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  tools sinkronisasi subtitle dengan video.
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  Library Python ringan untuk menambahkan deteksi objek secara real-time pada objek 2D pada suatu detektor.
- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Sebuah ansible-lint untuk memeriksa playbooks yang digunakan sebagai practices and behaviour yang secara potensial dapat ditingkatkan.
- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule untuk framework testing
- +[Lebih banyak lagi](https://github.com/textualize/rich/network/dependents)!

<!-- This is a test, no need to translate -->



================================================
FILE: README.it.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)


Rich è una libreria Python per un testo _rich_ e con una piacevole formattazione nel terminale.

Le [Rich API](https://rich.readthedocs.io/en/latest/) permettono di aggiungere facilmente colore e stile all'output del terminale. Rich permette di visualizzare tabelle, barre di avanzamento, markdown, evidenziazione della sintassi, tracebacks, e molto altro ancora — tutto già pronto all'uso.

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

Per una video-introduzione di Rich puoi vedere [calmcode.io](https://calmcode.io/rich/introduction.html) by [@fishnets88](https://twitter.com/fishnets88).

Guarda cosa [le persone dicono su Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).

## Compatibilità

Rich funziona su Linux, OSX, e Windows. True color / emoji funzionano con il nuovo Windows Terminal, il terminale classico è limitato a 16 colori. Rich richiede Python 3.6.3 o superiore.

Rich funziona con i [Jupyter notebooks](https://jupyter.org/) senza configurazioni aggiuntive.

## Installazione

Installa con `pip` o il tuo PyPI package manager preferito.

```sh
python -m pip install rich
```

Esegui il seguente comando per testare l'output di Rich sul tuo terminale:

```sh
python -m rich
```

## Rich Print

Utilizzare rich è semplicissimo, ti basta importare il metodo [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start), che ha la stessa signature della funzione builtin in Python. Prova:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich può essere installo in Python REPL, in questo modo ogni struttura dati sarà visualizzata in modo gradevole ed evidenziato.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Utilizzo di Console

Per un maggiore personalizzazione dei contenuti puoi importare ed instanziare un oggetto [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console).

```python
from rich.console import Console

console = Console()
```

L'oggetto Console ha il metodo `print` che utilizza volutamente un interfaccia simile a quella del `print` originale. Ad esempio:

```python
console.print("Hello", "World!")
```

Come puoi immaginare, questo stamperà `"Hello World!"` sul terminale. Nota che diversamente dalla funzione builtin `print`, Rich potrebbe portare a capo il testo per rispettare le dimensioni del terminale.

Ci sono diversi modi di aggiungere stile e colore al tuo output. Puoi impostare uno stile per l'intero output utilizzando l'argomento keyword `style`. Ad esempio:

```python
console.print("Hello", "World!", style="bold red")
```

L'output sarà qualcosa tipo:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

Questo va bene per applicare uno stile ad una linea di testo alla volta. Per uno stile più ricercato, puoi utilizzare uno speciale linguaggio di markup che è simile nella sintassi a [bbcode](https://en.wikipedia.org/wiki/BBCode). Ad esempio:

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

Puoi utilizzare l'oggetto Console per generare output sofisticati con il minimo sforzo. Vedi la docs di [Console API](https://rich.readthedocs.io/en/latest/console.html) per ulteriori dettagli.

## Rich Inspect

Rich ha una funzione [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) che può produrre un report per un qualsiasi oggetto Python, come una classe, un instanza, o un builtin.

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

Vedi [inspect docs](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) per ulteriori dettagli.

# Rich Library

Rich contiene alcuni builtin _renderables_ che puoi utilizzare per creare eleganti output nella tua CLI e aiutarti nel debug del tuo codice.

Fai click sulle seguenti intestazioni per ulteriori dettagli:

<details>
<summary>Log</summary>

L'oggetto Console ha un metodo `log()` che utilizza un'interfaccia simile a `print()`, ma visualizza anche una colonna con l'ora corrente, il file e la linea che hanno generato la chiamata. Di default Rich evidenzierà le strutture Python e le stringhe repr. Se logghi un oggetto di tipo collection (e.s. un dict o una lista) Rich automaticamente abbellirà l'output in modo che possa entrare nello spazio disponibile. Ecco qui un esempio di alcune delle feature discusse:

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

Il codice appena mostrato produce il seguente output:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

Nota l'argomento `log_locals`, che visualizza una tabella contenente le variabili locali dove il metodo log è stato chiamato.

Il metodo log può essere usato per il logging su terminale di applicazioni che solitamente girano su server, ma ha anche uno scopo orientato al debugging.

</details>
<details>
<summary>Logging Handler</summary>

Puoi anche utilizzare la classe builtin [Handler](https://rich.readthedocs.io/en/latest/logging.html) per formattare e colorare l'output dal modulo logging di Python. Ecco un esempio dell'output:

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji</summary>

Per inserire un emoji nell'output della console inseriscine il nome in mezzo a due ':'. Ad esempio:

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

Usa questa feature saggiamente.

</details>

<details>
<summary>Tables</summary>

Rich può visualizzare [tabelle](https://rich.readthedocs.io/en/latest/tables.html) flessibili con caratteri unicode. C'è una vasta gamma di opzioni per la formattazione di bordi, stili, allineamenti di celle etc.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

Questa animazione è stata realizzata con [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) presente nella directory examples.

Ecco qui un semplice esempio di tabella:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

Questo produce il seguente output:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

Nota che il console markup è visualizzato nello stesso modo di `print()` e `log()`. Infatti, tutto ciò che è visualizzabile da Rich può essere incluso nelle intestazioni / righe (anche altre tabelle).

La classe `Table` è abbastanza smart da ridimensionare le colonne per entrare nello spazio residuo del terminale, wrappando il testo come richiesto. Ad esempio, con il terminale reso più piccolo della tabella sopra:

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Barre di avanzamento</summary>

Rich può visualizzare, senza sfarfallio, multiple barre [di avanzamento](https://rich.readthedocs.io/en/latest/progress.html) per tenere traccia di task di lunga durata.

Per un utilizzo base, wrappa ogni 'step' con la funzione `track` e itera sul risultato. Ad esempio:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

Non è difficile aggiungere barre di avanzamento multiple. Ecco un esempio dalla documentazione:

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

Le colonne possono essere configurate per visualizzare qualsiasi dettaglio tu voglia. Le colonne built-in includono percentuale di completamente, dimensione del file, velocità, e tempo rimasto. Ecco un altro esempio che mostra un download in corso:

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

Per testare tu stesso, vedi [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) che può scaricare multipli URL simultaneamente mentre mostra lo stato di avanzamento.

</details>

<details>
<summary>Status</summary>

Per situazioni in cui è difficile calcolare l'avanzamento, puoi utilizzare il metodo [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) che mostrerà un animazione 'spinner' e un messaggio. L'animazione non ti impedisce di utilizzare la console normalmente. Ad esempio:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

Questo produrrà il seguente output nel terminale.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

L'animazione dello spinner è ispirata da [cli-spinners](https://www.npmjs.com/package/cli-spinners). Puoi selezionarne uno specificando `spinner` tra i parametri. Esegui il seguente comando per visualizzare le possibili opzioni:

```shell
python -m rich.spinner
```

Questo produrrà il seguente output nel terminale.

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Albero</summary>

Rich può visualizzare un [albero](https://rich.readthedocs.io/en/latest/tree.html) con linee guida. Un albero è ideale per mostrare la struttura di un file, o altri dati gerarchici.

Le etichette dell'albero possono essere semplice testo o qualsiasi altra cosa che Rich può visualizzare. Esegui il seguente comando per una dimostrazione:

```shell
python -m rich.tree
```

Questo produrrà il seguente output:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

Vedi l'esempio [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) per uno script che mostra una vista ad albero di ogni directory, simile a quella del comando linux `tree`.

</details>

<details>
<summary>Colonne</summary>

Rich può visualizzare contenuti in [colonne](https://rich.readthedocs.io/en/latest/columns.html) ordinate con larghezza uguale o ottimale. Ecco qui un clone base del comando (MacOS / Linux) `ls` che mostra il contenuto di una directory in colonna:

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

Il seguente screenshot è l'output dell'[esempio di columns](https://github.com/textualize/rich/blob/master/examples/columns.py) che visualizza i dati ottenuti da un API in colonna:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich può visualizzare [markdown](https://rich.readthedocs.io/en/latest/markdown.html) e tradurlo in modo da visualizzarlo su terminale.

Per visualizzare markdown importa la classe `Markdown` e instanziala con una stringa contenente codice markdown. Dopo stampala sulla console. Ad esempio:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

Questo produrrà un output simile al seguente:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Evidenziazione della sintassi</summary>

Rich utilizza la libreria [pygments](https://pygments.org/) per implementare il [syntax highlighting](https://rich.readthedocs.io/en/latest/syntax.html). L'utilizzo è simile a quello per visualizzare markdown; instanzia un oggetto `Syntax` e stampalo sulla console. Ad esempio:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Itera e genera una tupla con un flag per il primo e ultimo valore."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

Questo produrrà il seguente output:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tracebacks</summary>

Rich può visualizzare [gradevoli tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) che sono più semplici da leggere e che mostrano più codice rispetto ai Python tracebacks. Puoi impostare Rich come il traceback handler di default, in questo modo tutte le eccezioni non gestiti saranno visualizzate da Rich.

Ecco come appare su OSX (simile a Linux):

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

Tutti i Rich renderables utilizzano [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), che puoi utilizzare per implementare nuovi contenuti su Rich.

# Rich per le aziende

Disponibile come parte dell'iscrizione a Tidelift.

Lo sviluppatore di Rich e migliaia di altri packages lavorano con Tidelift per garantire supporto commerciale e mantenimento per i pacchetti open source che utilizzi per costruire le tue applicazioni. Risparmia tempo, riduci i rischi, e migliora la vita del codice, pagando i mantenitori dello stesso package che utilizzi. [Ulteriori informazioni.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

# Progetti che usano Rich

Ecco alcuni progetti che utilizzano Rich:

- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  a python package for the visualization of three dimensional neuro-anatomical data
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  Automated decryption tool
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  a high-performance, high-precision CPU and memory profiler for Python
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  Browse GitHub trending projects from your command line
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  This tool scans for a number of common, vulnerable components (openssl, libpng, libxml2, expat and a few others) to let you know if your system includes common libraries with known vulnerabilities.
- [nf-core/tools](https://github.com/nf-core/tools)
  Python package with helper tools for the nf-core community.
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  pdb + Rich library for enhanced debugging
- [plant99/felicette](https://github.com/plant99/felicette)
  Satellite imagery for dummies.
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  Automate & test 10x faster with Selenium & pytest. Batteries included.
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  Automagically synchronize subtitles with video.
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  Lightweight Python library for adding real-time 2D object tracking to any detector.
- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint checks playbooks for practices and behaviour that could potentially be improved
- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule testing framework
- +[Many more](https://github.com/textualize/rich/network/dependents)!

<!-- This is a test, no need to translate -->



================================================
FILE: README.ja.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

Richは、 _リッチ_ なテキストや美しい書式設定をターミナルで行うためのPythonライブラリです。

[Rich API](https://rich.readthedocs.io/en/latest/)を使用すると、ターミナルの出力に色やスタイルを簡単に追加することができます。 Richはきれいなテーブル、プログレスバー、マークダウン、シンタックスハイライトされたソースコード、トレースバックなどをすぐに生成・表示することもできます。

![機能](https://github.com/textualize/rich/raw/master/imgs/features.png)

Richの紹介動画はこちらをご覧ください。 [calmcode.io](https://calmcode.io/rich/introduction.html) by [@fishnets88](https://twitter.com/fishnets88).

[Richについての人々の感想を見る。](https://www.willmcgugan.com/blog/pages/post/rich-tweets/)

## 互換性

RichはLinux、OSX、Windowsに対応しています。True colorと絵文字は新しい Windows ターミナルで動作しますが、古いターミナルでは8色に制限されています。Richを使用するにはPythonのバージョンは3.6.3以降が必要です。

Richは追加の設定を行わずとも、[Jupyter notebooks](https://jupyter.org/)で動作します。

## インストール

`pip` や、あなたのお気に入りのPyPIパッケージマネージャを使ってインストールしてください。

```sh
python -m pip install rich
```

以下のコマンドを実行して、ターミナルでリッチの出力をテストできます:

```sh
python -m rich
```

## Richのprint関数

簡単にリッチな出力をアプリケーションに追加するには、Pythonの組み込み関数と同じ名前を持つ [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) メソッドをインポートすることで実現できます。こちらを試してみてください:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

RichはPythonのREPLでインストールすることができ、データ構造がきれいに表示され、ハイライトされます。

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Rich Inspect

RichにはPythonオブジェクトやクラス、インスタンス、組み込み関数などに関するレポートを作成することができる、[inspect関数](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect)があります。

```python
>>> from rich import inspect
>>> inspect(str, methods=True)
```

## Consoleの使い方

リッチなターミナルコンテンツをより制御していくには、[Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) オブジェクトをインポートして構築していきます。


```python
from rich.console import Console

console = Console()
```

Console オブジェクトには `print` メソッドがあり、これは組み込み関数の `print` と意図的に似たインターフェイスを持っています。
以下に使用例を示します:

```python
console.print("Hello", "World!")
```

あなたが予想した通り、これは `"Hello World!"` をターミナルに表示します。組み込み関数の `print` とは異なり、Rich はターミナルの幅に合わせてテキストをワードラップすることに注意してください。

出力結果に色やスタイルを追加する方法はいくつかあります。キーワード引数に `style` を追加することで、出力結果全体のスタイルを設定することができます。以下に例を示します:

```python
console.print("Hello", "World!", style="bold red")
```

以下のように出力されます:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

この方法は一行のテキストを一度にスタイリングするのに適しています。
より細かくスタイリングを行うために、Richは[bbcode](https://en.wikipedia.org/wiki/BBCode)に似た構文の特別なマークアップを表示することができます。
これはその例です:

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

### Console logging

Consoleオブジェクトには `log()` メソッドがあり、これは `print()` と同じインターフェイスを持ちますが、現在の時刻と呼び出しを行ったファイルと行数についてもカラムに表示します。デフォルトでは、RichはPythonの構造体とrepr文字列のシンタックスハイライトを行います。もしコレクション(例: dictやlist)をログに記録した場合、Richはそれを利用可能なスペースに収まるようにきれいに表示します。以下に、これらの機能のいくつかの例を示します。

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

上の例では以下のような出力が得られます:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

`log_locals`という引数についてですが、これは、logメソッドが呼び出されたローカル変数を含むテーブルを出力します。

logメソッドはサーバのような長時間稼働しているアプリケーションのターミナルへのloggingとして使用できますが、デバッグ時に非常に役に立つ手段でもあります。

### Logging Handler

また、内蔵されている[Handler class](https://rich.readthedocs.io/en/latest/logging.html)を用いて、Pythonのloggingモジュールからの出力をフォーマットしたり、色付けしたりすることもできます。以下に出力の例を示します。

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

## 絵文字(Emoji)

コンソールの出力に絵文字を挿入するには、2つのコロンの間に名前を入れます。例を示します:

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

この機能をうまく活用してみてください。

## テーブル

Richはユニコードの枠を用いて柔軟に[テーブル](https://rich.readthedocs.io/en/latest/tables.html)を表示することができます。 罫線、スタイル、セルの配置などの書式設定のためのオプションが豊富にあります。

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

上のアニメーションは、examplesディレクトリの[table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py)で生成したものです。

もう少し簡単な表の例を示します:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

これにより、以下のような出力が得られます:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

コンソール上でのマークアップは`print()` や `log()` と同じように表示されることに注意してください。実際には、Rich が表示可能なものはすべてヘッダや行に含めることができます (それが他のテーブルであっても、です)。

`Table`クラスは、ターミナルの利用可能な幅に合わせてカラムのサイズを変更したり、必要に応じてテキストを折り返したりするのに十分なスマートさを持っています。
これは先ほどと同じ例で、ターミナルを上のテーブルよりも小さくしたものです。

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

## プログレスバー

Richでは複数のちらつきのないの[プログレスバー](https://rich.readthedocs.io/en/latest/progress.html)を表示して、長時間のタスクを追跡することができます。

基本的な使い方としては、任意のシーケンスを `track` 関数でラップし、その結果を繰り返し処理します。以下に例を示します:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

複数のプログレスバーを追加するのはそれほど大変ではありません。以下はドキュメントから抜粋した例です:

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

カラムには任意の詳細を表示するように設定することができます。組み込まれているカラムには、完了率、ファイルサイズ、ファイル速度、残り時間が含まれています。ここでは、進行中のダウンロードを表示する別の例を示します:

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

こちらを自分で試して見るには、進捗状況を表示しながら複数のURLを同時にダウンロードできる [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) を参照してみてください。

## ステータス

進捗状況を計算するのが難しい場合は、[status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status)メソッドを使用して、「スピナー」アニメーションとメッセージを表示させることができます。通常、アニメーションはコンソールの使用を妨げることはありません。ここに例を示します:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

これにより、ターミナルには以下のような出力が生成されます。

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

スピナーのアニメーションは [cli-spinners](https://www.npmjs.com/package/cli-spinners) から拝借しました。`spinner`パラメータを指定することでスピナーを選択することができます。以下のコマンドを実行して、利用可能な値を確認してください:

```
python -m rich.spinner
```

上記コマンドは、ターミナルで以下のような出力を生成します:

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

## ツリー

Richはガイドライン付きの[ツリー](https://rich.readthedocs.io/en/latest/tree.html)を表示することができます。ツリーはファイル構造などの階層データを表示するのに適しています。

ツリーのラベルは、シンプルなテキストや、Richが表示できるものであれば何でも表示することができます。以下を実行してデモを行います:

```
python -m rich.tree
```

これにより、次のような出力が生成されます:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

linuxの `tree` コマンドと同様に、任意のディレクトリのツリー表示を行うスクリプトについては、[tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py)の例を参照してください。

## カラム

Rich は、コンテンツをきれいな [カラム](https://rich.readthedocs.io/en/latest/columns.html) で等幅、または最適な幅で表示することができます。これは(MacOS / Linux) の `ls` コマンドのとても基本的なクローンで、ディレクトリ一覧をカラムで表示します。

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

以下のスクリーンショットは、APIから引っ張ってきたデータをカラムで表示する[columns example](https://github.com/textualize/rich/blob/master/examples/columns.py)による出力です:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

## マークダウン

Richは[マークダウン](https://rich.readthedocs.io/en/latest/markdown.html)を使用することができ、フォーマットをターミナル向けに変換するための良い仕事をしてくれます。

マークダウンを使用するには、`Markdown`クラスをインポートし、マークダウンコードを含む文字列で構成します。そしてそれをコンソールに表示します。これは例です:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

これにより、以下のような出力が得られます:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

## シンタックスハイライト

Richは [シンタックスハイライト](https://rich.readthedocs.io/en/latest/syntax.html) を実装するために [pygments](https://pygments.org/) ライブラリを使用しています。使い方はマークダウンを使用するのと似ています。 `Syntax` オブジェクトを構築してコンソールに表示します。以下にその例を示します:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

これにより、以下のような出力が得られます:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

## トレースバック

Rich は [美しいトレースバック](https://rich.readthedocs.io/en/latest/traceback.html) を表示することができ、通常のPythonのトレースバックよりも読みやすく、より多くのコードを表示することができます。Richをデフォルトのトレースバックハンドラとして設定することで、捕捉されなかった例外はすべてRichによって表示されるようになります。

OSXではこのような表示となります（Linuxでも似たような表示になります）:

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

## Richを使用したプロジェクト

ここでは、Richを使用したいくつかのプロジェクトを紹介します:

- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  3次元の神経解剖学的データを可視化するpythonパッケージ
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  自動化された復号化ツール
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  Python用の高性能・高精度 CPU/メモリプロファイラ
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  コマンドラインから GitHub のトレンドプロジェクトを閲覧できます
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  このツールは、一般的な脆弱性のあるコンポーネント(openssl, libpng, libxml2, expat, その他いくつか)をスキャンし、お使いのシステムに既知の脆弱性のある一般的なライブラリが含まれているかどうかを知らせてくれます。
- [nf-core/tools](https://github.com/nf-core/tools)
  nf-core コミュニティのためのヘルパーツールを含む Python パッケージ。
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  pdb + Richライブラリによる、強化されたデバッグツール。
- [plant99/felicette](https://github.com/plant99/felicette)
  ダミーのための衛星画像。
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  Seleniumとpytestで10倍速の自動化とテスト。バッテリーも含まれています。
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  字幕を自動的にビデオと同期させます。
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  あらゆる検出器にリアルタイムの2Dオブジェクトトラッキングを追加するための軽量なPythonライブラリ。
- [ansible/ansible-lint](https://github.com/ansible/ansible-lint)
  Ansible-lint がplaybooksをチェックして、改善できる可能性のあるプラクティスや動作を確認します。
- [ansible-community/molecule](https://github.com/ansible-community/molecule)
  Ansible Moleculeのテストフレームワーク
- +[Many more](https://github.com/textualize/rich/network/dependents)!



================================================
FILE: README.kr.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

Rich는 터미널에서 _풍부한(rich)_ 텍스트와 아름다운 서식을 지원하기 위한 파이썬 라이브러리입니다.

[Rich API](https://rich.readthedocs.io/en/latest/)는 터미널 출력에 색깔과 스타일을 입히기 쉽게 도와줍니다. 또한 Rich는 별다른 설정 없이 표, 진행 바, 마크다운, 소스코드 구문 강조, tracebacks 등을 예쁘게 보여줄 수 있습니다.

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

Rich에 대한 동영상 설명을 보시려면 [@fishnets88](https://twitter.com/fishnets88)의 [calmcode.io](https://calmcode.io/rich/introduction.html)를 확인 바랍니다.

[사람들의 Rich에 대한 의견](https://www.willmcgugan.com/blog/pages/post/rich-tweets/)을 확인해보세요.

## 호환성

Rich는 리눅스, OSX, 윈도우에서 동작합니다. 트루 컬러 / 이모지는 새로운 윈도우 터미널에서 동작하지만 구형 터미널에서는 16가지 색으로 제한됩니다. Rich는 파이썬 3.6.3 버전 혹은 그 이후 버전이 필요합니다.

Rich는 [Jupyter notebooks](https://jupyter.org/)에서 별도의 설정없이 바로 동작합니다.

## 설치

`pip` 또는 좋아하는 PyPI 패키지 매니저로 설치하세요.

```sh
python -m pip install rich
```

아래 명령어를 통해 터미널에서 Rich 출력을 테스트해보세요.

```sh
python -m rich
```

## Rich Print

간단하게 당신의 어플리케이션에 rich한 출력을 추가하려면, 파이썬 내장 함수와 signature가 같은 [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) 메서드를 import 할 수 있습니다.
따라해보세요:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich는 파이썬 REPL에도 설치할 수 있습니다. 어떤 데이터 구조라도 예쁘게 출력하거나 강조할 수 있습니다.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## 콘솔 사용하기

rich 터미널을 더욱 잘 활용하려면, import 한 뒤 [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) 객체를 생성해주세요.

```python
from rich.console import Console

console = Console()
```

콘솔 객체에는 `print` 메서드가 있는데, 내부적으로 내장 `print` 함수와 유사한 인터페이스를 가지고 있습니다. 아래는 예제입니다:

```python
console.print("Hello", "World!")
```

예상대로 `"Hello World!"`이 터미널에 출력될 것입니다. 내장 `print` 함수와 달리, Rich는 터미널 폭에 맞춰 자동 줄바꿈(word-wrap)을 적용하는 것에 유의하세요.

출력에 색깔과 스타일을 입히는 방법은 몇가지가 있습니다. `style` 키워드 전달인자를 추가해 전체 출력에 대해 스타일을 변경할 수 있습니다. 예제는 다음과 같습니다:

```python
console.print("Hello", "World!", style="bold red")
```

다음과 같이 출력됩니다:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

텍스트 한 줄을 한 번에 수정하는 것도 좋습니다. 더욱 세세하게 스타일을 변경하기 위해, Rich는 [bbcode](https://en.wikipedia.org/wiki/BBCode)와 구문이 비슷한 별도의 마크업을 렌더링 할 수 있습니다. 예제는 다음과 같습니다.

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

Console 객체를 활용해 적은 노력으로 복잡한 출력을 손쉽게 만들 수 있습니다. 자세한 내용은 [Console API](https://rich.readthedocs.io/en/latest/console.html) 문서를 확인해주세요.

## Rich Inspect

Rich는 class나 instance, builtin 같은 파이썬 객체의 레포트를 생성하는 [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) 함수를 포함합니다

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

자세한 내용은 [inspect docs](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) 문서를 확인해주세요.

# Rich Library

Rich는 CLI에서 우아하게 출력하거나 코드 디버깅을 돕도록 다양한 빌트인 _렌더링을_ 포함하고 있습니다.

자세한 내용을 확인하려면 제목을 눌러주세요:

<details>
<summary>Log</summary>

Console 객체는 `print()`와 인터페이스가 유사한 `log()` 메서드를 가지고 있습니다. `Log()`는 호출이 이루어진 파일과 라인, 현재 시간도 같이 출력합니다. 기본적으로 Rich는 파이썬 구조체와 repr string에 대해 신택스 하이라이팅을 지원합니다. 만약 당신이 collection(예를 들어 dict나 list)을 로깅한다면, Rich는 표현 가능한 공간에 맞춰 예쁘게 출력해줍니다. 이러한 기능들에 대한 예시입니다:

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

위 코드의 실행 결과는 다음과 같습니다:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

`log_locals` 인자를 사용하면 log 메서드가 호출된 곳의 로컬 변수들을 표로 보여준다는 것도 알아두세요.

로그 메서드는 서버처럼 오랫동안 실행되는 어플리케이션을 터미널로 로깅할때 사용할 수 있지만 디버깅 할 때도 매우 좋습니다.

</details>
<details>
<summary>Logging Handler</summary>

또한 내장된 [Handler class](https://rich.readthedocs.io/en/latest/logging.html)를 사용해 파이썬의 로깅 모듈의 출력을 형태를 꾸미거나 색을 입힐 수 있습니다. 다음은 예제입니다:

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji(이모지)</summary>

콘솔 출력에 이모지를 넣으려면 두 콜론(:) 사이에 이모지 이름을 넣어주세요. 다음은 예제입니다:

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

부디 이 기능을 잘 사용해주세요.

</details>

<details>
<summary>Tables(표)</summary>

Rich는 유니코드 박스 문자와 함께 [표](https://rich.readthedocs.io/en/latest/tables.html)를 자유롭게 렌더링할 수 있습니다. 가장자리, 스타일, 셀 정렬 등을 정말 다양하게 구성할 수 있습니다.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

위의 애니메이션은 example 디렉토리의 [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py)로 생성되었습니다.

더 간단한 표 예제입니다:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

이는 다음과 같이 출력됩니다:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

콘솔 출력은 `print()`나 `log()`와 같은 방식으로 렌더링 된다는 것을 주의하세요. 사실, Rich로 표현할 수 있는 것은 무엇이든 headers / rows (심지어 다른 표들도)에 포함할 수 있습니다.

`Table` 클래스는 터미널의 폭에 맞춰 필요한 만큼 줄을 내리고 열 길이를 스스로 조절합니다. 위의 표보다 작은 터미널에서 만들어진 표 예시입니다:

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Progress Bars(진행 바)</summary>

Rich는 오래 걸리는 작업들을 위해 깜빡임 없는 [진행](https://rich.readthedocs.io/en/latest/progress.html) 바를 여러개 표현할 수 있습니다.

기본적인 사용을 위해선 아무 sequence나 `track` 함수로 감싸고 결과를 반복해주세요. 다음은 예제입니다:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

여러개의 진행 바를 추가하는 것도 어렵지 않습니다. 아래는 공식문서에서 따온 예시입니다:

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

칼럼들은 수정해 원하는 세부정보를 보여줄 수도 있습니다. 기본으로 내장된 칼럼들은 완료 퍼센티지, 파일 크기, 파일 속도, 남은 시간입니다. 다운로드 진행을 보여주는 다른 예제입니다:

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

직접 해보시려면, 진행 바와 함께 여러개의 URL들을 동시에 다운로드 받는 예제인 [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py)를 확인해주세요.

</details>

<details>
<summary>Status(상태)</summary>

진행 상황을 계산하기 어려운 경우, [상태](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) 메서드를 사용할 수 있습니다. 이 메서드는 '스피너' 애니메이션과 메세지를 표시합니다. 애니메이션은 당신이 콘솔을 정상적으로 사용하는 것을 막지 못합니다. 다음은 예제입니다:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

이 예제는 터미널에 아래와 같이 출력합니다.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

스피너 애니메이션은 [cli-spinners](https://www.npmjs.com/package/cli-spinners)에서 빌려왔습니다. `spinner` 파라미터를 선택해서 특정 스피너를 선택할 수도 있습니다. 어떤 값을 선택할 수 있는지는 아래 명령어를 통해 확인할 수 있습니다:

```
python -m rich.spinner
```

위의 명령어를 입력하면 아래와 같은 출력됩니다:

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Tree(트리)</summary>

Rich는 가이드라인과 함께 [트리](https://rich.readthedocs.io/en/latest/tree.html)를 표현할 수 있습니다. 파일 구조나, 계층적 데이터를 보여주는데 적합합니다.

트리의 라벨은 간단한 텍스트나 Rich로 표현할 수 있는 것은 모든지 가능합니다. 아래의 예시를 따라해보세요:

```
python -m rich.tree
```

이는 아래와 같이 출력됩니다:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

리눅스의 `tree` 명령어처럼 아무 디렉토리의 트리를 보여주는 스크립트 예제를 보시려면 [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py)를 확인해주세요.

</details>

<details>
<summary>Columns(칼럼)</summary>

Rich는 내용을 같거나 적절한 폭으로 깔끔하게 [칼럼](https://rich.readthedocs.io/en/latest/columns.html)을 표현할 수 있습니다. 아래 예제는 종렬로 디렉토리 리스트를 보여주는 (MacOS / Linux)의 `ls` 명령어의 기본적인 클론입니다:

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

아래 스크린샷은 API에서 뽑은 데이터를 종렬로 표현하는 [칼럼 예제](https://github.com/textualize/rich/blob/master/examples/columns.py)의 출력 결과입니다:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown(마크다운)</summary>

Rich는 [마크다운](https://rich.readthedocs.io/en/latest/markdown.html)을 표현하거나 형태를 터미널에 맞추어 적절히 변환할 수 있습니다.

마크다운을 표현하기 위해서는 `Markdown` 클래스를 import하고 마크다운을 포함하고 있는 문자열을 통해 객체를 생성해주세요. 다음은 예제입니다:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

위 코드는 아래와 같은 출력 결과를 만들 것입니다:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Syntax Highlighting(구문 강조)</summary>

Rich는 [구문 강조](https://rich.readthedocs.io/en/latest/syntax.html) 기능을 수행하기 위해 [pygments](https://pygments.org/) 라이브러리를 사용합니다. 사용법은 마크다운과 유사합니다. `Syntax` 객체를 생성하고 콘솔에 출력하세요. 예제는 다음과 같습니다:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

위 코드는 아래와 같은 출력 결과를 만들 것입니다:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tracebacks</summary>

Rich는 [예쁜 tracebacks](https://rich.readthedocs.io/en/latest/traceback.html)을 표현할 수 있습니다. 이것은 읽기도 더 쉽고 일반적인 파이썬 tracebacks 보다 더 많은 코드를 보여줍니다. uncaught exceptions가 Rich로 출력되도록 Rich를 기본 Traceback 핸들러로 설정할 수도 있습니다.

OSX에서는 이렇게 출력됩니다 (리눅스도 유사함):

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

모든 Rich로 표현 가능한 것들은 [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html)를 사용합니다. 이것을 사용해서 자신의 Rich 컨텐츠를 렌더링할 수도 있습니다.

# 엔터프라이즈를 위한 Rich

Tidelift 구독의 일환으로 가능합니다.

Rich를 포함한 수천가지 다른 패키지들의 메인테이너들은 당신이 앱을 만들기 위해 사용하는 오픈소스 패키지의 상업적인 지원과 유지보수를 위해 Tidelift와 함께 일하고 있습니다. 당신이 사용하는 패키지의 메인테이너에게 비용을 지불하는 대신 시간을 절약하고, 리스크를 줄이고, 코드의 품질을 향상시킬 수 있습니다. [더 자세한 정보는 여기를 참고바랍니다.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

# Rich를 사용하는 프로젝트들

Rich를 사용하는 몇가지 프로젝트들입니다:

- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  신경해부학 데이터의 3차원 시각화를 위한 파이썬 패키지
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  자동 암호해독 툴
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  파이썬을 위한 고성능, 높은 정밀도의 CPU / Memory 프로파일러
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  당신의 커맨드라인에서 GitHub 트렌딩 프로젝트들을 검색해보세요
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  이 툴은 여러 공통적이고 취약한 컴포넨트들(openssl, libpng, libxml2, expat 과 몇가지 더)을 스캔해, 이미 알려진 취약점을 가진 일반 라이브러리가 당신의 시스템에 있는지 알려줍니다.
- [nf-core/tools](https://github.com/nf-core/tools)
  nf-core 커뮤니티를 위한 도우미 도구를 포함한 파이썬 패키지.
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  개선된 디버깅을 위한 pdb + Rich 라이브러리
- [plant99/felicette](https://github.com/plant99/felicette)
  더미 위성 이미지
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  Selenium & pytest로 10배 더 빠르게 자동화 & 테스트하세요. 배터리도 포함되어 있습니다.
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  자동으로 자막과 영상의 싱크를 맞추세요.
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  모든 탐지된 것에 실시간으로 2D 오브젝트 트래킹을 추가하는 경량화된 파이썬 라이브러리.
- [ansible/ansible-lint](https://github.com/ansible/ansible-lint)
  Ansible-lint가 playbooks를 확인해 잠재적으로 개선될 수 있는 practices나 동작을 확인합니다.
- [ansible-community/molecule](https://github.com/ansible-community/molecule)
  Ansible Molecule의 테스트 프레임워크
- +[Many more](https://github.com/textualize/rich/network/dependents)!

<!-- This is a test, no need to translate -->



================================================
FILE: README.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
 • [Indonesian readme](https://github.com/textualize/rich/blob/master/README.id.md)
 • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)


Rich is a Python library for _rich_ text and beautiful formatting in the terminal.

The [Rich API](https://rich.readthedocs.io/en/latest/) makes it easy to add color and style to terminal output. Rich can also render pretty tables, progress bars, markdown, syntax highlighted source code, tracebacks, and more — out of the box.

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

For a video introduction to Rich see [calmcode.io](https://calmcode.io/rich/introduction.html) by [@fishnets88](https://twitter.com/fishnets88).

See what [people are saying about Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).

## Compatibility

Rich works with Linux, macOS and Windows. True color / emoji works with new Windows Terminal, classic terminal is limited to 16 colors. Rich requires Python 3.8 or later.

Rich works with [Jupyter notebooks](https://jupyter.org/) with no additional configuration required.

## Installing

Install with `pip` or your favorite PyPI package manager.

```sh
python -m pip install rich
```

Run the following to test Rich output on your terminal:

```sh
python -m rich
```

## Rich Print

To effortlessly add rich output to your application, you can import the [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) method, which has the same signature as the builtin Python function. Try this:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich can be installed in the Python REPL, so that any data structures will be pretty printed and highlighted.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Using the Console

For more control over rich terminal content, import and construct a [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) object.

```python
from rich.console import Console

console = Console()
```

The Console object has a `print` method which has an intentionally similar interface to the builtin `print` function. Here's an example of use:

```python
console.print("Hello", "World!")
```

As you might expect, this will print `"Hello World!"` to the terminal. Note that unlike the builtin `print` function, Rich will word-wrap your text to fit within the terminal width.

There are a few ways of adding color and style to your output. You can set a style for the entire output by adding a `style` keyword argument. Here's an example:

```python
console.print("Hello", "World!", style="bold red")
```

The output will be something like the following:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

That's fine for styling a line of text at a time. For more finely grained styling, Rich renders a special markup which is similar in syntax to [bbcode](https://en.wikipedia.org/wiki/BBCode). Here's an example:

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

You can use a Console object to generate sophisticated output with minimal effort. See the [Console API](https://rich.readthedocs.io/en/latest/console.html) docs for details.

## Rich Inspect

Rich has an [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) function which can produce a report on any Python object, such as class, instance, or builtin.

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

See the [inspect docs](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) for details.

# Rich Library

Rich contains a number of builtin _renderables_ you can use to create elegant output in your CLI and help you debug your code.

Click the following headings for details:

<details>
<summary>Log</summary>

The Console object has a `log()` method which has a similar interface to `print()`, but also renders a column for the current time and the file and line which made the call. By default Rich will do syntax highlighting for Python structures and for repr strings. If you log a collection (i.e. a dict or a list) Rich will pretty print it so that it fits in the available space. Here's an example of some of these features.

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

The above produces the following output:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

Note the `log_locals` argument, which outputs a table containing the local variables where the log method was called.

The log method could be used for logging to the terminal for long running applications such as servers, but is also a very nice debugging aid.

</details>
<details>
<summary>Logging Handler</summary>

You can also use the builtin [Handler class](https://rich.readthedocs.io/en/latest/logging.html) to format and colorize output from Python's logging module. Here's an example of the output:

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji</summary>

To insert an emoji in to console output place the name between two colons. Here's an example:

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

Please use this feature wisely.

</details>

<details>
<summary>Tables</summary>

Rich can render flexible [tables](https://rich.readthedocs.io/en/latest/tables.html) with unicode box characters. There is a large variety of formatting options for borders, styles, cell alignment etc.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

The animation above was generated with [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) in the examples directory.

Here's a simpler table example:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

This produces the following output:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

Note that console markup is rendered in the same way as `print()` and `log()`. In fact, anything that is renderable by Rich may be included in the headers / rows (even other tables).

The `Table` class is smart enough to resize columns to fit the available width of the terminal, wrapping text as required. Here's the same example, with the terminal made smaller than the table above:

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Progress Bars</summary>

Rich can render multiple flicker-free [progress](https://rich.readthedocs.io/en/latest/progress.html) bars to track long-running tasks.

For basic usage, wrap any sequence in the `track` function and iterate over the result. Here's an example:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

It's not much harder to add multiple progress bars. Here's an example taken from the docs:

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

The columns may be configured to show any details you want. Built-in columns include percentage complete, file size, file speed, and time remaining. Here's another example showing a download in progress:

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

To try this out yourself, see [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) which can download multiple URLs simultaneously while displaying progress.

</details>

<details>
<summary>Status</summary>

For situations where it is hard to calculate progress, you can use the [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) method which will display a 'spinner' animation and message. The animation won't prevent you from using the console as normal. Here's an example:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

This generates the following output in the terminal.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

The spinner animations were borrowed from [cli-spinners](https://www.npmjs.com/package/cli-spinners). You can select a spinner by specifying the `spinner` parameter. Run the following command to see the available values:

```
python -m rich.spinner
```

The above command generates the following output in the terminal:

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Tree</summary>

Rich can render a [tree](https://rich.readthedocs.io/en/latest/tree.html) with guide lines. A tree is ideal for displaying a file structure, or any other hierarchical data.

The labels of the tree can be simple text or anything else Rich can render. Run the following for a demonstration:

```
python -m rich.tree
```

This generates the following output:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

See the [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) example for a script that displays a tree view of any directory, similar to the linux `tree` command.

</details>

<details>
<summary>Columns</summary>

Rich can render content in neat [columns](https://rich.readthedocs.io/en/latest/columns.html) with equal or optimal width. Here's a very basic clone of the (MacOS / Linux) `ls` command which displays a directory listing in columns:

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

The following screenshot is the output from the [columns example](https://github.com/textualize/rich/blob/master/examples/columns.py) which displays data pulled from an API in columns:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich can render [markdown](https://rich.readthedocs.io/en/latest/markdown.html) and does a reasonable job of translating the formatting to the terminal.

To render markdown import the `Markdown` class and construct it with a string containing markdown code. Then print it to the console. Here's an example:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

This will produce output something like the following:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Syntax Highlighting</summary>

Rich uses the [pygments](https://pygments.org/) library to implement [syntax highlighting](https://rich.readthedocs.io/en/latest/syntax.html). Usage is similar to rendering markdown; construct a `Syntax` object and print it to the console. Here's an example:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

This will produce the following output:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tracebacks</summary>

Rich can render [beautiful tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) which are easier to read and show more code than standard Python tracebacks. You can set Rich as the default traceback handler so all uncaught exceptions will be rendered by Rich.

Here's what it looks like on OSX (similar on Linux):

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

All Rich renderables make use of the [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), which you can also use to implement your own Rich content.

# Rich CLI


See also [Rich CLI](https://github.com/textualize/rich-cli) for a command line application powered by Rich. Syntax highlight code, render markdown, display CSVs in tables, and more, directly from the command prompt.


![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)

# Textual

See also Rich's sister project, [Textual](https://github.com/Textualize/textual), which you can use to build sophisticated User Interfaces in the terminal.

![textual-splash](https://github.com/user-attachments/assets/4caeb77e-48c0-4cf7-b14d-c53ded855ffd)



================================================
FILE: README.pl.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
 • [Indonesian readme](https://github.com/textualize/rich/blob/master/README.id.md)
 • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)


Rich to bilbioteka Pythona dla tekstów _rich_ i pięknego formatowania w terminalu.

[Rich API](https://rich.readthedocs.io/en/latest/) sprawia, że dodanie kolorów i stylów do wyjścia terminala jest proste. Rich może również wyświetlać ładne tabele, paski postępu, markdown, podświetlenie składni kodu źródłowego, ślady wsteczne (tracebacki), i jeszcze więcej - od ręki.

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

Wprowadzenie wideo do Richa na [calmcode.io](https://calmcode.io/rich/introduction.html) stworzonym przez [@fishnets88](https://twitter.com/fishnets88).

Zobacz co [inni mówią o Richu](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).

## Kompatybilność

Rich działa na systemach operacyjnych Linux, OSX i Windows. True color / emoji współgra z nowym Terminalem Windows, klasyczny terminal jest ograniczony do 16 kolorów. Rich wymaga Pythona 3.7 lub nowszego.

Rich działa z [notatnikami Jupyter](https://jupyter.org) bez potrzeby dodatkowej konfiguracji.

## Instalacja

Zainstaluj z użyciem `pip` lub twojego ulubionego menedżera pakietów PyPI.

```sh
python -m pip install rich
```

Uruchom komendę poniżej aby przetestować wyjście Rich na twoim terminalu:

```sh
python -m rich
```

## Rich Print

By bezproblemowo dodać wyjście rich do twojej aplikacji, możesz zaimportować metodę [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start), która ma tą samą sygnaturę jak wbudowana funkcja Pythona. Wypróbuj:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich może zostać zainstalowany w REPL, żeby wszystkie struktury danych były ładnie wypisane i podświetlone.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Używanie konsoli

Dla większej kontroli nad bogatą zawartością terminala, zaimportuj i skonstruuj obiekt [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console).

```python
from rich.console import Console

console = Console()
```

Obiekt Console ma metodę `print`, mającą celowo podobny interfejs do wbudowanej funkcji `print`. Tu jest przykład użycia:

```python
console.print("Hello", "World!")
```

Jak można się spodziewać wyświetli to `"Hello World!"` do terminala. Warto zauważyć, że Rich automatycznie zawija tekst, aby mieścił się on w szerokości terminala.

Jest kilka możliwości dodania koloru i stylu do wyjścia terminala. Możesz ustawić styl dla całego wyjścia, dodając argument `style`. Na przykład:

```python
console.print("Hello", "World!", style="bold red")
```

Wyjście będzie wyglądało tak:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

Jest to w porządku dla stylizacji jednej linijki tekstu. Dla dokładniejszej stylizacj, Rich wyświetla specjalny format markup podobny w składni do [bbcode](https://en.wikipedia.org/wiki/BBCode). Przykład poniżej:

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

Możesz użyć obiektu Console, aby wygenerować skomplikowane wyjście bez problemu. Więcej informacji odnośnie Console API w [dokumentacji](https://rich.readthedocs.io/en/latest/console.html).

## Rich Inspect

Rich ma funkcję [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect), która może produkować raporty na jakimkolwiek obiekcie Python, jak np. klasa, instancja, lub wbudowana funkcja.

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

Więcej informacji na temat funkcji inspect w [dokumentacji](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect).

## Biblioteka Rich

Rich zawiera wiele wbudowanych _renderables_, które możesz użyć do stworzenia eleganckiego wyjścia w twoim CLI i pomóc ci w debugowaniu twojego kodu.

Kliknij poniższe nagłówki, żeby poznać detale:

<details>
<summary>Log</summary>

Obiekt Console ma metodę `log()`, mającą podobny interfejs do `print()`, ale wyświetla również kolumnę zawierającą aktualny czas oraz plik i linijkę, która wywołała powyższą metodę. Domyślnie Rich podświetla składnię dla struktur Pythona i ciągów repr. Jeśli zlogujesz kolekcję (czyli listę `list` lub słownik `dict`), Rich ją ładnie wypisze tak, żeby zmieściła się w dostępnym miejscu. Poniżej znajduje się przykład tych funkcji.

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

Powyższy kod wyświetla poniższy tekst:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

Istnieje argument `log_locals`, który wyświetla tabelę zawierającą zmienne lokalne skąd wywołano metodę  log.

Metoda log może być używana do logowania do terminala dla długo działających aplikacji takich jak serwery, ale jest również bardzo dobrą pomocą w debugowaniu.

</details>
<details>
<summary>Handler Logów</summary>

Możesz także użyć wbudowanej [klasy Handler](https://rich.readthedocs.io/en/latest/logging.html), aby sformatować i pokolorować wyjście z modułu logging Pythona. Przykład poniżej:

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji</summary>

Żeby wstawić emoji do wyjścia konsoli, umieść jego nazwę pomiędzy dwoma dwukropkami, na przykład:

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

Korzystaj z tej funkcji rozsądnie.

</details>

<details>
<summary>Tabele</summary>

Rich może wyświetlać elastyczne [tabele](https://rich.readthedocs.io/en/latest/tables.html) ze znakami unicode box. Istnieje duża różnorodność opcji formatowania, stylów, wyrównywania komórek itp.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

Powyższa animacja została wygenerowana z [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) w folderze examples.

Poniżej prostszy przykład:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

Ten kod wyświetla poniższy tekst:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

Markup konsoli jest renderowany w ten sam sposób co `print()` i `log()`. Tak naprawdę wszystko co może być wyświetlone przez Richa może być zawarte w nagłówkach / wierszach (nawet inne tabele).

Klasa `Table` jest na tyle mądra, że zmienia wielkość kolumn, aby zmieścić się w dostępnej szerokości terminala, zawijając tekst jeśli potrzeba. Poniżej ten sam przykład z mniejszą wielkością terminala:

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Paski Postępu</summary>

Rich może renderować wiele niemrugających pasków [postępu](https://rich.readthedocs.io/en/latest/progress.html), aby można było śledzić długo trwające zadania.

Dla podstawowego użycia, owiń jakąkolwiek sekwencję w funkcji `track` i iteruj nad wynikiem. Przykład poniżej:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

Nie jest trudniejsze dodanie wielu pasków postępu. Poniżej przykład z dokumentacji:

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

Kolumny mogą być skonfigurowane, tak aby wyświetlać jakiekolwiek detale chcesz. Wbudowane kolumny zawierają stopień ukończenia (w %), wielkość pliku, szybkość operacji i pozostały czas. Poniżej kolejny przykład pokazujący pobieranie w toku.

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

Możesz wypróbować tę funkcję samemu, patrz [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py), który może pobierać wiele URLów jednocześnie, pokazując postęp.

</details>

<details>
<summary>Status</summary>

W sytuacjach, gdzie ciężko jest wyliczyć postęp, można użyć metody [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status), która wyświetli animację 'spinnera' i wiadomość. Animacja nie przeszkodzi ci w używaniu konsoli normalnie. Przykład poniżej:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

Generuje to następującą linijkę.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

Animacje spinnera zostały zapożyczone z [cli-spinners](https://www.npmjs.com/package/cli-spinners). Możesz wybrać spinnera określając parametr `spinner`. Wykonaj następującą komendę, aby zobaczyć dostępne wartości:

```
python -m rich.spinner
```

To polecenie generuje następujący tekst:

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\

</details>

<details>
<summary>Tree</summary>

Rich może renderować drzewo - [tree](https://rich.readthedocs.io/en/latest/tree.html) zgodnie z wytycznymi. Drzewo jest idealne do wyświetlania struktury pliku, albo jakiekolwiek inne dane hierarchiczne.

Etykiety drzewa mogą być prostym tekstem albo czymkolwiek innym, co może wyświetlić Rich. Wykonaj poniższe polecenie dla demonstracji:

```
python -m rich.tree
```

To polecenie generuje następujący tekst:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

W pliku [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) znajduje się przykład skryptu wyświetlającego widok drzewa jakiegokolwiek folderu, podobnie do linuxowej komendy `tree`.

</details>

<details>
<summary>Kolumny</summary>

Rich może wyświetlać zawartość w schludnych [kolumnach](https://rich.readthedocs.io/en/latest/columns.html) z równą, lub optymalną szerokością. Poniżej znajduje się bardzo podstawowy klon komendy (MacOSa / Linuxa) `ls`, która wyświetla zawartość folderu w kolumnach:

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

Poniższy zrzut ekranu prezentuje wyjście [przykładu kolumn](https://github.com/textualize/rich/blob/master/examples/columns.py), wyświetlającego dane pobrane z API w kolumnach:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich może renderować [markdown](https://rich.readthedocs.io/en/latest/markdown.html) i wykonuje niezłą pracę tłumaczenia formatowania do terminalu.

Aby wyrenderować markdown, zaimportuj klasę `Markdown` i skonstruuj z ciągiem zawierającym kod markdown. Potem wydrukuj ją do konsoli. Przykład poniżej:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

Ten kod wyświetli tekst w stylu:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Podświetlanie kodu źródłowego</summary>

Rich używa biblioteki [pygments](https://pygments.org/), żeby zaimplementować [podświetlanie kodu źródłowego](https://rich.readthedocs.io/en/latest/syntax.html). Użycie jest podobne do renderowania markdownu; skonstruuj obiekt `Syntax` i wydrukuj go do konsoli. Przykład poniżej:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

Ten kod wyświetli:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tracebacki</summary>

Rich może renderować [piękne tracebacki](https://rich.readthedocs.io/en/latest/traceback.html), będące łatwiejsze do czytania i wyświetlają więcej kodu niż standardowe tracebacki Pythona. Można ustawić Richa jako domyślny handler tracebacków, żeby wszystkie niewyłapane wyjątki (błędy) były renderowane przez Richa.
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)



================================================
FILE: README.pt-br.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

Rich é uma biblioteca Python para _rich_ text e formatação de estilos no terminal.

A [API do Rich](https://rich.readthedocs.io/en/latest/) permite adicionar cores e estilos no output do terminal de forma fácil. Rich também permite formataçao de tabelas, barra de progresso, markdown, highlight de sintaxe de código fonte, rastreio de erros (traceback) e muito mais.

![Funcões](https://github.com/textualize/rich/raw/master/imgs/features.png)

Para mais detalhes, veja um vídeo de introdução so Rich em [calmcode.io](https://calmcode.io/rich/introduction.html) por [@fishnets88](https://twitter.com/fishnets88).

Veja aqui [o que estão falando sobre o Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).

## Compatibilidade

Rich funciona no Linux, OSX e Windows. True color / emoji funciona no novo Terminal do Windows, o terminal classico é limitado a 16 cores. Rich requer Python 3.6.3 ou superior.

Rich funciona com [Jupyter notebooks](https://jupyter.org/) sem a necessidade de configurações adicionais.

## Instalação

Instale usando `pip` ou seu gerenciador de pacotes PyPI favorito.

```sh
python -m pip install rich
```

Execute o seguinte comando para testar o output do Rich no seu terminal:

```sh
python -m rich
```

## Print do Rich

Para adicionar as as funções de formatação do rich na sua aplicação de forma fácil, simplesmente importe o metodo [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) que tem a mesma assinatura da função nativa do Python. Por exemplo:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## REPL do Rich

O Rich pode ser instalado no REPL do Python fazendo com que qualquer estrutura de dados seja exibida formatada e com highlights.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Usando o Console

Para ter mais controle sobre a formatação do conteudo no terminal, importe e instancie um objeto do [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console).

```python
from rich.console import Console

console = Console()
```

Objetos do tipo Console tem um metodo `print` que tem a interface intencionalmente similar à função `print` nativa. Veja a seguir um exeplo de uso:

```python
console.print("Hello", "World!")
```

Como esperado, este comando vai imprimir `"Hello World!"` no terminal. Porém, observe que, diferente da função `print` nativa, o Rich vai quebrar a linha entre palavras (word-wrap) no seu texto para caber na largura do terminal.

Existem algumas formas de adicionar cores e estilos nos outputs. É possivel aplicar um estilo para todo output adicionando o argumento nomeado `style`. Por exemplo:

```python
console.print("Hello", "World!", style="bold red")
```

O resultado vai ser algo como:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

Isso funciona bem para formatar cada linha do texto individualmente. Para maior controle sobre a formatação, o Rich renderiza um markup especial com uma sintaxe similar ao [bbcode](https://en.wikipedia.org/wiki/BBCode). Veja o exemplo a seguir:

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

Voce pode usar o objeto do Console para gerar facilmente uma saída para o terminal sofisticada. Veja a documentação da [API do Console](https://rich.readthedocs.io/en/latest/console.html) para mais detalhes.

## Inspect do Rich

O Rich tem uma função [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) que gera um relatório de qualquer objeto no Python, como classes, instâncias ou funções nativas.

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

Confira a [documentação do inspect](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) para mais detalhes.

# A biblioteca Rich

O Rich possui vários _renderizáveis_ nativos que podem ser usados para criar outputs elegantes no seu CLI e ajudar a debugar o código.

Clique nos itens a seguir para expandir os detalhes:

<details>
<summary>Log</summary>

O objeto Console tem um método `log()` com uma interface similar ao `print()` mas que também imprime uma coluna com a hora atual, nome do arquivo e linha onde foi executado. Por padrão, o Rich vai fazer highlight de sintaxe para extruturas do Python e para repr strings. Se você usar o `log()` para imprimir uma _collection_ (por exemplo um dicionário ou uma lista), o Rich vai imprimir formatado de uma forma que caiba no espaço disponível. Veja a seguir alguns exemplos dessas funções:

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

O código acima vai produzir algo parecido com:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

Note o argumento `log_locals` que imprime uma tabela com as variáveis locais no contexto em que o método `log()` foi chamado.

O método `log()` pode ser usado para logar no terminal em aplicações de processos longos como servidores, mas é também uma ferramenta ótima para debugar.

</details>
<details>
<summary>Logging Handler</summary>

Você também pode usar a [classe Handler](https://rich.readthedocs.io/en/latest/logging.html) nativa para formatar e colorir o output do módulo `logging` do Python. Veja aqui um exemplo do output:

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji</summary>

Para imprimir um emoji no console, coloque o nome do emoji entre dois ":" (dois pontos). Por exemplo:

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

Por favor use esse recurso com sabedoria.

</details>

<details>
<summary>Tabelas</summary>

O Rich pode imprimir [tables](https://rich.readthedocs.io/en/latest/tables.html) flexíveis usando caracteres unicode como bordas. Existem várias opções de formatação de bordas, estilos, alinhamento das celulas, etc.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

A animação acima foi gerada com o arquivo [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) da pasta de exemplos.

Veja um exemplo mais simples:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

Que gera o seguinte resultado:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

Observe que o markup é renderizado da mesma que em `print()` e `log()`. Na verdade, tudo que é renderizável pelo Rich pode ser incluído nos cabeçalhos ou linhas (até mesmo outras tabelas).

A classe `Table` é inteligente o suficiente para ajustar o tamanho das colunas para caber na largura do terminal, quebrando o texto em novas linhas quando necessário. Veja o mesmo exemplo a seguir, só que desta vez com um terminal menor do que o tamanho original da tabela:

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Barra de Progresso</summary>

O Rich consegue renderizar de forma eficiente múltiplas [barras de progresso](https://rich.readthedocs.io/en/latest/progress.html) que podem ser usadas para rastrear o estado de processos longos.

Uma forma simples de usar é passando o iterável para a função `track` e iterar normalmente sobre o retorno. Veja o exemplo a seguir:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

Adicionar múltiplas barras de progresso também é simples. Veja outro exemplo que existe na documentação:

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

As colunas podem ser configuradas pra mostrar qualquer detalho necessário. As colunas nativas incluem a porcentagem completa, tamanho de arquivo, velocidade do arquivo e tempo restante. O exemplo a seguir mostra o progresso de um download:

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

Para testar isso no seu terminal, use o arquivo [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) para fazer o download de múltiplas URLs simultaneamente, exibindo o progresso de cada download.

</details>

<details>
<summary>Status</summary>

Em casos em que é dificil calcular o progresso da tarefa, você pode usar o método [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) que exibe uma animação de um "spinner" e a mensagem. A animação não impede em nada o uso do `console`. Veja o exemplo a seguir:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

Este código resultará no seguinte output no terminal:

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

As animações do "spinner" foram emprestadas do [cli-spinners](https://www.npmjs.com/package/cli-spinners). É possível escolher um estilo de "spinner" usando o parametro `spinner`. Execute o comando a seguir para ver todos os tipos de "spinner" disponíveis.

```
python -m rich.spinner
```

O comando acima deve exibir o seguinte no seu terminal:

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Árvore</summary>

O Rich pode renderizar [árvores](https://rich.readthedocs.io/en/latest/tree.html) com linhas de identação. Uma árvore é a forma ideal de exibir uma estrutura de arquivos ou qualquer outra apresentação hierárquica de dados.

Os titulos dos itens da árvore podem ser textos simples ou qualquer coisa que o Rich pode renderizar. Execute o comando a seguir para uma demonstração:

```
python -m rich.tree
```

Isso gera o seguinte resultado:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

Veja o exemplo em [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) de um código que gera uma árvore de exibição de um dicionário, semelhante ao comando `tree` do linux.

</details>

<details>
<summary>Colunas</summary>

O Rich pode renderizar conteúdos em [colunas](https://rich.readthedocs.io/en/latest/columns.html) bem formatadas com tamanhos iguais ou otimizados. O exemplo a seguir é uma cópia básica do comando `ls` (presente no MacOS / Linux) que mostra o conteúdo de uma pasta organizado em colunas:

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

O screenshot a seguir é do resultado do [exemplo de colunas](https://github.com/textualize/rich/blob/master/examples/columns.py) formatando em colunas os dados extraídos de uma API:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

O Rich pode renderizar [markdown](https://rich.readthedocs.io/en/latest/markdown.html) e faz um bom trabalho de conversão do formato para o terminal.

Para renderizar markdown, importe a classe `Markdown` e instancie com a string que contém o código markdown. Depois, imprima o objeto no console. Por exemplo:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

Isso produzirá um resultado como:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Highlight de Sintaxe</summary>

O Rich usa a biblioteca [pygments](https://pygments.org/) para implementar o [highlight de sintaxe](https://rich.readthedocs.io/en/latest/syntax.html). O uso é similar à renderização de markdown, instancie um objeto da classe `Syntax` imprima no console. Por exemplo:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

Este código gerará o seguinte resultado:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Rastreio de Erros (tracebacks)</summary>

O Rich renderiza [tracebacks formatados](https://rich.readthedocs.io/en/latest/traceback.html) que são fáceis de ler e mostra mais código do que os tracebacks padrão do Python. É possivel configurar o Rich como o gerenciador padrão de tracebacks para que todas as excessões inesperadas sejam renderizadas pelo Rich.

Veja o resultado disso no OSX (resultados semelhantes no Linux):

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

Todos os renderizáveis do Rich usam o [Protocolo do Console](https://rich.readthedocs.io/en/latest/protocol.html), que você pode usar para implementar o seu próprio conteúdo Rich.

# Rich para empresas

Disponível como parte da assinatura Tidelift.

Os mantenedores do Rich e milhares de outros pacotes estão trabalhando com o Tidelift para disponibilizar suporte comercial e manutenção de projetos de código aberto usados nas suas aplicações. Economize tempo, reduza riscos e melhore a qualidade do código enquanto paga os mantenedores dos pacotes exatos que você usa. [Mais detalhes.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

# Projetos usando Rich

Aqui estão alguns projetos que usam o Rich:

- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  a python package for the visualization of three dimensional neuro-anatomical data
  um pacote python para visualisação tridimensional de dados neuro-atômicos.
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  ferramenta de descriptografia autoatizada.
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  um analisador de CPU e memória de alta performance e alta precisão para Python
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  Explore projetos de destaque no GitHub pela linha de comando do terminal
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  Essa ferramenta verifica a vulnerabilidade de diversos componentes populares (openssl, libpng, libxml2, expat e outros) presentes no seu sistema e alerta para possíveis vulnerabilidades conhecidas.
- [nf-core/tools](https://github.com/nf-core/tools)
  pacote Python com ferramentas auxiliares par a comunidade nf-core.
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  pdb + Rich para auxiliar no debug
- [plant99/felicette](https://github.com/plant99/felicette)
  Imagem de satélites para iniciantes.
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  Automatize & teste 10x mais rápido com Selenium & pytest. Baterias inclusas.
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  Automagicamente sincronize legendas com vídeos.
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  Biblioteca Python para adicionar rastreio em tempo real de objetos 2D em qualquer detector.
- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint verifica boas práticas e comportamento que podem ser melhorados.
- [ansible-community/molecule](https://github.com/ansible-community/molecule) Framework de test para Ansible Molecule
- +[Muitos outros](https://github.com/textualize/rich/network/dependents)!

<!-- This is a test, no need to translate -->



================================================
FILE: README.ru.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

Rich это Python библиотека, позволяющая отображать _красивый_ текст и форматировать терминал.

[Rich API](https://rich.readthedocs.io/en/latest/) упрощает добавление цветов и стилей к выводу терминала. Rich также позволяет отображать красивые таблицы, прогресс бары, markdown, код с подсветкой синтаксиса, ошибки, и т.д. — прямо после установки.

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

Смотрите видеоинструкцию  [calmcode.io](https://calmcode.io/rich/introduction.html) от [@fishnets88](https://twitter.com/fishnets88).

Посмотрите [что люди думают о Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).

## Cовместимость

Rich работает с Linux, OSX и Windows. True color / эмоджи работают с новым терминалом Windows, классический терминал лимитирован 16 цветами. Rich требует Python 3.6.3 или более новый.

Rich работает с [Jupyter notebooks](https://jupyter.org/) без дополнительной конфигурации.

## Установка

Установите с помощью `pip` или вашего любимого PyPI менеджера пакетов.

```sh
python -m pip install rich
```

Запустите следующую команду, чтобы проверить Rich вывод в вашем терминале:

```sh
python -m rich
```

## Rich Print

Простейший способ получить красивый вывод это импортировать метод [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start), он принимает такие же аргументы что и стандартный метод `print`. Попробуйте:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich может быть установлен в Python REPL, так, все данные будут выведены через Rich.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Использование класса Console

Для большего контроля над терминалом Rich, импортируйте и инициализируйте класс [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console).

```python
from rich.console import Console

console = Console()
```

У класса Сonsole есть метод `print` который имеет идентичный встроенной функции функционал `print`. Вот пример использования:

```python
console.print("Hello", "World!")
```

Как вы могли догадаться, это выведет `Hello World!` в терминал. Запомните что, в отличии от встроенной функции `print`, Rich настроит переносы слов так, чтобы ваш текст соответствовал ширине терминала.

Есть несколько способов добавить цвет и стиль к вашему выводу. Вы можете выбрать стиль для всего вывода добавив аргумент `style`. Вот пример:

```python
console.print("Hello", "World!", style="bold red")
```

Вывод будет выглядеть примерно так:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

Этого достаточно чтобы стилизовать 1 строку. Для более детальной стилизации, Rich использует специальную разметку похожую по синтаксису на [bbcode](https://en.wikipedia.org/wiki/BBCode). Вот пример:

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

Вы можете использовать класс Console чтобы генерировать красивый вывод с минимальными усилиями. Для получения детальной информации смотрите [документацию Console API](https://rich.readthedocs.io/en/latest/console.html).

## Rich Inspect

В Rich имеется функция [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) которая может украсить любой Python объект, например класс, переменную, или функцию.

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

Для получения детальной информации смотрите [документацию inspect](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect).

# Библиотека Rich

Rich содержит несколько встроенных _визуализаций_ которые вы можете использовать чтобы сделать красивый вывод в вашем CLI, а также они помогают в отладке кода.

Вот несколько вещей которые может делать Rich (нажмите чтобы узнать больше):

<details>
<summary>Лог</summary>

В классе Сonsole есть метод `log()` который имеет интерфейс, аналогичный `print()`, но также отображает колонку текущим временем, именем файла и номером строки кода в которой был вызван метод. По умолчанию Rich будет подсвечивать синтаксис для структур Python и для строк repr. Если вы передадите в метод коллекцию (т.е. dict или list) Rich выведет её так, чтобы она разместилась в доступном пространстве. Вот пример использования этого метода.

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

Приведенный выше код выведет это:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)


Обратите внимание на аргумент `log_locals`, который выводит таблицу, содержащую локальные переменные функции, в которой был вызван метод log.

Метод может быть использован для вывода данных в терминал в длительно работающих программ, таких как сервера, но он также может помочь в отладке.

</details>
<details>
<summary>Обработчик Логов</summary>

Вы также можете использовать встроенный [класс Handler](https://rich.readthedocs.io/en/latest/logging.html) чтобы форматировать и раскрашивать вывод из встроенной библиотеки logging. Вот пример вывода:

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Эмоджи</summary>

Чтобы вставить эмоджи в вывод консоли, поместите его название между двумя двоеточиями. Вот пример:

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

Пожалуйста, используйте эту функцию с умом.

</details>

<details>
<summary>Таблицы</summary>

Rich может отображать гибкие настраиваемые [таблицы](https://rich.readthedocs.io/en/latest/tables.html) с помощью символов unicode. Есть большое количество вариантов границ, стилей, выравниваний ячеек и т.п.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

Эта анимация была сгенерирована с помощью [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) в папке примеров.

Вот пример более простой таблицы:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

Этот пример выводит:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

Обратите внимание, что разметка осуществляется таким же способом, что и `print()` и `log()`. На самом деле, все, что может быть отображено Rich, может быть включено в заголовки / строки (даже в другие таблицы).

Класс `Table` достаточно умный чтобы менять размер столбцов, так, чтобы они заполняли доступную ширину терминала, обёртывая текст как нужно. Вот тот же самый пример с терминалом меньше таблицы:

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Прогресс Бары</summary>

Rich может отображать несколько плавных [прогресс](https://rich.readthedocs.io/en/latest/progress.html) баров чтобы отслеживать долго-идущие задания.

Для базового использования, оберните любую последовательность в функцию `track` и выполните итерации по результату. Вот пример:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

Добавить несколько индикаторов выполнения не намного сложнее. Вот пример взятый из документации:

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

Столбцы могут быть сконфигурированы таким образом, чтобы отображать любые сведения, которые вы хотите. Стандартные столбцы содержат проценты выполнения, размер файлы, скорость файла и оставшееся время. Вот ещё пример показывающий прогресс загрузки:

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

Чтобы попробовать самому, скачайте [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py), который может загружать несколько URL-адресов одновременно, отображая прогресс.

</details>

<details>
<summary>Статус</summary>

Для ситуаций где сложно вычислить прогресс, вы можете использовать метод [статус](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) который будет отображать крутящуюся анимацию и сообщение. Анимация не помешает вам использовать консоль в обычном режиме. Вот пример:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

Это сгенерирует вот такой вывод в консоль.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

Крутящиеся анимации были взяты из [cli-spinners](https://www.npmjs.com/package/cli-spinners). Вы можете выбрать одну из них указав параметр `spinner`. Введите следующую команду чтобы посмотреть доступные анимации:

```
python -m rich.spinner
```

Приведенная выше команда сгенерирует следующий вывод в терминале:

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Дерево</summary>

Rich может отобразить [дерево](https://rich.readthedocs.io/en/latest/tree.html) с направляющими уровнями. Дерево идеально подходит для отображения структуры файлов или любых других иерархических данных.

Метки дерева могут быть содержать простой текст или чем-либо еще, что может отобразить Rich. Запустите следующую команду для демонстрации:

```
python -m rich.tree
```

Это генерирует следующий вывод:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

Смотрите пример [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) скрипта,который отображает древовидное представление любого каталога, аналогично команде linux `tree`.

</details>

<details>
<summary>Колонки</summary>

Rich может отображать контент в аккуратных [колонках](https://rich.readthedocs.io/en/latest/columns.html) с равной или оптимальной шириной. Вот очень простой пример клона команды `ls` (MacOS / Linux) который отображает список файлов из папки в виде колонок:

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

Следующий снимок экрана является [примером колонок](https://github.com/textualize/rich/blob/master/examples/columns.py) который изображает данные взятые из API в столбцах:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich может отображать [markdown](https://rich.readthedocs.io/en/latest/markdown.html), проделывая неплохую работу в форматировании под терминал.

Чтобы отобразить markdown импортируйте класс `Markdown` и инициализируйте его с помощью строки содержащей код markdown. Затем распечатайте его в консоли. Вот пример:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

Это выведет что-то похожее на это:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Подсветка синтаксиса</summary>

Rich использует библиотеку [pygments](https://pygments.org/) чтобы выполнить [подсветку синтаксиса](https://rich.readthedocs.io/en/latest/syntax.html). Использование аналогично рендерингу markdown; создайте объект `Syntax` и выведите его на консоль. Вот пример:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

Это выведет что-то похожее на это:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Ошибки</summary>

Rich может отображать [красивый стек ошибок](https://rich.readthedocs.io/en/latest/traceback.html), который проще читать, и показывает больше информации чем стандартные стек ошибок Python. Вы можете установить Rich как стандартный обработчик ошибок чтобы все не перехваченные исключения отображались Rich.

Вот как это выглядит на OSX (похоже на Linux):

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

Все визуализации Rich используют [протокол Console](https://rich.readthedocs.io/en/latest/protocol.html), который позволяет вам добавлять свой собственный Rich контент.

# Rich CLI

Смотрите также [Rich CLI](https://github.com/textualize/rich-cli) для получения информации о приложении командной строки, работающего на базе Rich. Подсветка синтаксиса кода, рендеринг markdown, отображение CSV-файлов в таблицах и многое другое доступно непосредственно из командной строки.


![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)

# Textual

Смотрите также дочерний проект Rich, [Textual](https://github.com/Textualize/textual), который вы можете использовать для создания сложных пользовательских интерфейсов в терминале.

# Rich для предприятий

Rich доступен как часть подписки Tidelift.

Ментейнеры проекта Rich, как и тысячи других разработчиков работают с подпиской Tidelift чтобы предоставить коммерческую поддержку и поддержку для проектов с открытым кодом, которые вы используете для создания своих приложений. Экономьте время, устраняйте риски и улучшайте состояние вашего кода, одновременно платя спонсорам проектов, которые вы используете. [Узнайте больше.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

# Проекты использующие Rich

Вот несколько проектов использующих Rich:

- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  библиотека Python для визуализации нейроанатомических данных в 3 измерениях
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  автоматизированная утилита для расшифровки
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  Высокая производительность, высокая точность CPU и профилировщик памяти для Python
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  Просматривайте трендовые проекты GitHub прямо из вашего терминала
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  Эта утилита сканирует известные уязвимости (openssl, libpng, libxml2, expat and a few others) чтобы уведомить вас, если ваша система использует библиотеки с известными уязвимостями.
- [nf-core/tools](https://github.com/nf-core/tools)
  Библиотека Python с полезными инструментами для сообщества nf-core.
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  pdb + Rich библиотека для улучшенного дебаггинга
- [plant99/felicette](https://github.com/plant99/felicette)
  Изображения со спутников для чайников.
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  Автоматизируйте и тестируйте в 10 раз быстрее с Selenium и pytest. Батарейки включены.
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  Автоматически синхронизируйте субтитры с видео.
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  Простая библиотека Python для добавления 2D отслеживания к любому детектеру в реальном времени.
- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint проверяет пьесы для практик и поведений которые могут быть исправлены
- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule тестинг фреймворк
- +[Ещё больше](https://github.com/textualize/rich/network/dependents)!

<!-- This is a test, no need to translate -->



================================================
FILE: README.sv.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

Rich är ett Python bibliotek för _rich_ text och vacker formattering i terminalen.

[Rich API](https://rich.readthedocs.io/en/latest/) gör det enkelt att lägga till färg och stil till terminal utmatning. Rich kan också framställa fina tabeller, framstegsfält, märkspråk, syntaxmarkerad källkod, tillbaka-spårning, och mera - redo att använda.

![Funktioner](https://github.com/textualize/rich/raw/master/imgs/features.png)

För en video demonstration av Rich kolla [calmcode.io](https://calmcode.io/rich/introduction.html) av [@fishnets88](https://twitter.com/fishnets88).

Se vad [folk pratar om Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).

## Kompatibilitet

Rich funkar med Linux, OSX, och Windows. Sann färg / emoji funkar med nya Windows Terminalen, klassiska terminal är begränsad till 8 färger. Rich kräver Python 3.6.3 eller senare.

Rich funkar med [Jupyter notebooks](https://jupyter.org/) utan någon ytterligare konfiguration behövd.

## Installering

Installera med `pip` eller din favorita PyPI packet hanterare.

```sh
python -m pip install rich
```

Kör följade följande för att testa Rich utmatning i din terminal:

```sh
python -m rich
```

## Rich utskrivningsfunktion

För att enkelt lägga till rich utmatning i din applikation, kan du importera [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) metoden, vilket har den samma signatur som den inbyggda Python funktionen. Testa detta:

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich kan installeras i Python REPL, så att varje datastruktur kommer att skrivas ut fint och markeras.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Användning av konsolen

För mer kontroll över rich terminal innehållsutmatning, importera och konstruera ett [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) objekt.

```python
from rich.console import Console

console = Console()
```

`Console` objektet har en `print` metod vilket har ett avsiktligt liknande gränssnitt till den inbyggda `print` funktionen. Här är ett exempel av användningen:

```python
console.print("Hello", "World!")
```

Som du möjligtvis anar, detta kommer skriva ut `"Hello World!"` till terminalen. Notera att till skillnad från den inbyggda `print` funktionen, Rich kommer att radbryta din text så att den passar inom terminalbredden.

Det finns ett par sätt att lägga till färg och stil till din utmatning. Du kan sätta en stil för hela utmatningen genom att addera ett `style` nyckelord argument. Här är ett exempel:

```python
console.print("Hello", "World!", style="bold red")
```

Utmatningen kommer bli något liknande:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

Det är bra för att ge stil till en textrad åt gången. För mer finkornad stilisering, Rich framställer en speciell märkspråk vilket liknar [bbcode](https://en.wikipedia.org/wiki/BBCode) i syntax. Här är ett exempel:

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Konsol märkspråk](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

Du kan använda ett `Console` objekt för att generera sofistikerad utmatning med minimal ansträngning. Se [Console API](https://rich.readthedocs.io/en/latest/console.html) dokument för detaljer.

## Rich Inspektera

Rich har en [inspektionsfunktion](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) som kan producera en rapport om vilket Python objekt som helst, till exempel klass, instans, eller inbyggt.

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

See [inspektionsdokumentationen](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) för detaljer.

# Rich Library

Rich innehåller ett antal av inbyggda _renderables_ som du kan använda för att skapa elegant utmatning i din kommandotolk och hjälpa dig felsöka din kod.

Klicka på följande rubriker för detaljer:

<details>
<summary>Logga</summary>

`Console` objektet har en `log()` metod vilket har liknande gränssnitt som `print()`, men framställer även en kolumn för den nuvarande tid och fil samt rad vilket gjorde anroppet. Som standard kommer Rich att markera syntax för Python strukturer och för repr strängar. Ifall du loggar en samling (det vill säga en ordbok eller en lista) kommer Rich att finskriva ut det så att det passar i det tillgängliga utrymme. Här är ett exempel av dessa funktioner.

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

Det ovanstående har följande utmatning:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

Notera `log_locals` argumentet, vilket utmatar en tabell innehållandes de lokala variablerna varifrån log metoden kallades från.

Log metoden kan användas för att logga till terminal för långkörande applikationer så som servrar, men är också en väldigt bra felsökningsverktyg.

</details>
<details>
<summary>Loggningshanterare</summary>

Du kan också använda den inbyggda [Handler klassen](https://rich.readthedocs.io/en/latest/logging.html) för att formatera och färglägga utmatningen från Pythons loggningsmodul. Här är ett exempel av utmatningen:

![Loggning](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji</summary>

För att infoga en emoji till konsolutmatningen placera namnet mellan två kolon. Här är ett exempel:

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

Vänligen använd denna funktion klokt.

</details>

<details>
<summary>Tabeller</summary>

Rich kan framställa flexibla [tabeller](https://rich.readthedocs.io/en/latest/tables.html) med unicode boxkaraktärer. Det finns en stor mängd av formateringsalternativ för gränser, stilar, och celljustering etc.

![Tabell film](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

Animationen ovan genererades utav [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) i exempelkatalogen.

Här är ett exempel av en enklare tabell:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

Detta producerar följande utmatning:

![tabell](https://github.com/textualize/rich/raw/master/imgs/table.png)

Notera att konsol märkspråk är framställt på samma sätt som `print()` och `log()`. I själva verket, vad som helst som är framställt av Rich kan inkluderas i rubriker / rader (även andra tabeller).

`Table` klassen är smart nog att storleksändra kolumner att passa den tillgängliga bredden av terminalen, och slår in text ifall det behövs. Här är samma exempel, med terminalen gjord mindre än tabell ovan:

![tabell2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Framstegsfält</summary>

Rich kan framställa flera flimmerfria [framstegsfält](https://rich.readthedocs.io/en/latest/progress.html) för att följa långvariga uppgifter.

För grundläggande användning, slå in valfri sekvens i `track` funktion och iterera över resultatet. Här är ett exempel:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

Det är inte mycket svårare att lägga till flera framstegsfält. Här är ett exempel tagen från dokumentationen:

![framsteg](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

Dessa kolumner kan konfigureras att visa vilka detaljer du vill. Inbyggda kolumner inkluderar procentuell färdig, filstorlek, filhastighet, och återstående tid. Här är ännu ett exempel som visar en pågående nedladdning:

![framsteg](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

För att själv testa detta, kolla [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) vilket kan ladda ner flera URLs samtidigt medan visar framsteg.

</details>

<details>
<summary>Status</summary>

För situationer där det är svårt att beräkna framsteg, kan du använda [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) metoden vilket kommer visa en 'snurra' animation och meddelande. Animationen hindrar dig inte från att använda konsolen som normalt. Här är ett exempel:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

Detta genererar följande utmatning i terminalen.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

Snurra animationen är lånad ifrån [cli-spinners](https://www.npmjs.com/package/cli-spinners). Du kan välja en snurra genom att specifiera `spinner` parametern. Kör följande kommando för att se tillgängliga värden:

```
python -m rich.spinner
```

Kommandot ovan genererar följande utmatning i terminalen:

![Snurror](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Träd</summary>

Rich kan framställa ett [träd](https://rich.readthedocs.io/en/latest/tree.html) med riktlinjer. Ett träd är idealt för att visa en filstruktur, eller andra hierarkiska data.

Etiketter på trädet kan vara enkelt text eller något annat som Rich kan framställa. Kör följande för en demonstration:

```
python -m rich.tree
```

Detta genererar följande utmatning:

![märkspråk](https://github.com/textualize/rich/raw/master/imgs/tree.png)

Se [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) exemplet för ett skript som visar en trädvy av vilken katalog som helst, som liknar linux `tree` kommandot.

</details>

<details>
<summary>Kolumner</summary>

Rich kan framställa innehåll i prydliga [kolumner](https://rich.readthedocs.io/en/latest/columns.html) med lika eller optimal bredd. Här är en grundläggande klon av (MacOS / Linux) `ls` kommandot vilket visar en kataloglista i kolumner:

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

Följande skärmdump är resultatet från [kolumner exempelet](https://github.com/textualize/rich/blob/master/examples/columns.py) vilket visar data tagen från ett API i kolumner:

![kolumner](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Märkspråk</summary>

Rich kan framställa [märkspråk](https://rich.readthedocs.io/en/latest/markdown.html) och gör ett rimligt jobb med att översätta formateringen till terminalen.

För att framställa märkspråk importera `Markdown` klassen och konstruera den med en sträng innehållandes märkspråkskod. Mata sedan ut det till konsolen. Här är ett exempel:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

Detta kommer att producera utmatning som liknar följande:

![märkspråk](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Syntaxmarkering</summary>

Rich använder [pygments](https://pygments.org/) biblioteket för att implementera [syntax markering](https://rich.readthedocs.io/en/latest/syntax.html). Användningen är liknande till framställa märkspråk; konstruera ett `Syntax` objekt och skriv ut den till konsolen. Här är ett exempel:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

Detta kommer producera följande utmatning:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tillbaka-spårning</summary>

Rich kan framställa [vackra tillbaka-spårningar](https://rich.readthedocs.io/en/latest/traceback.html) vilket är enklare att läsa och visar mer kod än vanliga Python tillbaka-spårningar. Du kan sätta Rich som standard tillbaka-spårningshanterare så att alla ofångade undantag kommer att framställas av Rich.

Så här ser det ut på OSX (liknande på Linux):

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

Alla Rich framställsbara använder sig av [konsolprotokollet](https://rich.readthedocs.io/en/latest/protocol.html), som du också kan använda för att implementera ditt eget Rich-innehåll.

# Rich för företag

Tillgänglig som en del av Tidelift-prenumerationen.

Underhållarna av Rich och tusentals andra paket arbetar med Tidelift för att leverera kommersiellt stöd och underhåll för de öppen källkodspaket som du kan använda för att bygga dina applikationer. Spara tid, reducera risk, och förbättra kodhälsan, samtidigt som du betalar underhållarna för exakt de paket du använder [Lär dig mer.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

# Projekt som använder sig av Rich

Här är ett par projekt som använder Rich:

- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  ett python packet för visualisering av tredimensionell neuro-anatomiska data
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  Automatiserat dekrypteringsverktyg
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  en högpresterande processor med hög precision och minnesprofilerare för Python
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  Bläddra bland trendande projekt i Github från din kommandotolk
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  Detta verktyg skannar efter vanliga, sårbara komponenter (openssl, libpng, libxml2, expat och en del andra) för att låta dig veta ifall ditt system inkluderar vanliga bibliotek med kända sårbarheter.
- [nf-core/tools](https://github.com/nf-core/tools)
  Python packet med hjälpverktyg för nf-core gemenskapen.
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  pdb + Rich bibliotek för förbättrad felsökning.
- [plant99/felicette](https://github.com/plant99/felicette)
  Satellitbilder för nybörjare.
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  Automatisera & testa 10x snabbare med Selenium & pytest. Batterier inkluderat.
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  Automagiskt synkronisera undertexter med video.
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  Lättvikt Python bibliotek för att addera 2d-objektspårning i realtid till vilken detektor som helst.
- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint kontroller playbooks för dess metoder och beteenden som potentiellt kan förbättras
- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule ramverk för testning
- +[Many more](https://github.com/textualize/rich/network/dependents)!



================================================
FILE: README.tr.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
 • [Indonesian readme](https://github.com/textualize/rich/blob/master/README.id.md)
 • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)


Bir Python kütüphanesi olan __rich__, terminal üzerinde gösterişli çıktılar almanızı sağlayan bir araçtır.

[Rich API](https://rich.readthedocs.io/en/latest/) kullanarak terminal çıktılarınıza stil ekleyebilir ve renklendirebilirsiniz. Aynı zamanda tabloları, ilerleme çubuklarını, markdown stillerini, kaynak koddaki söz dizimi gösterimlerini ve bir çok şeyi rich kullanarak yapabilirsiniz.

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

Rich'e video ile göz atmak için [@fishnets88](https://twitter.com/fishnets88) tarafından oluşturulan [calmcode.io](https://calmcode.io/rich/introduction.html) sitesine bakabilirsiniz.

İnsanların [rich hakkında yazdıkları son yazılar](https://www.willmcgugan.com/blog/pages/post/rich-tweets).

## Uyumluluk

Rich Linux, OSX ve Windows üzerinde çalışabilir. Windows'un yeni terminalinde de doğru bir şekilde çalışabilir, eski terminalde 16 renk olduğu için istenilen sonuçlar elde edilemeyebilir. Aynı zamanda Rich'in çalışabilmesi için ortamda minimum Python 3.6.3 veya daha yeni bir sürüm olması gerekmektedir.

Rich [Jupyter notebook](https://jupyter.org/) üzerinde hiç bir ek yükleme gerektirmeden çalışabilir.

## Yükleme

`pip` üzerinden veya kullanmış olduğunuz PyPI paket yöneticiniz üzerinden indirebilirsiniz.

```sh
python -m pip install rich
```

Aşağıdaki komut satırını çalıştırarak çıktınızı terminal üzerinden görebilirsiniz.


```sh
python -m rich
```

## Rich Print

[rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) methodunu yükleyerek, Rich'i kullanmaya başlayabilirsiniz.

```python
from rich import print

print("Merhaba, [bold magenta]Dünya[/bold magenta]!", ":vampire:", locals())
```

Buradaki yazıyı değiştiremediğim için siz hello world olarak görüyorsunuz. :D
![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich Python REPL içerisine yüklenebilir, böylece herhangi bir veri tipini güzelce terminal çıktısı olarak verebilir.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Terminali Nasıl Kullanılır?

Çıktılarınız üzerinde daha fazla hakimiyet kurmak isterseniz, [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console)'u import edip objesini kullanabilirsiniz.

```python
from rich.console import Console

console = Console()
```

Console objesi tıpkı Python içerisinde hazır gelen `print` methoduna benziyor, tabii daha fazlası da var.
Kullanımı aşağıdaki örnek gibi olacaktır:

```python
console.print("Merhaba", "Dünya!")
```

Sizin de tahmin edebileceğiniz gibi terminal çıktımız `"Merhaba Dünya!"` olacaktır. Standart `print` fonksiyonundan farklı olarak Console `print` fonksiyonu terminale sığmayan yazıları kaydırma özelliğine sahiptir.

Yazılarımıza birden fazla şekilde renk ekleyebiliriz. Bunlardan ek basit olan şekli, `style` argümanına rengimizi vermek. Aşağıda nasıl kullanılacağına dair bir örnek bulabilirsiniz.

```python
console.print("Merhaba", "Dünya!", style="bold red")
```

Eğer çıktıyı değiştirmeseydim aşağıdaki gibi bir görüntü ile karşılaşacaktınız:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

Tek seferde bir yazıyı renklendirmek için kullanışlı bir yöntem olsa da, eğer çıktımızın sadece belirli bölgelerinde değişiklik yapacaksak [bbcode](https://en.wikipedia.org/wiki/BBCode) söz dizimini kullanmalıyız. Bunun için de bir örnek:

```python
console.print("[bold red]Mustafa Kemal Atatürk[/bold red] [u](1881 - 10 Kasım 1938)[/u], [i]Türk asker ve devlet adamıdır[/i]. [bold cyan]Türk Kurtuluş Savaşı'nın başkomutanı ve Türkiye Cumhuriyeti'nin kurucusudur[/bold cyan].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

Console objesini kullanarak sofistike bir çok çıktıyı minimum efor ile oluşturabilirsiniz. [Console API](https://rich.readthedocs.io/en/latest/console.html) dökümanına göz atarak daha fazla bilgi elde edebilirsiniz.

## Rich Inspect

Rich [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) adında bir fonksiyona sahiptir ve bu fonksiyon bize bir Python objesininin özelliklerini gösterir.

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

[Bu dökümana](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) göz atarak daha fazla bilgi elde edebilirsiniz...

# Rich Kütüphaneleri

Rich içerisinde terminal üzerinde kullandığınızda çıktılarınızı gösterişli kılacak çok fazla yapıya sahiptir.

Bu yapıların detayları için ilgili başlıklara tıklayın:

<details>
<summary>Log</summary>

Console objesi içerisinde `log()` methodunu barındırır, bu tıpkı `print()` methodu gibi davranır fakat buna ek olarak bastırıldığı zamanı da ekrana yansıtır. Bu duruma ek olarak Rich Syntax Highlighting'de gerçekleştirir.
Aşağıda örnek kod parçası:

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

Ve bu kod parçasının çıktısı:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

`log_locals` argümanı, local olarak bulunan değişkenleri tablo olarak ekrana bastırır.

</details>
<details>
<summary>Logging Handler</summary>

Python'un logging modülünü de [Handler sınıfı](https://rich.readthedocs.io/en/latest/logging.html) ile formatlayıp renklendirebiliriz.

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji</summary>

Emojileri de kullanabilirsiniz, kullanımı markdown emojileri ile aynı.

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

Bu özelliği doğru yerlerde kullanmakta fayda var tabii.

</details>

<details>
<summary>Tables</summary>

Rich kullanıcılarına esnek bir [tablo](https://rich.readthedocs.io/en/latest/tables.html) imkanı sunar, birden fazla şekilde formatlayıp, stillendirip kullanabilirsiniz.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

Yukarıdaki tablo örneği [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) örnek kodu ile oluşturulmuştur.

Basit bir tablo örneği:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

Kodun çıktısı aşağıdaki gibi olmaktadır:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

Note that console markup is rendered in the same way as `print()` and `log()`. In fact, anything that is renderable by Rich may be included in the headers / rows (even other tables).

`Table` sınıfı kendini terminal ekranına göre ayarlayabilir, genişletip, küçültebilir. Burada bunun ile alakalı bir örnek görüyorsunuz.

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Progress Bars</summary>

Uzun işlerinizi göstermek için Rich size birden fazla [progress](https://rich.readthedocs.io/en/latest/progress.html) bar sunuyor.

Basit bir kullanım için, herhangi bir adımınızı `track` fonksiyonu ile kapsayıp döngüye alın.

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

Aşağıdaki görsellerde de görüleceği üzere birden fazla kez progress bar kullanabilirsiniz, ve dökümandan da anlaşılacağı üzere bu hiç de zor bir iş değil.

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

Kolonlar kullanıcı tarafından ayarlanabilir, indirme hızını, dosya boyutunu yüzdesel olarak gösterimi gibi bir çok şekilde gösterim sağlayabilir.

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

Eğer siz de denemek isterseniz [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) koduna bakarak ve çalıştırarak indirme yapabilirsiniz.

</details>

<details>
<summary>Status</summary>

Eğer hesaplamanız gereken uzun işler varsa ve bunu progress bar ile gösteremiyorsanız yardımınıza [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) methodu yetişecektir.

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

Yukarıdaki kod parçacığı aşağıdaki gibi bir çıktı üretecektir.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

Spin animasyonu [cli-spinners](https://www.npmjs.com/package/cli-spinners) kütüphanesinden alınmıştır. `spinner` parametresi ile seçeceğiniz spin şekilini kullanabilirsiniz. 

```
python -m rich.spinner
```

Çıktısı aşağıdaki gibi bir sonuç üretecektir:

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Tree</summary>

Rich bir [tree](https://rich.readthedocs.io/en/latest/tree.html) yapısını yardımcı çizgiler ile bastırabilir. Bu yapı bir dosya yapısını göstermek için veya hiyerarşik veri yapılarını göstermek için kullanılabilir.

Label yapısı ise basit bir text veya Rich üzerinde bastırılabilen her hangi bir yapı olabilir.

```
python -m rich.tree
```

Kodun çıkartacağı görüntü şu olacaktır:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

[tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) örnek dosyası ile linux'da bulunan `tree` kodunu rich üzerinden simüle edebilirsiniz.

</details>

<details>
<summary>Columns</summary>

Rich içerikleri [kolon](https://rich.readthedocs.io/en/latest/columns.html) olarak eşit veya optimal aralıklarla gösterebilir.

Burada basit bir `ls` klonunu görüyorsunz.

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

Yukarıdaki yapıya [columns example](https://github.com/textualize/rich/blob/master/examples/columns.py) bağlantısı üzerinden ulaşabilirsiniz.

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich [markdown](https://rich.readthedocs.io/en/latest/markdown.html) stillerini ve çevirme işlemlerini de ekranda gösterebilir.

Sadece yapılması gereken `Markdown` sınıfını import edip, içeriğini doldurup ekrana bastırmak.

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

Aşağıdaki gibi bir çıktıya ulaşacağız.

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Syntax Highlighting</summary>

Rich içerisinde [syntax highlighting](https://rich.readthedocs.io/en/latest/syntax.html) için [pygments](https://pygments.org/) kütüphanesini kullanıyor. Tıpkı markdown'da olduğu gibi, bir tane `Syntax` objesi oluşturup bu objeyi terminale bastırıyoruz.
Örnek:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

Yukarıdaki kod parçası aşağıdaki gibi bir çıktı üretecektir.

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tracebacks</summary>

Rich sahip olduğu güzel [traceback](https://rich.readthedocs.io/en/latest/traceback.html)'ler yaratabilir. Böylece daha okunabilir ve daha kolay anlaşılabilen bir yapıya sahip olursunuz.

Burada OSX üzerinde (tıpkı Linux gibi) bir traceback çıktısı görüyorsunuz.

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

Tüm rich yapıları [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html) kullanılarak gerçekleştirilmiştir, siz de kendi içeriğinizi Rich'e aktarabilirsiniz.

# Rich CLI

Aynı zamanda [Rich CLI](https://github.com/textualize/rich-cli) uygulamasını da kontrol edin. Bu uygulama ile konsol çıktılarınızı renklendirebilir, kod çıktılarınıza syntax uygulayabilir, markdown gösterebilir, CSV dosyasını görüntüleyebilir ve daha bir çok şey yapabilirsiniz.


![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)

# Textual

Rich'in kardeş projesi olan [Textual](https://github.com/Textualize/textual)'a da bir göz atın. Textual ile konsol çıktılarınıza bir UI oluşturup, gruplayıp görselleştirebilirsiniz.

![Textual screenshot](https://raw.githubusercontent.com/Textualize/textual/main/imgs/textual.png)

# Rich kullanılan Projeler

[Rich Galeri](https://www.textualize.io/rich/gallery)si üzerinden, rich kullanılan son uygulamalara [Textualize.io](https://www.textualize.io) üzerinden göz atabiirsiniz.

Eğer siz de projenizi galeriye eklemek istiyorsanız [bu adımları](https://www.textualize.io/gallery-instructions) takip ederek ekleyebilirsiniz.

<!-- This is a test, no need to translate -->



================================================
FILE: README.zh-tw.md
================================================
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
  • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)
 • [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)

Rich 是一款提供終端機介面中 _豐富的_ 文字效果及精美的格式設定的 Python 函式庫。

[Rich API](https://rich.readthedocs.io/en/latest/) 讓終端機介面加上色彩及樣式變得易如反掌。Rich 也可以繪製漂亮的表格、進度條、Markdown、語法醒目標示的程式碼、Traceback（追溯）……。

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

關於 Rich 的介紹，請參見 [@fishnets88](https://twitter.com/fishnets88) 在 [calmcode.io](https://calmcode.io/rich/introduction.html) 錄製的影片。

[看看其他人對於 Rich 的討論](https://www.willmcgugan.com/blog/pages/post/rich-tweets/)。

## 相容性

Rich 可在 Linux、macOS、Windows 上運作。在新的 Windows Terminal 中可支援顯示全彩及 Emoji，但傳統的終端機中僅支援 16 色。Rich 最低需要的 Python 版本為 3.6.3。

Rich 可在 [Jupyter notebooks](https://jupyter.org/) 上使用，無須額外設定。

## 安裝

以 `pip` 或 PyPI 套件管理器安裝。

```sh
python -m pip install rich
```

以此命令測試 Rich 在終端機的輸出效果：

```sh
python -m rich
```

## Rich Print

匯入 [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) 方法就可以輕鬆地讓程式進行 rich 輸出，rich print 與 Python 內建的函式用法相似。試試：

```python
from rich import print

print("Hello, [bold magenta]World[/bold magenta]!", ":vampire:", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich 可以安裝在 Python REPL 中，如此一來就可以漂亮的輸出與突顯標示任何資料結構。

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## 使用 Console

匯入並建構 [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) 物件，以更全面地控制 rich 終端機內容。

```python
from rich.console import Console

console = Console()
```

Console 物件有個 `print` 方法，且刻意設計的與內建 `print` 函式相似。參考此範例：

```python
console.print("Hello", "World!")
```

如同預期的，這會將 `"Hello World!"` 印在終端機。須注意不同於內建的 `print` 函式，Rich 會自動將過長的文字換行，以符合終端機的寬度。

有幾種加上顏色及樣式的方式。您可以用 `style` 引數設定輸出內容的樣式，參考此範例：

```python
console.print("Hello", "World!", style="bold red")
```

輸出結果如下圖：

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

介紹完了如何對整行文字設定樣式，接著來看看更細部的使用。Rich 可以接受類似 [bbcode](https://en.wikipedia.org/wiki/BBCode) 的語法，對個別文字設定樣式。參考此範例：

```python
console.print("Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

您可以用 Console 物件不費吹灰之力地達成細膩的輸出效果。參閱 [Console API](https://rich.readthedocs.io/en/latest/console.html) 說明文件以了解細節。

## Rich Inspect

Rich 提供了 [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) 函式，可以對任何 Python 物件，如 class、instance 或 builtin ，為其產生一份報告。

```python
>>> my_list = ["foo", "bar"]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

參閱 [inspect 說明文件](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) 以了解細節。

# Rich 函式庫

Rich 包含了一系列可繪製的物件，您可以使用它們來印出精美的畫面，或者協助偵錯程式碼。

按一下子標題以了解細節：

<details>
<summary>Log</summary>

Console 物件提供了 `log()` 方法，使用方式與 `print()` 類似，但還多了一欄來顯示目前時間、進行呼叫的檔案及行號。預設情況下 Rich 會語法醒目標示 Python 的結構及 repr 字串。若使用於字典或串列這類集合性物件，Rich 會將其漂亮地印出來，以符合可用空間。此範例示範了這些功能。

```python
from rich.console import Console
console = Console()

test_data = [
    {"jsonrpc": "2.0", "method": "sum", "params": [None, 1, 2, 4, False, True], "id": "1",},
    {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
    {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
]

def test_log():
    enabled = False
    context = {
        "foo": "bar",
    }
    movies = ["Deadpool", "Rise of the Skywalker"]
    console.log("Hello from", console, "!")
    console.log(test_data, log_locals=True)


test_log()
```

上面的程式碼會產生下圖結果：

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

注意到 `log_locals` 引數，可用來輸出一張表格，用來顯示 log 方法被呼叫時，區域變數的內容。

log 方法可用於伺服器上長時間運作的程式，也很適合一般程式偵錯用途。

</details>
<details>
<summary>Logging Handler</summary>

您也可以使用內建的 [Handler 類別](https://rich.readthedocs.io/en/latest/logging.html) 來將 Python logging 模組的輸出內容格式化並賦予色彩：

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji</summary>

以一對冒號包住表情符號的名稱，來透過 console 插入 Emoji。參考範例：

```python
>>> console.print(":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:")
😃 🧛 💩 👍 🦝
```

請謹慎使用此功能。

</details>

<details>
<summary>表格</summary>

Rich 可以用 unicode box 字元繪製彈性的 [表格](https://rich.readthedocs.io/en/latest/tables.html)。格式設定十分多元，包含框線、樣式、儲存格對齊……。

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

上圖的動畫效果是以 [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) 產生的，該檔案位於 examples 資料夾。

參考這個簡單的表格範例：

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style="bold magenta")
table.add_column("Date", style="dim", width=12)
table.add_column("Title")
table.add_column("Production Budget", justify="right")
table.add_column("Box Office", justify="right")
table.add_row(
    "Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$275,000,000", "$375,126,118"
)
table.add_row(
    "May 25, 2018",
    "[red]Solo[/red]: A Star Wars Story",
    "$275,000,000",
    "$393,151,347",
)
table.add_row(
    "Dec 15, 2017",
    "Star Wars Ep. VIII: The Last Jedi",
    "$262,000,000",
    "[bold]$1,332,539,889[/bold]",
)

console.print(table)
```

執行結果如圖：

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

請留意，主控台標記的呈現方式與 `print()`、`log()` 相同。事實上，由 Rich 繪製的任何東西都可以被放在任何標題、列，甚至其他表格裡。

`Table` 類別很聰明，能夠自動調整欄寬來配合終端機的大小，也會在需要時自動將文字換行。此範例的程式碼與上一個相同，然而終端機變小了一點：

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>進度條</summary>

Rich 可繪製多個不閃爍的 [進度條](https://rich.readthedocs.io/en/latest/progress.html)，以追蹤需時較久的工作。

基本的使用方式，是將序列放在 `track` 函式中，再對其結果疊代。參考此範例：

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

新增多個進度條也不是難事，來看看說明文件中的範例：

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

您可以調整要顯示的狀態欄位。內建的欄位包含完成百分比、檔案大小、讀寫速度及剩餘時間。來看看另一個用來顯示下載進度的範例：

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

想嘗試看看嗎？您可以在 [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) 取得此範例程式。此程式可以在下載多個檔案時顯示各自的進度。

</details>

<details>
<summary>狀態</summary>

有些狀況下很難估計進度，就可以使用 [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) 方法，此方法會顯示「spinner」動畫及訊息。該動畫播放時，仍可正常操作主控台。參考此範例：

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")
```

終端機的顯示效果如下：

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

該 spinner 動畫乃借用自 [cli-spinners](https://www.npmjs.com/package/cli-spinners)。可以用 `spinner` 參數指定 spinner 樣式。執行此命令以顯示可用的值：

```
python -m rich.spinner
```

此命令在終端機的輸出結果如下圖：

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>樹</summary>

Rich 可以用導引線繪製一棵 [樹](https://rich.readthedocs.io/en/latest/tree.html)。樹很適合用來顯示檔案結構，或其他繼承性的資料。

可以用文字或其他 Rich 能繪製的元素作為樹的標籤。執行下列程式碼來看看效果：

```
python -m rich.tree
```

這會產生下圖的結果：

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

您可以參考 [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) 範例程式，此程式可以樹狀圖展示目錄結構，如同 Linux 的 `tree` 命令。

</details>

<details>
<summary>資料欄</summary>

Rich 可以將內容呈現於整齊的 [資料欄](https://rich.readthedocs.io/en/latest/columns.html) 中，其欄寬可為等寬或最適寬度。此範例仿作了 macOS / Linux 系統中 `ls` 命令的基本功能，可以用資料欄列出目錄：

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

此螢幕截圖為 [資料欄範例](https://github.com/textualize/rich/blob/master/examples/columns.py) 的輸出結果。此程式從某 API 取得資料，並以資料欄呈現：

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich 可以繪製 [Markdown](https://rich.readthedocs.io/en/latest/markdown.html) 並處理了將其轉換為終端機格式的大量工作。

先匯入 `Markdown` 類別，再以內容為 Markdown 語言的字串建構一個物件，接著將其印到 console。參考此範例：

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open("README.md") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

執行結果如下圖：

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>語法醒目標示</summary>

Rich 使用了 [pygments](https://pygments.org/) 函式庫來實作 [語法醒目標示](https://rich.readthedocs.io/en/latest/syntax.html) 功能。使用方式與繪製 Markdown 相似，先建構 `Syntax` 物件並將其印到 console。參考此範例：

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, "python", theme="monokai", line_numbers=True)
console = Console()
console.print(syntax)
```

執行結果如下圖：

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tracebacks（追溯）</summary>

Rich 可以繪製 [漂亮的 tracebacks](https://rich.readthedocs.io/en/latest/traceback.html)，相較標準的 Python traceback 顯示了更多程式碼且更好懂。您可以將 Rich 設為預設的 traceback handler（處理常式），如此一來所有未接住的例外都由 Rich 呈現。

它在 macOS 上執行的效果如圖（Linux 上差異不大）：

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

所有可由 Rich 繪製的物件都用到了 [Console 協定](https://rich.readthedocs.io/en/latest/protocol.html)，您也可以依此實作自訂的 Rich 內容。

# Rich 企業版

可在 Tidelift 訂閱方案取得。

Rich 及其他數以千計的套件維護者正與 Tidelift 合作，以提供開放原始碼套件的商業性支援。此計畫能協助您節省時間、避開風險，同時也讓套件的維護者獲得報酬。[了解更多。](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

# 使用 Rich 的專案

以下列出幾個使用 Rich 的專案：

- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)
  a python package for the visualization of three dimensional neuro-anatomical data
- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)
  Automated decryption tool
- [emeryberger/scalene](https://github.com/emeryberger/scalene)
  a high-performance, high-precision CPU and memory profiler for Python
- [hedythedev/StarCli](https://github.com/hedythedev/starcli)
  Browse GitHub trending projects from your command line
- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)
  This tool scans for a number of common, vulnerable components (openssl, libpng, libxml2, expat and a few others) to let you know if your system includes common libraries with known vulnerabilities.
- [nf-core/tools](https://github.com/nf-core/tools)
  Python package with helper tools for the nf-core community.
- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)
  pdb + Rich library for enhanced debugging
- [plant99/felicette](https://github.com/plant99/felicette)
  Satellite imagery for dummies.
- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)
  Automate & test 10x faster with Selenium & pytest. Batteries included.
- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)
  Automagically synchronize subtitles with video.
- [tryolabs/norfair](https://github.com/tryolabs/norfair)
  Lightweight Python library for adding real-time 2D object tracking to any detector.
- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint checks playbooks for practices and behaviour that could potentially be improved
- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule testing framework
- +[Many more](https://github.com/textualize/rich/network/dependents)!

<!-- This is a test, no need to translate -->



================================================
FILE: asv.conf.json
================================================
{
  "version": 1,
  "project": "rich",
  "project_url": "https://github.com/Textualize/rich",
  "repo": ".",
  "repo_subdir": "",
  "install_command": [
    "in-dir={env_dir} python -mpip install {wheel_file}"
  ],
  "uninstall_command": [
    "return-code=any python -mpip uninstall -y {project}"
  ],
  "build_command": [
    "pip install poetry",
    "python setup.py build",
    "PIP_NO_BUILD_ISOLATION=false python -mpip wheel --no-deps --no-index -w {build_cache_dir} {build_dir}"
  ],
  "branches": [
    "master"
  ],
  "html_dir": "./benchmarks/html",
  "results_dir": "./benchmarks/results",
  "env_dir": "./benchmarks/env",
  "dvcs": "git",
  "environment_type": "virtualenv",
  "install_timeout": 180,
  "show_commit_url": "http://github.com/Textualize/rich/commit/",
  "pythons": [
    "3.10"
  ],
  "matrix": {
    "setuptools": ["59.2.0"]
  }
}



================================================
FILE: asvhashfile
================================================
v10.0.0
v10.2.2
v10.6.0
v10.7.0
v10.8.0
v10.9.0
v11.0.0
v11.1.0
v11.2.0
v12.0.0
v12.0.1
v12.1.0
v12.2.0
v12.3.0
v12.4.0
v12.4.1
v12.4.2
v12.4.3
v12.4.4
v12.5.0
v8.0.0
v9.13.0
v9.5.1



================================================
FILE: CHANGELOG.md
================================================
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).


## [14.1.0] - 2025-06-25

### Changed

- Removed `typing_extensions` from runtime dependencies https://github.com/Textualize/rich/pull/3763
- Live objects (including Progress) may now be nested https://github.com/Textualize/rich/pull/3768
- Added padding property to Syntax which returns a tuple of four integers https://github.com/Textualize/rich/pull/3782

### Fixed

- Fixed extraction of recursive exceptions https://github.com/Textualize/rich/pull/3772
- Fixed padding applied to Syntax https://github.com/Textualize/rich/pull/3782
- Fixed `Panel` title missing the panel background style https://github.com/Textualize/rich/issues/3569

### Added

- Added `TTY_INTERACTIVE` environment variable to force interactive mode off or on https://github.com/Textualize/rich/pull/3777

## [14.0.0] - 2025-03-30

### Added

- Added env var `TTY_COMPATIBLE` to override auto-detection of TTY support (See console.rst for details). https://github.com/Textualize/rich/pull/3675

### Changed

- An empty `NO_COLOR` env var is now considered disabled. https://github.com/Textualize/rich/pull/3675
- An empty `FORCE_COLOR` env var is now considered disabled. https://github.com/Textualize/rich/pull/3675
- Rich tracebacks will now render notes on Python 3.11 onwards (added with `Exception.add_note`) https://github.com/Textualize/rich/pull/3676
- Indentation in exceptions won't be underlined https://github.com/Textualize/rich/pull/3678
- Rich tracebacks will now render Exception Groups https://github.com/Textualize/rich/pull/3677

## [13.9.4] - 2024-11-01

### Changed

- Optimizations to cell_len which may speed up Rich / Textual output https://github.com/Textualize/rich/pull/3546

## [13.9.3] - 2024-10-22

### Fixed

- Fixed broken regex that may have resulted in poor performance. https://github.com/Textualize/rich/pull/3535

## [13.9.2] - 2024-10-04

### Fixed

- Fixed `Table` columns not highlighting when added by `add_row` https://github.com/Textualize/rich/issues/3517
- Fixed an issue with Segment.split_cells reported in Textual https://github.com/Textualize/textual/issues/5090

## [13.9.1] - 2024-10-01

### Fixed

- Fixed typing_extensions dependency

## [13.9.0] - 2024-10-01

### Changed

- Dropped support for Python3.7 https://github.com/Textualize/rich/pull/3509
- Rich will display tracebacks with finely grained error locations on python 3.11+ https://github.com/Textualize/rich/pull/3486

### Fixed

- Fixed issue with Segment._split_cells https://github.com/Textualize/rich/pull/3506
- Fix auto detection of terminal size on Windows https://github.com/Textualize/rich/pull/2916
- `Text.style` now respected in Panel title/subtitle https://github.com/Textualize/rich/pull/3509

## [13.8.1] - 2024-09-10

### Fixed

- Added support for Python 3.13 https://github.com/Textualize/rich/pull/3481
- Fixed infinite loop when appending Text to same instance https://github.com/Textualize/rich/pull/3480

## [13.8.0] - 2024-08-26

### Fixed

- Fixed `Table` rendering of box elements so "footer" elements truly appear at bottom of table, "mid" elements in main table body.
- Fixed styles in Panel when Text objects are used for title https://github.com/Textualize/rich/pull/3401
- Fix pretty repr for `collections.deque` https://github.com/Textualize/rich/pull/2864
- Thread used in progress.track will exit if an exception occurs in a generator https://github.com/Textualize/rich/pull/3402
- Progress track thread is now a daemon thread https://github.com/Textualize/rich/pull/3402
- Fixed cached hash preservation upon clearing meta and links https://github.com/Textualize/rich/issues/2942
- Fixed overriding the `background_color` of `Syntax` not including padding https://github.com/Textualize/rich/issues/3295
- Fixed pretty printing of dataclasses with a default repr in Python 3.13 https://github.com/Textualize/rich/pull/3455
- Fixed selective enabling of highlighting when disabled in the `Console` https://github.com/Textualize/rich/issues/3419
- Fixed BrokenPipeError writing an error message https://github.com/Textualize/rich/pull/3468
- Fixed superfluous space above Markdown tables https://github.com/Textualize/rich/pull/3469
- Fixed issue with record and capture interaction https://github.com/Textualize/rich/pull/3470
- Fixed control codes breaking in `append_tokens` https://github.com/Textualize/rich/pull/3471
- Fixed exception pretty printing a dataclass with missing fields https://github.com/Textualize/rich/pull/3472

### Changed

- `RichHandler` errors and warnings will now use different colors (red and yellow) https://github.com/Textualize/rich/issues/2825
- Removed the empty line printed in jupyter while using `Progress` https://github.com/Textualize/rich/pull/2616
- Running tests in environment with `FORCE_COLOR` or `NO_COLOR` environment variables
- ansi decoder will now strip problematic private escape sequences (like `\x1b7`) https://github.com/Textualize/rich/pull/3278/
- Tree's ASCII_GUIDES and TREE_GUIDES constants promoted to class attributes
- `rich.Text.highlight_regex` now accepts a regular expression object https://github.com/Textualize/rich/pull/3347

### Added

- Adds a `case_sensitive` parameter to `prompt.Prompt`. This determines if the
  response is treated as case-sensitive. Defaults to `True`.
- Added `Console.on_broken_pipe` https://github.com/Textualize/rich/pull/3468

## [13.7.1] - 2024-02-28


### Fixed

- Updated the widths of some characters https://github.com/Textualize/rich/pull/3289

### Added

- Included a `name` attribute to the `Spinner` class https://github.com/Textualize/rich/pull/3359

## [13.7.0] - 2023-11-15

### Added

- Adds missing parameters to Panel.fit https://github.com/Textualize/rich/issues/3142

### Fixed

- Some text goes missing during wrapping when it contains double width characters https://github.com/Textualize/rich/issues/3176
- Ensure font is correctly inherited in exported HTML https://github.com/Textualize/rich/issues/3104
- Fixed typing for `FloatPrompt`.

## [13.6.0] - 2023-09-30

### Added

- Added Python 3.12 to classifiers.

## [13.5.3] - 2023-09-17

### Fixed

- Markdown table rendering issue with inline styles and links https://github.com/Textualize/rich/issues/3115
- Fix Markdown code blocks on a light background https://github.com/Textualize/rich/issues/3123

## [13.5.2] - 2023-08-01

### Fixed

- Fixed Text.expand_tabs assertion error

## [13.5.1] - 2023-07-31

### Fixed

- Fix tilde character (`~`) not included in link regex when printing to console https://github.com/Textualize/rich/issues/3057

## [13.5.0] - 2023-07-29

### Fixed

- Fixed Text.expand_tabs not expanding spans.
- Fixed TimeElapsedColumn from showing negative.
- Fix for escaping strings with a trailing backslash https://github.com/Textualize/rich/issues/2987
- Fixed exception in Markdown with partial table https://github.com/Textualize/rich/issues/3053
- Fixed the HTML export template so that the `<html>` tag comes before the `<head>` tag https://github.com/Textualize/rich/issues/3021
- Fixed issue with custom classes overwriting `__eq__` https://github.com/Textualize/rich/issues/2875
- Fix rich.pretty.install breakage in iPython https://github.com/Textualize/rich/issues/3013

### Added

- Added Text.extend_style method.
- Added Span.extend method.

### Changed

- Text.tab_size now defaults to `None` to indicate that Console.tab_size should be used.

## [13.4.2] - 2023-06-12

### Changed

- Relaxed markdown-it-py dependency

## [13.4.1] - 2023-05-31

### Fixed

- Fixed typing extensions import in markdown https://github.com/Textualize/rich/issues/2979

## [13.4.0] - 2023-05-31

### Added

- Added support for tables in `Markdown` https://github.com/Textualize/rich/pull/2977

## [13.3.5] - 2023-04-27

### Fixed

- Fixed italic indent guides in SVG output

## [13.3.4] - 2023-04-12

### Fixed

- Fixed for `is_terminal` ignoring FORCE_COLOR https://github.com/Textualize/rich/pull/2923

## [13.3.3] - 2023-02-27

### Added

- Added Style.clear_meta_and_links

## [13.3.2] - 2023-02-04

### Fixed

- Reversed `pre` and `code` tags in base HTML format https://github.com/Textualize/rich/pull/2642
- Fix syntax error when building with nuitka https://github.com/Textualize/rich/pull/2635
- Fixed pretty printing of empty dataclass https://github.com/Textualize/rich/issues/2819
- Use `Console(stderr=True)` in `rich.traceback.install` to support io redirection.
- Fixes superfluous spaces in html output https://github.com/Textualize/rich/issues/2832
- Fixed duplicate output in Jupyter https://github.com/Textualize/rich/pulls/2804
- Filter ANSI character-encoding-change codes in `Text.from_ansi` parser
- Fixes traceback failing when a frame filename is unreadable https://github.com/Textualize/rich/issues/2821
- Fix for live update rendering console markup https://github.com/Textualize/rich/issues/2726

### Added

- Added Polish README


### Changed

- `rich.progress.track()` will now show the elapsed time after finishing the task https://github.com/Textualize/rich/pull/2659

## [13.3.1] - 2023-01-28

### Fixed

- Fixed truecolor to eight bit color conversion https://github.com/Textualize/rich/pull/2785

## [13.3.0] - 2023-01-27

### Fixed

- Fixed failing tests due to Pygments dependency https://github.com/Textualize/rich/issues/2757
- Relaxed ipywidgets https://github.com/Textualize/rich/issues/2767

### Added

- Added `encoding` parameter in `Theme.read`


## [13.2.0] - 2023-01-19

### Changed

- Switch Markdown parsing from commonmark to markdown-it-py https://github.com/Textualize/rich/pull/2439

## [13.1.0] - 2023-01-14

### Fixed

- Fixed wrong filenames in Jupyter tracebacks https://github.com/Textualize/rich/issues/2271

### Added

- Added locals_hide_dunder and locals_hide_sunder to Tracebacks, to hide double underscore and single underscore locals. https://github.com/Textualize/rich/pull/2754

### Changed

- Tracebacks will now hide double underscore names from locals by default. Set `locals_hide_dunder=False` to restore previous behaviour.

## [13.0.1] - 2023-01-06

### Fixed

- Fixed issue with Segment.split_cells for mixed single and double cell widths

## [13.0.0] - 2022-12-30

### Fixed

- Reversed `pre` and `code` tags in base HTML format https://github.com/Textualize/rich/pull/2642
- Improved detection of `attrs` library, that isn't confused by the presence of the `attr` library.
- Fixed issue with `locals_max_length` parameter not being respected in Traceback https://github.com/Textualize/rich/issues/2649
- Handling of broken `fileno` made more robust. Fixes https://github.com/Textualize/rich/issues/2645
- Fixed missing `fileno` on FileProxy

### Fixed

- Fix type of `spinner_style` argument in `Console.status` https://github.com/Textualize/rich/pull/2613.

### Changed

- Bumped minimum Python version to 3.7 https://github.com/Textualize/rich/pull/2567
- Pretty-printing of "tagged" `__repr__` results is now greedy when matching tags https://github.com/Textualize/rich/pull/2565
- `progress.track` now supports deriving total from `__length_hint__`

### Added

- Add type annotation for key_separator of pretty.Node https://github.com/Textualize/rich/issues/2625


## [12.6.0] - 2022-10-02

### Added

- Parse ANSI escape sequences in pretty repr https://github.com/Textualize/rich/pull/2470
- Add support for `FORCE_COLOR` env var https://github.com/Textualize/rich/pull/2449
- Allow a `max_depth` argument to be passed to the `install()` hook https://github.com/Textualize/rich/issues/2486
- Document using `None` as name in `__rich_repr__` for tuple positional args https://github.com/Textualize/rich/pull/2379
- Add `font_aspect_ratio` parameter in SVG export https://github.com/Textualize/rich/pull/2539/files
- Added `Table.add_section` method. https://github.com/Textualize/rich/pull/2544

### Fixed

- Handle stdout/stderr being null https://github.com/Textualize/rich/pull/2513
- Fix NO_COLOR support on legacy Windows https://github.com/Textualize/rich/pull/2458
- Fix pretty printer handling of cyclic references https://github.com/Textualize/rich/pull/2524
- Fix missing `mode` property on file wrapper breaking uploads via `requests` https://github.com/Textualize/rich/pull/2495
- Fix mismatching default value of parameter `ensure_ascii` https://github.com/Textualize/rich/pull/2538
- Remove unused height parameter in `Layout` class https://github.com/Textualize/rich/pull/2540
- Fixed exception in Syntax.__rich_measure__ for empty files

### Changed

- Removed border from code blocks in Markdown

## [12.5.2] - 2022-07-18

### Added

- Add Turkish Readme.

## [12.5.1] - 2022-07-11

### Fixed

- Fixed missing typing extensions dependency on 3.9 https://github.com/Textualize/rich/issues/2386
- Fixed Databricks Notebook is not detected as Jupyter environment. https://github.com/Textualize/rich/issues/2422

## [12.5.0] - 2022-07-11

### Added

- Environment variables `JUPYTER_COLUMNS` and `JUPYTER_LINES` to control width and height of console in Jupyter
- Markdown friendly `Box` style, `MARKDOWN`, for rendering tables ready to copy into markdown files
- `inspect` will prefix coroutine functions with `async def`
- `Style.__add__` will no longer return `NotImplemented`
- Remove rich.\_lru_cache

### Changed

- Default width of Jupyter console size is increased to 115
- Optimized Segment.divide

### Fixed

- Fix Rich clobbering cursor style on Windows https://github.com/Textualize/rich/pull/2339
- Fix text wrapping edge case https://github.com/Textualize/rich/pull/2296
- Allow exceptions that are raised while a Live is rendered to be displayed and/or processed https://github.com/Textualize/rich/pull/2305
- Fix crashes that can happen with `inspect` when docstrings contain some special control codes https://github.com/Textualize/rich/pull/2294
- Fix edges used in first row of tables when `show_header=False` https://github.com/Textualize/rich/pull/2330
- Fix interaction between `Capture` contexts and `Console(record=True)` https://github.com/Textualize/rich/pull/2343
- Fixed hash issue in Styles class https://github.com/Textualize/rich/pull/2346
- Fixed bug in `Segment.split_and_crop_lines`

## [12.4.4] - 2022-05-24

### Changed

- Added clipping per line to SVG output to avoid box characters overlapping
- Optimized SVG output

## [12.4.3] - 2022-05-23

### Changed

- Further tweaks to SVG character matrix
- Added clip rect to SVG to prevent box characters overlapping bottom of terminal

## [12.4.2] - 2022-05-23

### Fixed

- Fix for SVG on Firefox

### Changed

- Removed excess margin from SVG, tweaked cell sizes to better render block characters

## [12.4.1] - 2022-05-08

### Fixed

- Fix for default background color in SVG export https://github.com/Textualize/rich/issues/2260

### Changed

- Added a keyline around SVG terminals which is visible on dark backgrounds

### Changed

- Added a keyline around SVG terminals which is visible on dark backgrounds

## [12.4.0] - 2022-05-07

### Changed

- Rebuilt SVG export to create a simpler SVG that is more portable
- Fix render_lines crash when render height was negative https://github.com/Textualize/rich/pull/2246
- Make objects from `rich.progress.open` forward the name of the internal handle https://github.com/Textualize/rich/pull/2254

### Added

- Add `padding` to Syntax constructor https://github.com/Textualize/rich/pull/2247

## [12.3.0] - 2022-04-26

### Added

- Ability to change terminal window title https://github.com/Textualize/rich/pull/2200
- Added show_speed parameter to progress.track which will show the speed when the total is not known
- Python blocks can now opt out from being rendered in tracebacks's frames, by setting a `_rich_traceback_omit = True` in their local scope https://github.com/Textualize/rich/issues/2207

### Fixed

- Fall back to `sys.__stderr__` on POSIX systems when trying to get the terminal size (fix issues when Rich is piped to another process)
- Fixed markup escaping issue https://github.com/Textualize/rich/issues/2187
- Safari - Box appearing around SVG export https://github.com/Textualize/rich/pull/2201
- Fixed recursion error in Jupyter progress bars https://github.com/Textualize/rich/issues/2047
- Complex numbers are now identified by the highlighter https://github.com/Textualize/rich/issues/2214
- Fix crash on IDLE and forced is_terminal detection to False because IDLE can't do escape codes https://github.com/Textualize/rich/issues/2222
- Fixed missing blank line in traceback rendering https://github.com/Textualize/rich/issues/2206
- Fixed running Rich with the current working dir was deleted https://github.com/Textualize/rich/issues/2197

### Changed

- Setting `total=None` on progress is now possible, and will display pulsing animation
- Micro-optimization for Segment.divide

## [12.2.0] - 2022-04-05

### Changed

- Bumped typing-extensions minimum to 4.0.0
- Bumped minimum Python version to 3.6.3

## [12.1.0] - 2022-04-03

### Added

- Progress.open and Progress.wrap_file method to track the progress while reading from a file or file-like object https://github.com/textualize/rich/pull/1759
- SVG export functionality https://github.com/Textualize/rich/pull/2101
- Adding Indonesian translation

### Fixed

- Add missing `end` keyword argument to `Text.from_markup` https://github.com/Textualize/rich/pull/2095
- Fallback to text lexer when no lexer guessed https://github.com/Textualize/rich/pull/2133
- Fixed issue with decoding ANSI reset https://github.com/Textualize/rich/issues/2112

## [12.0.1] - 2022-03-22

### Changed

- Improve performance of cell_length https://github.com/Textualize/rich/pull/2061
- Improve performance of chop_cells https://github.com/Textualize/rich/pull/2077

### Fixed

- Fix capturing stdout on legacy Windows https://github.com/Textualize/rich/pull/2066

## [12.0.0] - 2022-03-10

### Added

- Added options to TimeRemainingColumn to render a compact time format and render elapsed time when a task is
  finished. https://github.com/Textualize/rich/pull/1992
- Added ProgressColumn `MofNCompleteColumn` to display raw `completed/total` column (similar to DownloadColumn,
  but displays values as ints, does not convert to floats or add bit/bytes units).
  https://github.com/Textualize/rich/pull/1941
- Replace Colorama with win32 renderer https://github.com/Textualize/rich/pull/1993
- Add support for namedtuples to `Pretty` https://github.com/Textualize/rich/pull/2031

### Fixed

- In Jupyter mode make the link target be set to "\_blank"
- Fix some issues with markup handling around "[" characters https://github.com/Textualize/rich/pull/1950
- Fix syntax lexer guessing.
- Fixed Pretty measure not respecting expand_all https://github.com/Textualize/rich/issues/1998
- Collapsed definitions for single-character spinners, to save memory and reduce import time.
- Fix print_json indent type in `__init__.py`
- Fix error when inspecting object defined in REPL https://github.com/Textualize/rich/pull/2037
- Fix incorrect highlighting of non-indented JSON https://github.com/Textualize/rich/pull/2038
- Fixed height reset in complex renderables https://github.com/Textualize/rich/issues/2042

### Changed

- Improved support for enum.Flag in ReprHighlighter https://github.com/Textualize/rich/pull/1920
- Tree now respects justify=None, i.e. won't pad to right https://github.com/Textualize/rich/issues/1690
- Removed rich.tabulate which was marked for deprecation
- Deprecated rich.align.AlignValues in favor of AlignMethod

## [11.2.0] - 2022-02-08

### Added

- Add support for US spelling of "gray" in ANSI color names https://github.com/Textualize/rich/issues/1890
- Added `rich.diagnose.report` to expose environment debugging logic as function https://github.com/Textualize/rich/pull/1917
- Added classmethod `Progress.get_default_columns()` to get the default list of progress bar columns https://github.com/Textualize/rich/pull/1894

### Fixed

- Fixed performance issue in measuring text

### Fixed

- Fixed test failures on PyPy3 https://github.com/Textualize/rich/pull/1904

## [11.1.0] - 2022-01-28

### Added

- Workaround for edge case of object from Faiss with no `__class__` https://github.com/Textualize/rich/issues/1838
- Add Traditional Chinese readme
- Add `Syntax.guess_lexer`, add support for more lexers (e.g. Django templates etc.) https://github.com/Textualize/rich/pull/1869
- Add `lexer` parameter to `Syntax.from_path` to allow for overrides https://github.com/Textualize/rich/pull/1873

### Fixed

- Workaround for edge case of object from Faiss with no `__class__` https://github.com/Textualize/rich/issues/1838
- Ensure `Syntax` always justifies left https://github.com/Textualize/rich/pull/1872
- Handle classes in inspect when methods=True https://github.com/Textualize/rich/pull/1874

## [11.0.0] - 2022-01-09

### Added

- Added max_depth arg to pretty printing https://github.com/Textualize/rich/issues/1585
- Added `vertical_align` to Table.add_row https://github.com/Textualize/rich/issues/1590

### Fixed

- Fixed issue with pretty repr in jupyter notebook https://github.com/Textualize/rich/issues/1717
- Fix Traceback theme defaults override user supplied styles https://github.com/Textualize/rich/issues/1786

### Changed

- **breaking** Deprecated rich.console.RenderGroup, now named rich.console.Group
- **breaking** `Syntax.__init__` parameter `lexer_name` renamed to `lexer`
- Syntax constructor accepts both str and now a pygments lexer https://github.com/Textualize/rich/pull/1748

## [10.16.2] - 2021-01-02

### Fixed

- Fixed @ not being escaped in markup

## [10.16.1] - 2021-12-15

### Fixed

- Fixed issues with overlapping tags https://github.com/textualize/rich/issues/1755

## [10.16.0] - 2021-12-12

### Fixed

- Double print of progress bar in Jupyter https://github.com/textualize/rich/issues/1737

### Added

- Added Text.markup property https://github.com/textualize/rich/issues/1751

## [10.15.2] - 2021-12-02

### Fixed

- Deadlock issue https://github.com/textualize/rich/issues/1734

## [10.15.1] - 2021-11-29

### Fixed

- Reverted thread-safety fix for Live that introduced deadlock potential

## [10.15.0] - 2021-11-28

### Added

- Added dynamic_progress.py to examples
- Added ConsoleOptions.update_height
- Fixed Padding not respecting height

### Changed

- Some optimizations for simple strings (with only single cell widths)

### Fixed

- Fixed issue with progress bar not rendering markup https://github.com/textualize/rich/issues/1721
- Fixed race condition when exiting Live https://github.com/textualize/rich/issues/1530

## [10.14.0] - 2021-11-16

### Fixed

- Fixed progress speed not updating when total doesn't change
- Fixed superfluous new line in Status https://github.com/textualize/rich/issues/1662
- Fixed Windows legacy width again
- Fixed infinite loop in set_cell_size https://github.com/textualize/rich/issues/1682

### Added

- Added file protocol to URL highlighter https://github.com/textualize/rich/issues/1681
- Added rich.protocol.rich_cast

### Changed

- Allowed `__rich__` to work recursively
- Allowed Text classes to work with sep in print https://github.com/textualize/rich/issues/1689

### Added

- Added a `rich.text.Text.from_ansi` helper method for handling pre-formatted input strings https://github.com/textualize/rich/issues/1670

## [10.13.0] - 2021-11-07

### Added

- Added json.dumps parameters to print_json https://github.com/textualize/rich/issues/1638

### Fixed

- Fixed an edge case bug when console module try to detect if they are in a tty at the end of a pytest run
- Fixed a bug where logging handler raises an exception when running with pythonw (related to https://bugs.python.org/issue13807)
- Fixed issue with TERM env vars that have more than one hyphen https://github.com/textualize/rich/issues/1640
- Fixed missing new line after progress bar when terminal is not interactive https://github.com/textualize/rich/issues/1606
- Fixed exception in IPython when disabling pprint with %pprint https://github.com/textualize/rich/issues/1646
- Fixed issue where values longer than the console width produced invalid JSON https://github.com/textualize/rich/issues/1653
- Fixes trailing comma when pretty printing dataclass with last field repr=False https://github.com/textualize/rich/issues/1599

## Changed

- Markdown codeblocks now word-wrap https://github.com/textualize/rich/issues/1515

## [10.12.0] - 2021-10-06

### Updated

- Official Py3.10 release

### Fixed

- Fixed detection of custom repr when pretty printing dataclasses

## [10.11.0] - 2021-09-24

### Added

- Added `suppress` parameter to tracebacks
- Added `max_frames` parameter to tracebacks

## [10.10.0] - 2021-09-18

### Added

- Added stdin support to `rich.json`

### Fixed

- Fixed pretty printing of objects with fo magic with **getattr** https://github.com/textualize/rich/issues/1492

## [10.9.0] - 2021-08-29

### Added

- Added data parameter to print_json method / function
- Added an --indent parameter to python -m rich.json

### Changed

- Changed default indent of JSON to 2 (down from 4)
- Changed highlighting of JSON keys to new style (bold blue)

## [10.8.0] - 2021-08-28

### Added

- Added Panel.subtitle
- Added Panel.subtitle_align
- Added rich.json.JSON
- Added rich.print_json and Console.print_json

### Fixed

- Fixed a bug where calling `rich.reconfigure` within a `pytest_configure` hook would lead to a crash
- Fixed highlight not being passed through options https://github.com/textualize/rich/issues/1404

## [10.7.0] - 2021-08-05

### Added

- Added Text.apply_meta
- Added meta argument to Text.assemble
- Added Style.from_meta
- Added Style.on
- Added Text.on

### Changed

- Changed `RenderGroup` to `Group` and `render_group` to `group` (old names remain for compatibility but will be deprecated in the future)
- Changed `rich.repr.RichReprResult` to `rich.repr.Result` (old names remain for compatibility but will be deprecated in the future)
- Changed meta serialization to use pickle rather than marshal to permit callables

## [10.6.0] - 2021-07-12

### Deprecated

- Added deprecation warning for tabulate_mapping which will be removed in v11.0.0

### Added

- Added precision argument to filesize.decimal
- Added separator argument to filesize.decimal
- Added \_rich_traceback_guard to Traceback
- Added emoji_variant to Console
- Added -emoji and -text variant selectors to emoji code

### Fixed

- Fixed issue with adjoining color tags https://github.com/textualize/rich/issues/1334

### Changed

- Changed Console.size to use unproxied stdin and stdout

## [10.5.0] - 2021-07-05

### Fixed

- Fixed Pandas objects not pretty printing https://github.com/textualize/rich/issues/1305
- Fixed https://github.com/textualize/rich/issues/1256
- Fixed typing with rich.repr.auto decorator
- Fixed repr error formatting https://github.com/textualize/rich/issues/1326

### Added

- Added new_line_start argument to Console.print
- Added Segment.divide method
- Added Segment.split_cells method
- Added segment.SegmentLines class

## [10.4.0] - 2021-06-18

### Added

- Added Style.meta
- Added rich.repr.auto decorator

### Fixed

- Fixed error pretty printing classes with special **rich_repr** method

## [10.3.0] - 2021-06-09

### Added

- Added Console.size setter
- Added Console.width setter
- Added Console.height setter
- Added angular style Rich reprs
- Added an IPython extension. Load via `%load_ext rich`

### Changed

- Changed the logic for retrieving the calling frame in console logs to a faster one for the Python implementations that support it.

## [10.2.2] - 2021-05-19

### Fixed

- Fixed status not rendering console markup https://github.com/textualize/rich/issues/1244

## [10.2.1] - 2021-05-17

### Fixed

- Fixed panel in Markdown exploding https://github.com/textualize/rich/issues/1234

## [10.2.0] - 2021-05-12

### Added

- Added syntax for call, i.e. "Foo(bar)"
- Added Console.measure as a convenient alias for Measurement.get
- Added support for pretty printing attrs objects
- Added mappingproxy to pretty print
- Added UserDict and UserList support to pretty printer

### Changed

- Changed colorama init to set strip=False
- Changed highlighter for False, True, None to not match in the middle of a word. i.e. NoneType is no longer highlighted as None

### Fixed

- Fixed initial blank lines removed from Syntax https://github.com/textualize/rich/issues/1214

## [10.1.0] - 2021-04-03

### Fixed

- Fixed support for jupyter qtconsole and similar Jupyter environments

## [10.0.1] - 2021-03-30

### Fixed

- Fixed race condition that duplicated lines in progress https://github.com/textualize/rich/issues/1144

## [10.0.0] - 2021-03-27

### Changed

- Made pydoc import lazy as at least one use found it slow to import https://github.com/textualize/rich/issues/1104
- Modified string highlighting to not match in the middle of a word, so that apostrophes are not considered strings
- New way of encoding control codes in Segment
- New signature for Control class
- Changed Layout.split to use new Splitter class
- Improved layout.tree
- Changed default theme color for repr.number to cyan
- `__rich_measure__` signature changed to accept ConsoleOptions rather than max_width
- `text` parameter to rich.spinner.Spinner changed to RenderableType

### Added

- Added `__rich_repr__` protocol method to Pretty
- Added rich.region.Region
- Added ConsoleOptions.update_dimensions
- Added rich.console.ScreenUpdate
- Added Console.is_alt_screen
- Added Control.segment, Control.bell, Control.home, Control.move_to, Control.clear, Control.show_cursor, Control.alt_screen
- Added Console.update_screen and Console.update_screen_lines
- Added Layout.add_split, Layout.split_column, Layout.split_row, layout.refresh
- Added new Rich repr protocol `__rich_repr__`

### Fixed

- Fixed table style taking precedence over row style https://github.com/textualize/rich/issues/1129
- Fixed incorrect measurement of Text with new lines and whitespace https://github.com/textualize/rich/issues/1133
- Made type annotations consistent for various `total` keyword arguments in `rich.progress` and rich.`progress_bar`
- Disabled Progress no longer displays itself when starting https://github.com/textualize/rich/pull/1125
- Animations no longer reset when updating rich.status.Status

## [9.13.0] - 2021-03-06

### Added

- Pretty printer now supports dataclasses

### Fixed

- Fixed Syntax background https://github.com/textualize/rich/issues/1088
- Fix for double tracebacks when no formatter https://github.com/textualize/rich/issues/1079

### Changed

- Added ws and wss to url highlighter

## [9.12.4] - 2021-03-01

### Fixed

- Fixed custom formatters with rich tracebacks in RichHandler https://github.com/textualize/rich/issues/1079

### Changed

- Allow highly compressed table cells to go to 0 width
- Optimization to remove empty styles in various places

## [9.12.3] - 2021-02-28

### Changed

- Optimized Padding

## [9.12.2] - 2021-02-27

### Added

- Added ConsoleOptions.copy

### Changed

- Optimized ConsoleOptions.update

## [9.12.1] - 2021-02-27

### Fixed

- Fixed deadlock in Progress https://github.com/textualize/rich/issues/1061

### Added

- Added Task.finished_speed

### Changed

- Froze TransferSpeedColumn speed when task is finished
- Added SIGINT handler to downloader.py example
- Optimization for large tables

## [9.12.0] - 2021-02-24

### Fixed

- Fixed issue with Syntax and missing lines in Layout https://github.com/textualize/rich/issues/1050
- Fixed issue with nested markdown elements https://github.com/textualize/rich/issues/1036
- Fixed new lines not invoking render hooks https://github.com/textualize/rich/issues/1052
- Fixed Align setting height to child https://github.com/textualize/rich/issues/1057

### Changed

- Printing a table with no columns now result in a blank line https://github.com/textualize/rich/issues/1044

### Added

- Added height to Panel

## [9.11.1] - 2021-02-20

### Fixed

- Fixed table with expand=False not expanding when justify="center"
- Fixed single renderable in Layout not respecting height
- Fixed COLUMNS and LINES env var https://github.com/textualize/rich/issues/1019
- Layout now respects minimum_size when fixes sizes are greater than available space
- HTML export now changes link underline score to match terminal https://github.com/textualize/rich/issues/1009

### Changed

- python -m rich.markdown and rich.syntax show usage with no file

### Added

- Added height parameter to Layout
- Added python -m rich.segment

## [9.11.0] - 2021-02-15

### Fixed

- Fixed error message for tracebacks with broken `__str__` https://github.com/textualize/rich/issues/980
- Fixed markup edge case https://github.com/textualize/rich/issues/987

### Added

- Added cheeky sponsorship request to test card
- Added `quiet` argument to Console constructor
- Added support for a callback function to format timestamps (allows presentation of milliseconds)
- Added Console.set_alt_screen and Console.screen
- Added height to ConsoleOptions
- Added `vertical` parameter to Align
- Added Layout class

### Changed

- Pretty.overflow now defaults to None
- Panel now respects options.height
- Traceback lexer defaults to Python if no extension on source
- Added ConsoleDimensions size attribute to ConsoleOptions so that size can't change mid-render

## [9.10.0] - 2021-01-27

### Changed

- Some optimizations for Text
- Further optimized Tracebacks by not tokenizing code more that necessary
- Table Column.header_style and Column.footer_style are now added to Table header/footer style

## [9.9.0] - 2021-01-23

### Changed

- Extended Windows palette to 16 colors
- Modified windows palette to Windows 10 colors
- Change regex for attrib_name to be more performant
- Optimized traceback generation

### Fixed

- Fix double line tree guides on Windows
- Fixed Tracebacks ignoring initial blank lines
- Partial fix for tracebacks not finding source after chdir
- Fixed error message when code in tracebacks doesn't have an extension https://github.com/textualize/rich/issues/996

### Added

- Added post_style argument to Segment.apply_style

## [9.8.2] - 2021-01-15

### Fixed

- Fixed deadlock in live https://github.com/textualize/rich/issues/927

## [9.8.1] - 2021-01-13

### Fixed

- Fixed rich.inspect failing with attributes that claim to be callable but aren't https://github.com/textualize/rich/issues/916

## [9.8.0] - 2021-01-11

### Added

- Added **rich_measure** for tree
- Added rich.align.VerticalCenter

### Changed

- The `style` argument on Align now applies to background only
- Changed display of progress bars in no_color mode for clarity
- Console property `size` will fall back to getting the terminal size of stdout it stdin fails, this allows size to be correctly determined when piping

### Fixed

- Fixed panel cropping when shrunk too bar
- Allow passing markdown over STDIN when using `python -m rich.markdown`
- Fix printing MagicMock.mock_calls https://github.com/textualize/rich/issues/903

## [9.7.0] - 2021-01-09

### Added

- Added rich.tree
- Added no_color argument to Console

## [9.6.2] - 2021-01-07

### Fixed

- Fixed markup escaping edge case https://github.com/textualize/rich/issues/878
- Double tag escape, i.e. `"\\[foo]"` results in a backslash plus `[foo]` tag
- Fixed header_style not applying to headers in positional args https://github.com/textualize/rich/issues/953

## [9.6.1] - 2020-12-31

### Fixed

- Fixed encoding error on Windows when loading code for Tracebacks

## [9.6.0] - 2020-12-30

### Changed

- MarkupError exception raise from None to omit internal exception
- Factored out RichHandler.render and RichHandler.render_message for easier extending
- Display pretty printed value in rich.inspect

### Added

- Added Progress.TimeElapsedColumn
- Added IPython support to pretty.install

### Fixed

- Fixed display of locals in Traceback for stdin

## [9.5.1] - 2020-12-19

### Fixed

- Fixed terminal size detection on Windows https://github.com/textualize/rich/issues/836
- Fixed hex number highlighting

## [9.5.0] - 2020-12-18

### Changed

- If file is not specified on Console then the Console.file will return the current sys.stdout. Prior to 9.5.0 sys.stdout was cached on the Console, which could break code that wrapped sys.stdout after the Console was constructed.
- Changed `Color.__str__` to not include ansi codes
- Changed Console.size to get the terminal dimensions via sys.stdin. This means that if you set file to be an io.StringIO file then the width will be set to the current terminal dimensions and not a default of 80.

### Added

- Added stderr parameter to Console
- Added rich.reconfigure
- Added `Color.__rich__`
- Added Console.soft_wrap
- Added Console.style parameter
- Added Table.highlight parameter to enable highlighting of cells
- Added Panel.highlight parameter to enable highlighting of panel title
- Added highlight to ConsoleOptions

### Fixed

- Fixed double output in rich.live https://github.com/textualize/rich/issues/485
- Fixed Console.out highlighting not reflecting defaults https://github.com/textualize/rich/issues/827
- FileProxy now raises TypeError for empty non-str arguments https://github.com/textualize/rich/issues/828

## [9.4.0] - 2020-12-12

### Added

- Added rich.live https://github.com/textualize/rich/pull/382
- Added align parameter to Rule and Console.rule
- Added rich.Status class and Console.status
- Added getitem to Text
- Added style parameter to Console.log
- Added rich.diagnose command

### Changed

- Table.add_row style argument now applies to entire line and not just cells
- Added end_section parameter to Table.add_row to force a line underneath row

## Fixed

- Fixed suppressed traceback context https://github.com/textualize/rich/issues/468

## [9.3.0] - 2020-12-1

### Added

- Added get_datetime parameter to Console, to allow for repeatable tests
- Added get_time parameter to Console
- Added rich.abc.RichRenderable
- Added expand_all to rich.pretty.install()
- Added locals_max_length, and locals_max_string to Traceback and logging.RichHandler
- Set defaults of max_length and max_string for Traceback to 10 and 80
- Added disable argument to Progress

### Changed

- Reformatted test card (python -m rich)

### Fixed

- Fixed redirecting of stderr in Progress
- Fixed broken expanded tuple of one https://github.com/textualize/rich/issues/445
- Fixed traceback message with `from` exceptions
- Fixed justify argument not working in console.log https://github.com/textualize/rich/issues/460

## [9.2.0] - 2020-11-08

### Added

- Added tracebacks_show_locals parameter to RichHandler
- Added max_string to Pretty
- Added rich.ansi.AnsiDecoder
- Added decoding of ansi codes to captured stdout in Progress
- Added expand_all to rich.pretty.pprint

### Changed

- Applied dim=True to indent guide styles
- Factored out RichHandler.get_style_and_level to allow for overriding in subclasses
- Hid progress bars from html export
- rich.pretty.pprint now soft wraps

## [9.1.0] - 2020-10-23

### Added

- Added Text.with_indentation_guide
- Added Text.detect_indentation
- Added Pretty.indent_guides
- Added Syntax.indent_guides
- Added indent_guides parameter on pretty.install
- Added rich.pretty.pprint
- Added max_length to Pretty

### Changed

- Enabled indent guides on Tracebacks

### Fixed

- Fixed negative time remaining in Progress bars https://github.com/textualize/rich/issues/378

## [9.0.1] - 2020-10-19

### Fixed

- Fixed broken ANSI codes in input on windows legacy https://github.com/textualize/rich/issues/393

## [9.0.0] - 2020-10-18

### Fixed

- Progress download column now displays decimal units

### Added

- Support for Python 3.9
- Added legacy_windows to ConsoleOptions
- Added ascii_only to ConsoleOptions
- Added box.SQUARE_DOUBLE_HEAD
- Added highlighting of EUI-48 and EUI-64 (MAC addresses)
- Added Console.pager
- Added Console.out
- Added binary_units in progress download column
- Added Progress.reset
- Added Style.background_style property
- Added Bar renderable https://github.com/textualize/rich/pull/361
- Added Table.min_width
- Added table.Column.min_width and table.Column.max_width, and same to Table.add_column

### Changed

- Dropped box.get_safe_box function in favor of Box.substitute
- Changed default padding in Panel from 0 to (0, 1) https://github.com/textualize/rich/issues/385
- Table with row_styles will extend background color between cells if the box has no vertical dividerhttps://github.com/textualize/rich/issues/383
- Changed default of fit kwarg in render_group() from False to True
- Renamed rich.bar to rich.progress_bar, and Bar class to ProgressBar, rich.bar is now the new solid bar class

### Fixed

- Fixed typo in `Style.transparent_background` method name.

## [8.0.0] - 2020-10-03

### Added

- Added Console.bell method
- Added Set to types that Console.print will automatically pretty print
- Added show_locals to Traceback
- Added theme stack mechanism, see Console.push_theme and Console.pop_theme

### Changed

- Changed Style.empty to Style.null to better reflect what it does
- Optimized combining styles involving a null style
- Change error messages in Style.parse to read better

### Fixed

- Fixed Table.\_\_rich_measure\_\_
- Fixed incorrect calculation of fixed width columns

## [7.1.0] - 2020-09-26

### Added

- Added Console.begin_capture, Console.end_capture and Console.capture
- Added Table.title_justify and Table.caption_justify https://github.com/textualize/rich/issues/301

### Changed

- Improved formatting of exceptions
- Enabled Rich exceptions in logging https://github.com/taliraj
- UTF-8 encoding is now mentioned in HTML head section

### Removed

- Removed line_numbers argument from traceback.install, which was undocumented and did nothing

## [7.0.0] - 2020-09-18

### Added

- New ansi_dark and ansi_light themes
- Added Text.append_tokens for fast appending of string + Style pairs
- Added Text.remove_suffix
- Added Text.append_tokens

### Changed

- Text.tabs_to_spaces was renamed to Text.expand_tabs, which works in place rather than returning a new instance
- Renamed Column.index to Column.\_index
- Optimized Style.combine and Style.chain
- Optimized text rendering by fixing internal cache mechanism
- Optimized hash generation for Styles

## [6.2.0] - 2020-09-13

### Added

- Added inline code highlighting to Markdown

## [6.1.2] - 2020-09-11

### Added

- Added ipv4 and ipv6 to ReprHighlighter

### Changed

- The `#` sign is included in url highlighting

### Fixed

- Fixed force-color switch in rich.syntax and rich.markdown commands

## [6.1.1] - 2020-09-07

### Changed

- Restored "def" in inspect signature

## [6.1.0] - 2020-09-07

### Added

- New inspect module
- Added os.\_Environ to pretty print

### Fixed

- Prevented recursive renderables from getting stuck

## Changed

- force_terminal and force_jupyter can now be used to force the disabled state, or left as None to auto-detect.
- Panel now expands to fit title if supplied

## [6.0.0] - 2020-08-25

### Fixed

- Fixed use of `__rich__` cast

### Changed

- New algorithm to pretty print which fits more on a line if possible
- Deprecated `character` parameter in Rule and Console.rule, in favor of `characters`
- Optimized Syntax.from_path to avoid searching all lexers, which also speeds up tracebacks

### Added

- Added soft_wrap flag to Console.print

## [5.2.1] - 2020-08-19

### Fixed

- Fixed underscore with display hook https://github.com/textualize/rich/issues/235

## [5.2.0] - 2020-08-14

### Changed

- Added crop argument to Console.print
- Added "ignore" overflow method
- Added multiple characters per rule @hedythedev https://github.com/textualize/rich/pull/207

## [5.1.2] - 2020-08-10

### Fixed

- Further optimized pretty printing ~5X.

## [5.1.1] - 2020-08-09

### Fixed

- Optimized pretty printing ~3X faster

## [5.1.0] - 2020-08-08

### Added

- Added Text.cell_len
- Added helpful message regarding unicode decoding errors https://github.com/textualize/rich/issues/212
- Added display hook with pretty.install()

### Fixed

- Fixed deprecation warnings re backslash https://github.com/textualize/rich/issues/210
- Fixed repr highlighting of scientific notation, e.g. 1e100

### Changed

- Implemented pretty printing, and removed pprintpp from dependencies
- Optimized Text.join

## [5.0.0] - 2020-08-02

### Changed

- Change to console markup syntax to not parse Python structures as markup, i.e. `[1,2,3]` is treated as a literal, not a tag.
- Standard color numbers syntax has changed to `"color(<number>)"` so that `[5]` (for example) is considered a literal.
- Markup escape method has changed from double brackets to preceding with a backslash, so `foo[[]]` would be `foo\[bar]`

## [4.2.2] - 2020-07-30

### Changed

- Added thread to automatically call update() in progress.track(). Replacing previous adaptive algorithm.
- Second attempt at working around https://bugs.python.org/issue37871

## [4.2.1] - 2020-07-29

### Added

- Added show_time and show_level parameters to RichHandler https://github.com/textualize/rich/pull/182

### Fixed

- Fixed progress.track iterator exiting early https://github.com/textualize/rich/issues/189
- Added workaround for Python bug https://bugs.python.org/issue37871, fixing https://github.com/textualize/rich/issues/186

### Changed

- Set overflow=fold for log messages https://github.com/textualize/rich/issues/190

## [4.2.0] - 2020-07-27

### Fixed

- Fixed missing new lines https://github.com/textualize/rich/issues/178
- Fixed Progress.track https://github.com/textualize/rich/issues/184
- Remove control codes from exported text https://github.com/textualize/rich/issues/181
- Implemented auto-detection and color rendition of 16-color mode

## [4.1.0] - 2020-07-26

### Changed

- Optimized progress.track for very quick iterations
- Force default size of 80x25 if get_terminal_size reports size of 0,0

## [4.0.0] - 2020-07-23

Major version bump for a breaking change to `Text.stylize signature`, which corrects a minor but irritating API wart. The style now comes first and the `start` and `end` offsets default to the entire text. This allows for `text.stylize_all(style)` to be replaced with `text.stylize(style)`. The `start` and `end` offsets now support negative indexing, so `text.stylize("bold", -1)` makes the last character bold.

### Added

- Added markup switch to RichHandler https://github.com/textualize/rich/issues/171

### Changed

- Change signature of Text.stylize to accept style first
- Remove Text.stylize_all which is no longer necessary

### Fixed

- Fixed rendering of Confirm prompt https://github.com/textualize/rich/issues/170

## [3.4.1] - 2020-07-22

### Fixed

- Fixed incorrect default of expand in Table.grid

## [3.4.0] - 2020-07-22

### Added

- Added stream parameter to Console.input
- Added password parameter to Console.input
- Added description parameter to Progress.update
- Added rich.prompt
- Added detecting 'dumb' terminals
- Added Text.styled alternative constructor

### Fixes

- Fixed progress bars so that they are readable when color is disabled

## [3.3.2] - 2020-07-14

### Changed

- Optimized Text.pad

### Added

- Added rich.scope
- Change log_locals to use scope.render_scope
- Added title parameter to Columns

## [3.3.1] - 2020-07-13

### Added

- box.ASCII_DOUBLE_HEAD

### Changed

- Removed replace of -- --- ... from Markdown, as it made it impossible to include CLI info

## [3.3.0] - 2020-07-12

### Added

- Added title and title_align options to Panel
- Added pad and width parameters to Align
- Added end parameter to Rule
- Added Text.pad and Text.align methods
- Added leading parameter to Table

## [3.2.0] - 2020-07-10

### Added

- Added Align.left Align.center Align.right shortcuts
- Added Panel.fit shortcut
- Added align parameter to Columns

### Fixed

- Align class now pads to the right, like Text
- ipywidgets added as an optional dependency
- Issue with Panel and background color
- Fixed missing `__bool__` on Segment

### Changed

- Added `border_style` argument to Panel (note, `style` now applies to interior of the panel)

## [3.1.0] - 2020-07-09

### Changed

- Progress bars now work in Jupyter

## Added

- Added refresh_per_second to progress.track
- Added styles to BarColumn and progress.track

## [3.0.5] - 2020-07-07

### Fixed

- Fixed Windows version number require for truecolor

## [3.0.4] - 2020-07-07

### Changed

- More precise detection of Windows console https://github.com/textualize/rich/issues/140

## [3.0.3] - 2020-07-03

### Fixed

- Fixed edge case with wrapped and overflowed text

### Changed

- New algorithm for compressing table that priorities smaller columns

### Added

- Added safe_box parameter to Console constructor

## [3.0.2] - 2020-07-02

### Added

- Added rich.styled.Styled class to apply styles to renderable
- Table.add_row now has an optional style parameter
- Added table_movie.py to examples

### Changed

- Modified box options to use half line characters at edges
- Non no_wrap columns will now shrink below minimum width if table is compressed

## [3.0.1] - 2020-06-30

### Added

- Added box.ASCII2
- Added markup argument to logging extra

### Changed

- Setting a non-None width now implies expand=True

## [3.0.0] - 2020-06-28

### Changed

- Enabled supported box chars for legacy Windows, and introduce `safe_box` flag
- Disable hyperlinks on legacy Windows
- Constructors for Rule and Panel now have keyword only arguments (reason for major version bump)
- Table.add_colum added keyword only arguments

### Fixed

- Fixed Table measure

## [2.3.1] - 2020-06-26

### Fixed

- Disabled legacy_windows if jupyter is detected https://github.com/textualize/rich/issues/125

## [2.3.0] - 2020-06-26

### Fixed

- Fixed highlighting of paths / filenames
- Corrected docs for RichHandler which erroneously said default console writes to stderr

### Changed

- Allowed `style` parameter for `highlight_regex` to be a callable that returns a style

### Added

- Added optional highlighter parameter to RichHandler

## [2.2.6] - 2020-06-24

### Changed

- Store a "link id" on Style instance, so links containing different styles are highlighted together. (https://github.com/textualize/rich/pull/123)

## [2.2.5] - 2020-06-23

### Fixed

- Fixed justify of tables (https://github.com/textualize/rich/issues/117)

## [2.2.4] - 2020-06-21

### Added

- Added enable_link_path to RichHandler
- Added legacy_windows switch to Console constructor

## [2.2.3] - 2020-06-15

### Fixed

- Fixed console.log hyperlink not containing full path

### Changed

- Used random number for hyperlink id

## [2.2.2] - 2020-06-14

### Changed

- Exposed RichHandler highlighter as a class var

## [2.2.1] - 2020-06-14

### Changed

- Linked path in log render to file

## [2.2.0] - 2020-06-14

### Added

- Added redirect_stdout and redirect_stderr to Progress

### Changed

- printing to console with an active Progress doesn't break visuals

## [2.1.0] - 2020-06-11

### Added

- Added 'transient' option to Progress

### Changed

- Truncated overly long text in Rule with ellipsis overflow

## [2.0.1] - 2020-06-10

### Added

- Added expand option to Padding

### Changed

- Some minor optimizations in Text

### Fixed

- Fixed broken rule with CJK text

## [2.0.0] - 2020-06-06

### Added

- Added overflow methods
- Added no_wrap option to print()
- Added width option to print
- Improved handling of compressed tables

### Fixed

- Fixed erroneous space at end of log
- Fixed erroneous space at end of progress bar

### Changed

- Renamed \_ratio.ratio_divide to \_ratio.ratio_distribute
- Renamed JustifyValues to JustifyMethod (backwards incompatible)
- Optimized \_trim_spans
- Enforced keyword args in Console / Text interfaces (backwards incompatible)
- Return self from text.append

## [1.3.1] - 2020-06-01

### Changed

- Changed defaults of Table.grid
- Polished listdir.py example

### Added

- Added width argument to Columns

### Fixed

- Fixed for `columns_first` argument in Columns
- Fixed incorrect padding in columns with fixed width

## [1.3.0] - 2020-05-31

### Added

- Added rich.get_console() function to get global console instance.
- Added Columns class

### Changed

- Updated `markdown.Heading.create()` to work with subclassing.
- Console now transparently works with Jupyter

### Fixed

- Fixed issue with broken table with show_edge=False and a non-None box arg

## [1.2.3] - 2020-05-24

### Added

- Added `padding` parameter to Panel
- Added 'indeterminate' state when progress bars aren't started

### Fixed

- Fixed Progress deadlock https://github.com/textualize/rich/issues/90

### Changed

- Auto-detect "truecolor" color system when in Windows Terminal

## [1.2.2] - 2020-05-22

### Fixed

- Issue with right aligned wrapped text adding extra spaces

## [1.2.1] - 2020-05-22

### Fixed

- Issue with sum and Style

## [1.2.0] - 2020-05-22

### Added

- Support for double underline, framed, encircled, and overlined attributes

### Changed

- Optimized Style
- Changed methods `__console__` to `__rich_console__`, and `__measure__` to `__rich_measure__`

## [1.1.9] - 2020-05-20

### Fixed

- Exception when BarColumn.bar_width == None

## [1.1.8] - 2020-05-20

### Changed

- Optimizations for Segment, Console and Table

### Added

- Added Console.clear method
- Added exporting of links to HTML

## [1.1.7] - 2020-05-19

### Added

- Added collapse_padding option to Table.

### Changed

- Some style attributes may be abbreviated (b for bold, i for italic etc). Previously abbreviations worked in console markup but only one at a time, i.e. "[b]Hello[/]" but not "[b i]Hello[/]" -- now they work everywhere.
- Renamed 'text' property on Text to 'plain'. i.e. text.plain returns a string version of the Text instance.

### Fixed

- Fixed zero division if total is 0 in progress bar

## [1.1.6] - 2020-05-17

### Added

- Added rich.align.Align class
- Added justify argument to Console.print and console.log

## [1.1.5] - 2020-05-15

### Changed

- Changed progress bars to write to stdout on terminal and hide on non-terminal

## [1.1.4] - 2020-05-15

### Fixed

- Fixed incorrect file and link in progress.log
- Fixes for legacy windows: Bar, Panel, and Rule now use ASCII characters
- show_cursor is now a no-op on legacy windows

### Added

- Added Console.input

### Changed

- Disable progress bars when not writing to a terminal

## [1.1.3] - 2020-05-14

### Fixed

- Issue with progress of one line`

## [1.1.2] - 2020-05-14

### Added

- Added -p switch to python -m rich.markdown to page output
- Added Console.control to output control codes

### Changed

- Changed Console log_time_format to no longer require a space at the end
- Added print and log to Progress to render terminal output when progress is active

## [1.1.1] - 2020-05-12

### Changed

- Stripped cursor moving control codes from text

## [1.1.0] - 2020-05-10

### Added

- Added hyperlinks to Style and markup
- Added justify and code theme switches to markdown command

## [1.0.3] - 2020-05-08

### Added

- Added `python -m rich.syntax` command

## [1.0.2] - 2020-05-08

### Fixed

- Issue with Windows legacy support https://github.com/textualize/rich/issues/59

## [1.0.1] - 2020-05-08

### Changed

- Applied console markup after highlighting
- Documented highlighting
- Changed Markup parser to handle overlapping styles
- Relaxed dependency on colorama
- Allowed Theme to accept values as style definitions (str) as well as Style instances
- Added a panel to emphasize code in Markdown

### Added

- Added markup.escape
- Added `python -m rich.theme` command
- Added `python -m rich.markdown` command
- Added rendering of images in Readme (links only)

### Fixed

- Fixed Text.assemble not working with strings https://github.com/textualize/rich/issues/57
- Fixed table when column widths must be compressed to fit

## [1.0.0] - 2020-05-03

### Changed

- Improvements to repr highlighter to highlight URLs

## [0.8.13] - 2020-04-28

### Fixed

- Fixed incorrect markdown rendering for quotes and changed style

## [0.8.12] - 2020-04-21

### Fixed

- Removed debug print from rich.progress

## [0.8.11] - 2020-04-14

### Added

- Added Table.show_lines to render lines between rows

### Changed

- Added markup escape with double square brackets

## [0.8.10] - 2020-04-12

### Fixed

- Fix row_styles applying to header

## [0.8.9] - 2020-04-12

### Changed

- Added force_terminal option to `Console.__init__`

### Added

- Added Table.row_styles to enable zebra striping.

## [0.8.8] - 2020-03-31

### Fixed

- Fixed background in Syntax

## [0.8.7] - 2020-03-31

### Fixed

- Broken wrapping of long lines
- Fixed wrapping in Syntax

### Changed

- Added word_wrap option to Syntax, which defaults to False.
- Added word_wrap option to Traceback.

## [0.8.6] - 2020-03-29

### Added

- Experimental Jupyter notebook support: from rich.jupyter import print

## [0.8.5] - 2020-03-29

### Changed

- Smarter number parsing regex for repr highlighter

### Added

- uuid highlighter for repr

## [0.8.4] - 2020-03-28

### Added

- Added 'test card', run python -m rich

### Changed

- Detected windows terminal, defaulting to colorama support

### Fixed

- Fixed table scaling issue

## [0.8.3] - 2020-03-27

### Fixed

- CJK right align

## [0.8.2] - 2020-03-27

### Changed

- Fixed issue with 0 speed resulting in zero division error
- Changed signature of Progress.update
- Made calling start() a second time a no-op

## [0.8.1] - 2020-03-22

### Added

- Added progress.DownloadColumn

## [0.8.0] - 2020-03-17

### Added

- CJK support
- Console level highlight flag
- Added encoding argument to Syntax.from_path

### Changed

- Dropped support for Windows command prompt (try https://www.microsoft.com/en-gb/p/windows-terminal-preview/)
- Added task_id to Progress.track

## [0.7.2] - 2020-03-15

### Fixed

- KeyError for missing pygments style

## [0.7.1] - 2020-03-13

### Fixed

- Issue with control codes being used in length calculation

### Changed

- Remove current_style concept, which wasn't really used and was problematic for concurrency

## [0.7.0] - 2020-03-12

### Changed

- Added width option to Panel
- Change special method `__render_width__` to `__measure__`
- Dropped the "markdown style" syntax in console markup
- Optimized style rendering

### Added

- Added Console.show_cursor method
- Added Progress bars

### Fixed

- Fixed wrapping when a single word was too large to fit in a line

## [0.6.0] - 2020-03-03

### Added

- Added tab_size to Console and Text
- Added protocol.is_renderable for runtime check
- Added emoji switch to Console
- Added inherit boolean to Theme
- Made Console thread safe, with a thread local buffer

### Changed

- Console.markup attribute now effects Table
- SeparatedConsoleRenderable and RichCast types

### Fixed

- Fixed tabs breaking rendering by converting to spaces

## [0.5.0] - 2020-02-23

### Changed

- Replaced `__console_str__` with `__rich__`

## [0.4.1] - 2020-02-22

### Fixed

- Readme links in PyPI

## [0.4.0] - 2020-02-22

### Added

- Added Traceback rendering and handler
- Added rich.constrain
- Added rich.rule

### Fixed

- Fixed unnecessary padding

## [0.3.3] - 2020-02-04

### Fixed

- Fixed Windows color support
- Fixed line width on windows issue (https://github.com/textualize/rich/issues/7)
- Fixed Pretty print on Windows

## [0.3.2] - 2020-01-26

### Added

- Added rich.logging

## [0.3.1] - 2020-01-22

### Added

- Added colorama for Windows support

## [0.3.0] - 2020-01-19

### Added

- First official release, API still to be stabilized

[14.0.0]: https://github.com/textualize/rich/compare/v14.0.0...v14.1.0
[14.0.0]: https://github.com/textualize/rich/compare/v13.9.4...v14.0.0
[13.9.4]: https://github.com/textualize/rich/compare/v13.9.3...v13.9.4
[13.9.3]: https://github.com/textualize/rich/compare/v13.9.2...v13.9.3
[13.9.2]: https://github.com/textualize/rich/compare/v13.9.1...v13.9.2
[13.9.1]: https://github.com/textualize/rich/compare/v13.9.0...v13.9.1
[13.9.0]: https://github.com/textualize/rich/compare/v13.8.1...v13.9.0
[13.8.1]: https://github.com/textualize/rich/compare/v13.8.0...v13.8.1
[13.8.0]: https://github.com/textualize/rich/compare/v13.7.1...v13.8.0
[13.7.1]: https://github.com/textualize/rich/compare/v13.7.0...v13.7.1
[13.7.0]: https://github.com/textualize/rich/compare/v13.6.0...v13.7.0
[13.6.0]: https://github.com/textualize/rich/compare/v13.5.3...v13.6.0
[13.5.3]: https://github.com/textualize/rich/compare/v13.5.2...v13.5.3
[13.5.2]: https://github.com/textualize/rich/compare/v13.5.1...v13.5.2
[13.5.1]: https://github.com/textualize/rich/compare/v13.5.0...v13.5.1
[13.5.0]: https://github.com/textualize/rich/compare/v13.4.2...v13.5.0
[13.4.2]: https://github.com/textualize/rich/compare/v13.4.1...v13.4.2
[13.4.1]: https://github.com/textualize/rich/compare/v13.4.0...v13.4.1
[13.4.0]: https://github.com/textualize/rich/compare/v13.3.5...v13.4.0
[13.3.5]: https://github.com/textualize/rich/compare/v13.3.4...v13.3.5
[13.3.4]: https://github.com/textualize/rich/compare/v13.3.3...v13.3.4
[13.3.3]: https://github.com/textualize/rich/compare/v13.3.2...v13.3.3
[13.3.2]: https://github.com/textualize/rich/compare/v13.3.1...v13.3.2
[13.3.1]: https://github.com/textualize/rich/compare/v13.3.0...v13.3.1
[13.3.0]: https://github.com/textualize/rich/compare/v13.2.0...v13.3.0
[13.2.0]: https://github.com/textualize/rich/compare/v13.1.0...v13.2.0
[13.1.0]: https://github.com/textualize/rich/compare/v13.0.1...v13.1.0
[13.0.1]: https://github.com/textualize/rich/compare/v13.0.0...v13.0.1
[13.0.0]: https://github.com/textualize/rich/compare/v12.6.0...v13.0.0
[12.6.0]: https://github.com/textualize/rich/compare/v12.5.2...v12.6.0
[12.5.2]: https://github.com/textualize/rich/compare/v12.5.1...v12.5.2
[12.5.1]: https://github.com/textualize/rich/compare/v12.5.0...v12.5.1
[12.5.0]: https://github.com/textualize/rich/compare/v12.4.4...v12.5.0
[12.4.4]: https://github.com/textualize/rich/compare/v12.4.3...v12.4.4
[12.4.3]: https://github.com/textualize/rich/compare/v12.4.2...v12.4.3
[12.4.2]: https://github.com/textualize/rich/compare/v12.4.1...v12.4.2
[12.4.1]: https://github.com/textualize/rich/compare/v12.4.0...v12.4.1
[12.4.0]: https://github.com/textualize/rich/compare/v12.3.0...v12.4.0
[12.3.0]: https://github.com/textualize/rich/compare/v12.2.0...v12.3.0
[12.2.0]: https://github.com/textualize/rich/compare/v12.1.0...v12.2.0
[12.1.0]: https://github.com/textualize/rich/compare/v12.0.1...v12.1.0
[12.0.1]: https://github.com/textualize/rich/compare/v12.0.0...v12.0.1
[12.0.0]: https://github.com/textualize/rich/compare/v11.2.0...v12.0.0
[11.2.0]: https://github.com/textualize/rich/compare/v11.1.0...v11.2.0
[11.1.0]: https://github.com/textualize/rich/compare/v11.0.0...v11.1.0
[11.0.0]: https://github.com/textualize/rich/compare/v10.16.1...v11.0.0
[10.16.2]: https://github.com/textualize/rich/compare/v10.16.1...v10.16.2
[10.16.1]: https://github.com/textualize/rich/compare/v10.16.0...v10.16.1
[10.16.0]: https://github.com/textualize/rich/compare/v10.15.2...v10.16.0
[10.15.2]: https://github.com/textualize/rich/compare/v10.15.1...v10.15.2
[10.15.1]: https://github.com/textualize/rich/compare/v10.15.0...v10.15.1
[10.15.0]: https://github.com/textualize/rich/compare/v10.14.0...v10.15.0
[10.14.0]: https://github.com/textualize/rich/compare/v10.13.0...v10.14.0
[10.13.0]: https://github.com/textualize/rich/compare/v10.12.0...v10.13.0
[10.12.0]: https://github.com/textualize/rich/compare/v10.11.0...v10.12.0
[10.11.0]: https://github.com/textualize/rich/compare/v10.10.0...v10.11.0
[10.10.0]: https://github.com/textualize/rich/compare/v10.9.0...v10.10.0
[10.9.0]: https://github.com/textualize/rich/compare/v10.8.0...v10.9.0
[10.8.0]: https://github.com/textualize/rich/compare/v10.7.0...v10.8.0
[10.7.0]: https://github.com/textualize/rich/compare/v10.6.0...v10.7.0
[10.6.0]: https://github.com/textualize/rich/compare/v10.5.0...v10.6.0
[10.5.0]: https://github.com/textualize/rich/compare/v10.4.0...v10.5.0
[10.4.0]: https://github.com/textualize/rich/compare/v10.3.0...v10.4.0
[10.3.0]: https://github.com/textualize/rich/compare/v10.2.2...v10.3.0
[10.2.2]: https://github.com/textualize/rich/compare/v10.2.1...v10.2.2
[10.2.1]: https://github.com/textualize/rich/compare/v10.2.0...v10.2.1
[10.2.0]: https://github.com/textualize/rich/compare/v10.1.0...v10.2.0
[10.1.0]: https://github.com/textualize/rich/compare/v10.0.1...v10.1.0
[10.0.1]: https://github.com/textualize/rich/compare/v10.0.0...v10.0.1
[10.0.0]: https://github.com/textualize/rich/compare/v9.13.0...v10.0.0
[9.13.0]: https://github.com/textualize/rich/compare/v9.12.4...v9.13.0
[9.12.4]: https://github.com/textualize/rich/compare/v9.12.3...v9.12.4
[9.12.3]: https://github.com/textualize/rich/compare/v9.12.2...v9.12.3
[9.12.2]: https://github.com/textualize/rich/compare/v9.12.1...v9.12.2
[9.12.1]: https://github.com/textualize/rich/compare/v9.12.0...v9.12.1
[9.12.0]: https://github.com/textualize/rich/compare/v9.11.1...v9.12.0
[9.11.1]: https://github.com/textualize/rich/compare/v9.11.0...v9.11.1
[9.11.0]: https://github.com/textualize/rich/compare/v9.10.0...v9.11.0
[9.10.0]: https://github.com/textualize/rich/compare/v9.9.0...v9.10.0
[9.9.0]: https://github.com/textualize/rich/compare/v9.8.2...v9.9.0
[9.8.2]: https://github.com/textualize/rich/compare/v9.8.1...v9.8.2
[9.8.1]: https://github.com/textualize/rich/compare/v9.8.0...v9.8.1
[9.8.0]: https://github.com/textualize/rich/compare/v9.7.0...v9.8.0
[9.7.0]: https://github.com/textualize/rich/compare/v9.6.2...v9.7.0
[9.6.2]: https://github.com/textualize/rich/compare/v9.6.1...v9.6.2
[9.6.1]: https://github.com/textualize/rich/compare/v9.6.0...v9.6.1
[9.6.0]: https://github.com/textualize/rich/compare/v9.5.1...v9.6.0
[9.5.1]: https://github.com/textualize/rich/compare/v9.5.0...v9.5.1
[9.5.0]: https://github.com/textualize/rich/compare/v9.4.0...v9.5.0
[9.4.0]: https://github.com/textualize/rich/compare/v9.3.0...v9.4.0
[9.3.0]: https://github.com/textualize/rich/compare/v9.2.0...v9.3.0
[9.2.0]: https://github.com/textualize/rich/compare/v9.1.0...v9.2.0
[9.1.0]: https://github.com/textualize/rich/compare/v9.0.1...v9.1.0
[9.0.1]: https://github.com/textualize/rich/compare/v9.0.0...v9.0.1
[9.0.0]: https://github.com/textualize/rich/compare/v8.0.0...v9.0.0
[8.0.0]: https://github.com/textualize/rich/compare/v7.1.0...v8.0.0
[7.1.0]: https://github.com/textualize/rich/compare/v7.0.0...v7.1.0
[7.0.0]: https://github.com/textualize/rich/compare/v6.2.0...v7.0.0
[6.2.0]: https://github.com/textualize/rich/compare/v6.1.2...v6.2.0
[6.1.2]: https://github.com/textualize/rich/compare/v6.1.1...v6.1.2
[6.1.1]: https://github.com/textualize/rich/compare/v6.1.0...v6.1.1
[6.1.0]: https://github.com/textualize/rich/compare/v6.0.0...v6.1.0
[6.0.0]: https://github.com/textualize/rich/compare/v5.2.1...v6.0.0
[5.2.1]: https://github.com/textualize/rich/compare/v5.2.0...v5.2.1
[5.2.0]: https://github.com/textualize/rich/compare/v5.1.2...v5.2.0
[5.1.2]: https://github.com/textualize/rich/compare/v5.1.1...v5.1.2
[5.1.1]: https://github.com/textualize/rich/compare/v5.1.0...v5.1.1
[5.1.0]: https://github.com/textualize/rich/compare/v5.0.0...v5.1.0
[5.0.0]: https://github.com/textualize/rich/compare/v4.2.2...v5.0.0
[4.2.2]: https://github.com/textualize/rich/compare/v4.2.1...v4.2.2
[4.2.1]: https://github.com/textualize/rich/compare/v4.2.0...v4.2.1
[4.2.0]: https://github.com/textualize/rich/compare/v4.1.0...v4.2.0
[4.1.0]: https://github.com/textualize/rich/compare/v4.0.0...v4.1.0
[4.0.0]: https://github.com/textualize/rich/compare/v3.4.1...v4.0.0
[3.4.1]: https://github.com/textualize/rich/compare/v3.4.0...v3.4.1
[3.4.0]: https://github.com/textualize/rich/compare/v3.3.2...v3.4.0
[3.3.2]: https://github.com/textualize/rich/compare/v3.3.1...v3.3.2
[3.3.1]: https://github.com/textualize/rich/compare/v3.3.0...v3.3.1
[3.3.0]: https://github.com/textualize/rich/compare/v3.2.0...v3.3.0
[3.2.0]: https://github.com/textualize/rich/compare/v3.1.0...v3.2.0
[3.1.0]: https://github.com/textualize/rich/compare/v3.0.5...v3.1.0
[3.0.5]: https://github.com/textualize/rich/compare/v3.0.4...v3.0.5
[3.0.4]: https://github.com/textualize/rich/compare/v3.0.3...v3.0.4
[3.0.3]: https://github.com/textualize/rich/compare/v3.0.2...v3.0.3
[3.0.2]: https://github.com/textualize/rich/compare/v3.0.1...v3.0.2
[3.0.1]: https://github.com/textualize/rich/compare/v3.0.0...v3.0.1
[3.0.0]: https://github.com/textualize/rich/compare/v2.3.1...v3.0.0
[2.3.1]: https://github.com/textualize/rich/compare/v2.3.0...v2.3.1
[2.3.0]: https://github.com/textualize/rich/compare/v2.2.6...v2.3.0
[2.2.6]: https://github.com/textualize/rich/compare/v2.2.5...v2.2.6
[2.2.5]: https://github.com/textualize/rich/compare/v2.2.4...v2.2.5
[2.2.4]: https://github.com/textualize/rich/compare/v2.2.3...v2.2.4
[2.2.3]: https://github.com/textualize/rich/compare/v2.2.2...v2.2.3
[2.2.2]: https://github.com/textualize/rich/compare/v2.2.1...v2.2.2
[2.2.1]: https://github.com/textualize/rich/compare/v2.2.0...v2.2.1
[2.2.0]: https://github.com/textualize/rich/compare/v2.1.0...v2.2.0
[2.1.0]: https://github.com/textualize/rich/compare/v2.0.1...v2.1.0
[2.0.1]: https://github.com/textualize/rich/compare/v2.0.0...v2.0.1
[2.0.0]: https://github.com/textualize/rich/compare/v1.3.1...v2.0.0
[1.3.1]: https://github.com/textualize/rich/compare/v1.3.0...v1.3.1
[1.3.0]: https://github.com/textualize/rich/compare/v1.2.3...v1.3.0
[1.2.3]: https://github.com/textualize/rich/compare/v1.2.2...v1.2.3
[1.2.2]: https://github.com/textualize/rich/compare/v1.2.1...v1.2.2
[1.2.1]: https://github.com/textualize/rich/compare/v1.2.0...v1.2.1
[1.2.0]: https://github.com/textualize/rich/compare/v1.1.9...v1.2.0
[1.1.9]: https://github.com/textualize/rich/compare/v1.1.8...v1.1.9
[1.1.8]: https://github.com/textualize/rich/compare/v1.1.7...v1.1.8
[1.1.7]: https://github.com/textualize/rich/compare/v1.1.6...v1.1.7
[1.1.6]: https://github.com/textualize/rich/compare/v1.1.5...v1.1.6
[1.1.5]: https://github.com/textualize/rich/compare/v1.1.4...v1.1.5
[1.1.4]: https://github.com/textualize/rich/compare/v1.1.3...v1.1.4
[1.1.3]: https://github.com/textualize/rich/compare/v1.1.2...v1.1.3
[1.1.2]: https://github.com/textualize/rich/compare/v1.1.1...v1.1.2
[1.1.1]: https://github.com/textualize/rich/compare/v1.1.0...v1.1.1
[1.1.0]: https://github.com/textualize/rich/compare/v1.0.3...v1.1.0
[1.0.3]: https://github.com/textualize/rich/compare/v1.0.2...v1.0.3
[1.0.2]: https://github.com/textualize/rich/compare/v1.0.1...v1.0.2
[1.0.1]: https://github.com/textualize/rich/compare/v1.0.0...v1.0.1
[1.0.0]: https://github.com/textualize/rich/compare/v0.8.13...v1.0.0
[0.8.13]: https://github.com/textualize/rich/compare/v0.8.12...v0.8.13
[0.8.12]: https://github.com/textualize/rich/compare/v0.8.11...v0.8.12
[0.8.11]: https://github.com/textualize/rich/compare/v0.8.10...v0.8.11
[0.8.10]: https://github.com/textualize/rich/compare/v0.8.9...v0.8.10
[0.8.9]: https://github.com/textualize/rich/compare/v0.8.8...v0.8.9
[0.8.8]: https://github.com/textualize/rich/compare/v0.8.7...v0.8.8
[0.8.7]: https://github.com/textualize/rich/compare/v0.8.6...v0.8.7
[0.8.6]: https://github.com/textualize/rich/compare/v0.8.5...v0.8.6
[0.8.5]: https://github.com/textualize/rich/compare/v0.8.4...v0.8.5
[0.8.4]: https://github.com/textualize/rich/compare/v0.8.3...v0.8.4
[0.8.3]: https://github.com/textualize/rich/compare/v0.8.2...v0.8.3
[0.8.2]: https://github.com/textualize/rich/compare/v0.8.1...v0.8.2
[0.8.1]: https://github.com/textualize/rich/compare/v0.8.0...v0.8.1
[0.8.0]: https://github.com/textualize/rich/compare/v0.7.2...v0.8.0
[0.7.2]: https://github.com/textualize/rich/compare/v0.7.1...v0.7.2
[0.7.1]: https://github.com/textualize/rich/compare/v0.7.0...v0.7.1
[0.7.0]: https://github.com/textualize/rich/compare/v0.6.0...v0.7.0
[0.6.0]: https://github.com/textualize/rich/compare/v0.5.0...v0.6.0
[0.5.0]: https://github.com/textualize/rich/compare/v0.4.1...v0.5.0
[0.4.1]: https://github.com/textualize/rich/compare/v0.4.0...v0.4.1
[0.4.0]: https://github.com/textualize/rich/compare/v0.3.3...v0.4.0
[0.3.3]: https://github.com/textualize/rich/compare/v0.3.2...v0.3.3
[0.3.2]: https://github.com/textualize/rich/compare/v0.3.1...v0.3.2
[0.3.1]: https://github.com/textualize/rich/compare/v0.3.0...v0.3.1
[0.3.0]: https://github.com/textualize/rich/compare/v0.2.0...v0.3.0



================================================
FILE: CODE_OF_CONDUCT.md
================================================
# Contributor Covenant Code of Conduct

## Our Pledge

In the interest of fostering an open and welcoming environment, we as
contributors and maintainers pledge to making participation in our project and
our community a harassment-free experience for everyone, regardless of age, body
size, disability, ethnicity, sex characteristics, gender identity and expression,
level of experience, education, socioeconomic status, nationality, personal
appearance, race, religion, or sexual identity and orientation.

## Our Standards

Examples of behavior that contributes to creating a positive environment
include:

* Using welcoming and inclusive language
* Being respectful of differing viewpoints and experiences
* Gracefully accepting constructive criticism
* Focusing on what is best for the community
* Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

* The use of sexualized language or imagery and unwelcome sexual attention or
 advances
* Trolling, insulting/derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or electronic
 address, without explicit permission
* Other conduct which could reasonably be considered inappropriate in a
 professional setting

## Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable
behavior and are expected to take appropriate and fair corrective action in
response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or
reject comments, commits, code, wiki edits, issues, and other contributions
that are not aligned to this Code of Conduct, or to ban temporarily or
permanently any contributor for other behaviors that they deem inappropriate,
threatening, offensive, or harmful.

## Scope

This Code of Conduct applies both within project spaces and in public spaces
when an individual is representing the project or its community. Examples of
representing a project or community include using an official project e-mail
address, posting via an official social media account, or acting as an appointed
representative at an online or offline event. Representation of a project may be
further defined and clarified by project maintainers.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported by contacting the project team at will@textualize.io. All
complaints will be reviewed and investigated and will result in a response that
is deemed necessary and appropriate to the circumstances. The project team is
obligated to maintain confidentiality with regard to the reporter of an incident.
Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good
faith may face temporary or permanent repercussions as determined by other
members of the project's leadership.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,
available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see
https://www.contributor-covenant.org/faq



================================================
FILE: CONTRIBUTING.md
================================================
# Contributing to Rich

This project welcomes contributions in the form of Pull Requests.
For clear bug-fixes / typos etc. just submit a PR.
For new features or if there is any doubt in how to fix a bug, you might want
to open an issue prior to starting work, or email willmcgugan+rich@gmail.com
to discuss it first.

## Prerequisites

Rich uses [poetry](https://python-poetry.org/docs/) for packaging and
dependency management. To start developing with Rich, install Poetry
using the [recommended method](https://python-poetry.org/docs/#installation).

Next, you'll need to create a _fork_ (your own personal copy) of the Rich repository, and clone that fork 
on to your local machine. GitHub offers a great tutorial for this process [here](https://docs.github.com/en/get-started/quickstart/fork-a-repo).
After following this guide, you'll have a local copy of the Rich project installed.

Enter the directory containing your copy of Rich (`cd rich`).

Poetry can be used to create an isolated _virtual environment_ for the project:

```
poetry shell
```

The first time we run `poetry shell`, such an isolated environment is created and forever associated with our project.
Any time we wish to enter this virtual environment again, we simply run `poetry shell` again.

Now we can install the dependencies of Rich into the virtual environment:

```
poetry install
```

The rest of this guide assumes you're inside the virtual environment.
If you're having difficulty running any of the commands that follow,
ensure you're inside the virtual environment by running `poetry shell`.

## Developing

At this point, you're ready to start developing.
Some things to consider while developing Rich code include:

* Ensure new code is documented in docstrings
* Avoid abbreviations in variable or class names
* Aim for consistency in coding style and API design

Before each [commit](https://github.com/git-guides/git-commit), you should:

1. Run the tests and ensure they pass
2. Ensure type-checking passes
3. Format the code using `black`

These steps are described in the following sections.

### Tests

Run tests with the following command:

```
make test
```

Or if you don't have `make`, run the following:

```
pytest --cov-report term-missing --cov=rich tests/ -vv
```

New code should ideally have tests and not break existing tests.

The "Coverage Report" that gets printed to the terminal after the tests run can be used
to identify lines of code that haven't been covered by tests.
If any of the new lines you've added or modified appear in this report, you should strongly consider adding tests which exercise them.

### Type Checking

Rich uses type annotations throughout, and `mypy` to do the checking.
Run the following to type check Rich:

```
make typecheck
```

Or if you don't have `make`:

```
mypy -p rich --config-file= --ignore-missing-imports --no-implicit-optional --warn-unreachable
```

Please add type annotations for all new code, and ensure that type checking succeeds before creating a pull request.

### Code Formatting

Rich uses [`black`](https://github.com/psf/black) for code formatting.
I recommend setting up black in your editor to format on save.

To run black from the command line, use `make format-check` to check your formatting,
and use `make format` to format and write to the files.

### Consider Documentation

Consider whether the change you made would benefit from documentation - if the feature has any user impact at all, the answer is almost certainly yes!
Documentation can be found in the `docs` directory.
There are some additional dependencies required to build the documentation. 
These dependencies can be installed by running (from the `docs` directory):

```
pip install -r requirements.txt
```

After updating the documentation, you can build them (from the project root directory) by running:

```
make docs
```

This will generate the static HTML for the documentation site at `docs/build/html`.

### Update CHANGELOG and CONTRIBUTORS

Before submitting your pull request, update the `CHANGELOG.md` file describing, briefly, what you've done.
Be sure to follow the format seen in the rest of the document.

If this is your first time contributing to Rich:

1. Welcome!
2. Be sure to add your name to `CONTRIBUTORS.md`.

### Pre-Commit

We strongly recommend you [install the pre-commit hooks](https://pre-commit.com/#installation) included in the repository.
These automatically run some of the checks described earlier each time you run `git commit`,
and over time can reduce development overhead quite considerably.

## Creating A Pull Request

Once your happy with your change and have ensured that all steps above have been followed (and checks have passed), you can create a pull request.
GitHub offers a guide on how to do this [here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork).
Please ensure that you include a good description of what your change does in your pull request, and link it to any relevant issues or discussions.

When you create your pull request, we'll run the checks described earlier. If they fail, please attempt to fix them as we're unlikely to be able to review your code until then.
If you've exhausted all options on trying to fix a failing check, feel free to leave a note saying so in the pull request and someone may be able to offer assistance.

### Code Review

After the checks in your pull request pass, someone will review your code.
There may be some discussion and, in most cases, a few iterations will be required to find a solution that works best.

## Afterwards

When the pull request is approved, it will be merged into the `master` branch.
Your change will only be available to users the next time Rich is released. 



================================================
FILE: CONTRIBUTORS.md
================================================
# Contributors

The following people have contributed to the development of Rich:

<!-- Add your name below, sort alphabetically by surname. Link to GitHub profile / your home page. -->

- [Patrick Arminio](https://github.com/patrick91)
- [Gregory Beauregard](https://github.com/GBeauregard/pyffstream)
- [Artur Borecki](https://github.com/pufereq)
- [Pedro Aaron](https://github.com/paaaron)
- [Robin Bowes](https://github.com/yo61)
- [Dennis Brakhane](https://github.com/brakhane)
- [Darren Burns](https://github.com/darrenburns)
- [Ceyda Cinarel](https://github.com/cceyda)
- [Jim Crist-Harif](https://github.com/jcrist)
- [Ed Davis](https://github.com/davised)
- [Pete Davison](https://github.com/pd93)
- [James Estevez](https://github.com/jstvz)
- [Jonathan Eunice](https://github.com/jonathan-3play)
- [Aryaz Eghbali](https://github.com/AryazE)
- [Oleksis Fraga](https://github.com/oleksis)
- [Andy Gimblett](https://github.com/gimbo)
- [Kai Giokas](https://github.com/kaisforza)
- [Tom Gooding](https://github.com/TomJGooding)
- [Micha艂 G贸rny](https://github.com/mgorny)
- [Nok Lam Chan](https://github.com/noklam)
- [Leron Gray](https://github.com/daddycocoaman)
- [Andre Hora](https://github.com/andrehora)
- [Kenneth Hoste](https://github.com/boegel)
- [Lanqing Huang](https://github.com/lqhuang)
- [Finn Hughes](https://github.com/finnhughes)
- [Logan Hunt](https://github.com/dosisod)
- [JP Hutchins](https://github.com/JPhutchins)
- [Ionite](https://github.com/ionite34)
- [Josh Karpel](https://github.com/JoshKarpel)
- [Jan Katins](https://github.com/jankatins)
- [Hugo van Kemenade](https://github.com/hugovk)
- [Andrew Kettmann](https://github.com/akettmann)
- [Alexander Krasnikov](https://github.com/askras)
- [Martin Larralde](https://github.com/althonos)
- [Hedy Li](https://github.com/hedythedev)
- [Henry Mai](https://github.com/tanducmai)
- [Luka Mamukashvili](https://github.com/UltraStudioLTD)
- [Alexander Mancevice](https://github.com/amancevice)
- [Will McGugan](https://github.com/willmcgugan)
- [Paul McGuire](https://github.com/ptmcg)
- [Antony Milne](https://github.com/AntonyMilneQB)
- [Michael Milton](https://github.com/multimeric)
- [Martina Oefelein](https://github.com/oefe)
- [Nathan Page](https://github.com/nathanrpage97)
- [Dave Pearson](https://github.com/davep/)
- [Avi Perl](https://github.com/avi-perl)
- [Laurent Peuch](https://github.com/psycojoker)
- [Ronny Pfannschmidt](https://github.com/RonnyPfannschmidt/)
- [Olivier Philippon](https://github.com/DrBenton)
- [Kylian Point](https://github.com/p0lux)
- [Kyle Pollina](https://github.com/kylepollina)
- [Sebasti谩n Ram铆rez](https://github.com/tiangolo)
- [Grant Ramsay](https://github.com/seapagan)
- [Felipe Guedes](https://github.com/guedesfelipe)
- [Min RK](https://github.com/minrk)
- [Cl茅ment Robert](https://github.com/neutrinoceros)
- [Brian Rutledge](https://github.com/bhrutledge)
- [Tushar Sadhwani](https://github.com/tusharsadhwani)
- [Luca Salvarani](https://github.com/LukeSavefrogs)
- [Paul Sanders](https://github.com/sanders41)
- [Louis Sautier](https://github.com/sbraz)
- [Tim Savage](https://github.com/timsavage)
- [Anthony Shaw](https://github.com/tonybaloney)
- [Damian Shaw](https://github.com/notatallshaw)
- [Nicolas Simonds](https://github.com/0xDEC0DE)
- [Aaron Stephens](https://github.com/aaronst)
- [Karolina Surma](https://github.com/befeleme)
- [Gabriele N. Tornetta](https://github.com/p403n1x87)
- [Nils Vu](https://github.com/nilsvu)
- [Arian Mollik Wasi](https://github.com/wasi-master)
- [Jan van Wijk](https://github.com/jdvanwijk)
- [Handhika Yanuar Pratama](https://github.com/theDreamer911)
- [za](https://github.com/za)
- [Motahhar Mokfi](https://github.com/motahhar)
- [Tomer Shalev](https://github.com/tomers)
- [Serkan UYSAL](https://github.com/uysalserkan)
- [Zhe Huang](https://github.com/onlyacat)
- [Adrian Zuber](https://github.com/xadrianzetx)
- [Ke Sun](https://github.com/ksun212)
- [Qiming Xu](https://github.com/xqm32)
- [James Addison](https://github.com/jayaddison)
- [Pierro](https://github.com/xpierroz)
- [Bernhard Wagner](https://github.com/bwagner)
- [Aaron Beaudoin](https://github.com/AaronBeaudoin)
- [Sam Woodward](https://github.com/PyWoody)
- [L. Yeung](https://github.com/lewis-yeung)
- [chthollyphile](https://github.com/chthollyphile)
- [Jonathan Helmus](https://github.com/jjhelmus)
- [Brandon Capener](https://github.com/bcapener)
- [Alex Zheng](https://github.com/alexzheng111)



================================================
FILE: FAQ.md
================================================

# Frequently Asked Questions
- [How do I log a renderable?](#how-do-i-log-a-renderable)
- [How do I render console markup in RichHandler?](#how-do-i-render-console-markup-in-richhandler)
- [Natively inserted ANSI escape sequence characters break alignment of Panel.](#natively-inserted-ansi-escape-sequence-characters-break-alignment-of-panel)
- [python -m rich.spinner shows extra lines.](#python--m-richspinner-shows-extra-lines)
- [Rich is automatically installing traceback handler.](#rich-is-automatically-installing-traceback-handler)
- [Strange colors in console output.](#strange-colors-in-console-output)
- [Why does content in square brackets disappear?](#why-does-content-in-square-brackets-disappear)
- [Why does emoji break alignment in a Table or Panel?](#why-does-emoji-break-alignment-in-a-table-or-panel)

<a name="how-do-i-log-a-renderable"></a>
## How do I log a renderable?

Python's logging module is designed to work with strings. Consequently you won't be able to log Rich renderables (Table, Tree, etc) by calling `logger.debug` or other similar method.

You could use the [capture](https://rich.readthedocs.io/en/latest/console.html#capturing-output) API to convert the renderable to a string and log that. However I would advise against it.

Logging supports configurable back-ends, which means that a log message could go somewhere other than the terminal -- which may not correctly render the formatting and style produced by Rich.

If you are only logging with a file-handler to stdout, then you probably don't need to use the logging module at all. Consider using [Console.log](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.log) which will render anything that you can print with Rich, with a timestamp.

<a name="how-do-i-render-console-markup-in-richhandler"></a>
## How do I render console markup in RichHandler?

Console markup won't work anywhere else, other than `RichHandler` -- which is why they are disabled by default.

See the docs if you want to [enable console markup](https://rich.readthedocs.io/en/latest/logging.html#logging-handler) in the logging handler.

<a name="natively-inserted-ansi-escape-sequence-characters-break-alignment-of-panel"></a>
## Natively inserted ANSI escape sequence characters break alignment of Panel.

If you print ansi escape sequences for color and style you may find the output breaks your output.
You may find that border characters in Panel and Table are in the wrong place, for example.

As a general rule, you should allow Rich to generate all ansi escape sequences, so it can correctly account for these invisible characters.
If you can't avoid a string with escape codes, you can convert it to an equivalent `Text` instance with `Text.from_ansi`.

<a name="python--m-richspinner-shows-extra-lines"></a>
## python -m rich.spinner shows extra lines.

The spinner example is know to break on some terminals (Windows in particular).

Some terminals don't display emoji with the correct width, which means Rich can't always align them accurately inside a panel.

<a name="rich-is-automatically-installing-traceback-handler"></a>
## Rich is automatically installing traceback handler.

Rich will never install the traceback handler automatically.

If you are getting Rich tracebacks and you don't want them, then some other piece of software is calling `rich.traceback.install()`.

<a name="strange-colors-in-console-output"></a>
## Strange colors in console output.

Rich will highlight certain patterns in your output such as numbers, strings, and other objects like IP addresses.

Occasionally this may also highlight parts of your output you didn't intend. See the [docs on highlighting](https://rich.readthedocs.io/en/latest/highlighting.html) for how to disable highlighting.

<a name="why-does-content-in-square-brackets-disappear"></a>
## Why does content in square brackets disappear?

Rich will treat text within square brackets as *markup tags*, for instance `"[bold]This is bold[/bold]"`.

If you are printing strings with literally square brackets you can either disable markup, or escape your strings.
See the docs on [console markup](https://rich.readthedocs.io/en/latest/markup.html) for how to do this.

<a name="why-does-emoji-break-alignment-in-a-table-or-panel"></a>
## Why does emoji break alignment in a Table or Panel?

Certain emoji take up double space within the terminal. Unfortunately, terminals don't always agree how wide a given character should be.

Rich has no way of knowing how wide a character will be on any given terminal. This can break alignment in containers like Table and Panel, where Rich needs to know the width of the content.

There are also *multiple codepoints* characters, such as country flags, and emoji modifiers, which produce wildly different results across terminal emulators.

Fortunately, most characters will work just fine. But you may have to avoid using the emojis that break alignment. You will get good results if you stick to emoji released on or before version 9 of the Unicode database,

<hr>

Generated by [FAQtory](https://github.com/willmcgugan/faqtory)



================================================
FILE: faq.yml
================================================
# FAQtory settings

faq_url: "https://github.com/textualize/rich/blob/master/FAQ.md" # Replace this with the URL to your FAQ.md!

questions_path: "./questions" # Where questions should be stored
output_path: "./FAQ.md" # Where FAQ.md should be generated 
templates_path: ".faq" # Path to templates



================================================
FILE: LICENSE
================================================
Copyright (c) 2020 Will McGugan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: make.bat
================================================
@ECHO OFF

pushd %~dp0

REM Command file for Sphinx documentation

if "%SPHINXBUILD%" == "" (
	set SPHINXBUILD=sphinx-build
)
set SOURCEDIR=source
set BUILDDIR=build

if "%1" == "" goto help

%SPHINXBUILD% >NUL 2>NUL
if errorlevel 9009 (
	echo.
	echo.The 'sphinx-build' command was not found. Make sure you have Sphinx
	echo.installed, then set the SPHINXBUILD environment variable to point
	echo.to the full path of the 'sphinx-build' executable. Alternatively you
	echo.may add the Sphinx directory to PATH.
	echo.
	echo.If you don't have Sphinx installed, grab it from
	echo.http://sphinx-doc.org/
	exit /b 1
)

%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%
goto end

:help
%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%

:end
popd



================================================
FILE: Makefile
================================================
test:
	TERM=unknown pytest --cov-report term-missing --cov=rich tests/ -vv
test-no-cov:
	TERM=unknown pytest tests/ -vv
format-check:
	black --check .
format:
	black .
typecheck:
	mypy -p rich --no-incremental
typecheck-report:
	mypy -p rich --html-report mypy_report
.PHONY: docs
docs:
	cd docs; make html



================================================
FILE: pyproject.toml
================================================
[tool.poetry]
name = "rich"
homepage = "https://github.com/Textualize/rich"
documentation = "https://rich.readthedocs.io/en/latest/"
version = "14.1.0"
description = "Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal"
authors = ["Will McGugan <willmcgugan@gmail.com>"]
license = "MIT"
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Framework :: IPython",
    "Intended Audience :: Developers",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]
include = ["rich/py.typed"]


[tool.poetry.dependencies]
python = ">=3.8.0"
pygments = "^2.13.0"
ipywidgets = { version = ">=7.5.1,<9", optional = true }
markdown-it-py = ">=2.2.0"

[tool.poetry.extras]
jupyter = ["ipywidgets"]

[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
black = "^22.6"
mypy = "^1.11"
pytest-cov = "^3.0.0"
attrs = "^21.4.0"
pre-commit = "^2.17.0"
asv = "^0.5.1"
typing-extensions = ">=4.0.0, <5.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.mypy]
files = ["rich"]
show_error_codes = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]


[[tool.mypy.overrides]]
module = ["pygments.*", "IPython.*", "ipywidgets.*"]
ignore_missing_imports = true


[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.isort]
profile = "black"



================================================
FILE: SECURITY.md
================================================
## Security contact information

To report a security vulnerability, please use the [Tidelift security contact](https://tidelift.com/security). Tidelift will coordinate the fix and disclosure.



================================================
FILE: setup.py
================================================
#!/usr/bin/env python

# This is a shim to hopefully allow Github to detect the package, build is done with poetry

import setuptools

if __name__ == "__main__":
    setuptools.setup(name="rich")



================================================
FILE: tox.ini
================================================
[tox]
minversion = 4.0.0
envlist =
    lint
    docs
    py{38,39,310,311,312,313}
isolated_build = True

[testenv]
description = Run unit-testing
deps =
    poetry
# do not put * in passenv as it may break builds due to reduced isolation
passenv =
    CI
    GITHUB_*
    HOME
    PYTEST_*
    SSH_AUTH_SOCK
    TERM
setenv =
    PYTHONDONTWRITEBYTECODE=1
    PYTHONUNBUFFERED=1
commands =
    poetry install
    pytest --cov-report term-missing --cov=rich tests/ {posargs}

[testenv:lint]
description = Runs all linting tasks
commands_pre =
    poetry install -vv --with lint
commands =
    ; poetry install --only dev
    # as long GHA pipelines are not configured to use tox, we should call
    # `make` in order to make testing similar and prevent divergence.
    make format-check
    make typecheck
deps =
    poetry
skip_install = true
allowlist_externals =
    make
    poetry

[testenv:docs]
description = Builds documentation
changedir = docs
deps =
    -r docs/requirements.txt
commands =
    sphinx-build -M html source build



================================================
FILE: .coveragerc
================================================
[run]
omit = rich/jupyter.py
    rich/_windows.py
    rich/_timer.py
    rich/diagnose.py

[report]
exclude_lines =
    pragma: no cover
    if TYPE_CHECKING:
    if __name__ == "__main__":
    @overload



================================================
FILE: .pre-commit-config.yaml
================================================
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
exclude: benchmarks/
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: check-ast
      - id: check-builtin-literals
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-json
      - id: check-toml
      - id: check-yaml
      - id: end-of-file-fixer
      - id: mixed-line-ending
      - id: check-vcs-permalinks
      - id: check-shebang-scripts-are-executable
      - id: trailing-whitespace
  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.10.0
    hooks:
      - id: python-no-log-warn
      - id: python-use-type-annotations
      - id: rst-directive-colons
      - id: rst-inline-touching-normal
  - repo: https://github.com/hadialqattan/pycln
    rev: v2.2.2
    hooks:
      - id: pycln
        args: [--all]
  - repo: https://github.com/psf/black-pre-commit-mirror
    rev: 23.11.0
    hooks:
      - id: black
        exclude: ^benchmarks/
  - repo: https://github.com/PyCQA/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: isort (python)
        language_version: "3.11"
        args: ["--profile", "black"]



================================================
FILE: .readthedocs.yml
================================================
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Build documentation in the docs/ directory with Sphinx
sphinx:
  configuration: docs/source/conf.py

# Optionally build your docs in additional formats such as PDF and ePub
formats: all

build:
  os: "ubuntu-24.04"
  tools:
    python: "3.12"

python:
  install:
    - requirements: docs/requirements.txt
    - method: pip
      path: .



================================================
FILE: assets/logo.ai
================================================
[Binary file]


================================================
FILE: assets/logo.txt
================================================
 .-----------.
/___/__|__\___\
\     oo      /
 \_o8o888___ /
 /888888(. .)8.
|"""""[H]\ /""|
|-- `. - |^| -|
|__ _)\__|_| _|
  _(________)_
 (____________)


================================================
FILE: benchmarks/README.md
================================================
# Benchmarking Rich

This directory contains benchmarks, for monitoring the performance of Rich over time.

View the benchmark dashboard [here](https://textualize.github.io/rich-benchmarks/).

The benchmarks use a tool called [Airspeed Velocity](https://asv.readthedocs.io/en/stable) (`asv`),
and we've configured it in [asv.conf.json](../asv.conf.json).

## Running Benchmarks

We strongly recommend running `asv run --help` for a full list of options, but
here are some common actions:

* You can run the benchmarks against the `master` branch with `asv run`.
* To test the most recent commit on your branch `asv run HEAD^!`.
* To generate a static website for browsing the results, run `asv publish`. The resulting HTML can be found in `benchmarks/html`.

The asv docs have some more examples [here](https://asv.readthedocs.io/en/stable/using.html#benchmarking).

## Updating the Benchmark Website

1. Ensure any tags you wish to benchmark are included in the file `asvhashfile` at the root of the repo.
2. Run the benchmarks for those tags by running `asv run HASHFILE:asvhashfile`. This will take several minutes.
3. Create the HTML locally for those benchmarks by running `asv publish`.
4. Run `asv preview` to launch a local webserver that will let you preview the benchmarks dashboard. Navigate to the URL this command gives you and check everything looks fine.
5. Checkout the `rich-benchmarks` repo from [here](https://github.com/Textualize/rich-benchmarks) and `cd` into it.
6. Copy the HTML you generated earlier into the root of this repo, e.g. `cp -r ../rich/benchmarks/html/* .` (assuming you checked out `rich-benchmarks` alongside `rich` in your filesystem)
7. When the HTML is merged into `main`, the [benchmark dashboard](https://textualize.github.io/rich-benchmarks/) will be updated automatically via a GitHub Action.



================================================
FILE: benchmarks/__init__.py
================================================
[Empty file]


================================================
FILE: benchmarks/benchmarks.py
================================================
from io import StringIO

from benchmarks import snippets
from rich.color import Color, ColorSystem
from rich.console import Console
from rich.pretty import Pretty
from rich.segment import Segment
from rich.style import Style
from rich.syntax import Syntax
from rich.table import Table
from rich.text import Text


class TextSuite:
    def setup(self):
        self.console = Console(
            file=StringIO(), color_system="truecolor", legacy_windows=False
        )
        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)
        self.text = Text.from_markup(snippets.MARKUP)

    def time_wrapping(self):
        self.text.wrap(self.console, 12, overflow="fold")

    def time_indent_guides(self):
        Text(snippets.PYTHON_SNIPPET).with_indent_guides()

    def time_fit(self):
        Text(snippets.LOREM_IPSUM).fit(12)

    def time_split(self):
        self.text.split()

    def time_divide(self):
        Text(snippets.LOREM_IPSUM).divide(range(20, 100, 4))

    def time_align_center(self):
        Text(snippets.LOREM_IPSUM).align("center", width=self.len_lorem_ipsum * 3)

    def time_render(self):
        list(self.text.render(self.console))

    def time_wrapping_unicode_heavy(self):
        Text(snippets.UNICODE_HEAVY_TEXT).wrap(self.console, 12, overflow="fold")

    def time_fit_unicode_heavy(self):
        Text(snippets.UNICODE_HEAVY_TEXT).fit(12)

    def time_split_unicode_heavy(self):
        Text(snippets.UNICODE_HEAVY_TEXT).split()

    def time_divide_unicode_heavy(self):
        self.text.divide(range(20, 100, 4))

    def time_align_center_unicode_heavy(self):
        Text(snippets.UNICODE_HEAVY_TEXT).align(
            "center", width=self.len_lorem_ipsum * 3
        )

    def time_render_unicode_heavy(self):
        list(Text(snippets.UNICODE_HEAVY_TEXT).render(self.console))


class TextHotCacheSuite:
    def setup(self):
        self.console = Console(
            file=StringIO(), color_system="truecolor", legacy_windows=False
        )

    def time_wrapping_unicode_heavy_warm_cache(self):
        for _ in range(20):
            Text(snippets.UNICODE_HEAVY_TEXT).wrap(self.console, 12, overflow="fold")


class SyntaxWrappingSuite:
    def setup(self):
        self.console = Console(
            file=StringIO(), color_system="truecolor", legacy_windows=False
        )
        self.syntax = Syntax(
            code=snippets.PYTHON_SNIPPET, lexer="python", word_wrap=True
        )

    def time_text_thin_terminal_heavy_wrapping(self):
        self._print_with_width(20)

    def time_text_thin_terminal_medium_wrapping(self):
        self._print_with_width(60)

    def time_text_wide_terminal_no_wrapping(self):
        self._print_with_width(100)

    def _print_with_width(self, width):
        self.console.print(self.syntax, width)


class TableSuite:
    def time_table_no_wrapping(self):
        self._print_table(width=100)

    def time_table_heavy_wrapping(self):
        self._print_table(width=30)

    def _print_table(self, width):
        table = Table(title="Star Wars Movies")
        console = Console(
            file=StringIO(), color_system="truecolor", legacy_windows=False, width=width
        )
        table.add_column("Released", justify="right", style="cyan", no_wrap=True)
        table.add_column("Title", style="magenta")
        table.add_column("Box Office", justify="right", style="green")
        table.add_row(
            "Dec 20, 2019", "[b]Star Wars[/]: The Rise of Skywalker", "$952,110,690"
        )
        table.add_row(
            "May 25, 2018", "Solo: A [red][b]Star Wars[/] Story[/]", "$393,151,347"
        )
        table.add_row(
            "Dec 15, 2017",
            "[b red]Star Wars[/] Ep. V111: The Last Jedi",
            "$1,332,539,889",
        )
        table.add_row(
            "Dec 16, 2016", "Rogue One: A [blue]Star Wars[/] Story", "$1,332,439,889"
        )
        console.print(table)


class PrettySuite:
    def setup(self):
        self.console = Console(
            file=StringIO(), color_system="truecolor", legacy_windows=False, width=100
        )

    def time_pretty(self):
        pretty = Pretty(snippets.PYTHON_DICT)
        self.console.print(pretty)

    def time_pretty_indent_guides(self):
        pretty = Pretty(snippets.PYTHON_DICT, indent_guides=True)
        self.console.print(pretty)

    def time_pretty_justify_center(self):
        pretty = Pretty(snippets.PYTHON_DICT, justify="center")
        self.console.print(pretty)


class StyleSuite:
    def setup(self):
        self.console = Console(
            file=StringIO(), color_system="truecolor", legacy_windows=False, width=100
        )
        self.style1 = Style.parse("blue on red")
        self.style2 = Style.parse("green italic bold")

    def time_parse_ansi(self):
        Style.parse("red on blue")

    def time_parse_hex(self):
        Style.parse("#f0f0f0 on #e2e28a")

    def time_parse_mixed_complex_style(self):
        Style.parse("dim bold reverse #00ee00 on rgb(123,12,50)")

    def time_style_add(self):
        self.style1 + self.style2


class ColorSuite:
    def setup(self):
        self.console = Console(
            file=StringIO(), color_system="truecolor", legacy_windows=False, width=100
        )
        self.color = Color.parse("#0d1da0")

    def time_downgrade_to_eight_bit(self):
        self.color.downgrade(ColorSystem.EIGHT_BIT)

    def time_downgrade_to_standard(self):
        self.color.downgrade(ColorSystem.STANDARD)

    def time_downgrade_to_windows(self):
        self.color.downgrade(ColorSystem.WINDOWS)


class ColorSuiteCached:
    def setup(self):
        self.console = Console(
            file=StringIO(), color_system="truecolor", legacy_windows=False, width=100
        )
        self.color = Color.parse("#0d1da0")
        # Warm cache
        self.color.downgrade(ColorSystem.EIGHT_BIT)
        self.color.downgrade(ColorSystem.STANDARD)
        self.color.downgrade(ColorSystem.WINDOWS)

    def time_downgrade_to_eight_bit(self):
        self.color.downgrade(ColorSystem.EIGHT_BIT)

    def time_downgrade_to_standard(self):
        self.color.downgrade(ColorSystem.STANDARD)

    def time_downgrade_to_windows(self):
        self.color.downgrade(ColorSystem.WINDOWS)


class SegmentSuite:
    def setup(self):
        self.line = [
            Segment("foo"),
            Segment("bar"),
            Segment("egg"),
            Segment("Where there is a Will"),
            Segment("There is a way"),
        ] * 2

    def test_divide_complex(self):
        list(Segment.divide(self.line, [5, 10, 20, 50, 108, 110, 118]))



================================================
FILE: benchmarks/snippets.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xaf in position 7503: illegal multibyte sequence


================================================
FILE: benchmarks/results/benchmarks.json
================================================
{
    "benchmarks.ColorSuite.time_downgrade_to_eight_bit": {
        "code": "class ColorSuite:\n    def time_downgrade_to_eight_bit(self):\n        self.color.downgrade(ColorSystem.EIGHT_BIT)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n        self.color = Color.parse(\"#0d1da0\")",
        "min_run_count": 2,
        "name": "benchmarks.ColorSuite.time_downgrade_to_eight_bit",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506",
        "warmup_time": -1
    },
    "benchmarks.ColorSuite.time_downgrade_to_standard": {
        "code": "class ColorSuite:\n    def time_downgrade_to_standard(self):\n        self.color.downgrade(ColorSystem.STANDARD)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n        self.color = Color.parse(\"#0d1da0\")",
        "min_run_count": 2,
        "name": "benchmarks.ColorSuite.time_downgrade_to_standard",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826",
        "warmup_time": -1
    },
    "benchmarks.ColorSuite.time_downgrade_to_windows": {
        "code": "class ColorSuite:\n    def time_downgrade_to_windows(self):\n        self.color.downgrade(ColorSystem.WINDOWS)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n        self.color = Color.parse(\"#0d1da0\")",
        "min_run_count": 2,
        "name": "benchmarks.ColorSuite.time_downgrade_to_windows",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91",
        "warmup_time": -1
    },
    "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": {
        "code": "class ColorSuiteCached:\n    def time_downgrade_to_eight_bit(self):\n        self.color.downgrade(ColorSystem.EIGHT_BIT)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n        self.color = Color.parse(\"#0d1da0\")\n        # Warm cache\n        self.color.downgrade(ColorSystem.EIGHT_BIT)\n        self.color.downgrade(ColorSystem.STANDARD)\n        self.color.downgrade(ColorSystem.WINDOWS)",
        "min_run_count": 2,
        "name": "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579",
        "warmup_time": -1
    },
    "benchmarks.ColorSuiteCached.time_downgrade_to_standard": {
        "code": "class ColorSuiteCached:\n    def time_downgrade_to_standard(self):\n        self.color.downgrade(ColorSystem.STANDARD)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n        self.color = Color.parse(\"#0d1da0\")\n        # Warm cache\n        self.color.downgrade(ColorSystem.EIGHT_BIT)\n        self.color.downgrade(ColorSystem.STANDARD)\n        self.color.downgrade(ColorSystem.WINDOWS)",
        "min_run_count": 2,
        "name": "benchmarks.ColorSuiteCached.time_downgrade_to_standard",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f",
        "warmup_time": -1
    },
    "benchmarks.ColorSuiteCached.time_downgrade_to_windows": {
        "code": "class ColorSuiteCached:\n    def time_downgrade_to_windows(self):\n        self.color.downgrade(ColorSystem.WINDOWS)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n        self.color = Color.parse(\"#0d1da0\")\n        # Warm cache\n        self.color.downgrade(ColorSystem.EIGHT_BIT)\n        self.color.downgrade(ColorSystem.STANDARD)\n        self.color.downgrade(ColorSystem.WINDOWS)",
        "min_run_count": 2,
        "name": "benchmarks.ColorSuiteCached.time_downgrade_to_windows",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d",
        "warmup_time": -1
    },
    "benchmarks.PrettySuite.time_pretty": {
        "code": "class PrettySuite:\n    def time_pretty(self):\n        pretty = Pretty(snippets.PYTHON_DICT)\n        self.console.print(pretty)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )",
        "min_run_count": 2,
        "name": "benchmarks.PrettySuite.time_pretty",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2",
        "warmup_time": -1
    },
    "benchmarks.PrettySuite.time_pretty_indent_guides": {
        "code": "class PrettySuite:\n    def time_pretty_indent_guides(self):\n        pretty = Pretty(snippets.PYTHON_DICT, indent_guides=True)\n        self.console.print(pretty)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )",
        "min_run_count": 2,
        "name": "benchmarks.PrettySuite.time_pretty_indent_guides",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259",
        "warmup_time": -1
    },
    "benchmarks.PrettySuite.time_pretty_justify_center": {
        "code": "class PrettySuite:\n    def time_pretty_justify_center(self):\n        pretty = Pretty(snippets.PYTHON_DICT, justify=\"center\")\n        self.console.print(pretty)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )",
        "min_run_count": 2,
        "name": "benchmarks.PrettySuite.time_pretty_justify_center",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f",
        "warmup_time": -1
    },
    "benchmarks.StyleSuite.time_parse_ansi": {
        "code": "class StyleSuite:\n    def time_parse_ansi(self):\n        Style.parse(\"red on blue\")\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n        self.style1 = Style.parse(\"blue on red\")\n        self.style2 = Style.parse(\"green italic bold\")",
        "min_run_count": 2,
        "name": "benchmarks.StyleSuite.time_parse_ansi",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ef195062397e8505c3a84b44f8357e0bf4e659abc9a92ae1028707afade51f8a",
        "warmup_time": -1
    },
    "benchmarks.StyleSuite.time_parse_hex": {
        "code": "class StyleSuite:\n    def time_parse_hex(self):\n        Style.parse(\"#f0f0f0 on #e2e28a\")\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n        self.style1 = Style.parse(\"blue on red\")\n        self.style2 = Style.parse(\"green italic bold\")",
        "min_run_count": 2,
        "name": "benchmarks.StyleSuite.time_parse_hex",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9077fcf6d594cd70a2eaeb984a0af1d8086f9ee865a4edffc0e00e7cec66963d",
        "warmup_time": -1
    },
    "benchmarks.StyleSuite.time_parse_mixed_complex_style": {
        "code": "class StyleSuite:\n    def time_parse_mixed_complex_style(self):\n        Style.parse(\"dim bold reverse #00ee00 on rgb(123,12,50)\")\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n        self.style1 = Style.parse(\"blue on red\")\n        self.style2 = Style.parse(\"green italic bold\")",
        "min_run_count": 2,
        "name": "benchmarks.StyleSuite.time_parse_mixed_complex_style",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1494bc2364e167cce5ae6752fa198ce43b323d4955b6944b5640d33988cdcabc",
        "warmup_time": -1
    },
    "benchmarks.StyleSuite.time_style_add": {
        "code": "class StyleSuite:\n    def time_style_add(self):\n        self.style1 + self.style2\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False, width=100\n        )\n        self.style1 = Style.parse(\"blue on red\")\n        self.style2 = Style.parse(\"green italic bold\")",
        "min_run_count": 2,
        "name": "benchmarks.StyleSuite.time_style_add",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c5f2383878cc982ab31d2624f4de284dcc12c3c299c94c3b1fc1d698dd8d8260",
        "warmup_time": -1
    },
    "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": {
        "code": "class SyntaxWrappingSuite:\n    def time_text_thin_terminal_heavy_wrapping(self):\n        self._print_with_width(20)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.syntax = Syntax(\n            code=snippets.PYTHON_SNIPPET, lexer=\"python\", word_wrap=True\n        )",
        "min_run_count": 2,
        "name": "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa",
        "warmup_time": -1
    },
    "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": {
        "code": "class SyntaxWrappingSuite:\n    def time_text_thin_terminal_medium_wrapping(self):\n        self._print_with_width(60)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.syntax = Syntax(\n            code=snippets.PYTHON_SNIPPET, lexer=\"python\", word_wrap=True\n        )",
        "min_run_count": 2,
        "name": "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9",
        "warmup_time": -1
    },
    "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": {
        "code": "class SyntaxWrappingSuite:\n    def time_text_wide_terminal_no_wrapping(self):\n        self._print_with_width(100)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.syntax = Syntax(\n            code=snippets.PYTHON_SNIPPET, lexer=\"python\", word_wrap=True\n        )",
        "min_run_count": 2,
        "name": "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2",
        "warmup_time": -1
    },
    "benchmarks.TableSuite.time_table_heavy_wrapping": {
        "code": "class TableSuite:\n    def time_table_heavy_wrapping(self):\n        self._print_table(width=30)",
        "min_run_count": 2,
        "name": "benchmarks.TableSuite.time_table_heavy_wrapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de",
        "warmup_time": -1
    },
    "benchmarks.TableSuite.time_table_no_wrapping": {
        "code": "class TableSuite:\n    def time_table_no_wrapping(self):\n        self._print_table(width=100)",
        "min_run_count": 2,
        "name": "benchmarks.TableSuite.time_table_no_wrapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9",
        "warmup_time": -1
    },
    "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": {
        "code": "class TextHotCacheSuite:\n    def time_wrapping_unicode_heavy_warm_cache(self):\n        for _ in range(20):\n            Text(snippets.UNICODE_HEAVY_TEXT).wrap(self.console, 12, overflow=\"fold\")\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585",
        "warmup_time": -1
    },
    "benchmarks.TextSuite.time_align_center": {
        "code": "class TextSuite:\n    def time_align_center(self):\n        Text(snippets.LOREM_IPSUM).align(\"center\", width=self.len_lorem_ipsum * 3)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)",
        "min_run_count": 2,
        "name": "benchmarks.TextSuite.time_align_center",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a8b6e02d49879810e61cd70701e4a41a61682871ba4a4b2f4273ace0bdb1250b",
        "warmup_time": -1
    },
    "benchmarks.TextSuite.time_align_center_unicode_heavy": {
        "code": "class TextSuite:\n    def time_align_center_unicode_heavy(self):\n        Text(snippets.UNICODE_HEAVY_TEXT).align(\n            \"center\", width=self.len_lorem_ipsum * 3\n        )\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)",
        "min_run_count": 2,
        "name": "benchmarks.TextSuite.time_align_center_unicode_heavy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c65e269d15b432f2add210392f1126e0759c869fca2ae08729cf6baba45f3a15",
        "warmup_time": -1
    },
    "benchmarks.TextSuite.time_divide": {
        "code": "class TextSuite:\n    def time_divide(self):\n        Text(snippets.LOREM_IPSUM).divide(range(20, 100, 4))\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)",
        "min_run_count": 2,
        "name": "benchmarks.TextSuite.time_divide",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "11caa260e10d0b561700f4457776c1548091694f5939e1cb201f494c44988c67",
        "warmup_time": -1
    },
    "benchmarks.TextSuite.time_divide_unicode_heavy": {
        "code": "class TextSuite:\n    def time_divide_unicode_heavy(self):\n        self.text.divide(range(20, 100, 4))\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)",
        "min_run_count": 2,
        "name": "benchmarks.TextSuite.time_divide_unicode_heavy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "44af19dfa643c363c09525d54342353925b59b3701794c06f5b056cd4cf85a72",
        "warmup_time": -1
    },
    "benchmarks.TextSuite.time_fit": {
        "code": "class TextSuite:\n    def time_fit(self):\n        Text(snippets.LOREM_IPSUM).fit(12)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)",
        "min_run_count": 2,
        "name": "benchmarks.TextSuite.time_fit",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "58c2358185e76c28a0552ba5bee2b9184fbaf918b9f34485b8940a971f166b38",
        "warmup_time": -1
    },
    "benchmarks.TextSuite.time_fit_unicode_heavy": {
        "code": "class TextSuite:\n    def time_fit_unicode_heavy(self):\n        Text(snippets.UNICODE_HEAVY_TEXT).fit(12)\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)",
        "min_run_count": 2,
        "name": "benchmarks.TextSuite.time_fit_unicode_heavy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "55d075d8f450b944e46b02814deedab2f4b05cb5550a2b4e0dcbb04dea51246b",
        "warmup_time": -1
    },
    "benchmarks.TextSuite.time_indent_guides": {
        "code": "class TextSuite:\n    def time_indent_guides(self):\n        Text(snippets.PYTHON_SNIPPET).with_indent_guides()\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)",
        "min_run_count": 2,
        "name": "benchmarks.TextSuite.time_indent_guides",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a90fc2f17dbf830377011b10d0b9d263b6c7fc06215b9e47e264cd129851f421",
        "warmup_time": -1
    },
    "benchmarks.TextSuite.time_render": {
        "code": "class TextSuite:\n    def time_render(self):\n        list(self.text.render(self.console))\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)",
        "min_run_count": 2,
        "name": "benchmarks.TextSuite.time_render",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4d859e28c2f3d6fd67f25a1d92b2b865110be2ad42b26faa6549816824f1d06b",
        "warmup_time": -1
    },
    "benchmarks.TextSuite.time_render_unicode_heavy": {
        "code": "class TextSuite:\n    def time_render_unicode_heavy(self):\n        list(Text(snippets.UNICODE_HEAVY_TEXT).render(self.console))\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)",
        "min_run_count": 2,
        "name": "benchmarks.TextSuite.time_render_unicode_heavy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4c10b25361392c9889c32587b68541e3dff0a4fe069405d7f5e5763deb07e3c1",
        "warmup_time": -1
    },
    "benchmarks.TextSuite.time_split": {
        "code": "class TextSuite:\n    def time_split(self):\n        self.text.split()\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)",
        "min_run_count": 2,
        "name": "benchmarks.TextSuite.time_split",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cf8cd074f1b4bbd424d0cad4548c43a9cd19f7b5a8da2a1598bfa1cbaac5223c",
        "warmup_time": -1
    },
    "benchmarks.TextSuite.time_split_unicode_heavy": {
        "code": "class TextSuite:\n    def time_split_unicode_heavy(self):\n        Text(snippets.UNICODE_HEAVY_TEXT).split()\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)",
        "min_run_count": 2,
        "name": "benchmarks.TextSuite.time_split_unicode_heavy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "33cad3b4a38b0ed37ade46bda66bc9e84e0f73e3519cc77ac02d7da5123a9137",
        "warmup_time": -1
    },
    "benchmarks.TextSuite.time_wrapping": {
        "code": "class TextSuite:\n    def time_wrapping(self):\n        self.text.wrap(self.console, 12, overflow=\"fold\")\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)",
        "min_run_count": 2,
        "name": "benchmarks.TextSuite.time_wrapping",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "961df5c6a57de40e2a07182136f3644f42f1dcab1017b571383e5cb2b3dcbf46",
        "warmup_time": -1
    },
    "benchmarks.TextSuite.time_wrapping_unicode_heavy": {
        "code": "class TextSuite:\n    def time_wrapping_unicode_heavy(self):\n        Text(snippets.UNICODE_HEAVY_TEXT).wrap(self.console, 12, overflow=\"fold\")\n\n    def setup(self):\n        self.console = Console(\n            file=StringIO(), color_system=\"truecolor\", legacy_windows=False\n        )\n        self.len_lorem_ipsum = len(snippets.LOREM_IPSUM)\n        self.text = Text.from_markup(snippets.MARKUP)",
        "min_run_count": 2,
        "name": "benchmarks.TextSuite.time_wrapping_unicode_heavy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0c9e448fb577a673d91bfd3d0da5ade88ee11474cf9113869e669cbc6cf4c444",
        "warmup_time": -1
    },
    "version": 2
}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/008854c4-virtualenv-py3.10.json
================================================
{"commit_hash": "008854c40772f647dfcb873bc3489e8a1c02d598", "env_name": "virtualenv-py3.10", "date": 1637075489000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7035716302047938e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928217146, 0.46624, [1.6888e-07], [1.7084e-07], [1.6954e-07], [1.7059e-07], [64507], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.6999220365271978e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928217378, 0.46342, [1.6946e-07], [1.7071e-07], [1.6971e-07], [1.7025e-07], [64388], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.705959185914513e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928217609, 0.46502, [1.7011e-07], [1.7493e-07], [1.7037e-07], [1.7071e-07], [64341], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.711256779402836e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928217842, 0.45987, [1.7047e-07], [1.7261e-07], [1.7068e-07], [1.7214e-07], [62696], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7014178724238976e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928218069, 0.46676, [1.6902e-07], [1.7069e-07], [1.6927e-07], [1.7051e-07], [64572], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7013324018204837e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928218303, 0.46615, [1.6918e-07], [1.71e-07], [1.6998e-07], [1.7022e-07], [64455], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010385562491137534], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928218536, 0.44839, [0.0010342], [0.00104], [0.0010376], [0.0010389], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001431178569743809], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928218763, 0.44502, [0.0014269], [0.0014359], [0.0014294], [0.0014329], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013053151888016146], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928218985, 0.4466, [0.0013027], [0.0013118], [0.0013032], [0.0013099], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1445022795827479e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928219212, 0.46433, [1.1412e-07], [1.1496e-07], [1.142e-07], [1.1451e-07], [95867], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1444926984658398e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928219445, 0.46101, [1.1417e-07], [1.1495e-07], [1.1439e-07], [1.1459e-07], [94717], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.143986341348774e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928219676, 0.46373, [1.1417e-07], [1.1477e-07], [1.1422e-07], [1.1456e-07], [95762], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928213573, 0.066215], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928213639, 0.065625], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928213705, 0.06561], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0022121749992948026], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928219909, 0.45152, [0.0021968], [0.0022231], [0.0022017], [0.0022177], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0013260781233839225], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928220133, 0.4509, [0.0013202], [0.001333], [0.0013225], [0.0013307], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003805550711279336], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928220362, 0.45659, [0.00037934], [0.00038202], [0.00037965], [0.00038125], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003435833335970528], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928220588, 0.44641, [0.00034278], [0.00035311], [0.00034335], [0.0003441], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5334508214834553e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928220810, 0.45831, [2.522e-05], [2.5397e-05], [2.5275e-05], [2.5375e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018464978473212826], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928221039, 0.45538, [0.00018365], [0.00018535], [0.00018439], [0.00018505], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.365042651461779e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928221266, 0.44809, [4.3544e-05], [4.3812e-05], [4.3606e-05], [4.3712e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.000324408596967377], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928221494, 0.43784, [0.00032342], [0.00032574], [0.00032417], [0.00032474], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003565991375643503], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928221712, 0.44593, [0.00035519], [0.00035747], [0.00035609], [0.00035693], [29], [10]], "benchmarks.TextSuite.time_render": [[4.685463392417188e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928221933, 0.45241, [4.6655e-06], [4.7012e-06], [4.6724e-06], [4.697e-06], [2322], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.538582668856051e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928222164, 0.4562, [8.4747e-05], [8.5469e-05], [8.5327e-05], [8.5445e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.527893463767505e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928222393, 0.44906, [3.5225e-05], [3.5336e-05], [3.5256e-05], [3.5322e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002748963815975003], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928222622, 0.44825, [0.0002742], [0.0002753], [0.00027443], [0.00027514], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001095529149461072], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928222845, 0.45723, [0.0010899], [0.0010965], [0.0010916], [0.0010959], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013660130625794409], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928223077, 0.45712, [0.0013642], [0.0013703], [0.0013647], [0.0013681], [8], [10]]}, "durations": {"<build>": 1.993987798690796}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/03392a1b-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "03392a1bf51296b52f1184a1adfeb3bcc5964537", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1646756778000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.738586932037403e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825783382, 0.45367, [1.7009e-07], [1.7675e-07], [1.7297e-07], [1.7427e-07], [64374], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.723085623473925e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825783609, 0.45987, [1.7069e-07], [1.7519e-07], [1.7169e-07], [1.7336e-07], [64185], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7191213146343672e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825783842, 0.4471, [1.7078e-07], [1.755e-07], [1.7147e-07], [1.7305e-07], [64111], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7480414383113038e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825784065, 0.47098, [1.7336e-07], [1.7963e-07], [1.7436e-07], [1.7763e-07], [64501], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7323096606325328e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825784299, 0.4486, [1.7026e-07], [1.7473e-07], [1.7195e-07], [1.7422e-07], [59225], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7212217185985377e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825784519, 0.46225, [1.7095e-07], [1.7441e-07], [1.7182e-07], [1.7394e-07], [64732], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011315717905138931], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825784753, 0.44776, [0.0011214], [0.0011467], [0.0011244], [0.0011402], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001592616001809282], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825784975, 0.4537, [0.0015711], [0.0016068], [0.0015899], [0.0015957], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014231197419576347], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825785199, 0.47133, [0.0014165], [0.0014553], [0.0014203], [0.0014331], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.146300390136868e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825785428, 0.46149, [1.1435e-07], [1.1584e-07], [1.1451e-07], [1.1561e-07], [96121], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1486444436295733e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825785663, 0.4626, [1.1443e-07], [1.1541e-07], [1.1472e-07], [1.1502e-07], [93121], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1674455186399795e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825785895, 0.45923, [1.1638e-07], [1.1853e-07], [1.1646e-07], [1.1687e-07], [90627], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008622604247648269], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825786120, 0.52476, [0.0083983], [0.008688], [0.0085029], [0.0086519], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.00847084348788485], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825786383, 0.52402, [0.008408], [0.0088033], [0.0084445], [0.0085167], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008550531463697553], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825786646, 0.52076, [0.0084579], [0.0086286], [0.008481], [0.0085728], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019143819226883352], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825786907, 0.45865, [0.0018906], [0.0019471], [0.0019011], [0.0019205], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011872199441616733], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825787137, 0.45435, [0.0011653], [0.0012711], [0.0011818], [0.0012011], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038607810607313046], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825787366, 0.4641, [0.00038143], [0.0003936], [0.00038216], [0.00038999], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003416095447215823], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825787600, 0.44888, [0.00033924], [0.00035135], [0.00034021], [0.00034544], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5654608274207393e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825787829, 0.45379, [2.549e-05], [2.6352e-05], [2.5573e-05], [2.5977e-05], [425], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018742816434402402], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825788061, 0.46248, [0.00018461], [0.0001897], [0.00018535], [0.0001896], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.4319670277870134e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825788292, 0.45522, [4.4177e-05], [4.48e-05], [4.4262e-05], [4.4388e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003343661647346435], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825788523, 0.46974, [0.00033042], [0.00033629], [0.00033348], [0.00033466], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036045115698000476], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825788757, 0.45264, [0.00035544], [0.00036954], [0.00035639], [0.00036479], [29], [10]], "benchmarks.TextSuite.time_render": [[4.6998019517272645e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825788982, 0.45762, [4.6888e-06], [4.8101e-06], [4.6936e-06], [4.759e-06], [2315], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.597965792232141e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825789217, 0.46523, [8.5302e-05], [8.8217e-05], [8.5555e-05], [8.7521e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.587506696215418e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825789451, 0.45929, [3.5783e-05], [3.6182e-05], [3.584e-05], [3.5921e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002828251055784916], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825789684, 0.45846, [0.00028009], [0.00028469], [0.00028076], [0.00028337], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0014092838682699949], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825789914, 0.45332, [0.0013994], [0.0014623], [0.0014072], [0.0014124], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001465916633605957], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825790139, 0.46382, [0.001449], [0.0015041], [0.001452], [0.00149], [7], [10]]}, "durations": {"<build>": 2.194915771484375}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/038e22eb-virtualenv-py3.10.json
================================================
{"commit_hash": "038e22eb98f43091dec8b8d0d61d64bdc81587e1", "env_name": "virtualenv-py3.10", "date": 1594138139000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.729106605775907e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928640177, 0.43136, [1.7119e-07], [1.7374e-07], [1.7273e-07], [1.7318e-07], [64462], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7035370737857387e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928640392, 0.44888, [1.6988e-07], [1.7186e-07], [1.6997e-07], [1.7048e-07], [64477], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7047515896829772e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928640616, 0.42317, [1.6924e-07], [1.7381e-07], [1.7035e-07], [1.7153e-07], [58794], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7047298404720672e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928640825, 0.44556, [1.6861e-07], [1.7187e-07], [1.6999e-07], [1.7085e-07], [63907], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.71390516393423e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928641048, 0.44882, [1.7014e-07], [1.7357e-07], [1.709e-07], [1.7308e-07], [63900], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.744885266285576e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928641273, 0.44227, [1.7217e-07], [1.7538e-07], [1.7435e-07], [1.7464e-07], [63974], [10]], "benchmarks.PrettySuite.time_pretty": [[0.002236624999204651], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928641499, 0.43861, [0.0021997], [0.0022581], [0.0022029], [0.0022493], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928636448, 0.058911], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928636507, 0.057772], "benchmarks.StyleSuite.time_parse_ansi": [[1.1626796234512727e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928641713, 0.44141, [1.1569e-07], [1.1726e-07], [1.1604e-07], [1.1694e-07], [95978], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1625082095912241e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928641940, 0.44191, [1.1595e-07], [1.1657e-07], [1.1618e-07], [1.1635e-07], [95909], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1623847141055007e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928642166, 0.42404, [1.1596e-07], [1.1692e-07], [1.1614e-07], [1.165e-07], [87889], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928637209, 0.058057], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928637267, 0.057965], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928637325, 0.057995], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002097733397386037], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928642378, 0.43318, [0.0020881], [0.002106], [0.0020953], [0.0020996], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014561786436908214], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928642597, 0.42624, [0.0014479], [0.0014879], [0.0014535], [0.0014615], [7], [10]], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928637809, 0.058426], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928637867, 0.059389], "benchmarks.TextSuite.time_divide": [[2.82270456867915e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928642813, 0.44399, [2.7734e-05], [2.8296e-05], [2.8159e-05], [2.8267e-05], [383], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018870366379971905], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928643034, 0.44717, [0.00018698], [0.00019097], [0.00018709], [0.00019079], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.2186997972062254e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928643257, 0.42928, [4.1829e-05], [4.3051e-05], [4.2103e-05], [4.226e-05], [249], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033193616142060845], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928643474, 0.42973, [0.00032893], [0.00033488], [0.00032933], [0.00033474], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928638805, 0.059468], "benchmarks.TextSuite.time_render": [[4.676226441955534e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928643686, 0.43895, [4.6596e-06], [4.6958e-06], [4.6666e-06], [4.6899e-06], [2334], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.542105865672056e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928643908, 0.44446, [8.4226e-05], [8.6087e-05], [8.5119e-05], [8.5493e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.3808601625834504e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928644131, 0.43505, [3.3655e-05], [3.4416e-05], [3.3714e-05], [3.3908e-05], [310], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028220945977089877], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928644347, 0.43169, [0.0002795], [0.00028561], [0.00028002], [0.00028487], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001159650499984208], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928644562, 0.43483, [0.0011544], [0.0011648], [0.0011576], [0.0011619], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015485863571354586], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928644777, 0.43928, [0.0015465], [0.0015546], [0.0015474], [0.0015494], [7], [10]]}, "durations": {"<build>": 1.9543161392211914}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/03a52134-virtualenv-py3.10.json
================================================
{"commit_hash": "03a521346841b02543fee9c24b8410ba18f5cbc2", "env_name": "virtualenv-py3.10", "date": 1592739098000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.732792605353703e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928533719, 0.43955, [1.7138e-07], [1.7406e-07], [1.7286e-07], [1.7346e-07], [64139], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.6970906436346935e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928533944, 0.44915, [1.6905e-07], [1.705e-07], [1.6959e-07], [1.6989e-07], [64772], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.6982199066696146e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928534168, 0.45178, [1.6804e-07], [1.7053e-07], [1.6916e-07], [1.7004e-07], [64963], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.6982711725640974e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928534392, 0.4412, [1.6924e-07], [1.7046e-07], [1.6942e-07], [1.7034e-07], [62768], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7288929496018685e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928534610, 0.44858, [1.6956e-07], [1.7443e-07], [1.7173e-07], [1.7345e-07], [64315], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.699072281307717e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928534834, 0.4454, [1.6868e-07], [1.7543e-07], [1.6949e-07], [1.7154e-07], [63640], [10]], "benchmarks.PrettySuite.time_pretty": [[0.002187125000637025], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928535053, 0.44306, [0.00218], [0.0021985], [0.0021808], [0.0021907], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928529968, 0.058909], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928530027, 0.059107], "benchmarks.StyleSuite.time_parse_ansi": [[1.1490100967193674e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928535276, 0.43837, [1.1388e-07], [1.1596e-07], [1.1411e-07], [1.1584e-07], [96272], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1559417175171943e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928535490, 0.43868, [1.1381e-07], [1.1605e-07], [1.1413e-07], [1.1598e-07], [96547], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1592269480731486e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928535705, 0.44312, [1.1555e-07], [1.164e-07], [1.158e-07], [1.1599e-07], [96727], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928530764, 0.059019], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928530823, 0.058681], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928530881, 0.059408], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001988930584047921], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928535920, 0.44773, [0.0019831], [0.0019934], [0.0019869], [0.0019901], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014236250010851237], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928536147, 0.41848, [0.0014186], [0.001429], [0.0014217], [0.0014241], [7], [10]], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928531371, 0.060538], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928531431, 0.060402], "benchmarks.TextSuite.time_divide": [[2.775736257808127e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928536357, 0.43079, [2.7611e-05], [2.8057e-05], [2.7665e-05], [2.7871e-05], [382], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001868461317427685], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928536574, 0.43723, [0.00018607], [0.00018762], [0.00018672], [0.00018697], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.197180313927806e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928536792, 0.43314, [4.1868e-05], [4.202e-05], [4.1943e-05], [4.1989e-05], [249], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003302661287072565], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928537007, 0.42544, [0.0003299], [0.00033073], [0.00032999], [0.00033041], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928532359, 0.057377], "benchmarks.TextSuite.time_render": [[4.669984376312342e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928537218, 0.43598, [4.6429e-06], [4.6792e-06], [4.6504e-06], [4.6743e-06], [2336], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.605167328831043e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928537440, 0.4401, [8.4488e-05], [8.6817e-05], [8.5137e-05], [8.6702e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.381108864203035e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928537661, 0.43419, [3.3735e-05], [3.4393e-05], [3.3805e-05], [3.3857e-05], [310], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028198704043264826], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928537877, 0.42977, [0.00027838], [0.00028552], [0.00027877], [0.00028487], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011455208894201657], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928538090, 0.43299, [0.0011423], [0.0011705], [0.0011438], [0.0011485], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015198899283339934], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928538303, 0.4321, [0.0015137], [0.0015273], [0.0015154], [0.0015216], [7], [10]]}, "durations": {"<build>": 1.9656128883361816}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/06922006-virtualenv-py3.10.json
================================================
{"commit_hash": "06922006f2eb141255336a22e8918771d14d5760", "env_name": "virtualenv-py3.10", "date": 1596915390000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7116855250635132e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928817115, 0.45149, [1.6996e-07], [1.7372e-07], [1.7037e-07], [1.728e-07], [64422], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7205937146409013e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928817342, 0.4284, [1.7001e-07], [1.7378e-07], [1.7089e-07], [1.7296e-07], [64408], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.718094621607509e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928817557, 0.42505, [1.6959e-07], [1.7619e-07], [1.6998e-07], [1.738e-07], [58962], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.734700151950903e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928817765, 0.42576, [1.7169e-07], [1.7401e-07], [1.7311e-07], [1.7367e-07], [58813], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7283145947130278e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928817977, 0.42386, [1.7134e-07], [1.732e-07], [1.7237e-07], [1.7304e-07], [58876], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7188267216783956e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928818188, 0.44138, [1.696e-07], [1.7479e-07], [1.6988e-07], [1.7443e-07], [64405], [10]], "benchmarks.PrettySuite.time_pretty": [[0.00176616666673605], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928818413, 0.43985, [0.0017587], [0.0017705], [0.0017615], [0.001769], [6], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928813055, 0.057998], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928813113, 0.058127], "benchmarks.StyleSuite.time_parse_ansi": [[1.1574203558648017e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928818635, 0.42493, [1.1415e-07], [1.181e-07], [1.1431e-07], [1.1774e-07], [87607], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1535711243895231e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928818845, 0.4467, [1.1389e-07], [1.1713e-07], [1.1419e-07], [1.167e-07], [94221], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1586251464308279e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928819067, 0.42387, [1.1517e-07], [1.1694e-07], [1.152e-07], [1.1659e-07], [87613], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928813824, 0.058092], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928813882, 0.057965], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928813940, 0.057861], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002284054202027619], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928819278, 0.43931, [0.0022566], [0.0023089], [0.0022619], [0.0023023], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014851547873279613], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928819500, 0.43252, [0.0014655], [0.0015028], [0.0014695], [0.0015002], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006723583326674997], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928819717, 0.42797, [0.00067161], [0.00067476], [0.00067182], [0.00067301], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.000555773025936153], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928819928, 0.43679, [0.00054603], [0.00056113], [0.00055471], [0.00055918], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8365185540966004e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928820143, 0.44351, [2.8288e-05], [2.8557e-05], [2.8321e-05], [2.8437e-05], [380], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00019076937710531383], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928820364, 0.44435, [0.00019003], [0.00019103], [0.00019072], [0.00019084], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.285541601711884e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928820586, 0.43266, [4.2737e-05], [4.3026e-05], [4.2791e-05], [4.29e-05], [250], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033007056411025267], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928820806, 0.42771, [0.0003297], [0.00033134], [0.00032993], [0.00033064], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928815745, 0.05813], "benchmarks.TextSuite.time_render": [[4.671494408579894e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928821019, 0.43625, [4.6631e-06], [4.6778e-06], [4.6651e-06], [4.6749e-06], [2326], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.538090562040911e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928821241, 0.43988, [8.4912e-05], [8.5618e-05], [8.5161e-05], [8.5396e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.424668306437363e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928821463, 0.44361, [3.4096e-05], [3.4381e-05], [3.423e-05], [3.4347e-05], [314], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002832049594380314], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928821683, 0.43273, [0.00028055], [0.00028555], [0.00028097], [0.00028471], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011634791654715729], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928821900, 0.44061, [0.0011491], [0.0011764], [0.0011613], [0.0011699], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015536130709473842], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928822120, 0.43993, [0.0015497], [0.0015567], [0.0015522], [0.0015542], [7], [10]]}, "durations": {"<build>": 1.9717209339141846}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/06aa1271-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "06aa127155e1e7ba0eef8317048483c00567d899", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1650369416000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7091647930768026e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825688714, 0.46688, [1.6982e-07], [1.7148e-07], [1.7069e-07], [1.7108e-07], [64792], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7129722836399632e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825688950, 0.46942, [1.696e-07], [1.7257e-07], [1.707e-07], [1.7176e-07], [64319], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.716386874893833e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825689186, 0.45755, [1.7015e-07], [1.7458e-07], [1.7097e-07], [1.7246e-07], [63895], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.712795841272511e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825689419, 0.46564, [1.7038e-07], [1.7446e-07], [1.7101e-07], [1.7176e-07], [64249], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7105952255205924e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825689652, 0.46619, [1.6917e-07], [1.7239e-07], [1.7066e-07], [1.7141e-07], [64328], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7133783390386332e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825689885, 0.43871, [1.6989e-07], [1.7387e-07], [1.7015e-07], [1.7238e-07], [58573], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010407645953819157], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825690103, 0.4594, [0.0010322], [0.0010962], [0.0010382], [0.0010595], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014682886955727423], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825690331, 0.45839, [0.0014622], [0.0014944], [0.0014645], [0.0014742], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0011519074388262299], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825690557, 0.45507, [0.0011384], [0.001188], [0.0011414], [0.0011797], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1533400223667848e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825690785, 0.46737, [1.141e-07], [1.1738e-07], [1.1497e-07], [1.1572e-07], [95679], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1495592763776299e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825691020, 0.44095, [1.1429e-07], [1.1904e-07], [1.147e-07], [1.1526e-07], [87450], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1496228324955617e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825691241, 0.46498, [1.1441e-07], [1.16e-07], [1.1478e-07], [1.1518e-07], [95357], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007626176986377686], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825691474, 0.50547, [0.0075528], [0.0077011], [0.007599], [0.0076355], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007669510261621326], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825691719, 0.53188, [0.0075999], [0.0087976], [0.0076171], [0.0086166], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.00778645824175328], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825691980, 0.51245, [0.0076697], [0.0079784], [0.0077158], [0.0078867], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017417673952877522], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825692243, 0.45091, [0.0017356], [0.0017924], [0.0017389], [0.0017537], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0010781229473650455], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825692470, 0.44714, [0.0010707], [0.001086], [0.0010716], [0.001083], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003790200549971174], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825692693, 0.44863, [0.0003726], [0.00038489], [0.00037424], [0.00038211], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003457743170050283], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825692913, 0.44784, [0.00033898], [0.00035324], [0.00034076], [0.00035013], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5513468765068887e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825693134, 0.4539, [2.5377e-05], [2.5595e-05], [2.5431e-05], [2.5551e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018499461243507163], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825693367, 0.45959, [0.0001845], [0.00018991], [0.00018463], [0.00018566], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3716123592623365e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825693597, 0.45222, [4.3385e-05], [4.5201e-05], [4.3469e-05], [4.4187e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032998106061396277], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825693828, 0.465, [0.00032351], [0.00033141], [0.00032466], [0.00033036], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.000357395828830014], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825694061, 0.44938, [0.00035535], [0.00035968], [0.00035583], [0.00035807], [29], [10]], "benchmarks.TextSuite.time_render": [[4.7052404072466255e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825694285, 0.45785, [4.6891e-06], [4.7381e-06], [4.6974e-06], [4.7121e-06], [2344], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.548769593884157e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825694518, 0.46041, [8.4844e-05], [8.968e-05], [8.5212e-05], [8.5647e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5525026931208656e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825694749, 0.45955, [3.5263e-05], [3.6138e-05], [3.5425e-05], [3.5607e-05], [298], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002795822403736805], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825694979, 0.45868, [0.00027644], [0.00028538], [0.00027811], [0.00028017], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011073853936977684], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825695208, 0.44965, [0.0011023], [0.0011451], [0.0011051], [0.0011183], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013585911219706759], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825695432, 0.45998, [0.0013531], [0.001392], [0.0013566], [0.0013612], [8], [10]]}, "durations": {"<build>": 1.8455781936645508}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/07d51ffc-virtualenv-py3.10.json
================================================
{"commit_hash": "07d51ffc1aee6f16bd2e5a25b4e82850fb9ed778", "env_name": "virtualenv-py3.10", "date": 1638042089000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7045601798784003e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929425854, 0.43978, [1.6946e-07], [1.7115e-07], [1.7022e-07], [1.7069e-07], [59058], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7007710882553625e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929426074, 0.46565, [1.6853e-07], [1.705e-07], [1.6958e-07], [1.702e-07], [64636], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.699667194811625e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929426307, 0.4621, [1.6879e-07], [1.778e-07], [1.6982e-07], [1.7032e-07], [64557], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.6998402696141218e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929426541, 0.46553, [1.685e-07], [1.7093e-07], [1.6928e-07], [1.7021e-07], [64484], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.6968556558179902e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929426774, 0.46274, [1.6922e-07], [1.7062e-07], [1.6943e-07], [1.6986e-07], [63972], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6945227762756885e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929427005, 0.46476, [1.6851e-07], [1.7005e-07], [1.69e-07], [1.6993e-07], [64498], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001105658350570593], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929427238, 0.45655, [0.0011016], [0.001111], [0.0011041], [0.0011073], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001518580355748002], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929427464, 0.45154, [0.0015111], [0.0015253], [0.0015168], [0.0015196], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013998801241541514], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929427692, 0.45335, [0.001397], [0.0014065], [0.0013997], [0.0014036], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1418527013357237e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929427918, 0.45765, [1.1367e-07], [1.148e-07], [1.1394e-07], [1.1437e-07], [96300], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1508352104765355e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929428150, 0.45967, [1.1378e-07], [1.1636e-07], [1.1381e-07], [1.1606e-07], [94443], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1420043098721425e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929428378, 0.46593, [1.1382e-07], [1.1514e-07], [1.1403e-07], [1.1426e-07], [96522], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929422271, 0.066153], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929422337, 0.065652], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929422403, 0.066], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0023493167012929917], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929428612, 0.45915, [0.0023373], [0.0023583], [0.0023399], [0.0023545], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014035182484803954], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929428845, 0.44948, [0.0013943], [0.0014116], [0.0014012], [0.0014074], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037731919655925594], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929429072, 0.4531, [0.00037699], [0.00037793], [0.00037721], [0.00037747], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003419818550032834], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929429298, 0.45536, [0.00034042], [0.00035045], [0.00034131], [0.00034275], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5385004668529115e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929429524, 0.46305, [2.532e-05], [2.5476e-05], [2.5353e-05], [2.5393e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018469576752977446], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929429756, 0.45561, [0.00018439], [0.00018529], [0.00018451], [0.00018509], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.345706306261623e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929429983, 0.44723, [4.3349e-05], [4.3497e-05], [4.3425e-05], [4.347e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003234134994934059], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929430211, 0.45553, [0.00032318], [0.00032389], [0.00032337], [0.00032347], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003560984312508512], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929430437, 0.44623, [0.00035527], [0.00035724], [0.00035577], [0.0003564], [29], [10]], "benchmarks.TextSuite.time_render": [[4.676214165901498e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929430659, 0.45324, [4.6511e-06], [4.703e-06], [4.6692e-06], [4.6777e-06], [2337], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.516666533491449e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929430890, 0.45686, [8.4703e-05], [8.5451e-05], [8.5134e-05], [8.5355e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.509875646808983e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929431120, 0.44945, [3.5058e-05], [3.5178e-05], [3.5076e-05], [3.5163e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027409923648902853], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929431348, 0.44684, [0.00027297], [0.00027462], [0.00027361], [0.00027432], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013568151262006722], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929431571, 0.45476, [0.0013548], [0.001363], [0.0013551], [0.0013601], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001455651787442288], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929431803, 0.44607, [0.0014522], [0.0014585], [0.0014538], [0.0014567], [7], [10]]}, "durations": {"<build>": 1.9834160804748535}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/0a3fcb9c-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "0a3fcb9c4398274509794992bbd48a58e949ca20", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1649159797000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7164491507263065e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889199333, 0.46999, [1.6899e-07], [1.7392e-07], [1.6977e-07], [1.7347e-07], [64786], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.71619146022096e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889199569, 0.46125, [1.6964e-07], [1.7436e-07], [1.7123e-07], [1.7254e-07], [63167], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7253656497449644e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889199800, 0.45964, [1.6933e-07], [1.7563e-07], [1.7021e-07], [1.7436e-07], [62423], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7337599647804773e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889200027, 0.45876, [1.709e-07], [1.7887e-07], [1.7209e-07], [1.7482e-07], [64655], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7113155770381938e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889200261, 0.43883, [1.6984e-07], [1.7407e-07], [1.7091e-07], [1.7315e-07], [58848], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.738492250234359e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889200479, 0.45635, [1.7298e-07], [1.7688e-07], [1.7358e-07], [1.74e-07], [64073], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010593062499538062], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889200713, 0.4572, [0.0010444], [0.0010796], [0.0010562], [0.0010647], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014664553538230912], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889200942, 0.45248, [0.0014576], [0.001473], [0.001462], [0.00147], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0011574444490381414], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889201167, 0.45332, [0.0011309], [0.0011721], [0.0011543], [0.0011628], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1408876551073493e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889201393, 0.4622, [1.1379e-07], [1.1481e-07], [1.1397e-07], [1.1423e-07], [95454], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.144634260185231e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889201625, 0.45391, [1.1399e-07], [1.1565e-07], [1.144e-07], [1.1479e-07], [96339], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1534768939675701e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889201848, 0.46655, [1.1399e-07], [1.1674e-07], [1.1431e-07], [1.1628e-07], [95873], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007624302001204342], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889202080, 0.5143, [0.0075103], [0.0077737], [0.0075272], [0.0076812], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007584937673527747], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889202339, 0.51519, [0.0075265], [0.0076746], [0.0075558], [0.0075919], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.0075466769631020725], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889202599, 0.51173, [0.0075297], [0.0077562], [0.0075402], [0.0075716], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017368229067263505], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889202855, 0.44734, [0.0017301], [0.0017471], [0.0017349], [0.0017406], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0010761979036033155], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889203081, 0.4432, [0.0010734], [0.0010944], [0.0010753], [0.0010789], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038473733833857944], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889203301, 0.44744, [0.00038328], [0.00038978], [0.00038402], [0.00038703], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.000350434806257967], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889203529, 0.46288, [0.00034097], [0.00036468], [0.00034155], [0.0003595], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.532719397861208e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889203761, 0.4525, [2.5201e-05], [2.6075e-05], [2.5252e-05], [2.5712e-05], [431], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018559123092363105], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889203991, 0.45792, [0.00018401], [0.00018901], [0.00018466], [0.00018815], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.393307976804826e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889204220, 0.45049, [4.3599e-05], [4.545e-05], [4.3677e-05], [4.485e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003274185618272785], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889204448, 0.45997, [0.00032455], [0.00033615], [0.00032538], [0.00032832], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035561924270386324], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889204677, 0.44783, [0.00035461], [0.0003575], [0.00035523], [0.00035575], [29], [10]], "benchmarks.TextSuite.time_render": [[4.683525914894671e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889204900, 0.45376, [4.6482e-06], [4.7093e-06], [4.6769e-06], [4.6948e-06], [2317], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.554314263164997e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889205129, 0.45958, [8.5041e-05], [8.6534e-05], [8.5488e-05], [8.5882e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5171070833059164e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889205360, 0.45206, [3.5052e-05], [3.5312e-05], [3.5128e-05], [3.5235e-05], [298], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027655865874533594], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889205584, 0.45364, [0.00027492], [0.0002792], [0.00027514], [0.00027866], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011089000036008656], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889205811, 0.45405, [0.0011028], [0.0011388], [0.0011064], [0.0011162], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013707109465030953], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889206039, 0.44977, [0.0013603], [0.001417], [0.001364], [0.0013872], [8], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.027005208423361182], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892965121, 0.62536, [0.026902], [0.027419], [0.026936], [0.027149], [1], [10]]}, "durations": {"<build>": 1.8311901092529297}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/0ac4e308-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "0ac4e3081859dad086439ab3f1b1f4f00b3f9021", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645959651000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7368127879945887e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825862053, 0.44537, [1.7182e-07], [1.7475e-07], [1.7216e-07], [1.7414e-07], [58200], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7396437657139032e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825862273, 0.45436, [1.7083e-07], [1.7498e-07], [1.7343e-07], [1.7443e-07], [64241], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7433083931429584e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825862497, 0.46776, [1.7281e-07], [1.7552e-07], [1.7388e-07], [1.7467e-07], [63363], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.741817893361199e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825862730, 0.45506, [1.7318e-07], [1.7509e-07], [1.7395e-07], [1.7452e-07], [63375], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.740566074125486e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825862962, 0.44622, [1.7044e-07], [1.7514e-07], [1.7263e-07], [1.7429e-07], [58455], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7364092517159498e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825863187, 0.46188, [1.7216e-07], [1.745e-07], [1.734e-07], [1.7419e-07], [63842], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011313518431658545], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825863411, 0.44989, [0.0011188], [0.0011697], [0.0011251], [0.0011421], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015756190820996252], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825863635, 0.45356, [0.0015578], [0.0016078], [0.0015615], [0.0015779], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014310237851792148], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825863859, 0.44718, [0.001418], [0.0014547], [0.0014288], [0.001438], [7], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1669045566192163e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825864080, 0.46905, [1.1595e-07], [1.176e-07], [1.1627e-07], [1.172e-07], [94936], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1754456632413973e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825864313, 0.44707, [1.1555e-07], [1.2311e-07], [1.1667e-07], [1.2079e-07], [87263], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1710810534532049e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825864537, 0.44337, [1.144e-07], [1.1801e-07], [1.1665e-07], [1.1746e-07], [87244], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008634312718641013], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825864759, 0.52686, [0.008583], [0.0088228], [0.0086108], [0.0087044], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008643708017189056], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825865025, 0.52586, [0.0084225], [0.0090478], [0.0085003], [0.0086868], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008594187733251601], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825865289, 0.52133, [0.0083939], [0.0090598], [0.0084439], [0.0086391], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019129062614714107], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825865550, 0.45597, [0.0019002], [0.0019712], [0.0019116], [0.0019307], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011836505081090662], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825865780, 0.45496, [0.0011754], [0.0011893], [0.0011783], [0.0011878], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038555580457406383], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825866010, 0.45204, [0.00038311], [0.00038759], [0.00038464], [0.00038651], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.000344852147053086], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825866239, 0.44812, [0.00034003], [0.00035127], [0.00034245], [0.00034721], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5773277474353246e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825866467, 0.45529, [2.5449e-05], [2.5975e-05], [2.5589e-05], [2.5885e-05], [409], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018697449182770374], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825866692, 0.46551, [0.00018518], [0.00019447], [0.00018547], [0.00019106], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.4484139389431275e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825866923, 0.46522, [4.3549e-05], [4.5649e-05], [4.3773e-05], [4.519e-05], [243], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033498722534146036], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825867153, 0.45099, [0.00032652], [0.00033988], [0.00033418], [0.00033549], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036215805047159566], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825867378, 0.45416, [0.00035725], [0.00036975], [0.00036186], [0.00036296], [29], [10]], "benchmarks.TextSuite.time_render": [[4.755926949220586e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825867604, 0.45964, [4.6731e-06], [4.7963e-06], [4.7351e-06], [4.7765e-06], [2327], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.728018481519043e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825867837, 0.46664, [8.6133e-05], [8.8743e-05], [8.7107e-05], [8.7531e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5656070419910434e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825868072, 0.45942, [3.5343e-05], [3.7161e-05], [3.552e-05], [3.6026e-05], [291], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002821773523464799], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825868297, 0.4551, [0.00027493], [0.00028335], [0.00027786], [0.00028271], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0014060364483157173], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825868521, 0.46522, [0.0014001], [0.0014224], [0.0014026], [0.0014112], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014845892853502718], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825868746, 0.44881, [0.0014596], [0.0015023], [0.0014692], [0.0014859], [7], [10]]}, "durations": {"<build>": 1.8313829898834229}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/0d2aeb75-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "0d2aeb75bcfa5793c46679e5e034e782c1542784", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1647266759000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.707773016881537e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825767249, 0.45957, [1.7031e-07], [1.7149e-07], [1.7059e-07], [1.7093e-07], [64102], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.73812483309598e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825767483, 0.44214, [1.7087e-07], [1.7745e-07], [1.731e-07], [1.7426e-07], [58659], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7363062350272336e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825767702, 0.44387, [1.7154e-07], [1.7713e-07], [1.7317e-07], [1.7414e-07], [58722], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7423452098046174e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825767922, 0.45933, [1.7345e-07], [1.7498e-07], [1.7368e-07], [1.7466e-07], [64252], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.736928805320109e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825768157, 0.46246, [1.7044e-07], [1.7602e-07], [1.7352e-07], [1.7381e-07], [64200], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7380644902879105e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825768395, 0.4435, [1.7308e-07], [1.7446e-07], [1.7339e-07], [1.7422e-07], [58907], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001125261549734407], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825768617, 0.44765, [0.0011223], [0.0011522], [0.0011227], [0.0011282], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.00160015479195863], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825768839, 0.45998, [0.0015869], [0.0016697], [0.0015949], [0.001602], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014353515580296516], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825769067, 0.46768, [0.0014303], [0.0014817], [0.0014345], [0.001449], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.156173411975638e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825769302, 0.4511, [1.143e-07], [1.161e-07], [1.1506e-07], [1.1595e-07], [96177], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1478559720516578e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825769527, 0.45944, [1.141e-07], [1.156e-07], [1.1458e-07], [1.1502e-07], [95843], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1579674923877613e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825769755, 0.44075, [1.1453e-07], [1.1728e-07], [1.1483e-07], [1.1676e-07], [87168], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008522499760147184], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825769976, 0.52407, [0.0084523], [0.0087905], [0.0084758], [0.0085481], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008609406184405088], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825770241, 0.52446, [0.0084986], [0.0086699], [0.0085619], [0.0086274], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008650416508316994], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825770503, 0.52569, [0.0084976], [0.0090072], [0.0085344], [0.0087297], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019094514039655526], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825770766, 0.45872, [0.0018896], [0.001937], [0.0019015], [0.0019165], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001193141215480864], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825770998, 0.45482, [0.0011814], [0.001196], [0.0011912], [0.0011949], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038599926379642317], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825771228, 0.46261, [0.00038065], [0.00039383], [0.00038215], [0.00039155], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003443402665046354], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825771460, 0.44942, [0.00033947], [0.00034875], [0.00034031], [0.00034825], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5650029413105456e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825771682, 0.45513, [2.5398e-05], [2.5885e-05], [2.5529e-05], [2.5816e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018861666110090233], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825771915, 0.44974, [0.00018536], [0.00019043], [0.00018656], [0.00018943], [55], [10]], "benchmarks.TextSuite.time_fit": [[4.446870639829742e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825772138, 0.45754, [4.4381e-05], [4.4571e-05], [4.4418e-05], [4.4552e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033323790487502854], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825772372, 0.44815, [0.00032485], [0.00034119], [0.00032661], [0.00033714], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035880000408117967], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825772598, 0.46529, [0.00035769], [0.00037184], [0.0003583], [0.00036269], [30], [10]], "benchmarks.TextSuite.time_render": [[4.6979933152413774e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825772830, 0.45672, [4.6721e-06], [4.7725e-06], [4.6759e-06], [4.7074e-06], [2315], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.557973718591805e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825773062, 0.4358, [8.4948e-05], [8.654e-05], [8.5243e-05], [8.5914e-05], [116], [10]], "benchmarks.TextSuite.time_split": [[3.6004522898062865e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825773280, 0.45291, [3.5942e-05], [3.6076e-05], [3.5969e-05], [3.6019e-05], [304], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002807417737418099], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825773510, 0.45895, [0.00027598], [0.0002868], [0.00027748], [0.00028347], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013691224448848516], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825773739, 0.46393, [0.0013648], [0.0014509], [0.0013671], [0.0013964], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014862053462171127], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825773974, 0.45802, [0.0014581], [0.0014961], [0.0014835], [0.0014939], [7], [10]]}, "durations": {"<build>": 1.856067180633545}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/0d69004c-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "0d69004c169ba6984dc67c22d8ae8ec01f9edf2c", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645958438000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7407490524423107e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825909285, 0.47035, [1.7352e-07], [1.7563e-07], [1.7381e-07], [1.7476e-07], [63561], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.736286238539526e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825909520, 0.44386, [1.7177e-07], [1.7537e-07], [1.733e-07], [1.7474e-07], [58682], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7411640847918e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825909740, 0.46483, [1.7233e-07], [1.7545e-07], [1.7384e-07], [1.7442e-07], [63274], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7392189317403128e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825909972, 0.47027, [1.7e-07], [1.7439e-07], [1.7127e-07], [1.7419e-07], [63773], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.73273802210172e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825910205, 0.46349, [1.7244e-07], [1.753e-07], [1.7274e-07], [1.7429e-07], [64192], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7373446480802687e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825910430, 0.44436, [1.7109e-07], [1.7585e-07], [1.7343e-07], [1.7419e-07], [58098], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001137641167992519], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825910653, 0.44929, [0.0011338], [0.0011407], [0.001136], [0.0011398], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015928540545116577], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825910878, 0.45714, [0.001587], [0.0016131], [0.0015894], [0.0015979], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014444218104472384], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825911104, 0.46272, [0.0014371], [0.0015222], [0.0014407], [0.0014501], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.165971076383791e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825911335, 0.44497, [1.1524e-07], [1.1821e-07], [1.1629e-07], [1.1711e-07], [87212], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1714001629221041e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825911556, 0.468, [1.1658e-07], [1.1755e-07], [1.1689e-07], [1.1738e-07], [93843], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.171528042088217e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825911791, 0.45802, [1.158e-07], [1.1862e-07], [1.1707e-07], [1.1742e-07], [95472], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008631802222225815], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825912015, 0.52485, [0.0085747], [0.0089364], [0.0086025], [0.0086464], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008621343993581831], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825912278, 0.52078, [0.0084818], [0.0087717], [0.0086016], [0.0086409], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.00862495822366327], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825912540, 0.52688, [0.0085753], [0.0098463], [0.0085934], [0.0086444], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019201909308321774], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825912807, 0.46873, [0.0019023], [0.0019496], [0.0019102], [0.0019412], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011828055657032463], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825913049, 0.45496, [0.0011739], [0.0012037], [0.0011818], [0.0011876], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038322546086939316], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825913280, 0.45216, [0.00037953], [0.00038588], [0.00038076], [0.00038547], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034835484887783726], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825913509, 0.45396, [0.00034588], [0.00035756], [0.00034696], [0.00034914], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.587368871391445e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825913734, 0.45829, [2.5745e-05], [2.6015e-05], [2.5791e-05], [2.595e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018717528216476585], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825913968, 0.45872, [0.00018542], [0.00019005], [0.00018603], [0.000189], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.449923763172777e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825914203, 0.45608, [4.44e-05], [4.4713e-05], [4.4457e-05], [4.4634e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033125740235611317], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825914435, 0.44831, [0.00032909], [0.00033712], [0.00033089], [0.00033323], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036318463690835853], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825914658, 0.45354, [0.00035665], [0.00036543], [0.00036279], [0.00036432], [29], [10]], "benchmarks.TextSuite.time_render": [[4.761584573926707e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825914883, 0.45142, [4.7125e-06], [4.8047e-06], [4.7479e-06], [4.7805e-06], [2257], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.7269971508933e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825915112, 0.45858, [8.5587e-05], [8.8208e-05], [8.645e-05], [8.7705e-05], [121], [10]], "benchmarks.TextSuite.time_split": [[3.5996413895521655e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825915338, 0.45892, [3.5092e-05], [3.6429e-05], [3.5755e-05], [3.6061e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002831474749224359], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825915571, 0.45788, [0.00027502], [0.00028646], [0.00028196], [0.00028455], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013995468616485596], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825915800, 0.45373, [0.0013717], [0.0014296], [0.0013841], [0.0014082], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001484916645235249], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825916025, 0.44455, [0.0014799], [0.0014886], [0.0014831], [0.0014861], [7], [10]]}, "durations": {"<build>": 1.841742992401123}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/0db0cbd0-virtualenv-py3.10.json
================================================
{"commit_hash": "0db0cbd00598ad3cfc625eda301307f69c89d3f9", "env_name": "virtualenv-py3.10", "date": 1595434640000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7362879180977224e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928726948, 0.44285, [1.7317e-07], [1.7401e-07], [1.733e-07], [1.7379e-07], [64022], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.734515236767467e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928727174, 0.42776, [1.7232e-07], [1.7393e-07], [1.7327e-07], [1.7366e-07], [59400], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7043707485739963e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928727386, 0.44866, [1.7e-07], [1.7099e-07], [1.701e-07], [1.7073e-07], [64394], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.719459354762018e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928727610, 0.44323, [1.6908e-07], [1.7406e-07], [1.7e-07], [1.7319e-07], [64904], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7312164058360416e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928727827, 0.443, [1.6978e-07], [1.7764e-07], [1.701e-07], [1.7323e-07], [65192], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.726727310866345e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928728044, 0.43261, [1.6918e-07], [1.7389e-07], [1.6962e-07], [1.7367e-07], [58649], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0022632042033364995], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928728263, 0.44683, [0.0022263], [0.0022977], [0.0022312], [0.0022891], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928722905, 0.0583], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928722964, 0.058042], "benchmarks.StyleSuite.time_parse_ansi": [[1.1642906299976313e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928728488, 0.42206, [1.1573e-07], [1.1719e-07], [1.1615e-07], [1.1671e-07], [87070], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1636819952552777e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928728699, 0.43262, [1.1582e-07], [1.1681e-07], [1.1627e-07], [1.1666e-07], [96646], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1560313316913222e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928728916, 0.45013, [1.1452e-07], [1.1668e-07], [1.1492e-07], [1.1614e-07], [95648], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928723673, 0.058083], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928723731, 0.057826], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928723789, 0.057979], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002123166699311696], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928729142, 0.43623, [0.0020971], [0.0021399], [0.0021067], [0.0021358], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014861785727719378], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928729364, 0.43197, [0.0014753], [0.0015121], [0.0014779], [0.0014992], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006712447811878519], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928729584, 0.43655, [0.00066867], [0.00067368], [0.00066968], [0.00067302], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005566228156615245], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928729805, 0.43007, [0.00055385], [0.0005591], [0.00055608], [0.00055735], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.816003134356223e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928730022, 0.44409, [2.7814e-05], [2.8399e-05], [2.7839e-05], [2.8381e-05], [383], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018715350852927947], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928730243, 0.44446, [0.00018568], [0.00018992], [0.00018678], [0.00018798], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.26104741353742e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928730467, 0.44198, [4.202e-05], [4.314e-05], [4.2145e-05], [4.3041e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033586962907124435], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928730689, 0.43289, [0.00033536], [0.00033642], [0.00033566], [0.00033628], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928725585, 0.058448], "benchmarks.TextSuite.time_render": [[4.678828615718841e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928730905, 0.43858, [4.6682e-06], [4.7782e-06], [4.672e-06], [4.7475e-06], [2328], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.66399726646705e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928731129, 0.44532, [8.6226e-05], [8.7004e-05], [8.6491e-05], [8.6881e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.442041802562929e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928731355, 0.44347, [3.3952e-05], [3.5991e-05], [3.4377e-05], [3.4581e-05], [311], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028177590512141993], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928731577, 0.43448, [0.00027849], [0.00028625], [0.00027876], [0.00028524], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011528171663586465], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928731796, 0.43614, [0.0011305], [0.0011759], [0.0011328], [0.0011729], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015352022850752942], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928732015, 0.43922, [0.0015175], [0.001555], [0.0015207], [0.0015485], [7], [10]]}, "durations": {"<build>": 1.9555010795593262}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/0e8df8cd-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "0e8df8cde536f51800462859498b221dc00b3ce4", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1651160552000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7056577856193278e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825657160, 0.45661, [1.6946e-07], [1.7155e-07], [1.6998e-07], [1.71e-07], [64192], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7102880721660724e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825657393, 0.45744, [1.6967e-07], [1.7992e-07], [1.7055e-07], [1.7138e-07], [64308], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.710823611775127e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825657627, 0.4603, [1.6989e-07], [1.7148e-07], [1.7075e-07], [1.7116e-07], [62943], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7162766931832115e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825657857, 0.46638, [1.7075e-07], [1.7496e-07], [1.7135e-07], [1.7252e-07], [63974], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7118535573367993e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825658090, 0.46019, [1.6989e-07], [1.7721e-07], [1.7078e-07], [1.715e-07], [64330], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7190789768803608e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825658324, 0.46439, [1.6905e-07], [1.7504e-07], [1.7147e-07], [1.723e-07], [64286], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001060406246688217], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825658557, 0.45172, [0.0010564], [0.0010739], [0.0010579], [0.0010611], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014975892845541239], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825658788, 0.45107, [0.0014829], [0.0015984], [0.0014913], [0.0015128], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001168043999415305], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825659017, 0.45091, [0.0011619], [0.001205], [0.0011647], [0.0011725], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1456715623760544e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825659247, 0.45832, [1.1431e-07], [1.1505e-07], [1.1441e-07], [1.1481e-07], [95933], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1445933097574676e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825659479, 0.44527, [1.1429e-07], [1.1503e-07], [1.144e-07], [1.1466e-07], [89884], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1449829890940965e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825659702, 0.45252, [1.138e-07], [1.1497e-07], [1.1409e-07], [1.1466e-07], [91995], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007678447989746928], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825659927, 0.51693, [0.0076317], [0.0078336], [0.0076446], [0.0077592], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007612614776007831], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825660187, 0.52162, [0.0075418], [0.0079303], [0.0075796], [0.0076473], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007595437462441623], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825660447, 0.51829, [0.0075256], [0.0077198], [0.0075676], [0.0076197], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017464547612083456], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825660707, 0.45326, [0.0017308], [0.0017616], [0.0017423], [0.0017505], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0010877812514081598], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825660934, 0.46359, [0.001074], [0.0011502], [0.0010788], [0.0011245], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037978648573958447], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825661168, 0.46869, [0.00037697], [0.00039004], [0.00037859], [0.00038212], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003433479151378075], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825661407, 0.45051, [0.00034264], [0.00035346], [0.00034302], [0.00034414], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5618544554538992e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825661631, 0.4592, [2.5442e-05], [2.7714e-05], [2.5585e-05], [2.5767e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018611617023283142], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825661866, 0.47623, [0.00018471], [0.00018856], [0.00018548], [0.00018794], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.374974315273173e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825662109, 0.46113, [4.3545e-05], [4.393e-05], [4.368e-05], [4.3829e-05], [243], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003381256772685916], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825662340, 0.45384, [0.00032485], [0.00036457], [0.00032528], [0.00035648], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003670215748050916], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825662569, 0.45133, [0.00035983], [0.00037597], [0.00036196], [0.00037157], [28], [10]], "benchmarks.TextSuite.time_render": [[4.71043793876788e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825662796, 0.45986, [4.676e-06], [4.8165e-06], [4.6873e-06], [4.7282e-06], [2346], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.551453514558862e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825663031, 0.4599, [8.4592e-05], [8.6017e-05], [8.5448e-05], [8.5624e-05], [129], [10]], "benchmarks.TextSuite.time_split": [[3.532961376809649e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825663266, 0.45344, [3.5067e-05], [3.559e-05], [3.5103e-05], [3.5513e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002765180910692403], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825663499, 0.45298, [0.00027413], [0.0002808], [0.00027454], [0.00027926], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011039083474315703], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825663725, 0.45112, [0.0011024], [0.0011079], [0.0011033], [0.0011047], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013538437488023192], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825663950, 0.46113, [0.0013491], [0.0013636], [0.0013503], [0.0013596], [8], [10]]}, "durations": {"<build>": 1.8222630023956299}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/0fd6bc56-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "0fd6bc567f761cecb764673979c7491b1aa2c51b", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1652029118000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.742524984956963e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889246304, 0.44484, [1.7321e-07], [1.7605e-07], [1.736e-07], [1.7464e-07], [58618], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7269389283731248e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889246526, 0.44973, [1.6847e-07], [1.7778e-07], [1.7074e-07], [1.7477e-07], [58419], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7165242675344961e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889246753, 0.46125, [1.7021e-07], [1.8017e-07], [1.708e-07], [1.7512e-07], [62879], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7302802944735045e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889246981, 0.44088, [1.7102e-07], [1.8013e-07], [1.7128e-07], [1.7733e-07], [58406], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7197079783857575e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889247200, 0.47142, [1.7093e-07], [1.751e-07], [1.7125e-07], [1.7303e-07], [63881], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7392411077913938e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889247434, 0.45928, [1.7188e-07], [1.7579e-07], [1.7258e-07], [1.7516e-07], [61879], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010827333433553578], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889247664, 0.4527, [0.0010789], [0.0010965], [0.0010817], [0.0010873], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015135148673185279], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889247895, 0.4508, [0.0014909], [0.0015519], [0.0015005], [0.0015251], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0011811296119251186], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889248122, 0.44968, [0.0011675], [0.0012139], [0.0011785], [0.001189], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1543777391976207e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889248351, 0.45762, [1.1364e-07], [1.1779e-07], [1.1471e-07], [1.1712e-07], [92983], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1569232230549729e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889248579, 0.45555, [1.1425e-07], [1.1796e-07], [1.1446e-07], [1.1718e-07], [95488], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1696923115175758e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889248803, 0.4572, [1.1651e-07], [1.1767e-07], [1.166e-07], [1.1719e-07], [96055], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.0077404894400388], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889249027, 0.51987, [0.0076823], [0.007848], [0.0077159], [0.0077556], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007724156021140516], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889249287, 0.51872, [0.0076831], [0.0077938], [0.0077148], [0.0077475], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007693145947996527], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889249548, 0.5166, [0.0075739], [0.0078076], [0.0076421], [0.0077182], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017675347432183723], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889249807, 0.45316, [0.0017585], [0.001797], [0.0017642], [0.0017697], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001086370798293501], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889250035, 0.44357, [0.0010696], [0.001101], [0.0010822], [0.0010901], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037909373557860296], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889250256, 0.45469, [0.0003743], [0.0003809], [0.0003748], [0.0003798], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034619556484563694], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889250484, 0.458, [0.00034251], [0.00035746], [0.00034341], [0.00034805], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5953247622879738e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889250713, 0.45475, [2.5893e-05], [2.6049e-05], [2.5922e-05], [2.5974e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.000185515809852373], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889250945, 0.45865, [0.00018448], [0.00018884], [0.00018479], [0.00018592], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.389434426772495e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889251174, 0.45252, [4.3639e-05], [4.4698e-05], [4.3736e-05], [4.4335e-05], [238], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003344912772938128], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889251399, 0.44536, [0.0003306], [0.00033941], [0.00033148], [0.00033741], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035677010048951565], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889251620, 0.44777, [0.00035551], [0.00036047], [0.0003563], [0.00035764], [29], [10]], "benchmarks.TextSuite.time_render": [[4.689268868474057e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889251842, 0.45721, [4.6709e-06], [4.77e-06], [4.6867e-06], [4.7483e-06], [2332], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.724430517759174e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889252073, 0.45515, [8.6854e-05], [8.8501e-05], [8.7086e-05], [8.7437e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.613524921057583e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889252296, 0.44617, [3.5883e-05], [3.6418e-05], [3.6073e-05], [3.6235e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028163651433332185], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889252519, 0.45585, [0.00027914], [0.00028855], [0.00027987], [0.00028253], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011112438049167396], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889252746, 0.45015, [0.0010949], [0.0011423], [0.0011037], [0.0011134], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001387796874041669], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889252969, 0.45399, [0.0013804], [0.0013946], [0.0013837], [0.0013915], [8], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.026850063004530966], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892972454, 0.62288, [0.026809], [0.027357], [0.026824], [0.027069], [1], [10]]}, "durations": {"<build>": 1.8030660152435303}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/11c00224-virtualenv-py3.10.json
================================================
{"commit_hash": "11c00224398aae3ef5fcf363641c249c1752af7d", "env_name": "virtualenv-py3.10", "date": 1593549611000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7284974776044082e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928616040, 0.44173, [1.7153e-07], [1.7402e-07], [1.7255e-07], [1.7298e-07], [64568], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7351940855857562e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928616267, 0.4269, [1.7291e-07], [1.7432e-07], [1.7326e-07], [1.7368e-07], [58763], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7025654007106745e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928616478, 0.44956, [1.6996e-07], [1.7098e-07], [1.702e-07], [1.7083e-07], [64487], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.706075797615736e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928616702, 0.44942, [1.6902e-07], [1.7125e-07], [1.7035e-07], [1.7071e-07], [64394], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7302739804627536e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928616925, 0.43385, [1.7236e-07], [1.7358e-07], [1.7264e-07], [1.7327e-07], [65041], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7105373843932488e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928617141, 0.44901, [1.6974e-07], [1.7289e-07], [1.7026e-07], [1.7251e-07], [64237], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0022084375028498474], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928617366, 0.43535, [0.0021925], [0.0022162], [0.0022023], [0.0022119], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928612308, 0.058177], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928612366, 0.058029], "benchmarks.StyleSuite.time_parse_ansi": [[1.1611713504418965e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928617581, 0.44885, [1.1563e-07], [1.1724e-07], [1.1592e-07], [1.1654e-07], [95202], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1629571403233272e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928617806, 0.43068, [1.1597e-07], [1.1678e-07], [1.1611e-07], [1.1649e-07], [96497], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1554933307194386e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928618022, 0.44858, [1.1416e-07], [1.1636e-07], [1.1451e-07], [1.1631e-07], [95443], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928613089, 0.057768], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928613147, 0.057693], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928613205, 0.057767], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002041262501734309], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928618246, 0.42348, [0.0020331], [0.0020749], [0.0020382], [0.0020422], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001439104143563392], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928618460, 0.42148, [0.001432], [0.0014473], [0.0014368], [0.001443], [7], [10]], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928613682, 0.058205], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928613740, 0.058625], "benchmarks.TextSuite.time_divide": [[2.7814408371417603e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928618672, 0.43816, [2.7728e-05], [2.7947e-05], [2.7771e-05], [2.7877e-05], [382], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001878881578848354], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928618891, 0.43937, [0.00018646], [0.00018863], [0.0001873], [0.0001884], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2432207685065336e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928619110, 0.43813, [4.2149e-05], [4.287e-05], [4.218e-05], [4.2672e-05], [248], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003323165320550963], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928619328, 0.4298, [0.0003309], [0.00033885], [0.00033172], [0.00033744], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928614675, 0.058317], "benchmarks.TextSuite.time_render": [[4.693972607015483e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928619543, 0.43136, [4.6757e-06], [4.7207e-06], [4.6872e-06], [4.6989e-06], [2282], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.568864438984747e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928619762, 0.44176, [8.4236e-05], [8.7142e-05], [8.447e-05], [8.6796e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.368297283844159e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928619983, 0.43646, [3.3481e-05], [3.3825e-05], [3.3502e-05], [3.3776e-05], [313], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028147971622545173], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928620200, 0.42968, [0.00027839], [0.000286], [0.00027906], [0.00028342], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011670578322890732], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928620414, 0.43745, [0.0011661], [0.0011724], [0.0011666], [0.0011687], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015473719998096514], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928620631, 0.43689, [0.0015434], [0.0015554], [0.0015454], [0.0015505], [7], [10]]}, "durations": {"<build>": 1.95790696144104}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/11c305e1-virtualenv-py3.10.json
================================================
{"commit_hash": "11c305e1722a81c553a41fb9358f1058231757c5", "env_name": "virtualenv-py3.10", "date": 1617124192000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7040699938447585e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928130588, 0.45796, [1.6952e-07], [1.709e-07], [1.7005e-07], [1.7061e-07], [64650], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.6964852386183715e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928130815, 0.45592, [1.6857e-07], [1.7045e-07], [1.6935e-07], [1.6973e-07], [64599], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.702935102568297e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928131043, 0.4485, [1.698e-07], [1.7319e-07], [1.7008e-07], [1.7126e-07], [64427], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.697923450791509e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928131272, 0.46092, [1.6925e-07], [1.7072e-07], [1.6969e-07], [1.7011e-07], [64246], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.698945704612123e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928131501, 0.45893, [1.6897e-07], [1.7113e-07], [1.6945e-07], [1.7066e-07], [64593], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6976089933961742e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928131730, 0.44973, [1.6911e-07], [1.7176e-07], [1.6948e-07], [1.7013e-07], [65027], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010057624487672002], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928131962, 0.4368, [0.0010035], [0.0010095], [0.0010052], [0.0010074], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014041302511031972], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928132179, 0.44692, [0.0013982], [0.0014137], [0.0014015], [0.001409], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014043098763067974], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928132402, 0.44683, [0.001401], [0.0014103], [0.0014025], [0.0014058], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.140019237469983e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928132625, 0.45471, [1.1362e-07], [1.1424e-07], [1.1393e-07], [1.1404e-07], [95905], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1478145308663167e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928132852, 0.45476, [1.1368e-07], [1.1602e-07], [1.141e-07], [1.154e-07], [95849], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.141980623645123e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928133080, 0.45583, [1.1378e-07], [1.1497e-07], [1.1402e-07], [1.1452e-07], [95793], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928127090, 0.061864], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928127152, 0.06233], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928127215, 0.061847], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0020629041013307866], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928133309, 0.44416, [0.0020464], [0.0020839], [0.0020508], [0.0020708], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012537265010905685], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928133530, 0.43507, [0.0012406], [0.0012608], [0.0012466], [0.0012574], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006594336255147937], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928133746, 0.4381, [0.000657], [0.00066519], [0.00065815], [0.00066171], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005484693155219582], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928133967, 0.44419, [0.00054561], [0.00055549], [0.00054714], [0.0005526], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.5705258770675706e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928134188, 0.45615, [2.5324e-05], [2.6081e-05], [2.5411e-05], [2.6e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001846641467197734], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928134417, 0.44897, [0.00018407], [0.00018533], [0.00018425], [0.00018515], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.361301223386307e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928134641, 0.43957, [4.3442e-05], [4.3824e-05], [4.3482e-05], [4.379e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003249576613832746], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928134864, 0.42981, [0.00032416], [0.00032648], [0.00032463], [0.00032545], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035477660351497086], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928135078, 0.43718, [0.00035447], [0.0003559], [0.00035458], [0.00035523], [29], [10]], "benchmarks.TextSuite.time_render": [[4.692818238968194e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928135295, 0.44495, [4.6753e-06], [4.7115e-06], [4.6831e-06], [4.7019e-06], [2319], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.551689750775255e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928135521, 0.44984, [8.5359e-05], [8.5939e-05], [8.5394e-05], [8.5681e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5231459565976076e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928135747, 0.44418, [3.5105e-05], [3.5493e-05], [3.5142e-05], [3.5382e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027465598712949897], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928135974, 0.44849, [0.00027312], [0.00027628], [0.00027334], [0.00027584], [39], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001102583299507387], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928136199, 0.43834, [0.0010966], [0.0011175], [0.0010985], [0.0011066], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014873571427805083], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928136416, 0.43532, [0.0014852], [0.0014935], [0.0014866], [0.001488], [7], [10]]}, "durations": {"<build>": 2.0018699169158936}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/1442dd77-virtualenv-py3.10.json
================================================
{"commit_hash": "1442dd7759b4bc92ed4d79a6bb5fbf29b9df4f76", "env_name": "virtualenv-py3.10", "date": 1639560700000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7012068692044375e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928289810, 0.46694, [1.6882e-07], [1.7102e-07], [1.6943e-07], [1.704e-07], [64659], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7018720169784255e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928290042, 0.46369, [1.6952e-07], [1.7064e-07], [1.6998e-07], [1.7053e-07], [64532], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7047895456152823e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928290274, 0.46468, [1.6957e-07], [1.7098e-07], [1.7036e-07], [1.7077e-07], [64337], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7099208604379628e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928290505, 0.46058, [1.6949e-07], [1.7299e-07], [1.702e-07], [1.7223e-07], [63621], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7060387806580736e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928290733, 0.46622, [1.6981e-07], [1.7312e-07], [1.7011e-07], [1.7109e-07], [64465], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6985979406589e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928290964, 0.46389, [1.6888e-07], [1.7155e-07], [1.6934e-07], [1.7073e-07], [64070], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011093499502749181], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928291194, 0.45719, [0.0011042], [0.0011163], [0.0011072], [0.0011103], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015499642842249678], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928291421, 0.44629, [0.0015439], [0.0015571], [0.0015482], [0.0015526], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013974713128845906], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928291642, 0.45178, [0.0013927], [0.0014066], [0.0013949], [0.0014027], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1407390702467521e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928291868, 0.46339, [1.1372e-07], [1.1466e-07], [1.1402e-07], [1.1432e-07], [96371], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1481372948254572e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928292101, 0.45909, [1.1381e-07], [1.1592e-07], [1.1418e-07], [1.1524e-07], [94854], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1422449103232493e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928292329, 0.46237, [1.1344e-07], [1.1474e-07], [1.1406e-07], [1.1431e-07], [96055], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928286243, 0.065126], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928286308, 0.064956], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928286373, 0.064969], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002332408301299438], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928292560, 0.45581, [0.0023223], [0.0023418], [0.0023291], [0.0023332], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001395356748616905], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928292793, 0.45096, [0.0013879], [0.0014041], [0.001393], [0.0014014], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037334339717274597], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928293019, 0.46011, [0.00036916], [0.00037875], [0.00036929], [0.00037733], [29], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003428870967904767], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928293250, 0.45501, [0.00034065], [0.00035293], [0.00034105], [0.00034885], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5384536367172085e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928293476, 0.45814, [2.5186e-05], [2.5561e-05], [2.5268e-05], [2.5493e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018477334479343724], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928293705, 0.45602, [0.00018358], [0.00018527], [0.00018469], [0.0001849], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.369230763722769e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928293934, 0.4482, [4.3174e-05], [4.4067e-05], [4.3212e-05], [4.3954e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003243024196220381], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928294163, 0.43568, [0.00032299], [0.00032623], [0.00032391], [0.00032444], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035655387960261954], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928294380, 0.44502, [0.00035515], [0.00035812], [0.00035577], [0.00035678], [29], [10]], "benchmarks.TextSuite.time_render": [[4.67811063834383e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928294601, 0.45176, [4.6551e-06], [4.699e-06], [4.6662e-06], [4.6872e-06], [2332], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.541865076588851e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928294830, 0.45497, [8.4623e-05], [8.6397e-05], [8.5213e-05], [8.5595e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.503245966238601e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928295057, 0.4499, [3.4982e-05], [3.5079e-05], [3.5008e-05], [3.505e-05], [310], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027448794686566353], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928295286, 0.44659, [0.00027325], [0.00027609], [0.00027406], [0.00027466], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013566120014729677], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928295509, 0.45296, [0.0013557], [0.001361], [0.001356], [0.0013573], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014524136432945462], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928295738, 0.44389, [0.0014489], [0.0014573], [0.0014499], [0.0014536], [7], [10]]}, "durations": {"<build>": 2.0702707767486572}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/15623c5a-virtualenv-py3.10.json
================================================
{"commit_hash": "15623c5a57bf758b18542d5293ee319bbd59e829", "env_name": "virtualenv-py3.10", "date": 1614631595000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7020787005396147e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929089823, 0.45996, [1.6941e-07], [1.7215e-07], [1.6989e-07], [1.7079e-07], [64485], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7092673771154095e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929090054, 0.45482, [1.6949e-07], [1.7234e-07], [1.7e-07], [1.7151e-07], [63614], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7118832265832778e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929090280, 0.46223, [1.7013e-07], [1.7411e-07], [1.707e-07], [1.7141e-07], [64578], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.6962613380158e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929090510, 0.44887, [1.6868e-07], [1.7118e-07], [1.6912e-07], [1.7012e-07], [62624], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7009122965568404e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929090733, 0.45688, [1.6908e-07], [1.7287e-07], [1.6945e-07], [1.7046e-07], [64546], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7011294502290056e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929090961, 0.45667, [1.6904e-07], [1.7093e-07], [1.6954e-07], [1.7062e-07], [64381], [10]], "benchmarks.PrettySuite.time_pretty": [[0.000972337135780518], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929091189, 0.44401, [0.00096904], [0.00097486], [0.00097048], [0.00097325], [11], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0013077630628686165], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929091415, 0.43937, [0.0013022], [0.001312], [0.0013064], [0.0013097], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013684609366464429], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929091639, 0.44136, [0.001358], [0.0013773], [0.0013608], [0.0013732], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1430164070272298e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929091859, 0.45508, [1.1396e-07], [1.1494e-07], [1.1412e-07], [1.1444e-07], [95443], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1491249709035666e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929092087, 0.45343, [1.1386e-07], [1.1562e-07], [1.1421e-07], [1.155e-07], [94494], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1431698443041508e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929092313, 0.45685, [1.1413e-07], [1.1913e-07], [1.1426e-07], [1.1702e-07], [95582], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929086315, 0.06262], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929086378, 0.062341], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929086440, 0.062366], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.00207476660143584], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929092540, 0.4364, [0.0020652], [0.0020805], [0.0020677], [0.0020774], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001251054749445757], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929092762, 0.43627, [0.0012469], [0.001262], [0.0012485], [0.0012552], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.000661882812892145], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929092978, 0.44035, [0.00066045], [0.00066339], [0.00066146], [0.00066277], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005466436575117864], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929093201, 0.44265, [0.00054342], [0.0005538], [0.0005444], [0.00054695], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.5366444275455157e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929093420, 0.45683, [2.5271e-05], [2.5535e-05], [2.5299e-05], [2.5462e-05], [431], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018469684487329153], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929093647, 0.44995, [0.00018411], [0.00018502], [0.00018453], [0.00018493], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3361421063191706e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929093872, 0.4422, [4.3335e-05], [4.3506e-05], [4.3349e-05], [4.3425e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032445834817322475], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929094096, 0.4506, [0.00032343], [0.0003253], [0.00032419], [0.00032453], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035498203390583007], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929094320, 0.44019, [0.00035425], [0.00035599], [0.00035485], [0.00035568], [29], [10]], "benchmarks.TextSuite.time_render": [[4.687589526901436e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929094538, 0.44858, [4.6745e-06], [4.6954e-06], [4.6828e-06], [4.6901e-06], [2329], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.555615625027713e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929094766, 0.45088, [8.4769e-05], [8.5884e-05], [8.5105e-05], [8.5856e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.505739197510505e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929094992, 0.44399, [3.5007e-05], [3.5136e-05], [3.5037e-05], [3.5116e-05], [310], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027359703955497886], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929095218, 0.44023, [0.00027306], [0.00027515], [0.00027345], [0.000274], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010967875001369975], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929095438, 0.43781, [0.001095], [0.0011008], [0.0010958], [0.001098], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014890833595667835], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929095656, 0.4383, [0.001485], [0.0014968], [0.0014866], [0.0014923], [7], [10]]}, "durations": {"<build>": 2.004281997680664}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/177958c5-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "177958c52a87ff744612a72c6a3f83596afcdebd", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1647523664000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7184594712929975e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825735914, 0.47131, [1.7081e-07], [1.7545e-07], [1.7146e-07], [1.7338e-07], [64017], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7181240583698358e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825736150, 0.44169, [1.703e-07], [1.7968e-07], [1.7063e-07], [1.7379e-07], [58568], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.711209673211279e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825736368, 0.46216, [1.6946e-07], [1.7522e-07], [1.7074e-07], [1.7139e-07], [64203], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7053437829080164e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825736592, 0.45682, [1.6922e-07], [1.7308e-07], [1.7014e-07], [1.7145e-07], [64347], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7152626993459198e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825736824, 0.45625, [1.7058e-07], [1.7818e-07], [1.7107e-07], [1.7361e-07], [63877], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7113815182720663e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825737057, 0.46594, [1.7021e-07], [1.716e-07], [1.7053e-07], [1.7142e-07], [64245], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010504520381800831], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825737290, 0.44896, [0.0010435], [0.0010775], [0.0010468], [0.0010652], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014716814870813064], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825737516, 0.45539, [0.0014645], [0.0014987], [0.0014692], [0.0014751], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0011611921169484654], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825737742, 0.44997, [0.0011488], [0.0012043], [0.0011574], [0.0011925], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1639150793583967e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825737971, 0.46247, [1.1472e-07], [1.1745e-07], [1.1561e-07], [1.1668e-07], [93689], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1761097994553085e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825738202, 0.45233, [1.1445e-07], [1.1938e-07], [1.157e-07], [1.1902e-07], [94315], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1539238716573387e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825738432, 0.45603, [1.1364e-07], [1.168e-07], [1.1401e-07], [1.1647e-07], [95894], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007686489727348089], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825738656, 0.50585, [0.0076114], [0.0078981], [0.0076615], [0.0077218], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007741583220195025], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825738901, 0.52214, [0.0076653], [0.0081619], [0.0076939], [0.0078087], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.0076643023057840765], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825739163, 0.51693, [0.0076336], [0.0077254], [0.0076479], [0.0076852], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017038993149374924], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825739422, 0.44209, [0.0017005], [0.001712], [0.0017027], [0.0017069], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0010791291948407888], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825739644, 0.44387, [0.0010757], [0.0011026], [0.0010789], [0.0010814], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003785907673383398], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825739866, 0.45762, [0.00037546], [0.00038099], [0.00037692], [0.0003791], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034947153180837627], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825740093, 0.45128, [0.00034659], [0.00035912], [0.00034883], [0.00035027], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.54776471239679e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825740317, 0.46042, [2.5275e-05], [2.583e-05], [2.536e-05], [2.556e-05], [425], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018602694135865774], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825740547, 0.4602, [0.00018518], [0.00018804], [0.0001855], [0.00018774], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.414009705170808e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825740778, 0.45505, [4.3515e-05], [4.4605e-05], [4.3632e-05], [4.434e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003297231310317593], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825741011, 0.44612, [0.000325], [0.00033699], [0.00032631], [0.00033365], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003566395879412691], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825741235, 0.45769, [0.0003555], [0.00035982], [0.00035582], [0.0003577], [30], [10]], "benchmarks.TextSuite.time_render": [[4.678847246555767e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825741463, 0.45514, [4.6478e-06], [4.7097e-06], [4.667e-06], [4.6991e-06], [2321], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.643864595338585e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825741694, 0.45972, [8.5635e-05], [8.7219e-05], [8.5907e-05], [8.7095e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.536530538299198e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825741927, 0.45805, [3.521e-05], [3.5533e-05], [3.5312e-05], [3.5412e-05], [303], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002786546063266302], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825742155, 0.45517, [0.00027514], [0.00028343], [0.00027645], [0.00028048], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011173228966072203], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825742383, 0.45155, [0.0011005], [0.0011332], [0.0011018], [0.0011309], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013498594344127923], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825742610, 0.45831, [0.0013201], [0.0014262], [0.0013378], [0.0013584], [8], [10]]}, "durations": {"<build>": 1.8372020721435547}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/189a2a3f-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "189a2a3fdba0844bd8d4ae0cbb59d2207830d310", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1648628408000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7065061732442786e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825704438, 0.46033, [1.7007e-07], [1.7283e-07], [1.7031e-07], [1.7164e-07], [62668], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.714639138941401e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825704667, 0.46683, [1.6977e-07], [1.7354e-07], [1.7114e-07], [1.7193e-07], [63791], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7185584562050946e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825704900, 0.45647, [1.6965e-07], [1.7546e-07], [1.7107e-07], [1.7269e-07], [64168], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7188580740674818e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825705123, 0.46713, [1.6987e-07], [1.7381e-07], [1.7148e-07], [1.7215e-07], [64119], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7102168442758877e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825705358, 0.45724, [1.7027e-07], [1.7217e-07], [1.7072e-07], [1.7164e-07], [64241], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.713028124131751e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825705592, 0.46266, [1.7069e-07], [1.75e-07], [1.7118e-07], [1.7261e-07], [63554], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010385145549662413], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825705823, 0.4547, [0.0010338], [0.0010542], [0.0010364], [0.0010418], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014660774364269205], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825706049, 0.44344, [0.0014583], [0.0014747], [0.0014623], [0.00147], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0011415810375991794], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825706273, 0.45539, [0.0011359], [0.0012057], [0.0011405], [0.0011464], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1488890313697241e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825706498, 0.43961, [1.1387e-07], [1.1755e-07], [1.1432e-07], [1.1653e-07], [87744], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1614121854827109e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825706717, 0.45828, [1.1431e-07], [1.1834e-07], [1.1487e-07], [1.1686e-07], [93603], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1484986022292885e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825706946, 0.46422, [1.1421e-07], [1.1582e-07], [1.1471e-07], [1.1505e-07], [95364], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.00765358324861154], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825707178, 0.50635, [0.0075929], [0.0078295], [0.0076141], [0.0077676], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007634916750248522], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825707439, 0.51867, [0.0075965], [0.0079212], [0.0076179], [0.0077395], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007679604226723313], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825707698, 0.50551, [0.0075912], [0.007831], [0.0076061], [0.0077316], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001744041588002195], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825707956, 0.45132, [0.0017359], [0.001768], [0.0017395], [0.0017466], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0010858354507945478], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825708184, 0.45636, [0.0010732], [0.0011235], [0.0010748], [0.0010933], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037598735486556374], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825708416, 0.45351, [0.00037249], [0.00038333], [0.00037554], [0.0003769], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00035159677387245237], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825708641, 0.47, [0.00034229], [0.00038077], [0.0003452], [0.0003688], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5685338510407343e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825708878, 0.45906, [2.5345e-05], [2.5991e-05], [2.5419e-05], [2.5853e-05], [405], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018600459502599503], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825709107, 0.46619, [0.00018462], [0.00018878], [0.00018527], [0.00018715], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.393095103073485e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825709340, 0.45132, [4.3522e-05], [4.4416e-05], [4.3577e-05], [4.4266e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003289103536217502], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825709570, 0.46478, [0.00032638], [0.00033398], [0.00032826], [0.00033015], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035745043163027226], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825709802, 0.45082, [0.00035569], [0.00036291], [0.00035651], [0.0003609], [29], [10]], "benchmarks.TextSuite.time_render": [[4.693470344671951e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825710026, 0.45814, [4.6751e-06], [4.7063e-06], [4.6836e-06], [4.6992e-06], [2324], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.551181132692521e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825710256, 0.4585, [8.5112e-05], [8.6575e-05], [8.5405e-05], [8.5699e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5437020915942114e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825710488, 0.45137, [3.535e-05], [3.5522e-05], [3.5393e-05], [3.5497e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002781825513873053], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825710719, 0.45649, [0.00027566], [0.00028085], [0.00027642], [0.00027985], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011251791496761144], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825710948, 0.45345, [0.0011042], [0.001133], [0.0011136], [0.0011294], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013659557444043458], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825711174, 0.45974, [0.0013512], [0.0014144], [0.001359], [0.0013856], [8], [10]]}, "durations": {"<build>": 1.836348056793213}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/19e26c94-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "19e26c94e310eb1df8523e2196a04f6b5a958636", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644925853000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7153757193493902e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826129930, 0.45889, [1.6981e-07], [1.867e-07], [1.7057e-07], [1.728e-07], [64567], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7070824594900508e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826130155, 0.45116, [1.6973e-07], [1.7286e-07], [1.7051e-07], [1.7178e-07], [58991], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.723180041095005e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826130374, 0.46564, [1.7087e-07], [1.7431e-07], [1.7136e-07], [1.7381e-07], [63488], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.703706579753e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826130605, 0.44996, [1.6936e-07], [1.7423e-07], [1.7023e-07], [1.7114e-07], [64542], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7131260863519498e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826130827, 0.46403, [1.7005e-07], [1.7575e-07], [1.7056e-07], [1.7226e-07], [64568], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7120459746237464e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826131060, 0.46625, [1.703e-07], [1.7176e-07], [1.71e-07], [1.7138e-07], [64016], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011431065051712925], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826131292, 0.44781, [0.0011106], [0.0012192], [0.0011166], [0.0011793], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015744195718850407], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826131514, 0.45505, [0.001551], [0.0016153], [0.0015619], [0.001599], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001417166626197286], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826131740, 0.45907, [0.0014095], [0.0015593], [0.0014104], [0.0014595], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1528965903288754e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826131968, 0.43927, [1.1463e-07], [1.1806e-07], [1.1481e-07], [1.1666e-07], [86937], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1474969081815191e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826132187, 0.43737, [1.1423e-07], [1.1558e-07], [1.1448e-07], [1.1511e-07], [87164], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1468110200698365e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826132406, 0.43697, [1.1443e-07], [1.154e-07], [1.1452e-07], [1.1477e-07], [87578], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008451489731669426], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826132623, 0.51482, [0.0083887], [0.0086479], [0.0084265], [0.0085087], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.0085535625112243], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826132881, 0.52106, [0.0084249], [0.0090531], [0.008458], [0.0086737], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008444385544862598], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826133142, 0.51645, [0.0083835], [0.008476], [0.0084332], [0.0084706], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018810346567382414], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826133401, 0.46139, [0.0018688], [0.001989], [0.0018729], [0.0018972], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011647246105389462], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826133629, 0.45176, [0.0011595], [0.0011826], [0.0011619], [0.0011684], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003772589303220489], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826133857, 0.45307, [0.00037179], [0.00037947], [0.00037657], [0.00037776], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003432580645406438], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826134081, 0.45754, [0.00033908], [0.00035953], [0.00034025], [0.00034601], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.566893143583767e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826134310, 0.45477, [2.5482e-05], [2.6075e-05], [2.5547e-05], [2.5785e-05], [423], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018663826313885775], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826134542, 0.45333, [0.00018511], [0.00018988], [0.00018621], [0.00018836], [55], [10]], "benchmarks.TextSuite.time_fit": [[4.373401431936999e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826134766, 0.455, [4.3487e-05], [4.523e-05], [4.3602e-05], [4.3849e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003279791862675638], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826134995, 0.46241, [0.00032555], [0.00033029], [0.00032583], [0.00032957], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003563462604029939], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826135226, 0.44883, [0.00035569], [0.00035755], [0.00035605], [0.00035678], [29], [10]], "benchmarks.TextSuite.time_render": [[4.682593901297873e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826135448, 0.45483, [4.6609e-06], [4.7331e-06], [4.6641e-06], [4.6984e-06], [2327], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.611913744971389e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826135678, 0.46514, [8.5335e-05], [8.7785e-05], [8.5408e-05], [8.634e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.562230942154069e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826135911, 0.45405, [3.5271e-05], [3.7501e-05], [3.5413e-05], [3.6718e-05], [302], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002821403567826277], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826136140, 0.46165, [0.00027714], [0.00028834], [0.0002787], [0.00028632], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013706562604056671], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826136368, 0.46134, [0.0013567], [0.0013836], [0.0013587], [0.0013813], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014612649268071567], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826136598, 0.44798, [0.0014581], [0.0014862], [0.0014594], [0.0014722], [7], [10]]}, "durations": {"<build>": 1.8158071041107178}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/1cdcd1ae-virtualenv-py3.10.json
================================================
{"commit_hash": "1cdcd1ae6921ada4c9d53ca476b2155f19f9399d", "env_name": "virtualenv-py3.10", "date": 1599498296000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.705568368247799e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928882805, 0.45364, [1.6962e-07], [1.7342e-07], [1.7015e-07], [1.7115e-07], [64527], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7353461403789348e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928883034, 0.42549, [1.7268e-07], [1.7396e-07], [1.7299e-07], [1.737e-07], [58560], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7316303125600367e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928883246, 0.4294, [1.7168e-07], [1.7478e-07], [1.7298e-07], [1.7352e-07], [63497], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7447719773084267e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928883461, 0.44356, [1.7288e-07], [1.7668e-07], [1.7323e-07], [1.7545e-07], [64643], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7148101237034193e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928883681, 0.42463, [1.701e-07], [1.7453e-07], [1.7052e-07], [1.7326e-07], [59012], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7355933307819902e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928883892, 0.43809, [1.7275e-07], [1.7616e-07], [1.7321e-07], [1.7415e-07], [58610], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011024979015928694], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928884116, 0.43685, [0.0010944], [0.0011099], [0.0010967], [0.0011031], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928878599, 0.057919], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014977678552635812], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928884338, 0.42821, [0.0014925], [0.0015054], [0.0014937], [0.0015007], [7], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.166435123150466e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928884555, 0.45026, [1.1584e-07], [1.1744e-07], [1.1616e-07], [1.1723e-07], [94647], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1640746952978313e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928884782, 0.43907, [1.1609e-07], [1.1776e-07], [1.1617e-07], [1.1644e-07], [96741], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1622925278202787e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928884996, 0.42174, [1.1371e-07], [1.1684e-07], [1.1418e-07], [1.1632e-07], [87578], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928879529, 0.057596], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928879586, 0.057483], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928879644, 0.057169], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.003037343623873312], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928885207, 0.45489, [0.00298], [0.003058], [0.0030059], [0.0030443], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0019962360844753375], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928885437, 0.44739, [0.0019745], [0.0020171], [0.0019819], [0.0020121], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006737250000393639], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928885666, 0.43149, [0.00067005], [0.00067538], [0.00067066], [0.00067494], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005601316056287799], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928885881, 0.43921, [0.00055301], [0.00056437], [0.00055602], [0.00056384], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.818369192184331e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928886100, 0.44158, [2.7905e-05], [2.8463e-05], [2.7962e-05], [2.842e-05], [383], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001909163070274844], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928886322, 0.44359, [0.00018748], [0.00019467], [0.00018879], [0.00019221], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2670565776515796e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928886546, 0.44656, [4.2139e-05], [4.4498e-05], [4.2213e-05], [4.3079e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033311961282555375], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928886772, 0.42921, [0.00032975], [0.00033847], [0.00032986], [0.00033756], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928881456, 0.057662], "benchmarks.TextSuite.time_render": [[4.760116070671883e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928886988, 0.42257, [4.742e-06], [4.7767e-06], [4.7449e-06], [4.7646e-06], [2115], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.695512392128317e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928887197, 0.41961, [8.6476e-05], [8.7212e-05], [8.6858e-05], [8.7033e-05], [117], [10]], "benchmarks.TextSuite.time_split": [[3.436987540095497e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928887408, 0.43994, [3.4216e-05], [3.4482e-05], [3.4271e-05], [3.4474e-05], [313], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028506587802218527], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928887627, 0.43164, [0.00028086], [0.00028588], [0.00028401], [0.0002853], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001164951387585865], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928887843, 0.42585, [0.0011635], [0.0011668], [0.0011642], [0.0011661], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001557139931329792], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928888059, 0.44239, [0.0015535], [0.0016329], [0.0015546], [0.0015674], [7], [10]]}, "durations": {"<build>": 1.9608781337738037}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/1daa1771-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "1daa1771f31dee625054c65926eb616cc1bc352e", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644752167000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7092363507010167e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826177350, 0.46839, [1.6971e-07], [1.7462e-07], [1.7024e-07], [1.7145e-07], [64179], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7148452578488431e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826177586, 0.44043, [1.7037e-07], [1.7554e-07], [1.705e-07], [1.7182e-07], [58835], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7128252196550355e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826177805, 0.46531, [1.6972e-07], [1.7272e-07], [1.7106e-07], [1.7174e-07], [63829], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7096643239813685e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826178036, 0.45614, [1.7044e-07], [1.7764e-07], [1.7082e-07], [1.7236e-07], [64020], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.710504199656338e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826178267, 0.44377, [1.6937e-07], [1.737e-07], [1.704e-07], [1.7165e-07], [58887], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7049105352770147e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826178486, 0.45999, [1.6895e-07], [1.7232e-07], [1.7024e-07], [1.7094e-07], [64444], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011206874882595406], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826178718, 0.45004, [0.0011138], [0.0011357], [0.0011178], [0.001132], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015602143082235542], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826178939, 0.45136, [0.0015512], [0.0015679], [0.0015565], [0.0015638], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014208021311787888], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826179162, 0.4597, [0.0014093], [0.0014423], [0.0014172], [0.0014294], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1604443789890675e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826179393, 0.4623, [1.1413e-07], [1.1846e-07], [1.1491e-07], [1.1684e-07], [93636], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1571357301191075e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826179620, 0.46601, [1.1413e-07], [1.1743e-07], [1.1443e-07], [1.171e-07], [95509], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.158880325418378e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826179851, 0.46407, [1.1467e-07], [1.1852e-07], [1.1539e-07], [1.1608e-07], [95863], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008490572741720825], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826180083, 0.51964, [0.0084222], [0.0085158], [0.0084731], [0.0085077], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008649385417811573], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826180342, 0.5282, [0.0084158], [0.0093885], [0.0084736], [0.0091578], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008675718796439469], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826180603, 0.52869, [0.0084327], [0.0089387], [0.0086078], [0.008763], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001883284751481066], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826180862, 0.45318, [0.0018724], [0.0019123], [0.0018783], [0.0018913], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011715810590734086], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826181090, 0.45379, [0.0011635], [0.0012016], [0.0011682], [0.0011744], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038083178353392414], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826181319, 0.44814, [0.00037469], [0.00038623], [0.00037549], [0.00038294], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034500069450587033], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826181540, 0.4515, [0.00033815], [0.0003628], [0.00033859], [0.00035095], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5708973627916183e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826181761, 0.45753, [2.5394e-05], [2.6244e-05], [2.5499e-05], [2.599e-05], [423], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018838432753972453], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826181993, 0.46382, [0.00018536], [0.00019284], [0.00018751], [0.00018949], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.4137589197526585e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826182223, 0.45486, [4.3545e-05], [4.4557e-05], [4.3669e-05], [4.4259e-05], [235], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003300965940015334], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826182445, 0.46894, [0.00032924], [0.00033492], [0.00032945], [0.00033158], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035617960183399505], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826182676, 0.45392, [0.00035506], [0.00036255], [0.00035578], [0.00035732], [29], [10]], "benchmarks.TextSuite.time_render": [[4.712857080848662e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826182900, 0.45479, [4.6551e-06], [4.8405e-06], [4.6746e-06], [4.7847e-06], [2275], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.539966773241759e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826183126, 0.45625, [8.4584e-05], [8.6661e-05], [8.4876e-05], [8.5759e-05], [125], [10]], "benchmarks.TextSuite.time_split": [[3.5470538546867445e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826183354, 0.44717, [3.5192e-05], [3.6655e-05], [3.5258e-05], [3.5816e-05], [297], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002780067702956699], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826183579, 0.44667, [0.00027685], [0.00028043], [0.0002777], [0.00027873], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013666978775290772], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826183801, 0.4606, [0.0013597], [0.0013859], [0.0013627], [0.0013762], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001469613069535366], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826184032, 0.45244, [0.0014582], [0.0014965], [0.0014634], [0.0014823], [7], [10]]}, "durations": {"<build>": 1.8128840923309326}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/1f3f7f1e-virtualenv-py3.10.json
================================================
{"commit_hash": "1f3f7f1e33f77838a2cc31bd9d241a93c871047f", "env_name": "virtualenv-py3.10", "date": 1608307479000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.703931932788809e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929161288, 0.45859, [1.6923e-07], [1.7082e-07], [1.701e-07], [1.7065e-07], [64392], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7020538441303092e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929161517, 0.45514, [1.6879e-07], [1.7066e-07], [1.6977e-07], [1.7031e-07], [64854], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7056068405892232e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929161746, 0.45807, [1.693e-07], [1.733e-07], [1.7035e-07], [1.7088e-07], [64399], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.705333182701678e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929161975, 0.45658, [1.6917e-07], [1.7199e-07], [1.7018e-07], [1.7079e-07], [64289], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7041273254645358e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929162205, 0.44858, [1.6973e-07], [1.7252e-07], [1.7013e-07], [1.7082e-07], [64818], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7027633476621383e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929162434, 0.45952, [1.6857e-07], [1.7058e-07], [1.7003e-07], [1.7033e-07], [64572], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010267562494846061], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929162664, 0.44331, [0.0010235], [0.0010305], [0.0010255], [0.0010279], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014362797852040135], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929162884, 0.43646, [0.0014286], [0.0014465], [0.0014338], [0.0014394], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014140286239125999], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929163101, 0.44445, [0.0014062], [0.0014202], [0.0014084], [0.0014154], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.142687560373927e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929163325, 0.45463, [1.137e-07], [1.1446e-07], [1.1421e-07], [1.1434e-07], [95929], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1458354459388465e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929163552, 0.4544, [1.1417e-07], [1.1476e-07], [1.1445e-07], [1.1468e-07], [95416], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1472335320262367e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929163780, 0.4554, [1.1442e-07], [1.1512e-07], [1.1458e-07], [1.15e-07], [95443], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929157775, 0.062463], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929157837, 0.061992], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929157899, 0.062211], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0032340572506655008], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929164009, 0.46805, [0.0032236], [0.0032444], [0.0032287], [0.0032357], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0021162582997931167], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929164243, 0.44337, [0.0021092], [0.0021347], [0.0021129], [0.0021201], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006617669696424855], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929164468, 0.43891, [0.00065738], [0.00066599], [0.00066033], [0.00066231], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005468464997217158], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929164690, 0.44217, [0.00054411], [0.00054843], [0.00054538], [0.00054767], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.7952577626197842e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929164908, 0.44657, [2.7909e-05], [2.7989e-05], [2.7919e-05], [2.7967e-05], [380], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018724159663338868], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929165131, 0.44684, [0.00018651], [0.00018754], [0.00018714], [0.00018733], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.227643285228285e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929165354, 0.43917, [4.2036e-05], [4.258e-05], [4.2188e-05], [4.2403e-05], [253], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003293743066024035], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929165578, 0.43507, [0.00032889], [0.00033153], [0.00032921], [0.00032998], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003918501729808318], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929165795, 0.43461, [0.00039051], [0.00039799], [0.00039136], [0.00039218], [26], [10]], "benchmarks.TextSuite.time_render": [[4.68115087639879e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929166011, 0.44561, [4.6684e-06], [4.6924e-06], [4.6784e-06], [4.686e-06], [2333], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.53504219548995e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929166237, 0.44988, [8.5094e-05], [8.6095e-05], [8.5284e-05], [8.547e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.385456750383511e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929166464, 0.44438, [3.3742e-05], [3.3929e-05], [3.3823e-05], [3.3879e-05], [311], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027912950011070917], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929166685, 0.43738, [0.00027865], [0.00027997], [0.00027899], [0.00027929], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011472963330258303], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929166903, 0.44227, [0.0011447], [0.00115], [0.0011466], [0.001148], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001529297641744571], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929167122, 0.4453, [0.0015237], [0.0015325], [0.0015285], [0.00153], [7], [10]]}, "durations": {"<build>": 1.9861979484558105}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/1ffbd443-virtualenv-py3.10.json
================================================
{"commit_hash": "1ffbd443774cbc4bf9ddd968aef7c03322f33cf0", "env_name": "virtualenv-py3.10", "date": 1596366683000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7070232469184862e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928804297, 0.45023, [1.6927e-07], [1.7389e-07], [1.7042e-07], [1.7213e-07], [64436], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7300031985374115e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928804522, 0.43027, [1.714e-07], [1.7366e-07], [1.7285e-07], [1.7337e-07], [59395], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7071083096988122e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928804735, 0.43349, [1.6954e-07], [1.7407e-07], [1.7012e-07], [1.727e-07], [58675], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7364779467078806e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928804955, 0.44766, [1.7322e-07], [1.7426e-07], [1.7342e-07], [1.7405e-07], [62093], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.733705418271591e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928805177, 0.4257, [1.7183e-07], [1.7385e-07], [1.7273e-07], [1.7346e-07], [58598], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.719841129250439e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928805388, 0.43326, [1.6999e-07], [1.7562e-07], [1.7034e-07], [1.7397e-07], [58475], [10]], "benchmarks.PrettySuite.time_pretty": [[0.002223750000121072], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928805607, 0.43956, [0.0021902], [0.0022511], [0.002196], [0.0022475], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928800258, 0.058885], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928800317, 0.058889], "benchmarks.StyleSuite.time_parse_ansi": [[1.1622428057566312e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928805822, 0.4264, [1.1594e-07], [1.1743e-07], [1.1599e-07], [1.163e-07], [87716], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1646962131907206e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928806036, 0.42635, [1.1609e-07], [1.1701e-07], [1.1633e-07], [1.1665e-07], [87479], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1598065675378016e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928806250, 0.42715, [1.1553e-07], [1.1744e-07], [1.1578e-07], [1.1633e-07], [87809], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928801016, 0.058796], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928801075, 0.058582], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928801133, 0.058738], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002116570805083029], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928806463, 0.43813, [0.0020973], [0.0021369], [0.0021035], [0.0021333], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014812797848467846], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928806686, 0.43095, [0.001464], [0.0014953], [0.0014672], [0.0014931], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006757395931344945], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928806904, 0.4392, [0.00067077], [0.00068027], [0.00067389], [0.00067737], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005583234742516652], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928807126, 0.44214, [0.00055388], [0.00056027], [0.00055668], [0.00055916], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8112012962508316e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928807347, 0.44493, [2.7807e-05], [2.8319e-05], [2.7876e-05], [2.8245e-05], [385], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001871710438424264], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928807570, 0.43907, [0.0001869], [0.0001875], [0.00018704], [0.00018733], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.249875195091591e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928807789, 0.43056, [4.2075e-05], [4.2896e-05], [4.2099e-05], [4.2845e-05], [250], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003327284667951365], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928808007, 0.43129, [0.00032855], [0.00033677], [0.00032907], [0.00033652], [30], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928802930, 0.059357], "benchmarks.TextSuite.time_render": [[4.6815491127566895e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928808224, 0.44173, [4.6507e-06], [4.7003e-06], [4.6611e-06], [4.6843e-06], [2321], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.508267729473483e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928808451, 0.44288, [8.4418e-05], [8.6252e-05], [8.4738e-05], [8.5299e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.420339262214465e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928808675, 0.44164, [3.3854e-05], [3.4396e-05], [3.3906e-05], [3.439e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028196733753272404], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928808893, 0.43339, [0.00027793], [0.00028545], [0.00027845], [0.00028485], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011584282231827578], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928809107, 0.42614, [0.0011415], [0.001166], [0.0011451], [0.0011654], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015368482854682952], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928809322, 0.43864, [0.0015204], [0.0015597], [0.001523], [0.0015532], [7], [10]]}, "durations": {"<build>": 1.9934520721435547}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/20024635-virtualenv-py3.10.json
================================================
{"commit_hash": "20024635c06c22879fd2fd1e380ec4cccd9935dd", "env_name": "virtualenv-py3.10", "date": 1623261093000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.6983895555897055e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928361639, 0.4602, [1.6891e-07], [1.7034e-07], [1.6976e-07], [1.7013e-07], [64504], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.704207071253254e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928361868, 0.46025, [1.6849e-07], [1.7102e-07], [1.7016e-07], [1.7067e-07], [64697], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7004455784028058e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928362099, 0.44868, [1.6891e-07], [1.7033e-07], [1.6992e-07], [1.7016e-07], [64747], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7039779182067198e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928362329, 0.45904, [1.6909e-07], [1.7133e-07], [1.6983e-07], [1.7088e-07], [64212], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.704956315614673e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928362559, 0.45894, [1.6841e-07], [1.7769e-07], [1.7033e-07], [1.7064e-07], [64209], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7057127042677694e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928362788, 0.45534, [1.6969e-07], [1.7121e-07], [1.7033e-07], [1.7086e-07], [64171], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001026414601074066], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928363015, 0.4439, [0.0010212], [0.0010344], [0.0010224], [0.0010313], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014226536241039867], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928363236, 0.45289, [0.001416], [0.0014322], [0.0014201], [0.0014266], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0012958463121321984], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928363461, 0.44525, [0.0012861], [0.0013043], [0.0012892], [0.0012972], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1416102132025705e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928363682, 0.45572, [1.1396e-07], [1.1461e-07], [1.1407e-07], [1.1428e-07], [95950], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1438691305359791e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928363911, 0.45515, [1.1394e-07], [1.1478e-07], [1.1431e-07], [1.1448e-07], [95409], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1421868408540876e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928364138, 0.45615, [1.1368e-07], [1.1473e-07], [1.1415e-07], [1.1444e-07], [95926], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928358128, 0.0632], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928358191, 0.06204], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928358253, 0.062618], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021179875038797036], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928364367, 0.44252, [0.0021073], [0.0021326], [0.0021126], [0.0021242], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012675312500505242], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928364592, 0.4402, [0.0012598], [0.0012735], [0.0012634], [0.00127], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038149383369643513], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928364811, 0.43836, [0.00037481], [0.00038766], [0.00037498], [0.0003866], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003425159666221589], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928365026, 0.43853, [0.00033946], [0.00035509], [0.00034024], [0.00034495], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5188469742208198e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928365243, 0.45383, [2.5161e-05], [2.5492e-05], [2.5179e-05], [2.5216e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018495043959460575], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928365469, 0.4499, [0.0001844], [0.00018531], [0.00018473], [0.00018512], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.35189776540157e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928365694, 0.44177, [4.3385e-05], [4.359e-05], [4.3404e-05], [4.3577e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032581788705541724], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928365918, 0.43243, [0.00032477], [0.00032738], [0.00032515], [0.00032629], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035922413848436856], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928366133, 0.44181, [0.00035637], [0.00036654], [0.00035686], [0.00036481], [29], [10]], "benchmarks.TextSuite.time_render": [[4.677533350949419e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928366353, 0.44778, [4.6705e-06], [4.6884e-06], [4.6737e-06], [4.6824e-06], [2339], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.51222304163457e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928366580, 0.45115, [8.4491e-05], [8.5746e-05], [8.5059e-05], [8.5231e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.502959869447855e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928366808, 0.44294, [3.4942e-05], [3.5255e-05], [3.5001e-05], [3.5052e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002733470391831361], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928367034, 0.43979, [0.00027254], [0.00027459], [0.00027286], [0.00027349], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001097435450355988], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928367253, 0.44983, [0.0010958], [0.0010994], [0.0010966], [0.0010985], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013606223747046897], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928367482, 0.45025, [0.0013589], [0.0013655], [0.0013605], [0.0013627], [8], [10]]}, "durations": {"<build>": 1.986271858215332}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/21432b4c-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "21432b4c6ada8886f64ad20fb6a426f6a7efcdcf", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645526236000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7490858156758594e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826082646, 0.46369, [1.704e-07], [1.8249e-07], [1.7082e-07], [1.809e-07], [64270], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7223297263258475e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826082874, 0.45666, [1.7089e-07], [1.7396e-07], [1.7153e-07], [1.7286e-07], [60655], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.706147563644055e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826083102, 0.44326, [1.6918e-07], [1.7245e-07], [1.7039e-07], [1.7106e-07], [58673], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7315914231592135e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826083321, 0.46537, [1.6931e-07], [1.7451e-07], [1.7121e-07], [1.739e-07], [64225], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7153306654267416e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826083554, 0.45656, [1.7074e-07], [1.7373e-07], [1.7119e-07], [1.7237e-07], [64370], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.737158844935096e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826083789, 0.4492, [1.6985e-07], [1.7571e-07], [1.7126e-07], [1.7483e-07], [64363], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011367870158412391], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826084016, 0.44961, [0.0011186], [0.0011957], [0.0011308], [0.0011627], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015676547107951982], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826084240, 0.45414, [0.0015575], [0.0015905], [0.0015626], [0.0015734], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014133411314105615], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826084467, 0.45295, [0.0014099], [0.0014246], [0.0014112], [0.0014148], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1562133723968706e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826084696, 0.46472, [1.1469e-07], [1.1677e-07], [1.1481e-07], [1.1652e-07], [94823], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1472199296867827e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826084929, 0.46555, [1.1429e-07], [1.2016e-07], [1.144e-07], [1.1607e-07], [95406], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1651126947067906e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826085162, 0.46998, [1.1465e-07], [1.1744e-07], [1.1484e-07], [1.1664e-07], [95617], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.00852955225855112], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826085397, 0.52472, [0.008448], [0.0088769], [0.0084928], [0.0086018], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008476583228912205], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826085661, 0.51723, [0.0084238], [0.00851], [0.0084397], [0.0084957], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008476697723381221], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826085920, 0.51879, [0.0084], [0.0087114], [0.0084542], [0.0085605], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019090902448321383], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826086179, 0.45503, [0.0018873], [0.0019868], [0.0018937], [0.0019358], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011659744971742234], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826086408, 0.4531, [0.0011498], [0.001236], [0.0011532], [0.0011765], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003820051996236933], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826086637, 0.46218, [0.00036972], [0.00039603], [0.00036999], [0.0003946], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003413608853494929], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826086871, 0.45587, [0.00034028], [0.00034981], [0.00034082], [0.00034527], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5446476541302523e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826087097, 0.46365, [2.5327e-05], [2.5652e-05], [2.5353e-05], [2.5508e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001855136461331156], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826087328, 0.46251, [0.00018419], [0.00018974], [0.00018528], [0.00018571], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.5163024073027494e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826087557, 0.4565, [4.3591e-05], [4.6327e-05], [4.3802e-05], [4.5817e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003302506764509505], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826087790, 0.45076, [0.00032563], [0.00033502], [0.00032672], [0.00033318], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003569403799764555], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826088017, 0.4513, [0.00035517], [0.00036418], [0.00035571], [0.00035964], [29], [10]], "benchmarks.TextSuite.time_render": [[4.6782100637135585e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826088239, 0.4559, [4.6629e-06], [4.6985e-06], [4.6689e-06], [4.6917e-06], [2330], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.602592063789058e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826088471, 0.45692, [8.4715e-05], [8.6505e-05], [8.5437e-05], [8.6293e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5499088914582016e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826088702, 0.45636, [3.5198e-05], [3.5811e-05], [3.5352e-05], [3.5691e-05], [297], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002784839747712398], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826088927, 0.46185, [0.00027614], [0.00028126], [0.00027694], [0.00027905], [39], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013822656183037907], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826089158, 0.46145, [0.0013624], [0.0014514], [0.0013663], [0.001405], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001470208350968148], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826089394, 0.45266, [0.0014583], [0.0015201], [0.0014666], [0.0014735], [7], [10]]}, "durations": {"<build>": 1.940626859664917}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/2356d7c0-virtualenv-py3.10.json
================================================
{"commit_hash": "2356d7c0955dd6914367e0f88bfb87be040e35fa", "env_name": "virtualenv-py3.10", "date": 1592909192000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7172214412771086e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928545725, 0.43274, [1.6935e-07], [1.7379e-07], [1.704e-07], [1.7334e-07], [58946], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7024145879964128e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928545943, 0.42825, [1.6918e-07], [1.7135e-07], [1.6974e-07], [1.7074e-07], [58803], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.738391308822791e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928546161, 0.43086, [1.7044e-07], [1.7602e-07], [1.7326e-07], [1.7435e-07], [64596], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.726379042416303e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928546376, 0.44901, [1.6989e-07], [1.7437e-07], [1.716e-07], [1.7386e-07], [63914], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.737988252257405e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928546598, 0.42968, [1.7313e-07], [1.7495e-07], [1.7361e-07], [1.7407e-07], [64777], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7115044150572637e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928546813, 0.42082, [1.6817e-07], [1.7384e-07], [1.7022e-07], [1.728e-07], [59116], [10]], "benchmarks.PrettySuite.time_pretty": [[0.002197445899946615], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928547021, 0.44392, [0.0021812], [0.0022285], [0.0021855], [0.0022212], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928541994, 0.057646], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928542052, 0.057424], "benchmarks.StyleSuite.time_parse_ansi": [[1.1589347573900871e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928547244, 0.44922, [1.1451e-07], [1.1722e-07], [1.148e-07], [1.1672e-07], [95950], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1386454792402313e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928547468, 0.44547, [1.1358e-07], [1.1452e-07], [1.1385e-07], [1.1392e-07], [96082], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1621056620828583e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928547691, 0.43928, [1.1607e-07], [1.1662e-07], [1.1616e-07], [1.164e-07], [96041], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928542772, 0.057653], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928542829, 0.057312], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928542887, 0.057049], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019805486663244665], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928547917, 0.44474, [0.001968], [0.0019936], [0.0019755], [0.0019863], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001404687500325963], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928548143, 0.43541, [0.0013993], [0.0014117], [0.0014029], [0.001408], [8], [10]], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928543380, 0.057372], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928543438, 0.057477], "benchmarks.TextSuite.time_divide": [[2.780205584524272e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928548361, 0.43971, [2.7652e-05], [2.8388e-05], [2.7697e-05], [2.8229e-05], [385], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.000186847956093404], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928548582, 0.43701, [0.00018646], [0.00018755], [0.00018678], [0.00018702], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.216500794963978e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928548800, 0.43693, [4.1971e-05], [4.2243e-05], [4.2062e-05], [4.2187e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003306572583706809], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928549017, 0.42558, [0.00032946], [0.00033177], [0.00033044], [0.0003311], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928544369, 0.057703], "benchmarks.TextSuite.time_render": [[4.688928231420179e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928549228, 0.43696, [4.6756e-06], [4.7089e-06], [4.6816e-06], [4.6987e-06], [2334], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.531250004605281e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928549451, 0.43848, [8.5169e-05], [8.6011e-05], [8.5279e-05], [8.5664e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.3767818296597695e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928549671, 0.43425, [3.3675e-05], [3.3832e-05], [3.3718e-05], [3.382e-05], [311], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027953097329323957], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928549888, 0.42811, [0.00027918], [0.00028037], [0.00027948], [0.00027966], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011421134469047603], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928550100, 0.42984, [0.0011367], [0.0011504], [0.0011396], [0.0011437], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015162232157308608], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928550313, 0.43229, [0.0015144], [0.0015341], [0.0015157], [0.001517], [7], [10]]}, "durations": {"<build>": 1.9319932460784912}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/23aa7177-virtualenv-py3.10.json
================================================
{"commit_hash": "23aa71774457c34fe6d1fb527c1c2972447bb18d", "env_name": "virtualenv-py3.10", "date": 1631958005000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.701985654024702e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928159302, 0.4671, [1.6842e-07], [1.712e-07], [1.6995e-07], [1.7066e-07], [64407], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.700927061877873e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928159535, 0.44988, [1.6876e-07], [1.714e-07], [1.6976e-07], [1.7053e-07], [59915], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7008786937183728e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928159755, 0.46266, [1.6916e-07], [1.7047e-07], [1.6997e-07], [1.7036e-07], [64926], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.6984966367614413e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928159990, 0.46452, [1.6852e-07], [1.7102e-07], [1.6891e-07], [1.708e-07], [63737], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7007556384466194e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928160220, 0.46569, [1.694e-07], [1.7047e-07], [1.697e-07], [1.7016e-07], [64482], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6967653616837615e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928160453, 0.46526, [1.6845e-07], [1.7051e-07], [1.6903e-07], [1.7012e-07], [64593], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010313042002962902], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928160685, 0.45231, [0.0010284], [0.0010343], [0.0010302], [0.0010332], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014234218742785743], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928160910, 0.46302, [0.0014168], [0.001428], [0.0014204], [0.0014267], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013043802518950542], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928161139, 0.44408, [0.0012976], [0.001312], [0.0013037], [0.0013068], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1419466898642949e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928161364, 0.46284, [1.1379e-07], [1.1439e-07], [1.1398e-07], [1.1426e-07], [96135], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1570047643736177e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928161596, 0.45974, [1.1386e-07], [1.1813e-07], [1.1414e-07], [1.1797e-07], [94046], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1511616484557213e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928161824, 0.45137, [1.1395e-07], [1.1677e-07], [1.1433e-07], [1.1577e-07], [95343], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928155690, 0.065973], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928155756, 0.065964], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928155822, 0.065478], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002142874998389743], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928162054, 0.45246, [0.0021291], [0.0021522], [0.0021359], [0.0021474], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001284763000512612], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928162284, 0.45148, [0.0012776], [0.0012882], [0.0012823], [0.0012867], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.000388515425988266], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928162509, 0.45179, [0.00038132], [0.00039835], [0.00038174], [0.00039444], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034324798381872357], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928162730, 0.46002, [0.00034208], [0.00035228], [0.00034295], [0.00034498], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.551548943087897e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928162957, 0.45927, [2.5412e-05], [2.5748e-05], [2.5439e-05], [2.5582e-05], [425], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001842945345962452], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928163185, 0.45559, [0.00018309], [0.00018565], [0.00018421], [0.00018438], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3634989763587166e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928163413, 0.45976, [4.3491e-05], [4.4748e-05], [4.3511e-05], [4.3965e-05], [244], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032473043944319767], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928163639, 0.4596, [0.00032412], [0.00032582], [0.00032458], [0.00032513], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035670975821317527], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928163867, 0.44716, [0.00035629], [0.00035897], [0.00035639], [0.0003575], [29], [10]], "benchmarks.TextSuite.time_render": [[4.672523315758419e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928164089, 0.45405, [4.64e-06], [4.71e-06], [4.6474e-06], [4.6882e-06], [2337], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.51968503612145e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928164320, 0.45703, [8.4962e-05], [8.6485e-05], [8.5027e-05], [8.5571e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.520806314737135e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928164551, 0.45159, [3.5128e-05], [3.5338e-05], [3.5138e-05], [3.5257e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002744111713438638], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928164781, 0.44788, [0.00027397], [0.00027512], [0.00027427], [0.00027452], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010960895990137943], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928165004, 0.45624, [0.0010955], [0.0010971], [0.0010957], [0.0010967], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013692552511201939], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928165236, 0.44815, [0.001366], [0.0013744], [0.0013667], [0.0013711], [8], [10]]}, "durations": {"<build>": 2.0172619819641113}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/24743154-virtualenv-py3.10.json
================================================
{"commit_hash": "247431544d407d2496e200124e7b5ed2d9e657c9", "env_name": "virtualenv-py3.10", "date": 1611780945000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7008703561831484e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929003904, 0.45382, [1.6986e-07], [1.7063e-07], [1.6992e-07], [1.7057e-07], [64491], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7049544227687766e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929004132, 0.45966, [1.6965e-07], [1.7075e-07], [1.703e-07], [1.7062e-07], [64506], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7012695347008837e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929004361, 0.45427, [1.6873e-07], [1.7129e-07], [1.6996e-07], [1.7046e-07], [64819], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.708717196791671e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929004589, 0.44605, [1.6974e-07], [1.7257e-07], [1.7016e-07], [1.7127e-07], [64476], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.6966659951187515e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929004816, 0.45992, [1.6847e-07], [1.72e-07], [1.6909e-07], [1.7098e-07], [64550], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.700043844028154e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929005045, 0.45473, [1.6857e-07], [1.7114e-07], [1.6965e-07], [1.7032e-07], [64203], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001021081249928102], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929005271, 0.43977, [0.0010183], [0.0010248], [0.0010199], [0.0010222], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014228880008886335], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929005489, 0.45551, [0.001415], [0.0014303], [0.00142], [0.0014256], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014151146224321565], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929005713, 0.4464, [0.0014133], [0.0014272], [0.0014145], [0.0014198], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1455905289378434e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929005936, 0.44699, [1.1336e-07], [1.1617e-07], [1.1366e-07], [1.1558e-07], [96515], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1491036369022255e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929006155, 0.45532, [1.1369e-07], [1.1656e-07], [1.1388e-07], [1.1645e-07], [95748], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.141347646635857e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929006382, 0.45248, [1.1369e-07], [1.1558e-07], [1.1398e-07], [1.1503e-07], [94769], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929000400, 0.061733], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929000462, 0.061401], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929000523, 0.061811], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0032452187479066197], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929006608, 0.46886, [0.0032324], [0.0032601], [0.0032372], [0.0032513], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.002134970802580938], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929006843, 0.44562, [0.0021204], [0.0021425], [0.0021308], [0.0021366], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006581823117812746], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929007069, 0.4368, [0.00065555], [0.00066051], [0.00065691], [0.00065886], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005536798156467022], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929007289, 0.44581, [0.00054653], [0.00055847], [0.00054789], [0.00055641], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.534571677008926e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929007510, 0.45217, [2.5296e-05], [2.5496e-05], [2.5333e-05], [2.5365e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018455746562565388], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929007736, 0.44544, [0.00018318], [0.00018497], [0.00018386], [0.00018477], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.350025409348006e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929007958, 0.43794, [4.3415e-05], [4.3549e-05], [4.3455e-05], [4.3512e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032408198392424247], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929008181, 0.42887, [0.00032362], [0.00032488], [0.0003238], [0.00032443], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00038927161141246976], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929008394, 0.44484, [0.00038809], [0.00039124], [0.00038819], [0.00038973], [27], [10]], "benchmarks.TextSuite.time_render": [[4.6586813701803316e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929008614, 0.44512, [4.6428e-06], [4.6894e-06], [4.6487e-06], [4.6795e-06], [2335], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.538541783309483e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929008840, 0.45026, [8.5034e-05], [8.6396e-05], [8.5351e-05], [8.5516e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.531782784819847e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929009066, 0.43937, [3.5158e-05], [3.5463e-05], [3.5186e-05], [3.5354e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027466118435289617], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929009290, 0.43885, [0.00027379], [0.00027655], [0.00027429], [0.00027582], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010957208505715244], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929009508, 0.44719, [0.0010937], [0.0011008], [0.0010943], [0.001096], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014872380706947297], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929009736, 0.43456, [0.0014853], [0.0014999], [0.0014865], [0.0014881], [7], [10]]}, "durations": {"<build>": 2.0492501258850098}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/25a1bf06-virtualenv-py3.10.json
================================================
{"commit_hash": "25a1bf06b4854bd8d9239f8ba05678d2c60a62ad", "env_name": "virtualenv-py3.10", "date": 1600443006000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.713373427108319e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928922409, 0.45057, [1.6964e-07], [1.7398e-07], [1.6995e-07], [1.7349e-07], [64516], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.731565974745811e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928922632, 0.42239, [1.713e-07], [1.7423e-07], [1.7254e-07], [1.7393e-07], [58976], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7319214308453452e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928922841, 0.42272, [1.7002e-07], [1.7419e-07], [1.7178e-07], [1.7414e-07], [58891], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7324510468834383e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928923050, 0.42368, [1.7066e-07], [1.7417e-07], [1.7293e-07], [1.7346e-07], [58781], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7460887599500727e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928923261, 0.43196, [1.7426e-07], [1.7665e-07], [1.7448e-07], [1.751e-07], [64004], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7487969483566893e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928923477, 0.42955, [1.7192e-07], [1.7903e-07], [1.7338e-07], [1.772e-07], [58705], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0009256363634697416], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928923692, 0.43041, [0.00091569], [0.00093458], [0.00091827], [0.00093142], [11], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928918202, 0.058446], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013186432497604983], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928923906, 0.43252, [0.0013099], [0.0013369], [0.001311], [0.0013263], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1536565645431084e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928924127, 0.4396, [1.1405e-07], [1.1746e-07], [1.1436e-07], [1.1675e-07], [96108], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1549200145366552e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928924344, 0.45093, [1.1384e-07], [1.1751e-07], [1.1436e-07], [1.1687e-07], [96329], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.167907086471211e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928924571, 0.44149, [1.1626e-07], [1.1865e-07], [1.1648e-07], [1.178e-07], [95735], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928919133, 0.057779], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928919191, 0.057361], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928919249, 0.05739], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0028535103738249745], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928924798, 0.43737, [0.0028459], [0.002874], [0.0028495], [0.0028594], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0019382950849831104], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928925022, 0.44618, [0.0019205], [0.0019506], [0.0019249], [0.0019468], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006695468737234478], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928925246, 0.43509, [0.00065798], [0.00068291], [0.00065947], [0.00067481], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005540252107158793], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928925469, 0.43607, [0.00054347], [0.0005588], [0.00055331], [0.00055579], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.7922080077164932e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928925686, 0.43674, [2.785e-05], [2.8031e-05], [2.7888e-05], [2.7961e-05], [381], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018699245691973846], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928925903, 0.44197, [0.00018631], [0.00018771], [0.0001869], [0.00018725], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.218484458710212e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928926124, 0.43724, [4.1894e-05], [4.2331e-05], [4.2032e-05], [4.2276e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032975337085043707], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928926341, 0.42487, [0.00032823], [0.00033068], [0.00032916], [0.00033016], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928921051, 0.057825], "benchmarks.TextSuite.time_render": [[4.6940412815479986e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928926552, 0.43581, [4.6873e-06], [4.7056e-06], [4.6931e-06], [4.7027e-06], [2325], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.528303908406087e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928926773, 0.44216, [8.4729e-05], [8.5632e-05], [8.523e-05], [8.5473e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.376495834135522e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928926995, 0.43503, [3.3666e-05], [3.3931e-05], [3.3686e-05], [3.3844e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027902985134829034], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928927212, 0.42695, [0.00027802], [0.00028028], [0.00027873], [0.00027947], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011423819459095183], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928927424, 0.43006, [0.0011399], [0.0011436], [0.001141], [0.0011432], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001528839285518708], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928927638, 0.43441, [0.0015231], [0.0015328], [0.0015254], [0.001532], [7], [10]]}, "durations": {"<build>": 1.9668350219726562}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/26fe4667-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "26fe46679473aad537554ec194ddeb92d74461aa", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1655286086000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7081331890049814e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825594087, 0.45873, [1.7025e-07], [1.7152e-07], [1.7071e-07], [1.7136e-07], [61656], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7156552132787237e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825594315, 0.46254, [1.703e-07], [1.7388e-07], [1.7098e-07], [1.7279e-07], [64322], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7121667888628862e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825594548, 0.44036, [1.7085e-07], [1.7557e-07], [1.7107e-07], [1.7237e-07], [58878], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7179736730646644e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825594765, 0.45669, [1.707e-07], [1.7311e-07], [1.7142e-07], [1.7241e-07], [64274], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.714619594072185e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825594998, 0.43926, [1.708e-07], [1.7209e-07], [1.7132e-07], [1.7168e-07], [58686], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7129431243724578e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825595216, 0.46567, [1.7039e-07], [1.7249e-07], [1.7071e-07], [1.7177e-07], [64238], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001063860405702144], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825595450, 0.46093, [0.0010593], [0.0010687], [0.0010621], [0.0010643], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015207708680203982], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825595680, 0.45322, [0.0015098], [0.0015272], [0.0015171], [0.0015236], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001193682831298146], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825595910, 0.44187, [0.001186], [0.0012258], [0.0011905], [0.0011968], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1478112111675911e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825596131, 0.45842, [1.1438e-07], [1.1555e-07], [1.1458e-07], [1.1533e-07], [93956], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1482261657246852e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825596360, 0.4658, [1.1429e-07], [1.1538e-07], [1.1458e-07], [1.1506e-07], [95076], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1551559627698102e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825596595, 0.46424, [1.1455e-07], [1.1982e-07], [1.1482e-07], [1.168e-07], [96048], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007666937541216612], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825596832, 0.51996, [0.0076149], [0.0081113], [0.0076289], [0.0077529], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007657729263883084], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825597094, 0.50583, [0.0075969], [0.0079035], [0.0076108], [0.0076779], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007682229275815189], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825597341, 0.52089, [0.0076148], [0.00794], [0.0076379], [0.0077278], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017757812359680734], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825597601, 0.45976, [0.0017459], [0.0018644], [0.0017618], [0.0018471], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001091070845723152], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825597832, 0.44909, [0.0010789], [0.0011038], [0.0010811], [0.0010952], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003932037226924742], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825598060, 0.45516, [0.00038672], [0.00039982], [0.00038705], [0.0003992], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0009095885422235976], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825598284, 0.45867, [0.00090483], [0.00092231], [0.00090637], [0.00091208], [12], [10]], "benchmarks.TextSuite.time_divide": [[2.5739138824556253e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825598517, 0.46049, [2.5624e-05], [2.5799e-05], [2.5695e-05], [2.5762e-05], [422], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00019331770558242818], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825598746, 0.4622, [0.00019207], [0.00019406], [0.00019287], [0.00019355], [56], [10]], "benchmarks.TextSuite.time_fit": [[4.4731944217346606e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825598977, 0.4513, [4.4491e-05], [4.5005e-05], [4.4528e-05], [4.4817e-05], [240], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00034280694865932067], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825599206, 0.44719, [0.00033993], [0.00035575], [0.00034065], [0.00034753], [30], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0004736193222925067], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825599429, 0.45287, [0.00047052], [0.00047963], [0.00047134], [0.00047631], [22], [10]], "benchmarks.TextSuite.time_render": [[4.711734949657391e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825599655, 0.45606, [4.6916e-06], [4.7404e-06], [4.6971e-06], [4.7247e-06], [2315], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.837483079743481e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825599887, 0.45381, [8.7511e-05], [9.0267e-05], [8.7684e-05], [8.8928e-05], [124], [10]], "benchmarks.TextSuite.time_split": [[3.570619398505976e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825600112, 0.45812, [3.5477e-05], [3.6992e-05], [3.5615e-05], [3.5942e-05], [302], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002870399297939406], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825600337, 0.46131, [0.00028342], [0.00029506], [0.00028513], [0.00028891], [36], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011165749980136751], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825600564, 0.452, [0.0011069], [0.0011335], [0.0011114], [0.001128], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013919323100708425], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825600789, 0.452, [0.0013828], [0.0014142], [0.0013876], [0.0013956], [8], [10]]}, "durations": {"<build>": 1.8253941535949707}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/27ab1732-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "27ab17327d580bc9b101dc9ddd6ac504bd910c0c", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1653394452000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7346790264323835e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825609867, 0.46721, [1.7018e-07], [1.8036e-07], [1.7045e-07], [1.778e-07], [63089], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.718713427401344e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825610103, 0.46901, [1.7005e-07], [1.7607e-07], [1.7091e-07], [1.7288e-07], [64069], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7089793684839797e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825610338, 0.46492, [1.7009e-07], [1.72e-07], [1.7076e-07], [1.7109e-07], [64303], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7093077071991156e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825610571, 0.46538, [1.6946e-07], [1.7383e-07], [1.7024e-07], [1.7163e-07], [63803], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.715836033676295e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825610803, 0.46239, [1.7052e-07], [1.7393e-07], [1.7099e-07], [1.721e-07], [64560], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.711210215729928e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825611036, 0.46531, [1.6997e-07], [1.7376e-07], [1.7065e-07], [1.7153e-07], [64104], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010606499388813974], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825611268, 0.45944, [0.0010566], [0.0010682], [0.0010578], [0.0010622], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014846844964527656], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825611497, 0.44717, [0.0014811], [0.0014887], [0.0014832], [0.0014859], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.00116396294389334], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825611724, 0.44958, [0.0011567], [0.0012331], [0.0011615], [0.0011689], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.141530879007639e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825611951, 0.46675, [1.1409e-07], [1.1455e-07], [1.1412e-07], [1.1438e-07], [95828], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1428966855497687e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825612185, 0.43846, [1.1382e-07], [1.1543e-07], [1.1398e-07], [1.1441e-07], [87828], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1440980338338865e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825612405, 0.46385, [1.1408e-07], [1.1529e-07], [1.1414e-07], [1.1453e-07], [95863], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007604073209222406], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825612636, 0.51468, [0.0075628], [0.0076984], [0.007567], [0.0076178], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007598291733302176], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825612894, 0.51814, [0.007571], [0.0077104], [0.0075776], [0.0076384], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007658031245227903], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825613152, 0.51769, [0.0075794], [0.0079485], [0.0076205], [0.0078136], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017594895713652174], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825613409, 0.44986, [0.0017348], [0.0018461], [0.0017407], [0.0017913], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0010856708395294845], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825613636, 0.44703, [0.0010759], [0.0010988], [0.0010796], [0.0010943], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00039335957693832895], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825613860, 0.45647, [0.00038489], [0.00041402], [0.00038715], [0.0004026], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003424341482440791], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825614090, 0.46018, [0.00034044], [0.00035204], [0.00034143], [0.00034331], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5624294871023456e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825614321, 0.45916, [2.5519e-05], [2.6072e-05], [2.5542e-05], [2.5679e-05], [414], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018494791383373327], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825614551, 0.46213, [0.00018342], [0.00018888], [0.0001844], [0.00018662], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.371189005006619e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825614782, 0.45548, [4.3586e-05], [4.5058e-05], [4.3607e-05], [4.3854e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003316122437677076], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825615016, 0.45069, [0.00032867], [0.00035095], [0.00032936], [0.00034762], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003584813966881484], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825615238, 0.44307, [0.00035587], [0.00036415], [0.0003563], [0.00036036], [28], [10]], "benchmarks.TextSuite.time_render": [[4.691820278055104e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825615457, 0.45772, [4.662e-06], [4.7282e-06], [4.6714e-06], [4.7132e-06], [2334], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.588366396725179e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825615690, 0.45867, [8.5695e-05], [8.6096e-05], [8.5774e-05], [8.5912e-05], [125], [10]], "benchmarks.TextSuite.time_split": [[3.5401756701735304e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825615920, 0.45444, [3.519e-05], [3.5678e-05], [3.532e-05], [3.5577e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002768974886030743], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825616152, 0.45523, [0.00027491], [0.00027956], [0.00027568], [0.00027831], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011241437518037856], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825616381, 0.45529, [0.0011137], [0.0011814], [0.0011157], [0.0011464], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013715286186197773], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825616607, 0.4656, [0.0013514], [0.0014233], [0.0013592], [0.0013866], [8], [10]]}, "durations": {"<build>": 1.9003052711486816}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/2aea8526-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "2aea85261034a9d32e966828f35cf43611d6d742", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644577643000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7146182212684723e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826287864, 0.46058, [1.6998e-07], [1.7185e-07], [1.7122e-07], [1.7172e-07], [63141], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.707761595637003e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826288093, 0.46385, [1.704e-07], [1.7105e-07], [1.706e-07], [1.7091e-07], [64059], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7040463762688964e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826288324, 0.46038, [1.693e-07], [1.753e-07], [1.6973e-07], [1.7114e-07], [64936], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.706322872864869e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826288557, 0.45221, [1.6938e-07], [1.7536e-07], [1.7042e-07], [1.7197e-07], [61366], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7095499637260492e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826288781, 0.46563, [1.6879e-07], [1.7218e-07], [1.7073e-07], [1.7123e-07], [64215], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7070878958602438e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826289014, 0.43835, [1.6929e-07], [1.7144e-07], [1.7025e-07], [1.7129e-07], [59215], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011138333809665507], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826289232, 0.44154, [0.0011081], [0.0011194], [0.0011128], [0.0011156], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015606755789901528], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826289452, 0.44902, [0.0015533], [0.0015675], [0.001558], [0.0015623], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014058697561267763], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826289674, 0.45344, [0.0014041], [0.0014144], [0.0014049], [0.0014088], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1595618079233218e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826289901, 0.43491, [1.1476e-07], [1.1672e-07], [1.1543e-07], [1.1643e-07], [87076], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1496640708283414e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826290118, 0.45943, [1.1401e-07], [1.1578e-07], [1.1445e-07], [1.1527e-07], [94738], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1547145032886849e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826290347, 0.45522, [1.1395e-07], [1.1971e-07], [1.1427e-07], [1.1728e-07], [94606], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.00844646868063137], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826290576, 0.51498, [0.0083943], [0.008566], [0.0084176], [0.0084683], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008445073035545647], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826290833, 0.51616, [0.008387], [0.0085098], [0.0084146], [0.0084762], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008471801993437111], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826291090, 0.51611, [0.0084062], [0.0085655], [0.0084428], [0.0084889], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.00188733683899045], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826291348, 0.46333, [0.0018703], [0.0019891], [0.0018724], [0.0019079], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001165106491599646], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826291577, 0.45211, [0.0011598], [0.0012064], [0.001164], [0.0011729], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037811012589372694], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826291806, 0.45336, [0.00037398], [0.00038485], [0.00037644], [0.00037849], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034425000194460154], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826292031, 0.45912, [0.00034297], [0.00035528], [0.00034343], [0.00034652], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.569871084276764e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826292260, 0.45896, [2.5487e-05], [2.7106e-05], [2.5552e-05], [2.6689e-05], [420], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018552939374265928], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826292491, 0.45714, [0.00018427], [0.00018966], [0.00018528], [0.00018689], [56], [10]], "benchmarks.TextSuite.time_fit": [[4.370850377303899e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826292715, 0.45354, [4.3556e-05], [4.4211e-05], [4.3618e-05], [4.4071e-05], [244], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003294210923327641], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826292944, 0.46855, [0.00032542], [0.00033435], [0.0003292], [0.00033019], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003584541690846284], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826293178, 0.46924, [0.00035704], [0.00037177], [0.00035836], [0.00036019], [30], [10]], "benchmarks.TextSuite.time_render": [[4.677002976758735e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826293414, 0.45844, [4.665e-06], [4.7164e-06], [4.6745e-06], [4.7073e-06], [2332], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.594307876155368e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826293645, 0.46486, [8.5626e-05], [8.8326e-05], [8.5839e-05], [8.6986e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5634092727349594e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826293881, 0.45599, [3.5318e-05], [3.6067e-05], [3.5434e-05], [3.5799e-05], [291], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002788426446434306], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826294104, 0.46309, [0.00027465], [0.00028418], [0.0002756], [0.00028096], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013827552611473948], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826294333, 0.46666, [0.0013634], [0.0014184], [0.0013671], [0.0014067], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001463988080753812], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826294567, 0.45116, [0.0014575], [0.0015038], [0.0014625], [0.0014756], [7], [10]]}, "durations": {"<build>": 1.8112099170684814}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/2ba277ac-virtualenv-py3.10.json
================================================
{"commit_hash": "2ba277ac54a153d3030b496698133ec2e4f67e1d", "env_name": "virtualenv-py3.10", "date": 1641143137000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7095384073963524e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928304445, 0.45942, [1.6973e-07], [1.716e-07], [1.6998e-07], [1.7151e-07], [64451], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7035758232162449e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928304671, 0.4679, [1.6949e-07], [1.7154e-07], [1.6994e-07], [1.7062e-07], [64539], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7102073580626215e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928304904, 0.46608, [1.7036e-07], [1.7739e-07], [1.707e-07], [1.7123e-07], [64212], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.701027185648243e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928305137, 0.46472, [1.6899e-07], [1.7052e-07], [1.6964e-07], [1.7037e-07], [64706], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.6981393392397904e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928305369, 0.4597, [1.6839e-07], [1.7066e-07], [1.696e-07], [1.703e-07], [64805], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7074461525374004e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928305603, 0.46676, [1.6992e-07], [1.7421e-07], [1.7034e-07], [1.7181e-07], [64769], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011084645986557007], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928305836, 0.46381, [0.0011041], [0.0011125], [0.0011068], [0.0011107], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015478839299508504], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928306060, 0.44666, [0.0015436], [0.0015532], [0.0015465], [0.0015501], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014028490004420746], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928306282, 0.45405, [0.0013971], [0.0014514], [0.0013996], [0.0014073], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1452256623089701e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928306507, 0.4362, [1.1404e-07], [1.1512e-07], [1.1434e-07], [1.1484e-07], [87764], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1442488653038437e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928306725, 0.46277, [1.1416e-07], [1.1488e-07], [1.1434e-07], [1.1463e-07], [96181], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1429263201953186e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928306957, 0.4655, [1.1401e-07], [1.1442e-07], [1.142e-07], [1.1437e-07], [96283], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928300849, 0.066968], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928300916, 0.066977], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928300983, 0.066742], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0023390999995172024], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928307191, 0.45974, [0.0023284], [0.0023587], [0.0023345], [0.0023427], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014037630626262398], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928307423, 0.45539, [0.0013942], [0.0014119], [0.0014019], [0.0014091], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038056559289408916], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928307650, 0.45847, [0.00036921], [0.00039423], [0.00036934], [0.0003918], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003410354164467814], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928307877, 0.4501, [0.00033945], [0.0003525], [0.00034076], [0.00034817], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5224709290426314e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928308099, 0.46106, [2.5162e-05], [2.5358e-05], [2.5187e-05], [2.5256e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001850456204104783], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928308328, 0.45626, [0.00018381], [0.00018582], [0.00018491], [0.0001853], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3433180885253156e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928308556, 0.44726, [4.3321e-05], [4.3623e-05], [4.3339e-05], [4.3488e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032567069302463244], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928308783, 0.43785, [0.00032291], [0.00032701], [0.00032431], [0.00032633], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003585962584675772], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928309000, 0.44776, [0.00035775], [0.00035906], [0.00035811], [0.00035883], [29], [10]], "benchmarks.TextSuite.time_render": [[4.683463913286537e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928309223, 0.45369, [4.6663e-06], [4.7312e-06], [4.6794e-06], [4.6908e-06], [2328], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.532407937020744e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928309453, 0.45564, [8.4567e-05], [8.5448e-05], [8.5256e-05], [8.5411e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.522766833543607e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928309682, 0.44867, [3.5003e-05], [3.5378e-05], [3.5066e-05], [3.5363e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002741403556061222], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928309910, 0.44752, [0.0002734], [0.00027501], [0.00027404], [0.00027469], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001365880249068141], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928310133, 0.45725, [0.0013571], [0.0013699], [0.0013608], [0.0013676], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014567262156301047], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928310365, 0.4485, [0.0014469], [0.0015402], [0.0014546], [0.0014577], [7], [10]]}, "durations": {"<build>": 2.0873799324035645}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/2c93dce9-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "2c93dce92788cec32a39de14bf54a51188284cd8", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1651935144000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7044159514710919e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889230654, 0.45676, [1.6941e-07], [1.7393e-07], [1.7022e-07], [1.7296e-07], [64659], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.745773331221028e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889230878, 0.44855, [1.726e-07], [1.7565e-07], [1.7416e-07], [1.7498e-07], [64196], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7363835849663594e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889231101, 0.46396, [1.7087e-07], [1.7624e-07], [1.7147e-07], [1.7479e-07], [64496], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7432179719150774e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889231334, 0.46575, [1.7009e-07], [1.7593e-07], [1.7413e-07], [1.7495e-07], [63759], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7370341004691182e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889231568, 0.45681, [1.7002e-07], [1.7589e-07], [1.7068e-07], [1.7406e-07], [64252], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7414731523535383e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889231792, 0.46396, [1.7286e-07], [1.7462e-07], [1.738e-07], [1.745e-07], [63500], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010710145928896964], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889232024, 0.46205, [0.001054], [0.0010904], [0.0010617], [0.0010845], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014888810193432228], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889232256, 0.45001, [0.0014785], [0.0014968], [0.0014837], [0.0014914], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001174662003500594], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889232485, 0.45798, [0.0011624], [0.0011818], [0.0011662], [0.0011798], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1613753622963938e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889232713, 0.45186, [1.1438e-07], [1.1743e-07], [1.149e-07], [1.1708e-07], [96258], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1640513111712564e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889232940, 0.44091, [1.148e-07], [1.1753e-07], [1.1625e-07], [1.1677e-07], [87928], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1554850273541346e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889233161, 0.46737, [1.1449e-07], [1.1715e-07], [1.146e-07], [1.1688e-07], [96356], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.0076383332489058375], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889233395, 0.51598, [0.0075762], [0.0078414], [0.0075911], [0.0077608], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007638437731657177], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889233654, 0.51728, [0.0075942], [0.0080578], [0.0076119], [0.007698], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.00770463579101488], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889233912, 0.51726, [0.0075846], [0.0077551], [0.0076227], [0.0077215], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017328125735123952], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889234170, 0.44522, [0.0017132], [0.0017508], [0.0017224], [0.0017417], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0010963104432448745], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889234395, 0.44547, [0.0010714], [0.0011064], [0.0010743], [0.0011031], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037983111022705477], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889234617, 0.45292, [0.00037168], [0.00038263], [0.0003782], [0.0003824], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034543749831256366], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889234842, 0.45564, [0.00033936], [0.00035431], [0.00034072], [0.00034858], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5799903520491234e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889235070, 0.456, [2.5588e-05], [2.6131e-05], [2.5732e-05], [2.5855e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018501760446113245], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889235304, 0.45951, [0.00018394], [0.0001902], [0.00018453], [0.00018634], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.376744287376239e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889235535, 0.45265, [4.3504e-05], [4.4438e-05], [4.358e-05], [4.3897e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033054356181034535], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889235764, 0.45308, [0.00032758], [0.00033173], [0.00032972], [0.0003314], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003625473914796422], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889235994, 0.45292, [0.00036137], [0.00036677], [0.00036211], [0.00036578], [29], [10]], "benchmarks.TextSuite.time_render": [[4.69006167847628e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889236220, 0.4554, [4.6632e-06], [4.7224e-06], [4.6835e-06], [4.693e-06], [2334], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.711597687880121e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889236452, 0.46266, [8.5811e-05], [8.7996e-05], [8.6197e-05], [8.757e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.561550468878179e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889236685, 0.4501, [3.523e-05], [3.6177e-05], [3.5237e-05], [3.6054e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028007601488482306], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889236915, 0.44749, [0.00027837], [0.00028554], [0.00027927], [0.0002814], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011252106115635899], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889237139, 0.44136, [0.0011218], [0.0011319], [0.0011234], [0.0011274], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013673463836312294], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889237355, 0.45674, [0.0013404], [0.0013816], [0.0013492], [0.0013709], [8], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.026860416517592967], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892970011, 0.62277, [0.02676], [0.027615], [0.02685], [0.026961], [1], [10]]}, "durations": {"<build>": 1.7907781600952148}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/2d3152a2-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "2d3152a230d2911cf4e7d7648cd7153e784301e3", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1647947421000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7076385298281106e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889168112, 0.4573, [1.698e-07], [1.7376e-07], [1.702e-07], [1.7171e-07], [64521], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7149545177984797e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889168334, 0.44116, [1.7058e-07], [1.745e-07], [1.7103e-07], [1.7285e-07], [58732], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7219699617917248e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889168553, 0.43888, [1.6948e-07], [1.7487e-07], [1.7138e-07], [1.7377e-07], [59136], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.716154520478989e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889168770, 0.45962, [1.7062e-07], [1.7621e-07], [1.7096e-07], [1.7255e-07], [63151], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7092275331008688e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889169001, 0.46507, [1.6995e-07], [1.7731e-07], [1.703e-07], [1.7512e-07], [64579], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7092768272761514e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889169235, 0.46348, [1.695e-07], [1.7194e-07], [1.7001e-07], [1.7151e-07], [63595], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010367145878262818], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889169467, 0.45365, [0.0010311], [0.0010417], [0.0010349], [0.0010386], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014664940702329788], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889169693, 0.45189, [0.0014572], [0.0015185], [0.0014603], [0.0014695], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001138532391956283], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889169918, 0.45066, [0.001133], [0.001173], [0.0011377], [0.0011446], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1501361677432211e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889170142, 0.43729, [1.1386e-07], [1.1755e-07], [1.1479e-07], [1.1524e-07], [87684], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1694264116396305e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889170361, 0.46071, [1.1475e-07], [1.1776e-07], [1.1632e-07], [1.1745e-07], [96462], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1467283010619496e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889170586, 0.45251, [1.1431e-07], [1.1724e-07], [1.1441e-07], [1.1526e-07], [96138], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007615323003847152], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889170809, 0.51402, [0.0075551], [0.0077638], [0.0075733], [0.0076419], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007577718759421259], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889171066, 0.51271, [0.0075472], [0.0076825], [0.007561], [0.0076014], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007596312498208135], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889171323, 0.51194, [0.0075142], [0.0077965], [0.0075661], [0.0076404], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017432569293305278], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889171580, 0.44997, [0.0017351], [0.0017512], [0.00174], [0.0017475], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0010824187425896525], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889171807, 0.44421, [0.0010664], [0.0011216], [0.0010679], [0.0010968], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003804151742120407], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889172029, 0.45654, [0.00037725], [0.00038743], [0.00037761], [0.00038426], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003413902673249443], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889172257, 0.44501, [0.00033945], [0.00035062], [0.00034019], [0.00034238], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.542139953591226e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889172477, 0.45049, [2.534e-05], [2.5645e-05], [2.5361e-05], [2.5486e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018465501587774794], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889172707, 0.45592, [0.0001841], [0.00018552], [0.00018442], [0.00018514], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.355411368944659e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889172940, 0.44821, [4.3472e-05], [4.3633e-05], [4.3498e-05], [4.3595e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032789772729191816], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889173168, 0.45992, [0.00032525], [0.00033513], [0.00032605], [0.0003288], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035760919001467267], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889173398, 0.44705, [0.0003542], [0.00036496], [0.00035649], [0.00035903], [29], [10]], "benchmarks.TextSuite.time_render": [[4.666639790528977e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889173620, 0.45437, [4.6597e-06], [4.725e-06], [4.6643e-06], [4.6786e-06], [2336], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.568505745643051e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889173850, 0.46056, [8.4902e-05], [8.6623e-05], [8.5425e-05], [8.6022e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5495941403213066e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889174083, 0.45398, [3.5182e-05], [3.595e-05], [3.5239e-05], [3.5701e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.000277865687262659], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889174315, 0.45303, [0.00027519], [0.00028687], [0.00027559], [0.0002806], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011050625005736947], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889174541, 0.4476, [0.0010988], [0.0011455], [0.0011023], [0.0011294], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001348677062196657], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889174765, 0.45493, [0.0013387], [0.0013924], [0.0013457], [0.0013695], [8], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.027056666440330446], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892960196, 0.62664, [0.026827], [0.028042], [0.026911], [0.027459], [1], [10]]}, "durations": {"<build>": 1.8496921062469482}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/2d3ec69f-virtualenv-py3.10.json
================================================
{"commit_hash": "2d3ec69f6815da1d42da0f61d520c5ad630a5e26", "env_name": "virtualenv-py3.10", "date": 1610401267000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7020154316555255e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929246840, 0.45806, [1.686e-07], [1.7116e-07], [1.6939e-07], [1.7045e-07], [64341], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7010698368490514e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929247068, 0.45703, [1.6937e-07], [1.7054e-07], [1.6965e-07], [1.702e-07], [64650], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7018397440941086e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929247297, 0.45007, [1.6973e-07], [1.7083e-07], [1.6996e-07], [1.7075e-07], [65077], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.6952412545509723e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929247528, 0.45953, [1.6861e-07], [1.7039e-07], [1.6925e-07], [1.6998e-07], [64641], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7000315751200035e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929247756, 0.45595, [1.6886e-07], [1.705e-07], [1.6941e-07], [1.7024e-07], [64133], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7001020117685218e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929247984, 0.45666, [1.6924e-07], [1.7053e-07], [1.6934e-07], [1.7036e-07], [64403], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010225667007034644], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929248213, 0.44249, [0.0010197], [0.0010249], [0.0010216], [0.0010243], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014374107143209714], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929248433, 0.43714, [0.0014279], [0.0014471], [0.001432], [0.001441], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014142213130980963], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929248650, 0.44698, [0.0014102], [0.0014189], [0.0014129], [0.0014165], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1420955611779321e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929248875, 0.45308, [1.1374e-07], [1.1457e-07], [1.1407e-07], [1.1433e-07], [95478], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1422061073712316e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929249102, 0.45453, [1.1389e-07], [1.145e-07], [1.1416e-07], [1.1426e-07], [95630], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.142089005886854e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929249329, 0.45161, [1.139e-07], [1.1449e-07], [1.1409e-07], [1.1431e-07], [94837], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929243316, 0.062548], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929243378, 0.062248], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929243441, 0.062201], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0032432865009468514], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929249555, 0.46953, [0.0032245], [0.003261], [0.0032269], [0.0032553], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.002120987500529736], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929249791, 0.44438, [0.0021122], [0.002129], [0.0021167], [0.0021242], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006613528748857789], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929250017, 0.4392, [0.00065834], [0.00066442], [0.0006593], [0.00066291], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005475986843904186], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929250239, 0.4425, [0.00054456], [0.00054976], [0.00054561], [0.00054816], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8080769637185125e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929250458, 0.44929, [2.7767e-05], [2.8495e-05], [2.7784e-05], [2.8423e-05], [382], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001876626402168257], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929250683, 0.44812, [0.00018594], [0.00018832], [0.0001873], [0.00018805], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2187584314895535e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929250907, 0.44582, [4.1989e-05], [4.2417e-05], [4.2047e-05], [4.23e-05], [249], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033042943593294873], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929251128, 0.4364, [0.00032916], [0.0003317], [0.0003298], [0.00033075], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003925833270141783], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929251345, 0.43535, [0.00039183], [0.00039369], [0.00039218], [0.00039299], [26], [10]], "benchmarks.TextSuite.time_render": [[4.705824050982473e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929251561, 0.44794, [4.6792e-06], [4.7374e-06], [4.6849e-06], [4.7321e-06], [2333], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.53061523002907e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929251790, 0.45067, [8.4659e-05], [8.6293e-05], [8.4934e-05], [8.5773e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.392226213414499e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929252016, 0.44364, [3.3851e-05], [3.4116e-05], [3.3892e-05], [3.3969e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002802877299128906], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929252237, 0.43867, [0.00027878], [0.00028245], [0.0002793], [0.00028114], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011491758891174363], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929252456, 0.44246, [0.0011417], [0.0011581], [0.0011438], [0.0011544], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015291071426223166], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929252676, 0.44488, [0.0015262], [0.0015395], [0.0015274], [0.0015302], [7], [10]]}, "durations": {"<build>": 1.975649118423462}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/2ea7e586-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "2ea7e586792a95e33cddc74f9e89e62bcd8d7f2b", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1626114020000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7228579192413226e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889047880, 0.45971, [1.7034e-07], [1.7559e-07], [1.705e-07], [1.7451e-07], [64141], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7093868421110106e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889048110, 0.45919, [1.6968e-07], [1.7653e-07], [1.7032e-07], [1.7263e-07], [64348], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7108532278381504e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889048341, 0.46227, [1.6858e-07], [1.7621e-07], [1.7062e-07], [1.731e-07], [64386], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7062526622328749e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889048571, 0.46126, [1.6984e-07], [1.7307e-07], [1.7028e-07], [1.7175e-07], [64506], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7086870827090527e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889048800, 0.45781, [1.6957e-07], [1.7935e-07], [1.6997e-07], [1.716e-07], [63481], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.707433072930981e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889049029, 0.44901, [1.6837e-07], [1.7167e-07], [1.7052e-07], [1.7102e-07], [62439], [10]], "benchmarks.PrettySuite.time_pretty": [[0.00103140416322276], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889049252, 0.43737, [0.0010285], [0.0010388], [0.0010303], [0.0010364], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014275130088208243], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889049474, 0.45746, [0.0014179], [0.0014388], [0.001423], [0.0014297], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013014661381021142], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889049701, 0.43912, [0.0012968], [0.0013091], [0.0012987], [0.0013073], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1440069953556868e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889049924, 0.45277, [1.1408e-07], [1.1735e-07], [1.1418e-07], [1.1493e-07], [96388], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1458780042575723e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889050155, 0.45027, [1.1398e-07], [1.1867e-07], [1.1433e-07], [1.1508e-07], [95575], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1482393351046018e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889050376, 0.45943, [1.1433e-07], [1.1815e-07], [1.1468e-07], [1.1725e-07], [95856], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889044332, 0.064904], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889044397, 0.06297], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889044460, 0.062904], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021561667323112487], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889050607, 0.44975, [0.0021407], [0.0022015], [0.0021469], [0.0021718], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012874817621195689], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889050834, 0.4364, [0.0012825], [0.0012931], [0.0012839], [0.0012922], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037670833558809975], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889051056, 0.43811, [0.00037013], [0.00038324], [0.00037139], [0.00038074], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034309513478850324], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889051272, 0.44237, [0.00033826], [0.00034868], [0.0003398], [0.00034678], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5317721195361933e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889051490, 0.45618, [2.5209e-05], [2.5839e-05], [2.5285e-05], [2.5363e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018502472331589562], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889051717, 0.45674, [0.00018337], [0.00018879], [0.00018464], [0.00018587], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.441903835934837e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889051945, 0.4475, [4.3484e-05], [4.4811e-05], [4.4256e-05], [4.445e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032691801372434825], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889052174, 0.43841, [0.00032528], [0.00032973], [0.00032553], [0.00032838], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035622701899887157], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889052393, 0.4423, [0.00035485], [0.00036875], [0.00035586], [0.00035733], [29], [10]], "benchmarks.TextSuite.time_render": [[4.670961484730473e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889052613, 0.45127, [4.6431e-06], [4.8104e-06], [4.651e-06], [4.6989e-06], [2338], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.520556548319291e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889052841, 0.45505, [8.5021e-05], [8.8408e-05], [8.5081e-05], [8.6538e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.536939888154385e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889053070, 0.45611, [3.5092e-05], [3.5439e-05], [3.5316e-05], [3.5396e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002776732374178736], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889053297, 0.44998, [0.00027571], [0.00027965], [0.00027589], [0.00027891], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011058937525376678], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889053521, 0.44234, [0.0011012], [0.0011146], [0.0011026], [0.0011076], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013733931991737336], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889053742, 0.44436, [0.0013701], [0.0013778], [0.0013719], [0.0013769], [8], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.02736345841549337], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892940193, 0.62402, [0.027197], [0.027446], [0.02724], [0.027391], [1], [10]]}, "durations": {"<build>": 1.8237800598144531}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/2ea7e586-virtualenv-py3.10.json
================================================
{"commit_hash": "2ea7e586792a95e33cddc74f9e89e62bcd8d7f2b", "env_name": "virtualenv-py3.10", "date": 1626114020000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.6992604301908157e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928404724, 0.46338, [1.6876e-07], [1.7045e-07], [1.6968e-07], [1.7023e-07], [64666], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7087160984114965e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928404956, 0.46229, [1.6992e-07], [1.7164e-07], [1.7049e-07], [1.7142e-07], [64012], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7058781411970064e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928405187, 0.46302, [1.6989e-07], [1.7259e-07], [1.702e-07], [1.7091e-07], [64352], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7051793879919311e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928405418, 0.4585, [1.6946e-07], [1.7234e-07], [1.7009e-07], [1.7145e-07], [63967], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7046113228587482e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928405648, 0.45762, [1.6938e-07], [1.7079e-07], [1.7004e-07], [1.7059e-07], [64694], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.698433621679389e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928405879, 0.43528, [1.6925e-07], [1.7095e-07], [1.6977e-07], [1.7024e-07], [59063], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010297646003891714], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928406097, 0.44974, [0.0010247], [0.0010369], [0.001028], [0.0010308], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014206379983079387], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928406321, 0.45964, [0.001417], [0.0014292], [0.0014183], [0.0014251], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001297976499699871], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928406549, 0.44173, [0.0012917], [0.0013113], [0.0012955], [0.0013002], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1393691468643312e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928406774, 0.46327, [1.1339e-07], [1.1443e-07], [1.1368e-07], [1.1434e-07], [96639], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1676212033822138e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928407007, 0.44502, [1.1631e-07], [1.1874e-07], [1.1645e-07], [1.1738e-07], [96202], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.144058273758263e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928407231, 0.46264, [1.1393e-07], [1.1482e-07], [1.1411e-07], [1.1469e-07], [96185], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928401167, 0.064996], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928401233, 0.064551], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928401297, 0.064766], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021443749981699513], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928407463, 0.44019, [0.0021257], [0.0021643], [0.0021374], [0.0021594], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012842708129028324], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928407682, 0.44883, [0.0012784], [0.0012934], [0.0012821], [0.0012886], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003746949467832954], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928407905, 0.44912, [0.00037092], [0.00037832], [0.00037127], [0.00037777], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003414603997953236], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928408130, 0.44134, [0.00033918], [0.00035221], [0.0003399], [0.00034375], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5290634440816062e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928408349, 0.45374, [2.525e-05], [2.5412e-05], [2.526e-05], [2.5297e-05], [424], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001846790253046616], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928408575, 0.45826, [0.00018393], [0.00018523], [0.00018454], [0.00018474], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.405238912596706e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928408804, 0.44005, [4.3606e-05], [4.4535e-05], [4.3676e-05], [4.4411e-05], [239], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032573862082437813], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928409026, 0.45582, [0.00032479], [0.00032729], [0.00032515], [0.0003268], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003578182588861292], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928409253, 0.44518, [0.00035696], [0.0003585], [0.00035747], [0.00035794], [29], [10]], "benchmarks.TextSuite.time_render": [[4.691665023142689e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928409474, 0.45398, [4.6564e-06], [4.9104e-06], [4.6601e-06], [4.7267e-06], [2336], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.454524993339874e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928409707, 0.45583, [8.4227e-05], [8.5332e-05], [8.4292e-05], [8.4842e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.572889446249147e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928409937, 0.44255, [3.5001e-05], [3.6547e-05], [3.5043e-05], [3.6402e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027405482902203833], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928410161, 0.44388, [0.00027204], [0.00027484], [0.00027325], [0.00027431], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010965833513182587], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928410382, 0.44508, [0.0010955], [0.001102], [0.0010957], [0.0010987], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013657838117069332], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928410603, 0.45444, [0.0013598], [0.0013712], [0.0013613], [0.0013689], [8], [10]]}, "durations": {"<build>": 1.9997620582580566}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/30498f59-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "30498f598ea100db51d19e4f496ee57870e1834c", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1655303356000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.706743659394409e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825578318, 0.46715, [1.7031e-07], [1.7116e-07], [1.7043e-07], [1.7092e-07], [64319], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.712501278682931e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825578551, 0.46757, [1.705e-07], [1.7457e-07], [1.7107e-07], [1.7149e-07], [64021], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.714238300921853e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825578783, 0.46086, [1.7034e-07], [1.7295e-07], [1.7088e-07], [1.7225e-07], [64219], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7229576070853583e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825579016, 0.45823, [1.7111e-07], [1.743e-07], [1.7217e-07], [1.7255e-07], [63661], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7174256209365265e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825579250, 0.46366, [1.7041e-07], [1.7224e-07], [1.7085e-07], [1.7204e-07], [63864], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.718003989394779e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825579482, 0.46089, [1.6973e-07], [1.7212e-07], [1.7104e-07], [1.7203e-07], [64025], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010617687017656862], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825579714, 0.45203, [0.0010563], [0.0010654], [0.0010607], [0.0010644], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001562226131292326], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825579935, 0.46622, [0.0015234], [0.0016865], [0.0015248], [0.0016305], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0012128125074216062], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825580174, 0.45434, [0.001195], [0.0012612], [0.001203], [0.0012217], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1566974548486212e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825580405, 0.43897, [1.1531e-07], [1.1756e-07], [1.1553e-07], [1.1576e-07], [87511], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1766924195564136e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825580624, 0.45935, [1.1452e-07], [1.2566e-07], [1.1499e-07], [1.2081e-07], [95724], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1559692129355214e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825580857, 0.46741, [1.1434e-07], [1.169e-07], [1.147e-07], [1.1625e-07], [95011], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007635239453520626], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825581089, 0.51914, [0.0075849], [0.0079465], [0.0076071], [0.007703], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007749218784738332], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825581351, 0.52551, [0.0076539], [0.0081146], [0.0076859], [0.0077861], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007625021040439606], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825581615, 0.51824, [0.0075764], [0.0078401], [0.0075962], [0.0076499], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017660625162534416], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825581873, 0.4508, [0.0017428], [0.0017763], [0.001751], [0.0017672], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001086452102754265], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825582102, 0.44638, [0.0010823], [0.0010888], [0.0010846], [0.0010874], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003851134269670756], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825582325, 0.45468, [0.00038427], [0.00038748], [0.00038488], [0.00038538], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0009103350845786433], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825582549, 0.46394, [0.00090768], [0.00092351], [0.00090947], [0.00091186], [12], [10]], "benchmarks.TextSuite.time_divide": [[2.5889562592969683e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825582784, 0.46566, [2.5651e-05], [2.776e-05], [2.573e-05], [2.6759e-05], [422], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00019572424406016415], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825583018, 0.46671, [0.00019427], [0.00019725], [0.0001953], [0.00019641], [55], [10]], "benchmarks.TextSuite.time_fit": [[4.4794445663380127e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825583255, 0.4528, [4.4561e-05], [4.4945e-05], [4.4742e-05], [4.4867e-05], [240], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00034242151693130536], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825583485, 0.45019, [0.00034067], [0.00034656], [0.00034187], [0.00034451], [30], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0004753229070708833], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825583709, 0.45607, [0.00047381], [0.00048049], [0.00047461], [0.00047797], [22], [10]], "benchmarks.TextSuite.time_render": [[4.699200486941059e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825583935, 0.45901, [4.6781e-06], [4.7246e-06], [4.684e-06], [4.704e-06], [2329], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.975491552363808e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825584169, 0.46894, [8.857e-05], [9.0931e-05], [8.9345e-05], [8.9831e-05], [123], [10]], "benchmarks.TextSuite.time_split": [[3.6066121681303275e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825584405, 0.45752, [3.5572e-05], [3.6885e-05], [3.5685e-05], [3.6378e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028587105319004605], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825584639, 0.4537, [0.00028255], [0.00029111], [0.00028375], [0.00028702], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001119529188144952], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825584865, 0.47061, [0.0011038], [0.0011285], [0.0011085], [0.0011241], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013887473614886403], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825585092, 0.45498, [0.0013811], [0.0013922], [0.0013841], [0.0013914], [8], [10]]}, "durations": {"<build>": 1.846522331237793}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/3473658d-virtualenv-py3.10.json
================================================
{"commit_hash": "3473658d13a4e88e1e58a7be116ae6975ca13cf6", "env_name": "virtualenv-py3.10", "date": 1611416490000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7036045765212364e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929289967, 0.45927, [1.6981e-07], [1.7067e-07], [1.6996e-07], [1.7052e-07], [64314], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7132086517078875e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929290195, 0.45475, [1.694e-07], [1.7853e-07], [1.7048e-07], [1.7257e-07], [64270], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.704700660188381e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929290421, 0.45937, [1.6939e-07], [1.7227e-07], [1.6998e-07], [1.7167e-07], [64575], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7441856731663292e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929290654, 0.46206, [1.7006e-07], [1.8044e-07], [1.7057e-07], [1.7638e-07], [64538], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7049117885360997e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929290887, 0.461, [1.6932e-07], [1.7202e-07], [1.6979e-07], [1.7077e-07], [64676], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.705279587625648e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929291119, 0.47769, [1.6914e-07], [1.7182e-07], [1.6977e-07], [1.7125e-07], [64238], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010213937508524395], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929291366, 0.44248, [0.0010185], [0.0010252], [0.0010205], [0.0010227], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014214713119145017], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929291587, 0.45646, [0.0014163], [0.0014333], [0.0014182], [0.0014271], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014177551875036443], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929291812, 0.45349, [0.0014112], [0.0014295], [0.0014152], [0.001424], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1434615778797786e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929292036, 0.45404, [1.1381e-07], [1.1566e-07], [1.1409e-07], [1.1477e-07], [95351], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1487062976460817e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929292263, 0.45359, [1.146e-07], [1.1632e-07], [1.147e-07], [1.1534e-07], [94017], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1449183907183087e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929292488, 0.45677, [1.1407e-07], [1.1555e-07], [1.1433e-07], [1.15e-07], [95519], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929286392, 0.062805], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929286455, 0.06227], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929286517, 0.062011], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0032570260009379126], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929292717, 0.47559, [0.0032274], [0.0032784], [0.0032405], [0.0032633], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0021434916998259723], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929292954, 0.45432, [0.0021262], [0.0023682], [0.0021294], [0.0022289], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006590039056391106], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929293181, 0.44004, [0.00065646], [0.00066109], [0.00065732], [0.00065982], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005492642361021257], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929293403, 0.44628, [0.0005456], [0.00056301], [0.00054725], [0.00055315], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.539885831250868e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929293622, 0.45436, [2.5248e-05], [2.5553e-05], [2.5329e-05], [2.5453e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001851214138100502], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929293848, 0.4509, [0.00018372], [0.00018848], [0.00018458], [0.00018637], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.233050002949312e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929294072, 0.44953, [4.2134e-05], [4.2492e-05], [4.2184e-05], [4.2471e-05], [250], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003210353483375388], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929294295, 0.45183, [0.00031769], [0.00032317], [0.00031959], [0.00032192], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00038107714768826826], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929294519, 0.44226, [0.00038033], [0.00038412], [0.00038075], [0.00038138], [27], [10]], "benchmarks.TextSuite.time_render": [[4.6828025228597816e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929294739, 0.43567, [4.6481e-06], [4.8526e-06], [4.6588e-06], [4.7005e-06], [2142], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.517294849124959e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929294953, 0.45018, [8.4532e-05], [8.5655e-05], [8.4952e-05], [8.5303e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.403544921191439e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929295178, 0.45229, [3.4017e-05], [3.4885e-05], [3.402e-05], [3.4267e-05], [315], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002694156021625998], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929295402, 0.44696, [0.00026812], [0.00027325], [0.00026887], [0.00027074], [39], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011032729016733356], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929295624, 0.44329, [0.0010982], [0.0011724], [0.0010991], [0.0011151], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014802440003092799], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929295843, 0.4359, [0.0014784], [0.0015016], [0.0014799], [0.0014855], [7], [10]]}, "durations": {"<build>": 1.9989511966705322}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/36efcb5a-virtualenv-py3.10.json
================================================
{"commit_hash": "36efcb5abe9ea8b6a7707243bec89a81e063c01a", "env_name": "virtualenv-py3.10", "date": 1603472109000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.6962975981415165e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928989577, 0.45595, [1.683e-07], [1.7053e-07], [1.6932e-07], [1.7006e-07], [64762], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7044543418703197e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928989806, 0.45502, [1.6871e-07], [1.7073e-07], [1.702e-07], [1.7063e-07], [64610], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.6992367789789537e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928990034, 0.4542, [1.6896e-07], [1.7084e-07], [1.6967e-07], [1.7046e-07], [64457], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.703134810532796e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928990261, 0.44494, [1.6965e-07], [1.7082e-07], [1.701e-07], [1.7048e-07], [64594], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7000458742323704e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928990489, 0.45213, [1.6894e-07], [1.7274e-07], [1.6975e-07], [1.7105e-07], [63544], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6998829406495502e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928990715, 0.456, [1.6921e-07], [1.7311e-07], [1.6971e-07], [1.7034e-07], [64583], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010213146000751295], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928990943, 0.44082, [0.0010194], [0.0010242], [0.0010199], [0.0010232], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014337708562379703], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928991163, 0.43396, [0.0014306], [0.0014365], [0.0014318], [0.0014356], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014147630008665146], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928991379, 0.4523, [0.0014092], [0.0014204], [0.0014107], [0.0014179], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1416031242196305e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928991604, 0.42823, [1.1366e-07], [1.1517e-07], [1.1406e-07], [1.1446e-07], [88131], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1408945358695679e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928991820, 0.45585, [1.1346e-07], [1.1433e-07], [1.1384e-07], [1.1413e-07], [96430], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1410896113544889e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928992049, 0.45439, [1.1381e-07], [1.1433e-07], [1.1398e-07], [1.1416e-07], [96048], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928986076, 0.060543], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928986137, 0.060764], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928986198, 0.060546], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0027355208767403383], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928992278, 0.43969, [0.0027281], [0.0027409], [0.002734], [0.002737], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0018644479156743423], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928992496, 0.44894, [0.0018539], [0.0018746], [0.0018638], [0.0018648], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006582486876141047], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928992717, 0.43597, [0.00065765], [0.00066143], [0.00065795], [0.00065902], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.000555089946781089], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928992939, 0.43491, [0.00054518], [0.00055824], [0.00055459], [0.00055611], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8029603938768176e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928993160, 0.44717, [2.7984e-05], [2.8185e-05], [2.8022e-05], [2.8094e-05], [380], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001871487071059227], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928993384, 0.4504, [0.00018654], [0.00018824], [0.0001868], [0.00018756], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.228466597851366e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928993610, 0.4448, [4.2137e-05], [4.2368e-05], [4.2257e-05], [4.233e-05], [250], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003317379192712026], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928993832, 0.43861, [0.00032956], [0.00033329], [0.00033079], [0.00033273], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003924358847703283], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928994053, 0.43513, [0.00039219], [0.00039296], [0.00039235], [0.00039269], [26], [10]], "benchmarks.TextSuite.time_render": [[4.697171516259794e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928994270, 0.45696, [4.6841e-06], [4.707e-06], [4.689e-06], [4.7021e-06], [2335], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.521435552211187e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928994497, 0.45142, [8.4929e-05], [8.5635e-05], [8.5156e-05], [8.554e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.380010609546455e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928994725, 0.4421, [3.3779e-05], [3.3895e-05], [3.3798e-05], [3.3835e-05], [311], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002792432433862642], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928994946, 0.43592, [0.00027793], [0.00028037], [0.00027895], [0.0002798], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011467361683672708], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928995164, 0.43365, [0.0011448], [0.0011551], [0.0011457], [0.0011481], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015301428585579352], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928995383, 0.44726, [0.0015262], [0.001542], [0.0015292], [0.0015307], [7], [10]]}, "durations": {"<build>": 2.06260085105896}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/3827b4ae-virtualenv-py3.10.json
================================================
{"commit_hash": "3827b4ae01aca1b4cb308f4c838da1b91384ad7d", "env_name": "virtualenv-py3.10", "date": 1638453157000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7009055537469912e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928260721, 0.46627, [1.6931e-07], [1.7097e-07], [1.6999e-07], [1.7032e-07], [64364], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7015987727142876e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928260953, 0.46456, [1.6921e-07], [1.7077e-07], [1.6993e-07], [1.7041e-07], [64512], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7029074018500487e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928261185, 0.44741, [1.6919e-07], [1.709e-07], [1.6997e-07], [1.7044e-07], [60573], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.6975108501065804e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928261407, 0.44759, [1.6884e-07], [1.6998e-07], [1.6914e-07], [1.6981e-07], [60830], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7048188633534393e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928261630, 0.46122, [1.6999e-07], [1.7111e-07], [1.7012e-07], [1.7057e-07], [63654], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.697135537800892e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928261861, 0.46437, [1.6886e-07], [1.7133e-07], [1.6954e-07], [1.7008e-07], [64410], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011078062510932797], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928262094, 0.454, [0.0011054], [0.0011101], [0.0011069], [0.0011084], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001514940499743846], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928262320, 0.45246, [0.0015085], [0.0015254], [0.0015129], [0.0015177], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013975702513562283], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928262549, 0.45354, [0.0013929], [0.0014026], [0.0013946], [0.0013995], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1443176231251601e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928262776, 0.46351, [1.1425e-07], [1.1519e-07], [1.1431e-07], [1.1465e-07], [96076], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.148095777968294e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928263010, 0.46574, [1.1405e-07], [1.1561e-07], [1.1431e-07], [1.1533e-07], [96181], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1418964091759141e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928263244, 0.46235, [1.1385e-07], [1.1454e-07], [1.1416e-07], [1.1422e-07], [96100], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928257134, 0.066227], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928257200, 0.065569], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928257266, 0.066056], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0023518957983469594], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928263476, 0.45906, [0.0023316], [0.0023603], [0.002344], [0.0023558], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001403494748956291], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928263709, 0.45174, [0.0013933], [0.0014152], [0.0014012], [0.0014103], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037406101806222323], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928263937, 0.45149, [0.00037315], [0.00037555], [0.00037337], [0.00037455], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00033967203231558446], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928264161, 0.45332, [0.00033776], [0.00034824], [0.00033877], [0.00034596], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5327518605356386e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928264386, 0.46078, [2.5218e-05], [2.5414e-05], [2.529e-05], [2.5363e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018412104315036136], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928264616, 0.45467, [0.00018337], [0.00018458], [0.00018398], [0.00018418], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.344766258453284e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928264843, 0.44746, [4.3389e-05], [4.3622e-05], [4.3412e-05], [4.3485e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032461806073446166], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928265070, 0.45723, [0.00032394], [0.00032514], [0.00032438], [0.00032509], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035664798282407996], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928265298, 0.44681, [0.00035609], [0.00035745], [0.00035645], [0.0003572], [29], [10]], "benchmarks.TextSuite.time_render": [[4.674904899767451e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928265520, 0.45193, [4.6485e-06], [4.6907e-06], [4.665e-06], [4.6841e-06], [2324], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.502903148737244e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928265750, 0.45667, [8.4472e-05], [8.6022e-05], [8.483e-05], [8.5245e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.508509089678901e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928265979, 0.44927, [3.4971e-05], [3.5129e-05], [3.5047e-05], [3.5094e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002740542764322048], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928266208, 0.44763, [0.00027339], [0.00027509], [0.00027395], [0.00027425], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013660859367519151], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928266431, 0.45753, [0.001359], [0.0013704], [0.0013611], [0.0013692], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014471309301110785], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928266664, 0.4465, [0.0014435], [0.0014547], [0.0014448], [0.0014502], [7], [10]]}, "durations": {"<build>": 1.9763908386230469}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/3be88c08-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "3be88c08964c97b3ae64786e38a56567a97c439a", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644493867000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7127571016557012e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826350857, 0.46394, [1.698e-07], [1.7446e-07], [1.7049e-07], [1.7286e-07], [64330], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7128747564306794e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826351092, 0.4622, [1.7069e-07], [1.7474e-07], [1.7097e-07], [1.7168e-07], [64297], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7364112028203036e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826351325, 0.46814, [1.7047e-07], [1.775e-07], [1.7136e-07], [1.7711e-07], [63174], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7137113026002048e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826351555, 0.44814, [1.6957e-07], [1.7408e-07], [1.7083e-07], [1.7215e-07], [58548], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7244072042262777e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826351778, 0.47058, [1.7086e-07], [1.7516e-07], [1.721e-07], [1.7469e-07], [63589], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7264473770119774e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826352017, 0.45666, [1.7096e-07], [1.7403e-07], [1.7197e-07], [1.7351e-07], [63245], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011245625533370508], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826352242, 0.45001, [0.0011164], [0.0011524], [0.0011196], [0.0011306], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015637261260833058], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826352466, 0.45256, [0.0015591], [0.0015772], [0.0015615], [0.0015674], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014193046954460442], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826352690, 0.45981, [0.0014102], [0.0014269], [0.0014162], [0.0014209], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1523190854074474e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826352920, 0.46833, [1.1461e-07], [1.1591e-07], [1.1467e-07], [1.1552e-07], [95048], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1572333481276081e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826353155, 0.46323, [1.1454e-07], [1.1624e-07], [1.1479e-07], [1.1603e-07], [93384], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1559896143554302e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826353388, 0.44916, [1.15e-07], [1.1913e-07], [1.1535e-07], [1.1575e-07], [88605], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.00846153125166893], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826353615, 0.51966, [0.0083724], [0.0089221], [0.0084152], [0.0084825], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008513541717547923], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826353877, 0.52271, [0.0084452], [0.0087693], [0.008493], [0.0086153], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.0084637914551422], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826354141, 0.52154, [0.0084119], [0.0088905], [0.0084568], [0.0085273], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019076492559785645], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826354405, 0.45099, [0.0018738], [0.0019388], [0.0018789], [0.0019292], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011663565075852806], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826354632, 0.4514, [0.0011527], [0.0012043], [0.0011559], [0.0011701], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003774992697539606], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826354860, 0.46275, [0.00037114], [0.00040154], [0.00037178], [0.00039425], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003482486160161594], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826355096, 0.45169, [0.00034263], [0.00035917], [0.00034618], [0.00034885], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5466345909234165e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826355322, 0.45293, [2.5207e-05], [2.6427e-05], [2.5319e-05], [2.6087e-05], [403], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018544526281371964], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826355543, 0.46733, [0.00018486], [0.00019024], [0.00018511], [0.00018662], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.433511190373845e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826355780, 0.46016, [4.3733e-05], [4.6139e-05], [4.4118e-05], [4.4767e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003299361447833719], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826356014, 0.45204, [0.00032605], [0.00034062], [0.00032707], [0.00033065], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035815156899906436], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826356239, 0.45152, [0.00035523], [0.00036874], [0.0003557], [0.00036001], [29], [10]], "benchmarks.TextSuite.time_render": [[4.675735370206278e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826356463, 0.45719, [4.6616e-06], [4.701e-06], [4.6727e-06], [4.6908e-06], [2341], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.545716386288404e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826356696, 0.45462, [8.5088e-05], [8.6096e-05], [8.5426e-05], [8.5585e-05], [125], [10]], "benchmarks.TextSuite.time_split": [[3.557472611914893e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826356925, 0.45575, [3.5346e-05], [3.6636e-05], [3.543e-05], [3.6393e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028078659513109435], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826357155, 0.45515, [0.00027638], [0.00028567], [0.00027931], [0.00028114], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013713593798456714], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826357378, 0.46303, [0.001362], [0.0013799], [0.0013663], [0.0013763], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014577142761221953], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826357610, 0.45068, [0.0014519], [0.001487], [0.0014568], [0.0014634], [7], [10]]}, "durations": {"<build>": 1.8523237705230713}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/3db6396a-virtualenv-py3.10.json
================================================
{"commit_hash": "3db6396a0c6838fd8fa642ccab3a095838d88329", "env_name": "virtualenv-py3.10", "date": 1638208615000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7042319254797695e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928246228, 0.4658, [1.697e-07], [1.7155e-07], [1.702e-07], [1.7069e-07], [64460], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7014701335412993e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928246460, 0.43742, [1.69e-07], [1.7085e-07], [1.6994e-07], [1.7066e-07], [58998], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7074798454802254e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928246677, 0.46135, [1.7041e-07], [1.7223e-07], [1.7049e-07], [1.7165e-07], [63266], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.702288241755897e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928246907, 0.46182, [1.6915e-07], [1.7116e-07], [1.7e-07], [1.7034e-07], [63433], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7044823244778374e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928247136, 0.46566, [1.7004e-07], [1.7093e-07], [1.7026e-07], [1.7062e-07], [64529], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6976035790289064e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928247368, 0.46336, [1.6818e-07], [1.7054e-07], [1.6949e-07], [1.7021e-07], [64540], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011084083511377686], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928247600, 0.45566, [0.0011028], [0.0011123], [0.0011053], [0.0011107], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015121815023511381], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928247825, 0.45172, [0.0015065], [0.0015199], [0.0015114], [0.0015162], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013970182499178918], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928248053, 0.45388, [0.0013931], [0.0014037], [0.0013948], [0.0013999], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1427530083689559e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928248279, 0.46422, [1.1388e-07], [1.1469e-07], [1.1424e-07], [1.144e-07], [96380], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1394543975825273e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928248512, 0.46404, [1.133e-07], [1.1469e-07], [1.1342e-07], [1.143e-07], [96444], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.143002247191072e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928248744, 0.46432, [1.1395e-07], [1.1467e-07], [1.1421e-07], [1.1445e-07], [96143], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928242637, 0.065911], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928242703, 0.065746], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928242769, 0.065471], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0023442875011824072], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928248976, 0.4591, [0.0023329], [0.0023571], [0.0023388], [0.002348], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001400791623382247], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928249210, 0.44971, [0.0013923], [0.0014051], [0.001396], [0.001402], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003787046069711713], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928249436, 0.45477, [0.00037146], [0.00038647], [0.00037177], [0.00038591], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003395120969094757], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928249665, 0.45332, [0.00033818], [0.00034835], [0.00033874], [0.00034143], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.533570700189705e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928249890, 0.46095, [2.5172e-05], [2.5579e-05], [2.5245e-05], [2.5388e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018461889678668552], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928250121, 0.45578, [0.00018394], [0.00018599], [0.0001841], [0.00018546], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.346377551270535e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928250349, 0.44757, [4.3305e-05], [4.3682e-05], [4.3339e-05], [4.3601e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003238428180338815], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928250577, 0.4559, [0.00032287], [0.0003243], [0.00032354], [0.00032395], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003568433799202843], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928250805, 0.44693, [0.0003552], [0.00035977], [0.00035609], [0.0003571], [29], [10]], "benchmarks.TextSuite.time_render": [[4.675465872560535e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928251027, 0.45465, [4.671e-06], [4.6805e-06], [4.6744e-06], [4.6791e-06], [2344], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.522819132394943e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928251258, 0.45786, [8.459e-05], [8.5948e-05], [8.494e-05], [8.5644e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.519280884206429e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928251489, 0.45879, [3.5054e-05], [3.5315e-05], [3.5063e-05], [3.5278e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002742225789054493], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928251717, 0.44819, [0.00027359], [0.00027552], [0.00027395], [0.00027459], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001358674438961316], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928251940, 0.4552, [0.0013548], [0.0013633], [0.0013555], [0.0013603], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014508422152305555], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928252171, 0.44538, [0.0014448], [0.0014547], [0.0014475], [0.0014523], [7], [10]]}, "durations": {"<build>": 1.980443000793457}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/3f7d3e4e-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "3f7d3e4ef372f4ce954c240df723d8cd646b1534", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1643381156000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7019410679508834e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889121064, 0.46616, [1.6904e-07], [1.7184e-07], [1.6979e-07], [1.709e-07], [64016], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.707222553219064e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889121297, 0.46318, [1.6938e-07], [1.7211e-07], [1.7038e-07], [1.7111e-07], [64561], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.700408968177386e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889121529, 0.45472, [1.6873e-07], [1.7136e-07], [1.6969e-07], [1.706e-07], [64527], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7167728395965302e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889121760, 0.45432, [1.7108e-07], [1.8285e-07], [1.7129e-07], [1.7459e-07], [63723], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7020742582072851e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889121992, 0.46406, [1.6847e-07], [1.7555e-07], [1.6962e-07], [1.7337e-07], [64440], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7031070659893987e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889122223, 0.44108, [1.695e-07], [1.7098e-07], [1.6988e-07], [1.7072e-07], [59189], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011111396015621722], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889122443, 0.45586, [0.0011081], [0.001119], [0.0011095], [0.0011124], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001560294717949416], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889122668, 0.44894, [0.001555], [0.0015682], [0.0015585], [0.001564], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014116510574240237], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889122890, 0.45385, [0.0014038], [0.001454], [0.0014094], [0.0014229], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1469495497046902e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889123117, 0.44517, [1.1363e-07], [1.1717e-07], [1.1446e-07], [1.1622e-07], [87441], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1479170921686124e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889123345, 0.43858, [1.1364e-07], [1.1515e-07], [1.1384e-07], [1.1512e-07], [88580], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1439697689945682e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889123564, 0.45353, [1.1425e-07], [1.1519e-07], [1.1434e-07], [1.1445e-07], [96254], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008450124994851649], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889123796, 0.51507, [0.0083472], [0.0085561], [0.0084034], [0.0084963], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008432823000475764], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889124055, 0.51511, [0.0083951], [0.008479], [0.0084138], [0.0084512], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008407937770243734], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889124314, 0.5139, [0.0083461], [0.0084501], [0.0083955], [0.0084387], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0023995916824787857], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889124571, 0.4666, [0.002386], [0.0024149], [0.0023974], [0.0024054], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014325655065476894], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889124809, 0.44464, [0.0014177], [0.0014508], [0.0014209], [0.0014386], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003824851217879248], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889125030, 0.4582, [0.00037969], [0.00039076], [0.00038154], [0.00038379], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00033843346435817015], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889125258, 0.45108, [0.0003367], [0.00034882], [0.00033773], [0.00034675], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.542448459119299e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889125483, 0.45297, [2.5263e-05], [2.5571e-05], [2.536e-05], [2.5494e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001846443970109625], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889125714, 0.45849, [0.00018419], [0.00018522], [0.00018439], [0.00018503], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3603067278740856e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889125943, 0.4501, [4.3497e-05], [4.3719e-05], [4.3577e-05], [4.3632e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032637030592248324], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889126172, 0.44135, [0.00032373], [0.00032973], [0.00032397], [0.00032928], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003558103444761243], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889126392, 0.44731, [0.00035423], [0.00036596], [0.0003552], [0.00035803], [29], [10]], "benchmarks.TextSuite.time_render": [[4.677065471673211e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889126613, 0.45532, [4.6609e-06], [4.7731e-06], [4.6694e-06], [4.689e-06], [2338], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.546972640033346e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889126844, 0.46025, [8.4697e-05], [8.7886e-05], [8.5286e-05], [8.5895e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5167339824525863e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889127077, 0.45303, [3.5094e-05], [3.5954e-05], [3.5126e-05], [3.5268e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002777264177750208], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889127307, 0.45027, [0.0002749], [0.0002828], [0.00027674], [0.00027848], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013692552456632257], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889127532, 0.45795, [0.0013577], [0.0014181], [0.0013614], [0.0013819], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001453892793506384], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889127763, 0.44595, [0.0014495], [0.0014919], [0.0014524], [0.001464], [7], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.029212875058874488], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892952623, 0.66541, [0.028964], [0.030039], [0.02902], [0.02959], [1], [10]]}, "durations": {"<build>": 1.8412790298461914}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/3f7d3e4e-virtualenv-py3.10.json
================================================
{"commit_hash": "3f7d3e4ef372f4ce954c240df723d8cd646b1534", "env_name": "virtualenv-py3.10", "date": 1643381156000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.698740701488326e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928479137, 0.46365, [1.6868e-07], [1.7249e-07], [1.6944e-07], [1.7033e-07], [64798], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7091042297249934e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928479371, 0.44263, [1.6925e-07], [1.7313e-07], [1.6966e-07], [1.7277e-07], [59234], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7032423421299828e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928479591, 0.45682, [1.6978e-07], [1.7143e-07], [1.702e-07], [1.7077e-07], [64108], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.699293186887289e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928479825, 0.46872, [1.6894e-07], [1.729e-07], [1.6974e-07], [1.7026e-07], [64416], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7076552251688393e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928480059, 0.46858, [1.6962e-07], [1.7356e-07], [1.7028e-07], [1.7151e-07], [64454], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7014452735923893e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928480294, 0.46769, [1.6925e-07], [1.7234e-07], [1.6959e-07], [1.7073e-07], [64659], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011121227224874827], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928480528, 0.44418, [0.0011083], [0.0011159], [0.0011109], [0.0011132], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015579582832287997], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928480748, 0.45126, [0.0015536], [0.00157], [0.0015555], [0.0015635], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014060754383535823], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928480971, 0.45525, [0.0014043], [0.0014135], [0.0014051], [0.0014085], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1416384913475412e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928481199, 0.46631, [1.1391e-07], [1.1446e-07], [1.1401e-07], [1.1439e-07], [96473], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1633424116643548e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928481434, 0.46869, [1.1426e-07], [1.1646e-07], [1.1601e-07], [1.1638e-07], [96212], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1687065132848253e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928481668, 0.44813, [1.1652e-07], [1.1841e-07], [1.166e-07], [1.1777e-07], [86464], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.00853916674532229], [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928481897, 0.52025, [0.0084749], [0.0085804], [0.0085069], [0.0085568], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008576114501920529], [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928482158, 0.52233, [0.0084985], [0.0087274], [0.008535], [0.008637], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.00853265624755295], [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928482419, 0.52075, [0.0084799], [0.0085638], [0.0085091], [0.0085449], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002399866800988093], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928482679, 0.47657, [0.0023894], [0.0024136], [0.0023967], [0.0024079], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014271547864024925], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928482918, 0.44586, [0.0014195], [0.0014339], [0.0014252], [0.0014326], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003826964457402937], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928483138, 0.44781, [0.00037813], [0.00038575], [0.00037852], [0.00038533], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034012633841484785], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928483365, 0.4559, [0.00033825], [0.00034851], [0.00033906], [0.00034087], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5252465200837346e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928483591, 0.46353, [2.516e-05], [2.5434e-05], [2.5187e-05], [2.5321e-05], [431], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001846652243141856], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928483823, 0.45764, [0.00018308], [0.00018504], [0.00018417], [0.00018476], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3604420725165344e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928484051, 0.45077, [4.3494e-05], [4.3719e-05], [4.354e-05], [4.3641e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032480492452371186], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928484281, 0.45976, [0.00032296], [0.00032667], [0.00032371], [0.00032532], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003566659484179048], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928484509, 0.44886, [0.00035422], [0.00035973], [0.00035461], [0.00035858], [29], [10]], "benchmarks.TextSuite.time_render": [[4.665873127859556e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928484732, 0.4559, [4.6501e-06], [4.6776e-06], [4.6626e-06], [4.6681e-06], [2337], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.52070313612785e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928484963, 0.46091, [8.4959e-05], [8.5743e-05], [8.517e-05], [8.5261e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5179808798239994e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928485196, 0.46071, [3.5112e-05], [3.5247e-05], [3.5143e-05], [3.5203e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002742344998599341], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928485426, 0.45897, [0.0002737], [0.00028051], [0.00027397], [0.00027841], [39], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013588984365924262], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928485655, 0.45859, [0.0013543], [0.001361], [0.0013577], [0.0013598], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014551279288882923], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928485887, 0.45059, [0.001445], [0.0014609], [0.0014462], [0.0014579], [7], [10]]}, "durations": {"<build>": 1.990717887878418}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/4020d5a9-virtualenv-py3.10.json
================================================
{"commit_hash": "4020d5a9fb77b6a1bbe4a4e763951dd9441860c8", "env_name": "virtualenv-py3.10", "date": 1593168036000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7315091327706894e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928569768, 0.43134, [1.7182e-07], [1.7361e-07], [1.7285e-07], [1.7324e-07], [64557], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7375567830436184e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928569984, 0.43364, [1.7163e-07], [1.8139e-07], [1.7322e-07], [1.7961e-07], [58556], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7200315802320185e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928570194, 0.44725, [1.6924e-07], [1.8107e-07], [1.701e-07], [1.7373e-07], [60636], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.703477310646659e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928570407, 0.44181, [1.691e-07], [1.712e-07], [1.6997e-07], [1.7065e-07], [64593], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7319662314839302e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928570631, 0.44303, [1.7057e-07], [1.7763e-07], [1.7262e-07], [1.7361e-07], [64705], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7132939782775794e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928570846, 0.45132, [1.6952e-07], [1.7411e-07], [1.698e-07], [1.7356e-07], [64331], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0022121166985016316], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928571072, 0.43696, [0.0021967], [0.0022501], [0.0021989], [0.0022416], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928566041, 0.059429], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928566100, 0.059402], "benchmarks.StyleSuite.time_parse_ansi": [[1.1585818227850584e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928571289, 0.42389, [1.1575e-07], [1.1649e-07], [1.158e-07], [1.1607e-07], [87690], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1491735043591866e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928571500, 0.43995, [1.1391e-07], [1.1606e-07], [1.1412e-07], [1.1572e-07], [96395], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1498628178269194e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928571715, 0.43961, [1.1369e-07], [1.1672e-07], [1.1402e-07], [1.1632e-07], [96114], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928566823, 0.058992], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928566882, 0.05893], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928566941, 0.05844], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0020499999984167514], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928571930, 0.42322, [0.0020299], [0.0020701], [0.0020329], [0.0020671], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001439190498786047], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928572145, 0.42246, [0.0014314], [0.0014427], [0.0014362], [0.0014407], [7], [10]], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928567418, 0.058119], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928567476, 0.058314], "benchmarks.TextSuite.time_divide": [[2.796573740268368e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928572358, 0.4355, [2.7679e-05], [2.8219e-05], [2.7763e-05], [2.8164e-05], [377], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018736439488476896], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928572574, 0.43791, [0.0001853], [0.00018886], [0.00018649], [0.00018798], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.258416796801612e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928572792, 0.43992, [4.2284e-05], [4.2914e-05], [4.2346e-05], [4.2821e-05], [250], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033309745119749416], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928573011, 0.43133, [0.00032927], [0.00035465], [0.00032978], [0.00033828], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928568411, 0.058339], "benchmarks.TextSuite.time_render": [[4.6698475239037345e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928573228, 0.43764, [4.6544e-06], [4.6892e-06], [4.6573e-06], [4.6782e-06], [2325], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.741666664345525e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928573449, 0.42102, [8.7118e-05], [8.7791e-05], [8.7186e-05], [8.7593e-05], [117], [10]], "benchmarks.TextSuite.time_split": [[3.3751488657586586e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928573661, 0.43403, [3.3647e-05], [3.4327e-05], [3.3686e-05], [3.4173e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.000282816999478618], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928573875, 0.43139, [0.00027936], [0.00028587], [0.00027975], [0.00028548], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011494305541014506], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928574089, 0.43276, [0.0011361], [0.0011602], [0.0011373], [0.0011577], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015503720704665674], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928574305, 0.44015, [0.0015493], [0.0015587], [0.00155], [0.0015519], [7], [10]]}, "durations": {"<build>": 1.949765920639038}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/41279bca-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "41279bca20fefdfe7edf4414f80745da4fb13849", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645902525000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7209806496163712e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826003520, 0.45508, [1.7032e-07], [1.7501e-07], [1.7037e-07], [1.7423e-07], [64605], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7328619096351468e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826003744, 0.46419, [1.704e-07], [1.7495e-07], [1.7225e-07], [1.7363e-07], [64267], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.712903452267083e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826003978, 0.44478, [1.7046e-07], [1.8084e-07], [1.7087e-07], [1.7177e-07], [58751], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7157459157276116e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826004200, 0.469, [1.6936e-07], [1.7614e-07], [1.7081e-07], [1.7193e-07], [64411], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7286983227996616e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826004436, 0.45883, [1.7107e-07], [1.7787e-07], [1.7138e-07], [1.7467e-07], [64359], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7135006545193054e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826004669, 0.44302, [1.7064e-07], [1.7276e-07], [1.7102e-07], [1.7181e-07], [59065], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011224120001619062], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826004888, 0.45047, [0.0011139], [0.00113], [0.0011196], [0.0011268], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015699196374043822], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826005112, 0.46914, [0.0015596], [0.0016408], [0.0015651], [0.0015761], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014310911938082427], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826005352, 0.46096, [0.0014107], [0.0014564], [0.0014217], [0.0014386], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.157796624954879e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826005585, 0.46128, [1.1443e-07], [1.1751e-07], [1.15e-07], [1.1666e-07], [94090], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1695543079802468e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826005816, 0.44008, [1.141e-07], [1.1823e-07], [1.1675e-07], [1.1757e-07], [87168], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1581108277708723e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826006035, 0.43978, [1.1448e-07], [1.172e-07], [1.1502e-07], [1.1689e-07], [87533], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008593749953433871], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826006255, 0.5207, [0.0084221], [0.0086609], [0.0084802], [0.008635], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.00862201047129929], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826006515, 0.52278, [0.0084179], [0.0087707], [0.0085075], [0.0086558], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008637489518150687], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826006777, 0.52919, [0.0085072], [0.0089645], [0.0085427], [0.0087945], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018869860990283391], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826007039, 0.45742, [0.0018736], [0.0019389], [0.001884], [0.0018969], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011706782711876763], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826007272, 0.45468, [0.0011604], [0.001193], [0.0011629], [0.0011751], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038087884981737096], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826007501, 0.44956, [0.00037713], [0.00039378], [0.00037809], [0.00038338], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034786357859810515], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826007722, 0.46805, [0.00034083], [0.00035975], [0.00034496], [0.00034884], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5408237165403227e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826007952, 0.46063, [2.5245e-05], [2.8744e-05], [2.5375e-05], [2.7324e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001856971989739044], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826008184, 0.46435, [0.00018439], [0.0001873], [0.00018523], [0.00018624], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.499483327343454e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826008412, 0.45786, [4.3541e-05], [4.7638e-05], [4.3653e-05], [4.6918e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003282228611748327], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826008648, 0.46893, [0.00032465], [0.00033302], [0.00032502], [0.00033153], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003563426715996245], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826008886, 0.45154, [0.00035544], [0.00035943], [0.00035624], [0.00035676], [29], [10]], "benchmarks.TextSuite.time_render": [[4.690506832566455e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826009111, 0.45935, [4.6719e-06], [4.7284e-06], [4.6855e-06], [4.6982e-06], [2335], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.577844017140923e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826009343, 0.46072, [8.5093e-05], [8.8256e-05], [8.5759e-05], [8.6723e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.549898558828448e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826009574, 0.45576, [3.5156e-05], [3.6844e-05], [3.5383e-05], [3.61e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027793147417373563], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826009807, 0.45585, [0.00027553], [0.00028858], [0.00027722], [0.00027954], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001378541623125784], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826010036, 0.45245, [0.0013681], [0.001389], [0.0013745], [0.0013811], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014717112894036938], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826010261, 0.44967, [0.0014513], [0.0014915], [0.0014564], [0.0014849], [7], [10]]}, "durations": {"<build>": 1.84822678565979}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/416033ff-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "416033ffd48e51a5b03f2eae10fdc15a19621fd1", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1647349482000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.734181001997118e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825751552, 0.45379, [1.6883e-07], [1.7449e-07], [1.7172e-07], [1.7353e-07], [63505], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7167047753388183e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825751783, 0.45385, [1.7044e-07], [1.7485e-07], [1.7081e-07], [1.7303e-07], [64097], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.71143608388775e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825752015, 0.47177, [1.6961e-07], [1.7415e-07], [1.71e-07], [1.7299e-07], [64474], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7389207468589857e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825752248, 0.4405, [1.6953e-07], [1.7474e-07], [1.7109e-07], [1.7432e-07], [58800], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7097260361201155e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825752466, 0.45345, [1.6922e-07], [1.7204e-07], [1.7063e-07], [1.7138e-07], [64238], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7122113367756775e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825752697, 0.46172, [1.6907e-07], [1.7484e-07], [1.7033e-07], [1.7399e-07], [64337], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010509249987080693], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825752929, 0.44969, [0.0010474], [0.0010961], [0.0010493], [0.0010667], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014898333631988081], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825753157, 0.4498, [0.0014706], [0.0015048], [0.0014757], [0.0014993], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0011495972155696815], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825753386, 0.45296, [0.0011437], [0.001212], [0.0011468], [0.0011559], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.168596983380238e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825753612, 0.43833, [1.1551e-07], [1.1826e-07], [1.1632e-07], [1.1736e-07], [87095], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1504966269292599e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825753829, 0.44061, [1.1449e-07], [1.1635e-07], [1.1489e-07], [1.1564e-07], [87250], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1832433615070622e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825754046, 0.44865, [1.1436e-07], [1.2325e-07], [1.1485e-07], [1.2164e-07], [87716], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007747853989712894], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825754272, 0.50866, [0.0076084], [0.0078165], [0.0076446], [0.0077769], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007650062500033528], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825754521, 0.52162, [0.0076012], [0.0080798], [0.0076221], [0.0077945], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007696937303990126], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825754781, 0.52157, [0.0076377], [0.0079839], [0.0076826], [0.0077781], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001707541678721706], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825755044, 0.44311, [0.0016931], [0.0017473], [0.0017047], [0.0017166], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0010813500033691526], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825755269, 0.45581, [0.0010769], [0.0010928], [0.0010782], [0.0010842], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003810386780449855], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825755500, 0.44926, [0.00037874], [0.00039143], [0.00037948], [0.00038719], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003489536128097004], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825755727, 0.4623, [0.0003442], [0.00036258], [0.00034556], [0.0003555], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.56792049466761e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825755959, 0.45696, [2.5364e-05], [2.5941e-05], [2.5386e-05], [2.5839e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018698661629709283], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825756193, 0.45518, [0.00018528], [0.00018825], [0.0001858], [0.00018784], [56], [10]], "benchmarks.TextSuite.time_fit": [[4.4030740258957794e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825756419, 0.46425, [4.3866e-05], [4.5911e-05], [4.3975e-05], [4.4528e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003338877727547961], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825756651, 0.45016, [0.00033155], [0.00033728], [0.00033176], [0.00033635], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036272199840509686], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825756875, 0.45389, [0.00035605], [0.00036552], [0.00035857], [0.00036358], [29], [10]], "benchmarks.TextSuite.time_render": [[4.723563096394727e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825757099, 0.45898, [4.655e-06], [4.7681e-06], [4.6928e-06], [4.733e-06], [2346], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.642625448013109e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825757332, 0.45647, [8.5598e-05], [8.8415e-05], [8.5995e-05], [8.7161e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.5282399795659176e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825757563, 0.45342, [3.5135e-05], [3.5359e-05], [3.5253e-05], [3.533e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028522476235306576], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825757794, 0.46156, [0.00027893], [0.00028936], [0.00028301], [0.00028796], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011363437050022187], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825758024, 0.45835, [0.0011239], [0.0011638], [0.0011251], [0.0011465], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001319539122050628], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825758250, 0.45119, [0.001314], [0.0013352], [0.0013161], [0.0013215], [8], [10]]}, "durations": {"<build>": 1.805346965789795}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/43a26c0a-virtualenv-py3.10.json
================================================
{"commit_hash": "43a26c0a5e61668e77fa465d0915e6d4d084af40", "env_name": "virtualenv-py3.10", "date": 1614442778000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.709802561413027e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929061110, 0.45215, [1.6936e-07], [1.718e-07], [1.7028e-07], [1.7153e-07], [62728], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.697065179385762e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929061334, 0.4594, [1.6865e-07], [1.7051e-07], [1.6949e-07], [1.6999e-07], [64607], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.702309346772063e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929061564, 0.44954, [1.6966e-07], [1.7081e-07], [1.7011e-07], [1.7038e-07], [64319], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7067874077426818e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929061793, 0.46115, [1.7004e-07], [1.7085e-07], [1.7028e-07], [1.7078e-07], [64311], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.703075542529536e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929062024, 0.45949, [1.6907e-07], [1.7177e-07], [1.7004e-07], [1.711e-07], [64413], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7083353043886868e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929062254, 0.46019, [1.6932e-07], [1.7153e-07], [1.704e-07], [1.7128e-07], [64297], [10]], "benchmarks.PrettySuite.time_pretty": [[0.000998994317011569], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929062485, 0.4482, [0.00099738], [0.0010063], [0.00099818], [0.0010009], [11], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014014869375387207], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929062706, 0.4458, [0.0013934], [0.0014138], [0.0013962], [0.0014062], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013922656871727668], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929062929, 0.44369, [0.0013889], [0.0013982], [0.0013894], [0.0013944], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.139315095344454e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929063151, 0.45489, [1.1344e-07], [1.1432e-07], [1.139e-07], [1.1398e-07], [95933], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.142606982016748e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929063379, 0.45636, [1.1384e-07], [1.1481e-07], [1.1406e-07], [1.1452e-07], [95762], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1405560028475279e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929063607, 0.45458, [1.138e-07], [1.1442e-07], [1.1387e-07], [1.1413e-07], [95593], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929057597, 0.06296], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929057661, 0.062313], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929057723, 0.062505], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002279166699736379], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929063835, 0.44639, [0.0022735], [0.0022854], [0.0022781], [0.0022812], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0013640311881317757], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929064061, 0.43969, [0.0013601], [0.0013703], [0.0013619], [0.001366], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.000662766937239212], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929064280, 0.44153, [0.00065784], [0.00067897], [0.00065873], [0.00066599], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005482017632426792], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929064502, 0.45038, [0.0005452], [0.00056321], [0.00054722], [0.00055161], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.5456381726691572e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929064725, 0.45515, [2.5327e-05], [2.5687e-05], [2.5351e-05], [2.5594e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018485847425020848], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929064953, 0.45134, [0.00018384], [0.00018758], [0.00018453], [0.00018589], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.355716462269789e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929065177, 0.4421, [4.3531e-05], [4.3783e-05], [4.3539e-05], [4.3638e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032558837891415214], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929065402, 0.46807, [0.00032433], [0.00032706], [0.00032484], [0.00032581], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00038982771198229434], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929065643, 0.43473, [0.00038931], [0.00039088], [0.00038956], [0.00038998], [26], [10]], "benchmarks.TextSuite.time_render": [[4.68262812533014e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929065859, 0.44588, [4.6561e-06], [4.6924e-06], [4.6772e-06], [4.6851e-06], [2322], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.53858266885605e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929066086, 0.4483, [8.4264e-05], [8.5553e-05], [8.5224e-05], [8.5464e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.517803593745662e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929066311, 0.44105, [3.5119e-05], [3.5279e-05], [3.5157e-05], [3.5201e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002750926578301005], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929066536, 0.44259, [0.00027424], [0.00027772], [0.00027464], [0.00027631], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010977333498885856], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929066757, 0.43802, [0.0010938], [0.001104], [0.0010944], [0.0011], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014895565732980945], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929066976, 0.43707, [0.0014857], [0.0014964], [0.0014883], [0.0014909], [7], [10]]}, "durations": {"<build>": 1.9819769859313965}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/43d4c4e5-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "43d4c4e50c0334f93240aa907183bb24b8e69fe9", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1630164198000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7221062295098886e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889076394, 0.45034, [1.7001e-07], [1.7627e-07], [1.7045e-07], [1.7515e-07], [61546], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7219466500005547e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889076618, 0.46541, [1.6967e-07], [1.7575e-07], [1.7053e-07], [1.754e-07], [64765], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.700960955656711e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889076848, 0.45075, [1.6941e-07], [1.7431e-07], [1.6955e-07], [1.707e-07], [64582], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7064046531053722e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889077079, 0.45754, [1.6949e-07], [1.7707e-07], [1.7011e-07], [1.7241e-07], [64553], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.71150457216044e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889077308, 0.46075, [1.7013e-07], [1.7189e-07], [1.7051e-07], [1.7129e-07], [63948], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7053752464854407e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889077539, 0.45132, [1.6864e-07], [1.7158e-07], [1.7027e-07], [1.7088e-07], [62696], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010340312495827676], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889077764, 0.43834, [0.0010324], [0.0010406], [0.0010327], [0.0010342], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014282890624599531], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889077987, 0.45725, [0.0014269], [0.0014363], [0.0014279], [0.0014304], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013012395647820085], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889078215, 0.43992, [0.0012946], [0.0013034], [0.0012993], [0.0013028], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1451015069415028e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889078439, 0.45861, [1.1409e-07], [1.1524e-07], [1.1444e-07], [1.148e-07], [95509], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1482776953988941e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889078668, 0.46408, [1.1399e-07], [1.1726e-07], [1.1427e-07], [1.1573e-07], [96353], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1498091575367529e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889078900, 0.45863, [1.1412e-07], [1.1839e-07], [1.1455e-07], [1.1665e-07], [95603], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889072843, 0.0635], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889072906, 0.062736], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889072969, 0.063244], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002150508365593851], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889079130, 0.45196, [0.0021384], [0.002213], [0.0021424], [0.0021569], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012908645730931312], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889079358, 0.43793, [0.0012777], [0.001325], [0.0012876], [0.0013092], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037329313844176274], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889079581, 0.44659, [0.00036877], [0.00037824], [0.00036976], [0.00037755], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034523117656428965], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889079801, 0.45409, [0.00034157], [0.00035623], [0.00034263], [0.00034802], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.543735421730529e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889080029, 0.44686, [2.5388e-05], [2.5555e-05], [2.5392e-05], [2.5464e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018549717023526714], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889080258, 0.45926, [0.00018402], [0.0001901], [0.00018476], [0.00018571], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.360016948562496e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889080488, 0.44363, [4.3422e-05], [4.4766e-05], [4.3506e-05], [4.37e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003270997425936388], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889080712, 0.45535, [0.00032361], [0.00033477], [0.00032419], [0.00032831], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035695258752796156], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889080939, 0.44251, [0.00035508], [0.00035881], [0.00035614], [0.00035726], [29], [10]], "benchmarks.TextSuite.time_render": [[4.6620813205127715e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889081160, 0.45135, [4.6422e-06], [4.7332e-06], [4.6527e-06], [4.6764e-06], [2349], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.51479489938356e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889081389, 0.45555, [8.442e-05], [8.724e-05], [8.493e-05], [8.5284e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.511642953100611e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889081618, 0.4486, [3.4996e-05], [3.6184e-05], [3.507e-05], [3.5816e-05], [299], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027607620914319624], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889081841, 0.44684, [0.00027412], [0.00027921], [0.00027488], [0.00027736], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010976436897180974], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889082063, 0.44449, [0.0010923], [0.0011049], [0.0010949], [0.0011008], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013771926751360297], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889082283, 0.45627, [0.0013679], [0.0014034], [0.0013737], [0.0013795], [8], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.027500124997459352], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892945133, 0.62907, [0.027347], [0.028116], [0.027428], [0.027546], [1], [10]]}, "durations": {"<build>": 1.8155059814453125}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/43d4c4e5-virtualenv-py3.10.json
================================================
{"commit_hash": "43d4c4e50c0334f93240aa907183bb24b8e69fe9", "env_name": "virtualenv-py3.10", "date": 1630164198000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.699320866143202e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928433625, 0.46361, [1.6912e-07], [1.7178e-07], [1.6965e-07], [1.7022e-07], [64457], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7043166841962874e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928433856, 0.46257, [1.6993e-07], [1.7082e-07], [1.7028e-07], [1.7056e-07], [64348], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.70487436541234e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928434087, 0.46305, [1.6936e-07], [1.7086e-07], [1.7035e-07], [1.7052e-07], [64314], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.6959247751766975e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928434318, 0.46397, [1.6938e-07], [1.7016e-07], [1.6954e-07], [1.6981e-07], [64989], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.6991618853215302e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928434551, 0.46342, [1.6927e-07], [1.7599e-07], [1.6954e-07], [1.71e-07], [64317], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7089756116403513e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928434783, 0.45927, [1.695e-07], [1.7311e-07], [1.7079e-07], [1.7234e-07], [63516], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010292916995240375], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928435013, 0.45023, [0.0010261], [0.0010422], [0.0010272], [0.0010321], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001427075561878155], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928435237, 0.46055, [0.0014219], [0.0014291], [0.0014245], [0.0014277], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013088568121020216], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928435465, 0.44209, [0.0012975], [0.0013232], [0.0013], [0.0013176], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1442916006142942e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928435690, 0.4593, [1.1381e-07], [1.1512e-07], [1.1436e-07], [1.1454e-07], [95603], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1491991722675978e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928435920, 0.4613, [1.1346e-07], [1.1605e-07], [1.1438e-07], [1.1534e-07], [96188], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1529701053575947e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928436151, 0.43575, [1.1414e-07], [1.1701e-07], [1.1487e-07], [1.1635e-07], [87677], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928430055, 0.068854], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928430124, 0.065784], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928430190, 0.064843], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021521667047636585], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928436369, 0.45341, [0.002116], [0.0021965], [0.0021307], [0.0021803], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012916823106934316], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928436597, 0.44415, [0.0012699], [0.0014819], [0.0012758], [0.0013383], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003758764485547576], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928436819, 0.45534, [0.00036896], [0.00038377], [0.00036973], [0.00038185], [29], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003417291774249245], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928437040, 0.45371, [0.00034106], [0.00035128], [0.00034148], [0.00034224], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5390368820586846e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928437265, 0.45785, [2.5298e-05], [2.5598e-05], [2.5322e-05], [2.5449e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018506896569682604], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928437494, 0.45502, [0.00018374], [0.00018666], [0.00018451], [0.00018542], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.365969382758651e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928437720, 0.44578, [4.3455e-05], [4.3768e-05], [4.3572e-05], [4.3671e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003259549675051183], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928437946, 0.43898, [0.00032478], [0.00032683], [0.00032514], [0.00032632], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035797023208163276], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928438164, 0.43523, [0.00035653], [0.00035921], [0.0003571], [0.00035847], [28], [10]], "benchmarks.TextSuite.time_render": [[4.6667561275503975e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928438380, 0.45003, [4.6473e-06], [4.6741e-06], [4.6601e-06], [4.6709e-06], [2325], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.534399611970747e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928438608, 0.45426, [8.4725e-05], [8.5728e-05], [8.5187e-05], [8.553e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5403962304327084e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928438836, 0.44721, [3.5299e-05], [3.557e-05], [3.537e-05], [3.5464e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027445998689233273], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928439065, 0.44578, [0.00027354], [0.00027559], [0.00027402], [0.00027496], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001109252098831348], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928439287, 0.44391, [0.0011054], [0.001114], [0.0011066], [0.0011104], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013650728742504725], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928439508, 0.45602, [0.0013612], [0.0013709], [0.0013642], [0.0013668], [8], [10]]}, "durations": {"<build>": 2.000382900238037}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/44f54dd8-virtualenv-py3.10.json
================================================
{"commit_hash": "44f54dd8e85c576b5b031ab5afaa89e4af1d2db8", "env_name": "virtualenv-py3.10", "date": 1613423330000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.6967413074663557e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929018191, 0.45685, [1.6772e-07], [1.7106e-07], [1.6938e-07], [1.7019e-07], [64506], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7002887802798017e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929018419, 0.45748, [1.6827e-07], [1.7032e-07], [1.6978e-07], [1.702e-07], [64894], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7043497876303627e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929018648, 0.45753, [1.6848e-07], [1.7519e-07], [1.6981e-07], [1.7087e-07], [64579], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7033197715253273e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929018876, 0.4463, [1.6887e-07], [1.7139e-07], [1.7019e-07], [1.7052e-07], [64524], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.702686915728278e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929019104, 0.4552, [1.6942e-07], [1.709e-07], [1.6966e-07], [1.7062e-07], [64200], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7042750275035252e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929019332, 0.45561, [1.6888e-07], [1.7228e-07], [1.7031e-07], [1.7108e-07], [64292], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010246270991046912], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929019559, 0.44049, [0.0010203], [0.0010319], [0.0010219], [0.0010264], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014248359366320074], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929019778, 0.45392, [0.0014195], [0.0014304], [0.0014217], [0.001427], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014159661277517444], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929020003, 0.44659, [0.001413], [0.0014239], [0.0014148], [0.0014192], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1394939761435257e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929020226, 0.45533, [1.136e-07], [1.1461e-07], [1.1384e-07], [1.1405e-07], [96339], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1384583794797324e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929020454, 0.45622, [1.1351e-07], [1.1446e-07], [1.1365e-07], [1.1395e-07], [96470], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1441081350038904e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929020683, 0.45685, [1.1395e-07], [1.1629e-07], [1.1422e-07], [1.1609e-07], [96427], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929014673, 0.06211], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929014735, 0.061388], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929014796, 0.061498], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.003257651122112293], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929020912, 0.47083, [0.0032419], [0.0032744], [0.0032443], [0.003264], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0021358375001000237], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929021148, 0.435, [0.0021303], [0.0021416], [0.0021337], [0.002139], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006608489693462616], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929021364, 0.43737, [0.0006581], [0.00066546], [0.00065874], [0.00066177], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.000547438578091954], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929021585, 0.44162, [0.00054527], [0.00055525], [0.00054646], [0.00054983], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.5390515191724798e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929021803, 0.4512, [2.5329e-05], [2.5711e-05], [2.5351e-05], [2.5428e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018476006040020427], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929022028, 0.44752, [0.00018339], [0.00018568], [0.00018443], [0.00018515], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3462600380556324e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929022252, 0.4469, [4.3358e-05], [4.3558e-05], [4.3432e-05], [4.3498e-05], [244], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003242386358606657], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929022474, 0.44771, [0.0003232], [0.00032543], [0.00032396], [0.0003247], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003898078699691083], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929022697, 0.44376, [0.00038863], [0.00039121], [0.00038894], [0.00039019], [27], [10]], "benchmarks.TextSuite.time_render": [[4.677676879431917e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929022918, 0.44464, [4.6703e-06], [4.6962e-06], [4.6745e-06], [4.6798e-06], [2335], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.518635934251506e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929023143, 0.44923, [8.4641e-05], [8.5376e-05], [8.5162e-05], [8.5249e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.519230354962834e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929023369, 0.44159, [3.5092e-05], [3.55e-05], [3.5154e-05], [3.5242e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027432401303054864], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929023594, 0.4393, [0.00027248], [0.00027588], [0.00027333], [0.00027499], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010944333000225013], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929023813, 0.44538, [0.0010917], [0.0011006], [0.0010926], [0.0010968], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014909017149225942], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929024041, 0.43465, [0.0014838], [0.0015007], [0.0014858], [0.0014937], [7], [10]]}, "durations": {"<build>": 1.97792387008667}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/464e4e33-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "464e4e3360a96f2e81b725e52ab3be7d57679489", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644493409000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7215293351908028e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826366783, 0.46967, [1.7154e-07], [1.7825e-07], [1.7175e-07], [1.7307e-07], [63959], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7372731576658566e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826367024, 0.47273, [1.7208e-07], [1.7657e-07], [1.733e-07], [1.7427e-07], [62332], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7153566325169775e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826367261, 0.45552, [1.6938e-07], [1.7271e-07], [1.7083e-07], [1.7188e-07], [60536], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.738180578765374e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826367488, 0.44777, [1.7175e-07], [1.7812e-07], [1.73e-07], [1.7572e-07], [58357], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7077785644567724e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826367710, 0.46724, [1.7009e-07], [1.7393e-07], [1.7061e-07], [1.7113e-07], [64220], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.710348597453968e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826367945, 0.4704, [1.6919e-07], [1.7259e-07], [1.7088e-07], [1.7115e-07], [64300], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011647271108813583], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826368180, 0.47928, [0.0011192], [0.0012175], [0.0011281], [0.0011888], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0016175744988556418], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826368413, 0.46064, [0.0015672], [0.0017072], [0.0015987], [0.0016238], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014898333174642175], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826368640, 0.46564, [0.0014186], [0.001549], [0.0014459], [0.0015146], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1562632421594428e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826368877, 0.44678, [1.1471e-07], [1.1654e-07], [1.1512e-07], [1.1595e-07], [87279], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.160660011070362e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826369102, 0.44058, [1.1478e-07], [1.2129e-07], [1.1515e-07], [1.1814e-07], [87209], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1567508085208867e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826369324, 0.46859, [1.1465e-07], [1.174e-07], [1.1501e-07], [1.1643e-07], [95499], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008504770754370838], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826369559, 0.52727, [0.0084401], [0.0088888], [0.0084877], [0.0086023], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008809770981315523], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826369821, 0.5254, [0.0084522], [0.0090584], [0.0086433], [0.0089151], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008699562749825418], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826370085, 0.52892, [0.0084133], [0.0093118], [0.008451], [0.0090555], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001887951414876928], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826370356, 0.46932, [0.0018791], [0.0019095], [0.0018843], [0.0018922], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001189916666286687], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826370591, 0.45695, [0.0011635], [0.0012717], [0.0011852], [0.0011963], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038292037788778543], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826370822, 0.4665, [0.00037603], [0.00039431], [0.00037821], [0.00038827], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003466478533922664], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826371055, 0.46332, [0.00034032], [0.00036388], [0.00034088], [0.00035358], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5791617456910224e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826371283, 0.47063, [2.5259e-05], [2.6927e-05], [2.5476e-05], [2.6312e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018568426884453873], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826371519, 0.46552, [0.00018504], [0.00018802], [0.00018515], [0.00018724], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.380140444112382e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826371754, 0.45704, [4.3517e-05], [4.4931e-05], [4.3588e-05], [4.4182e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033069129285374373], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826371989, 0.45761, [0.00032697], [0.00033779], [0.00033006], [0.00033165], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003641400895691637], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826372213, 0.45475, [0.00036042], [0.00038628], [0.00036209], [0.00037528], [29], [10]], "benchmarks.TextSuite.time_render": [[4.725791156966927e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826372437, 0.45732, [4.6516e-06], [4.8707e-06], [4.675e-06], [4.7612e-06], [2296], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.567896814591538e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826372668, 0.46084, [8.4851e-05], [8.8243e-05], [8.5576e-05], [8.6299e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.600067703972583e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826372899, 0.4596, [3.5257e-05], [3.7725e-05], [3.5443e-05], [3.6633e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027872807664894745], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826373130, 0.45281, [0.00027704], [0.00029695], [0.00027784], [0.00028283], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013783515605609864], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826373355, 0.46767, [0.0013662], [0.001439], [0.0013711], [0.0013954], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014874136541038752], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826373592, 0.45803, [0.0014607], [0.0015765], [0.0014649], [0.0015047], [7], [10]]}, "durations": {"<build>": 1.8942539691925049}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/489fafc6-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "489fafc63e4ab85cacde60ade1a15099d6c08ca8", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1648993695000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7081173513476154e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889183714, 0.46546, [1.6948e-07], [1.722e-07], [1.7016e-07], [1.7123e-07], [64067], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7137803524312462e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889183947, 0.46675, [1.6907e-07], [1.7287e-07], [1.7063e-07], [1.7176e-07], [64339], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7101667635937e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889184179, 0.46068, [1.7052e-07], [1.7333e-07], [1.7094e-07], [1.7152e-07], [63089], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.725073439715677e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889184409, 0.45915, [1.7093e-07], [1.808e-07], [1.7122e-07], [1.73e-07], [62564], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7385732299559246e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889184637, 0.44002, [1.7008e-07], [1.7553e-07], [1.7232e-07], [1.7449e-07], [58499], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7173551236228054e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889184855, 0.46067, [1.7025e-07], [1.7582e-07], [1.7093e-07], [1.7314e-07], [64557], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001037856237962842], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889185088, 0.45336, [0.0010291], [0.0010492], [0.0010339], [0.0010449], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014602351501317961], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889185313, 0.451, [0.0014557], [0.0014665], [0.0014594], [0.0014643], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0011446596666549644], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889185536, 0.4514, [0.0011395], [0.0011535], [0.0011418], [0.0011474], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1474094009433429e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889185760, 0.44645, [1.1378e-07], [1.1802e-07], [1.1426e-07], [1.1609e-07], [87441], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1441159956126138e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889185987, 0.43617, [1.1392e-07], [1.1885e-07], [1.1427e-07], [1.1455e-07], [87527], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1649649963123875e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889186204, 0.44677, [1.1638e-07], [1.1773e-07], [1.1643e-07], [1.1686e-07], [96132], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007596458483021706], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889186428, 0.51336, [0.0075234], [0.0077701], [0.0075719], [0.0076385], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007627072744071484], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889186685, 0.51666, [0.0075293], [0.0077861], [0.0076108], [0.0077264], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007622614444699138], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889186945, 0.51574, [0.0075543], [0.0078512], [0.0075822], [0.0076787], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017500486768161259], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889187202, 0.4489, [0.0017392], [0.0017657], [0.0017429], [0.0017591], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001084258349146694], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889187428, 0.4442, [0.0010746], [0.001129], [0.0010804], [0.0010976], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037538766212362267], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889187650, 0.45273, [0.00037152], [0.0003821], [0.00037226], [0.0003774], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034984304802492265], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889187876, 0.4501, [0.00034192], [0.00036172], [0.00034241], [0.00035259], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.547654530602249e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889188100, 0.4588, [2.5174e-05], [2.5986e-05], [2.5324e-05], [2.5595e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018515230300996839], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889188330, 0.45743, [0.00018381], [0.00018557], [0.00018422], [0.00018535], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.35346358917593e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889188557, 0.44826, [4.3461e-05], [4.3702e-05], [4.35e-05], [4.3604e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032998169560662723], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889188785, 0.452, [0.00032615], [0.00033168], [0.00032683], [0.00033098], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003580466868227412], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889189016, 0.44965, [0.00035455], [0.00036617], [0.00035544], [0.00036211], [29], [10]], "benchmarks.TextSuite.time_render": [[4.6861023666002815e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889189239, 0.45695, [4.671e-06], [4.7992e-06], [4.6759e-06], [4.6925e-06], [2340], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.539420377928764e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889189470, 0.46093, [8.5073e-05], [8.5785e-05], [8.5162e-05], [8.5563e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5642709893484906e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889189703, 0.44771, [3.531e-05], [3.6043e-05], [3.5377e-05], [3.5843e-05], [300], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027492598593725185], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889189929, 0.45159, [0.00027404], [0.00027623], [0.00027454], [0.00027544], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011077750474214553], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889190154, 0.45011, [0.0011026], [0.0011298], [0.0011046], [0.0011187], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013449792022584006], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889190377, 0.45556, [0.0013395], [0.0013844], [0.0013417], [0.0013623], [8], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.02679377095773816], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892962651, 0.61976, [0.026751], [0.02703], [0.026787], [0.02682], [1], [10]]}, "durations": {"<build>": 1.8133258819580078}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/48da2791-virtualenv-py3.10.json
================================================
{"commit_hash": "48da2791036f929f706a33c29db809632e6725fc", "env_name": "virtualenv-py3.10", "date": 1638115255000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7029390691971436e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929396857, 0.46509, [1.6974e-07], [1.7081e-07], [1.7011e-07], [1.7046e-07], [64466], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.6999469005804912e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929397088, 0.46218, [1.6943e-07], [1.7107e-07], [1.6979e-07], [1.7052e-07], [64121], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.6956481101479907e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929397319, 0.46503, [1.6843e-07], [1.7113e-07], [1.6903e-07], [1.7056e-07], [64179], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7031189285000093e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929397551, 0.46538, [1.693e-07], [1.7185e-07], [1.7006e-07], [1.7051e-07], [64325], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.6978814830790017e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929397783, 0.46799, [1.6935e-07], [1.778e-07], [1.6962e-07], [1.7083e-07], [64446], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7001106675938523e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929398016, 0.46569, [1.6898e-07], [1.7093e-07], [1.6961e-07], [1.7046e-07], [64517], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011089291496318766], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929398249, 0.46493, [0.0011058], [0.0011128], [0.0011067], [0.0011111], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015178006433416158], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929398475, 0.45271, [0.0015126], [0.0015273], [0.0015162], [0.0015208], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014067343745409744], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929398705, 0.45552, [0.0013948], [0.0014121], [0.0014011], [0.0014088], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1431908171180309e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929398934, 0.4625, [1.139e-07], [1.1459e-07], [1.1407e-07], [1.1443e-07], [96223], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1427217539401951e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929399165, 0.46318, [1.1382e-07], [1.1508e-07], [1.1408e-07], [1.1449e-07], [96346], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1413770972804278e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929399397, 0.46447, [1.1388e-07], [1.1505e-07], [1.1397e-07], [1.1449e-07], [96097], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929393276, 0.06579], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929393342, 0.065735], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929393408, 0.065495], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0023547582008177415], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929399630, 0.46099, [0.0023333], [0.0023836], [0.0023458], [0.002377], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014109401254245313], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929399866, 0.45218, [0.0013978], [0.0014195], [0.0014069], [0.0014142], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003703571247959709], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929400094, 0.44711, [0.00036972], [0.00037122], [0.00037023], [0.0003706], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003394677417330263], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929400316, 0.45363, [0.00033578], [0.00035242], [0.00033596], [0.00034271], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5319982397407204e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929400543, 0.45892, [2.5273e-05], [2.5455e-05], [2.5291e-05], [2.537e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018443425882463184], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929400771, 0.45448, [0.00018336], [0.00018588], [0.00018415], [0.00018452], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.344523672907784e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929400998, 0.44638, [4.3336e-05], [4.3622e-05], [4.3376e-05], [4.3513e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003248200757132674], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929401225, 0.45657, [0.00032341], [0.00032559], [0.00032417], [0.00032505], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035815086247849054], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929401452, 0.44738, [0.00035601], [0.00036052], [0.00035674], [0.00035926], [29], [10]], "benchmarks.TextSuite.time_render": [[4.660459543542047e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929401674, 0.45297, [4.649e-06], [4.7007e-06], [4.6552e-06], [4.6754e-06], [2336], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.559441260923262e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929401904, 0.45579, [8.5149e-05], [8.6055e-05], [8.5462e-05], [8.5757e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.518453232369847e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929402133, 0.45111, [3.5107e-05], [3.5279e-05], [3.5171e-05], [3.5213e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002738130527799704], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929402363, 0.44674, [0.00027328], [0.00027555], [0.00027359], [0.00027398], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013559401249949588], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929402586, 0.45482, [0.0013492], [0.0013608], [0.0013529], [0.0013577], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014501339277817999], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929402816, 0.44494, [0.0014477], [0.0014572], [0.0014492], [0.0014504], [7], [10]]}, "durations": {"<build>": 2.0081732273101807}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/4b123ddf-virtualenv-py3.10.json
================================================
{"commit_hash": "4b123ddf9881f37d257a385fbbae0821deb6dba6", "env_name": "virtualenv-py3.10", "date": 1592148956000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [null, [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928524667, 0.057714], "benchmarks.ColorSuite.time_downgrade_to_standard": [null, [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928524724, 0.058216], "benchmarks.ColorSuite.time_downgrade_to_windows": [null, [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928524783, 0.058668], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [null, [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928524841, 0.058207], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [null, [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928524900, 0.058317], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [null, [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928524958, 0.057998], "benchmarks.PrettySuite.time_pretty": [null, [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928525016, 0.057999], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928525074, 0.058439], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928525133, 0.058496], "benchmarks.StyleSuite.time_parse_ansi": [null, [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928525191, 0.058278], "benchmarks.StyleSuite.time_parse_hex": [null, [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928525250, 0.05777], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [null, [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928525308, 0.057742], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928525365, 0.058019], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928525423, 0.057995], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928525481, 0.05858], "benchmarks.TableSuite.time_table_heavy_wrapping": [null, [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928525540, 0.058245], "benchmarks.TableSuite.time_table_no_wrapping": [null, [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928525598, 0.057745], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928525656, 0.058234], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928525715, 0.057613], "benchmarks.TextSuite.time_divide": [null, [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928525772, 0.057794], "benchmarks.TextSuite.time_divide_unicode_heavy": [null, [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928525830, 0.057991], "benchmarks.TextSuite.time_fit": [null, [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928525888, 0.058486], "benchmarks.TextSuite.time_fit_unicode_heavy": [null, [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928525947, 0.058217], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928526005, 0.05783], "benchmarks.TextSuite.time_render": [null, [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928526063, 0.05769], "benchmarks.TextSuite.time_render_unicode_heavy": [null, [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928526121, 0.058295], "benchmarks.TextSuite.time_split": [null, [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928526179, 0.058274], "benchmarks.TextSuite.time_split_unicode_heavy": [null, [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928526237, 0.058275], "benchmarks.TextSuite.time_wrapping": [null, [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928526296, 0.057623], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [null, [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928526353, 0.057948]}, "durations": {"<build>": 1.94716215133667}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/4b3b6531-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "4b3b6531ad349312f4df6e284bc1831dcf59ada6", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645604370000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7388884035282427e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826035135, 0.45909, [1.7084e-07], [1.7531e-07], [1.7217e-07], [1.7461e-07], [64137], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.734661323936009e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826035359, 0.4439, [1.7e-07], [1.7499e-07], [1.7155e-07], [1.7452e-07], [59205], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.74690667922221e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826035581, 0.46015, [1.7209e-07], [1.7735e-07], [1.7404e-07], [1.7623e-07], [64211], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.717120204248911e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826035816, 0.44807, [1.7017e-07], [1.726e-07], [1.709e-07], [1.721e-07], [58482], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7452828383359528e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826036043, 0.44883, [1.7223e-07], [1.7632e-07], [1.7379e-07], [1.7528e-07], [64366], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7101469721317213e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826036268, 0.45673, [1.6977e-07], [1.7201e-07], [1.7063e-07], [1.7124e-07], [62212], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011246805467332401], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826036496, 0.44924, [0.0011218], [0.0011339], [0.0011224], [0.0011267], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015738600632175803], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826036720, 0.45746, [0.0015611], [0.0016637], [0.0015676], [0.0016023], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014389504940481856], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826036945, 0.47214, [0.001412], [0.001476], [0.0014321], [0.0014475], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1501213478340175e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826037176, 0.46997, [1.1429e-07], [1.1865e-07], [1.1473e-07], [1.155e-07], [95299], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1530465525566523e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826037410, 0.44053, [1.1445e-07], [1.1708e-07], [1.1497e-07], [1.157e-07], [87527], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1511248583269963e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826037630, 0.44177, [1.1375e-07], [1.1652e-07], [1.1451e-07], [1.1598e-07], [87345], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008503135526552796], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826037848, 0.52494, [0.008429], [0.0090277], [0.0084826], [0.0085162], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008507729216944426], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826038108, 0.51952, [0.0084159], [0.0088615], [0.0084372], [0.008527], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008485197729896754], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826038369, 0.52019, [0.0084558], [0.0087093], [0.0084617], [0.0085146], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018914235794606307], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826038630, 0.46424, [0.0018819], [0.0019242], [0.0018839], [0.0019001], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001178171343377067], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826038859, 0.45326, [0.0011558], [0.0012014], [0.001169], [0.0011829], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003880952301967357], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826039090, 0.46266, [0.0003842], [0.00039065], [0.00038577], [0.00038893], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003427708401314674], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826039320, 0.45682, [0.00034068], [0.00035369], [0.00034203], [0.00034875], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5481556540036646e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826039547, 0.45573, [2.5335e-05], [2.6293e-05], [2.5414e-05], [2.5784e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018561493950606934], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826039779, 0.46779, [0.00018471], [0.0001879], [0.0001849], [0.00018694], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.378015059992914e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826040013, 0.45232, [4.357e-05], [4.4966e-05], [4.3682e-05], [4.4201e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032713889694688], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826040244, 0.46055, [0.00032441], [0.00033218], [0.00032493], [0.00032958], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003564834819528563], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826040473, 0.45193, [0.00035564], [0.00035902], [0.00035609], [0.00035671], [29], [10]], "benchmarks.TextSuite.time_render": [[4.682980893464612e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826040698, 0.4574, [4.6663e-06], [4.7464e-06], [4.6733e-06], [4.7064e-06], [2328], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.604855929303357e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826040929, 0.46025, [8.5233e-05], [8.6344e-05], [8.55e-05], [8.6189e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.534614547038252e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826041161, 0.45786, [3.5247e-05], [3.5788e-05], [3.5293e-05], [3.5385e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002772516577112439], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826041392, 0.45322, [0.00027399], [0.0002804], [0.0002749], [0.00027938], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013736223772866651], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826041619, 0.45961, [0.0013586], [0.0013869], [0.0013645], [0.0013839], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014697678686518756], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826041850, 0.44088, [0.001462], [0.0014901], [0.0014665], [0.001476], [7], [10]]}, "durations": {"<build>": 1.8865008354187012}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/4bf3f19c-virtualenv-py3.10.json
================================================
{"commit_hash": "4bf3f19c04f47c60c4fe96b81afe708a0ad812dc", "env_name": "virtualenv-py3.10", "date": 1610056536000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7026700201969953e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929218340, 0.4496, [1.6901e-07], [1.7073e-07], [1.6983e-07], [1.7059e-07], [63258], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7024261033691904e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929218564, 0.45474, [1.6906e-07], [1.7206e-07], [1.7001e-07], [1.7056e-07], [64144], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7097329262004033e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929218790, 0.44701, [1.6951e-07], [1.8056e-07], [1.7071e-07], [1.7106e-07], [64271], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.704293439683435e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929219017, 0.45274, [1.6877e-07], [1.7101e-07], [1.6988e-07], [1.7069e-07], [64637], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.6998120032705176e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929219246, 0.45383, [1.6869e-07], [1.716e-07], [1.6933e-07], [1.7054e-07], [64363], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.701495873574819e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929219471, 0.45607, [1.686e-07], [1.7108e-07], [1.6982e-07], [1.7058e-07], [64601], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010267166479025036], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929219699, 0.44096, [0.0010256], [0.0010341], [0.0010262], [0.0010296], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014405237847573257], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929219918, 0.43557, [0.0014334], [0.0014522], [0.0014353], [0.0014467], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014132864380371757], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929220133, 0.44405, [0.0014084], [0.0014207], [0.0014108], [0.0014145], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1413694500299339e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929220356, 0.45439, [1.1382e-07], [1.1487e-07], [1.1391e-07], [1.1425e-07], [96002], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1450187969337221e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929220583, 0.45646, [1.1404e-07], [1.1666e-07], [1.1436e-07], [1.1468e-07], [96297], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1450004689955e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929220812, 0.45426, [1.1411e-07], [1.1624e-07], [1.1442e-07], [1.1483e-07], [95933], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929214835, 0.061496], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929214897, 0.061405], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929214958, 0.061369], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.003232036375266034], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929221039, 0.46378, [0.00322], [0.0032609], [0.0032222], [0.0032356], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0021225292002782226], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929221273, 0.44284, [0.002113], [0.0021436], [0.0021205], [0.0021334], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006580416884389706], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929221498, 0.43619, [0.00065654], [0.00066255], [0.00065709], [0.00065976], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005459375258253299], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929221718, 0.44058, [0.00054361], [0.00055332], [0.0005442], [0.00054791], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8382165332216397e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929221936, 0.44914, [2.8069e-05], [2.8795e-05], [2.8082e-05], [2.8704e-05], [378], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018698976323082062], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929222161, 0.44507, [0.00018619], [0.00018781], [0.00018646], [0.0001872], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2181391569123746e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929222383, 0.44412, [4.2141e-05], [4.2519e-05], [4.2176e-05], [4.2324e-05], [249], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003300329352045552], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929222604, 0.43323, [0.00032818], [0.00033216], [0.00032865], [0.00033058], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003932059228715773], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929222820, 0.43423, [0.00039146], [0.00039549], [0.00039154], [0.00039483], [26], [10]], "benchmarks.TextSuite.time_render": [[4.680967959825711e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929223036, 0.44384, [4.6618e-06], [4.739e-06], [4.6703e-06], [4.7054e-06], [2325], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.533317190995149e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929223261, 0.44865, [8.4655e-05], [8.6092e-05], [8.504e-05], [8.5441e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.393354828108605e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929223487, 0.44314, [3.3758e-05], [3.3968e-05], [3.3827e-05], [3.3952e-05], [311], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002790191352392572], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929223707, 0.43547, [0.00027809], [0.00027992], [0.00027843], [0.00027956], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001142136555346143], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929223924, 0.43895, [0.0011399], [0.0011458], [0.0011402], [0.0011427], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015315089279153782], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929224142, 0.44254, [0.0015198], [0.0015369], [0.0015245], [0.0015349], [7], [10]]}, "durations": {"<build>": 1.9530932903289795}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/4d6a6d88-virtualenv-py3.10.json
================================================
{"commit_hash": "4d6a6d882048e784aac9e45fc3d0712eac8a44c6", "env_name": "virtualenv-py3.10", "date": 1594653936000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.71211830975041e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928701459, 0.44811, [1.6928e-07], [1.7293e-07], [1.7049e-07], [1.7257e-07], [64070], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7341769853709463e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928701684, 0.42369, [1.7211e-07], [1.7412e-07], [1.7301e-07], [1.7365e-07], [58559], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.733226603416208e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928701894, 0.4239, [1.7258e-07], [1.7531e-07], [1.7287e-07], [1.7381e-07], [58309], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7369829756098446e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928702104, 0.42248, [1.7256e-07], [1.7493e-07], [1.7347e-07], [1.7386e-07], [58145], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.730062267293436e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928702313, 0.42338, [1.7105e-07], [1.7353e-07], [1.727e-07], [1.7323e-07], [58620], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.73106468285579e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928702523, 0.42349, [1.7271e-07], [1.7373e-07], [1.729e-07], [1.736e-07], [58623], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0022415790997911246], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928702733, 0.44145, [0.0022111], [0.0022633], [0.0022401], [0.0022491], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928697426, 0.058805], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928697485, 0.058014], "benchmarks.StyleSuite.time_parse_ansi": [[1.1629347304261993e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928702950, 0.41859, [1.1587e-07], [1.1667e-07], [1.1617e-07], [1.1652e-07], [86439], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.149888907589994e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928703159, 0.43942, [1.1351e-07], [1.158e-07], [1.1392e-07], [1.1576e-07], [96497], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1611507526373169e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928703375, 0.4299, [1.1585e-07], [1.1631e-07], [1.1609e-07], [1.1613e-07], [96350], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928698192, 0.057811], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928698249, 0.057598], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928698307, 0.057625], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002132087497739121], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928703590, 0.43733, [0.0021244], [0.0021533], [0.0021308], [0.0021385], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014943362142990477], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928703812, 0.4326, [0.0014916], [0.001502], [0.0014927], [0.0014998], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006707264003731931], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928704031, 0.43352, [0.00066986], [0.00067391], [0.00067017], [0.00067108], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005578264163988125], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928704249, 0.4249, [0.00055723], [0.00056032], [0.00055764], [0.00055827], [18], [10]], "benchmarks.TextSuite.time_divide": [[2.8334253213622352e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928704458, 0.43659, [2.8239e-05], [2.8549e-05], [2.8276e-05], [2.8421e-05], [385], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001867837759320913], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928704681, 0.44303, [0.00018628], [0.00018719], [0.00018674], [0.00018683], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.252741899453619e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928704903, 0.44296, [4.2042e-05], [4.2936e-05], [4.216e-05], [4.2901e-05], [253], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032937769297390217], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928705125, 0.42599, [0.00032873], [0.00032982], [0.00032918], [0.00032955], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928700099, 0.058176], "benchmarks.TextSuite.time_render": [[4.719828067108801e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928705336, 0.43846, [4.6846e-06], [4.7627e-06], [4.6917e-06], [4.7593e-06], [2338], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.595767974384216e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928705559, 0.43407, [8.5341e-05], [8.6674e-05], [8.5505e-05], [8.6038e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.3765640987663486e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928705773, 0.43021, [3.362e-05], [3.4345e-05], [3.3695e-05], [3.3789e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002785990945994854], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928705988, 0.42689, [0.00027808], [0.0002792], [0.00027822], [0.00027882], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001152412055590604], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928706201, 0.43271, [0.0011342], [0.0011636], [0.0011365], [0.0011621], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015300982881204358], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928706414, 0.435, [0.0015163], [0.0015429], [0.0015173], [0.0015413], [7], [10]]}, "durations": {"<build>": 1.9689950942993164}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/4dc1d4cb-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "4dc1d4cbc92170f73a0f15d740566d8c1494925f", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645548440000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7361965246275495e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826066743, 0.46467, [1.7307e-07], [1.7775e-07], [1.732e-07], [1.7437e-07], [64256], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7214544435090834e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826066978, 0.47401, [1.7099e-07], [1.7427e-07], [1.7124e-07], [1.7323e-07], [64035], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7153914653587845e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826067214, 0.44169, [1.7012e-07], [1.7842e-07], [1.7076e-07], [1.7232e-07], [58714], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.705778989913639e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826067433, 0.46135, [1.6927e-07], [1.7745e-07], [1.7025e-07], [1.7154e-07], [64270], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7166571420183632e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826067666, 0.46909, [1.7007e-07], [1.7271e-07], [1.7127e-07], [1.7196e-07], [64083], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7137090391127322e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826067899, 0.45454, [1.6951e-07], [1.7918e-07], [1.712e-07], [1.7243e-07], [63387], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011200138962724144], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826068123, 0.44649, [0.0011126], [0.0011284], [0.0011169], [0.0011228], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001564925569774849], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826068347, 0.45423, [0.0015561], [0.0016376], [0.0015594], [0.0015771], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001468364556785673], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826068571, 0.46397, [0.0014072], [0.001617], [0.0014192], [0.0015836], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1576712198021866e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826068800, 0.46558, [1.1484e-07], [1.174e-07], [1.151e-07], [1.1664e-07], [93802], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1495541086240623e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826069029, 0.46118, [1.1424e-07], [1.1752e-07], [1.145e-07], [1.1576e-07], [95943], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1488436464614109e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826069262, 0.4621, [1.144e-07], [1.1739e-07], [1.1452e-07], [1.162e-07], [93912], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008525041688699275], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826069491, 0.52309, [0.0084336], [0.0087423], [0.0085032], [0.0085567], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.00862164597492665], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826069751, 0.51974, [0.0084053], [0.0086973], [0.0085043], [0.0086596], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008440478995908052], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826070013, 0.51704, [0.0084085], [0.0086576], [0.0084219], [0.0084791], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018800311566640935], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826070271, 0.46077, [0.001866], [0.001899], [0.0018741], [0.0018847], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011683171744354898], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826070499, 0.45484, [0.001153], [0.0011931], [0.0011573], [0.0011787], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.000382379479041057], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826070729, 0.45186, [0.00037765], [0.00039289], [0.00037786], [0.00038672], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003472835937094304], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826070957, 0.46172, [0.00034487], [0.00035764], [0.00034608], [0.0003488], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5358421349801787e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826071188, 0.47317, [2.5124e-05], [2.5466e-05], [2.5239e-05], [2.546e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018520028894080927], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826071424, 0.45389, [0.00018494], [0.00018594], [0.00018513], [0.00018552], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.358181107138109e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826071650, 0.45497, [4.3456e-05], [4.3979e-05], [4.3482e-05], [4.3758e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032806114458869544], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826071881, 0.4513, [0.00032648], [0.00033732], [0.00032671], [0.00033205], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036379310366665496], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826072106, 0.45257, [0.000356], [0.00036593], [0.00036241], [0.00036438], [29], [10]], "benchmarks.TextSuite.time_render": [[4.701287986956738e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826072331, 0.45969, [4.6677e-06], [4.7686e-06], [4.6879e-06], [4.7065e-06], [2339], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.576443349194574e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826072564, 0.46288, [8.4823e-05], [8.7921e-05], [8.5458e-05], [8.6319e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5302186781754257e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826072794, 0.45015, [3.5178e-05], [3.5911e-05], [3.5227e-05], [3.5398e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027976809437141607], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826073023, 0.45685, [0.00027529], [0.00028442], [0.00027587], [0.0002836], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013672656350536272], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826073250, 0.45796, [0.0013642], [0.0013753], [0.0013654], [0.0013702], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014568005821534566], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826073481, 0.44799, [0.0014541], [0.0014644], [0.0014557], [0.0014601], [7], [10]]}, "durations": {"<build>": 1.8992719650268555}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/4f8908a6-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "4f8908a67ec65423bd76794863c9e860550f46ef", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645959692000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7416062890287695e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825846312, 0.46199, [1.7082e-07], [1.7676e-07], [1.7168e-07], [1.7458e-07], [60646], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7391431070929635e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825846538, 0.46763, [1.7311e-07], [1.7523e-07], [1.7365e-07], [1.7411e-07], [63193], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7287569709010176e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825846773, 0.46839, [1.711e-07], [1.8128e-07], [1.7174e-07], [1.7354e-07], [64392], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7326910442377005e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825847007, 0.4638, [1.6926e-07], [1.7526e-07], [1.7113e-07], [1.746e-07], [63291], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7334697911787821e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825847248, 0.44261, [1.704e-07], [1.7463e-07], [1.7139e-07], [1.7431e-07], [58655], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7444418038528955e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825847469, 0.44001, [1.738e-07], [1.7527e-07], [1.7409e-07], [1.7468e-07], [57910], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011251874966546893], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825847687, 0.44968, [0.0011124], [0.0011384], [0.0011143], [0.0011338], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015630892843806318], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825847909, 0.45428, [0.0015574], [0.0016046], [0.0015606], [0.001565], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001417749997926876], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825848134, 0.46155, [0.0014092], [0.0014633], [0.001413], [0.0014337], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1709722736003802e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825848366, 0.44107, [1.1631e-07], [1.1937e-07], [1.1676e-07], [1.1796e-07], [87348], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1704274691700317e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825848586, 0.45078, [1.1656e-07], [1.1728e-07], [1.1672e-07], [1.1716e-07], [95492], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1690643658432191e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825848810, 0.44683, [1.1471e-07], [1.1815e-07], [1.1574e-07], [1.1761e-07], [95786], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008578302222304046], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825849033, 0.52195, [0.0083702], [0.0086606], [0.0084295], [0.0086283], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008617885410785675], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825849296, 0.52656, [0.0085353], [0.0089539], [0.0085899], [0.0086348], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.00865082279779017], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825849557, 0.52577, [0.0085804], [0.0088238], [0.0086069], [0.0086663], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001896437470956395], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825849822, 0.46536, [0.0018775], [0.0019213], [0.001883], [0.0019103], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011838795487872427], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825850052, 0.45161, [0.0011754], [0.0011907], [0.0011772], [0.0011863], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003815059483583484], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825850282, 0.46363, [0.00037438], [0.0003839], [0.00037971], [0.00038222], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003471928873970624], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825850515, 0.45971, [0.00034458], [0.00035773], [0.00034598], [0.00034785], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5876565451598224e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825850746, 0.4566, [2.5543e-05], [2.6405e-05], [2.5834e-05], [2.5932e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001885492354631424], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825850978, 0.45193, [0.00018744], [0.00019115], [0.00018786], [0.00018901], [55], [10]], "benchmarks.TextSuite.time_fit": [[4.411913283473375e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825851202, 0.45295, [4.3767e-05], [4.4818e-05], [4.3832e-05], [4.4393e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033284072208428575], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825851432, 0.44844, [0.00032788], [0.000347], [0.00032983], [0.0003338], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003637169479745729], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825851655, 0.45332, [0.00036214], [0.00036677], [0.00036259], [0.00036416], [29], [10]], "benchmarks.TextSuite.time_render": [[4.7613084212596186e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825851879, 0.44993, [4.6627e-06], [4.8149e-06], [4.6803e-06], [4.7923e-06], [2336], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.699652786913609e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825852103, 0.46112, [8.5631e-05], [8.7761e-05], [8.5937e-05], [8.7347e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.577839070322369e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825852335, 0.45361, [3.5252e-05], [3.6532e-05], [3.5718e-05], [3.5864e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027904715572826957], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825852567, 0.45447, [0.00027564], [0.00028468], [0.00027664], [0.00028034], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013919843622716144], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825852793, 0.45294, [0.0013864], [0.0013963], [0.0013905], [0.0013937], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014834642809416565], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825853017, 0.44298, [0.0014645], [0.0015154], [0.0014769], [0.0014874], [7], [10]]}, "durations": {"<build>": 1.8206839561462402}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/52d159aa-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "52d159aae04d12ba24ecdc3d8104e6b8068cbf5f", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1628194484000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7076441095809557e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889062105, 0.45687, [1.6953e-07], [1.747e-07], [1.7069e-07], [1.7136e-07], [64502], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7064555489948718e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889062336, 0.45505, [1.6863e-07], [1.7316e-07], [1.6968e-07], [1.7102e-07], [63083], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.705120896465888e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889062562, 0.46088, [1.6851e-07], [1.7082e-07], [1.7019e-07], [1.707e-07], [64969], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7047645417598375e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889062794, 0.45857, [1.6986e-07], [1.7287e-07], [1.7013e-07], [1.7106e-07], [63023], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7068147862518327e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889063021, 0.4584, [1.6894e-07], [1.7204e-07], [1.7036e-07], [1.714e-07], [64454], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7013958743552367e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889063252, 0.4593, [1.6896e-07], [1.7067e-07], [1.699e-07], [1.7038e-07], [64403], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010309312492609024], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889063482, 0.44731, [0.0010268], [0.0010323], [0.0010295], [0.0010318], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014281823096098378], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889063704, 0.46701, [0.0014261], [0.0014438], [0.0014268], [0.0014305], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013042760110693052], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889063932, 0.44005, [0.0012973], [0.0013313], [0.0012997], [0.00131], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1452237407633705e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889064156, 0.45705, [1.1407e-07], [1.1681e-07], [1.1433e-07], [1.149e-07], [96044], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1435975145764373e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889064386, 0.45969, [1.1397e-07], [1.1765e-07], [1.1423e-07], [1.1632e-07], [96209], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1454093868222742e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889064616, 0.45841, [1.1411e-07], [1.1777e-07], [1.1431e-07], [1.1471e-07], [95340], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889058556, 0.063785], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889058620, 0.063202], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889058683, 0.062896], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002167366608045995], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889064845, 0.45219, [0.0021445], [0.0022138], [0.0021546], [0.0021969], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012957760627614334], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889065075, 0.43964, [0.0012915], [0.0013414], [0.0012932], [0.0013028], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003717306410960321], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889065298, 0.44536, [0.00036907], [0.00037513], [0.00036979], [0.00037345], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034561598052581155], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889065519, 0.44422, [0.00034134], [0.00035084], [0.00034225], [0.00034686], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.544142446632302e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889065740, 0.45821, [2.5307e-05], [2.6031e-05], [2.5402e-05], [2.5492e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018546623498972122], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889065969, 0.45284, [0.0001839], [0.00019325], [0.00018498], [0.0001897], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.4114793450967504e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889066195, 0.44962, [4.3435e-05], [4.4876e-05], [4.3655e-05], [4.4256e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003284880023618991], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889066425, 0.45477, [0.00032412], [0.00033768], [0.00032489], [0.000329], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003587888104134593], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889066653, 0.44417, [0.00035425], [0.00036348], [0.00035633], [0.00036023], [29], [10]], "benchmarks.TextSuite.time_render": [[4.69515303112295e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889066872, 0.45058, [4.6723e-06], [4.8668e-06], [4.6774e-06], [4.7389e-06], [2333], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.549193491137797e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889067101, 0.44789, [8.4658e-05], [8.8194e-05], [8.5356e-05], [8.5604e-05], [124], [10]], "benchmarks.TextSuite.time_split": [[3.539211367704458e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889067325, 0.45193, [3.5274e-05], [3.5516e-05], [3.5347e-05], [3.5416e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027675547416468983], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889067556, 0.44854, [0.00027439], [0.0002798], [0.0002749], [0.00027848], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011042895959690211], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889067780, 0.44358, [0.0010975], [0.0011109], [0.0011], [0.0011095], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013762213056907058], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889067999, 0.45501, [0.0013653], [0.0014283], [0.0013679], [0.0013876], [8], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.02734289539512247], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892942669, 0.62365, [0.027277], [0.027619], [0.027321], [0.027467], [1], [10]]}, "durations": {"<build>": 1.825671911239624}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/52d159aa-virtualenv-py3.10.json
================================================
{"commit_hash": "52d159aae04d12ba24ecdc3d8104e6b8068cbf5f", "env_name": "virtualenv-py3.10", "date": 1628194484000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7058945968935357e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928419145, 0.46426, [1.6899e-07], [1.7097e-07], [1.6959e-07], [1.7072e-07], [64325], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7007191055197154e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928419378, 0.46218, [1.6928e-07], [1.7112e-07], [1.6946e-07], [1.7073e-07], [64337], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7047900862400746e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928419608, 0.46293, [1.6988e-07], [1.7222e-07], [1.7034e-07], [1.7087e-07], [64407], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.6987062918839053e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928419840, 0.43796, [1.6901e-07], [1.7506e-07], [1.6945e-07], [1.7083e-07], [59256], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.700489583745791e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928420060, 0.46321, [1.6869e-07], [1.7124e-07], [1.6888e-07], [1.7072e-07], [64749], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6975048857829784e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928420292, 0.45536, [1.6863e-07], [1.7169e-07], [1.6948e-07], [1.7053e-07], [64983], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001030508300755173], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928420524, 0.45054, [0.0010281], [0.0010381], [0.0010294], [0.0010319], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014259791878430406], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928420748, 0.46115, [0.0014206], [0.001435], [0.0014241], [0.0014291], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013004270640522009], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928420976, 0.44145, [0.0012931], [0.0013095], [0.0012971], [0.0013017], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.151534361549962e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928421200, 0.45048, [1.1363e-07], [1.1659e-07], [1.1394e-07], [1.1649e-07], [95323], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1456751691900413e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928421430, 0.45451, [1.143e-07], [1.1497e-07], [1.1441e-07], [1.1481e-07], [96146], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.142799556713515e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928421661, 0.46019, [1.1399e-07], [1.1495e-07], [1.1419e-07], [1.144e-07], [95658], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928415565, 0.064836], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928415630, 0.064728], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928415695, 0.064479], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021430041990242897], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928421892, 0.45143, [0.0021284], [0.0021562], [0.0021387], [0.0021471], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012858229365519946], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928422121, 0.43998, [0.001278], [0.0013006], [0.0012844], [0.001293], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037878200029289085], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928422344, 0.45186, [0.0003762], [0.00038154], [0.00037638], [0.00038124], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003415954359356434], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928422568, 0.45219, [0.00033984], [0.00035252], [0.00034056], [0.00034234], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5294476755905552e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928422793, 0.45996, [2.526e-05], [2.5386e-05], [2.527e-05], [2.5346e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001844626466005013], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928423023, 0.45289, [0.00018314], [0.00018489], [0.00018439], [0.00018469], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.342586236396948e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928423249, 0.44655, [4.3288e-05], [4.3714e-05], [4.332e-05], [4.3553e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032384783315302974], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928423476, 0.45419, [0.000323], [0.00032504], [0.00032364], [0.0003245], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003554540172476193], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928423702, 0.44371, [0.00035482], [0.00035661], [0.00035531], [0.00035573], [29], [10]], "benchmarks.TextSuite.time_render": [[4.65925170721221e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928423922, 0.4521, [4.6509e-06], [4.672e-06], [4.6565e-06], [4.667e-06], [2346], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.579609456369433e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928424152, 0.47335, [8.4585e-05], [8.6328e-05], [8.5135e-05], [8.5863e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.51094919114455e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928424380, 0.4494, [3.5084e-05], [3.5232e-05], [3.5094e-05], [3.5152e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002745021839999888], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928424610, 0.44526, [0.0002739], [0.00027532], [0.00027419], [0.00027463], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001095737499417737], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928424832, 0.45514, [0.0010923], [0.0011003], [0.0010928], [0.0010983], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013680338106496492], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928425063, 0.45511, [0.0013634], [0.0013953], [0.0013668], [0.0013697], [8], [10]]}, "durations": {"<build>": 1.9940869808197021}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/53cda574-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "53cda574906f2470816d87b50e4038bf1d6c5f9b", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1655821527000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7425968589183442e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825562547, 0.4712, [1.7069e-07], [1.772e-07], [1.7142e-07], [1.7483e-07], [63548], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7200388878121761e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825562785, 0.46857, [1.6954e-07], [1.7872e-07], [1.7128e-07], [1.7266e-07], [64293], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7134762202760535e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825563019, 0.46656, [1.694e-07], [1.7431e-07], [1.7126e-07], [1.7157e-07], [63818], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7121909061705514e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825563252, 0.45102, [1.7034e-07], [1.7231e-07], [1.7063e-07], [1.7192e-07], [64462], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.713688477751459e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825563475, 0.46213, [1.7079e-07], [1.7204e-07], [1.71e-07], [1.7166e-07], [63335], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7193214318697752e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825563706, 0.46633, [1.7052e-07], [1.7951e-07], [1.7136e-07], [1.7282e-07], [63258], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010767416446469725], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825563937, 0.45708, [0.00107], [0.0011231], [0.0010752], [0.0010905], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015319851393412265], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825564162, 0.45737, [0.0015262], [0.0015872], [0.0015284], [0.0015354], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0012046897835615608], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825564394, 0.44767, [0.0012012], [0.0012554], [0.0012042], [0.0012127], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1503854811874891e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825564618, 0.4379, [1.145e-07], [1.1827e-07], [1.1479e-07], [1.1539e-07], [87619], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.148437675692411e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825564836, 0.46413, [1.1436e-07], [1.158e-07], [1.1468e-07], [1.1528e-07], [95192], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1464144959878894e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825565069, 0.45642, [1.1428e-07], [1.1516e-07], [1.1436e-07], [1.1478e-07], [92842], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007264551997650415], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825565296, 0.50171, [0.0072338], [0.0074553], [0.0072362], [0.0072935], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007270614441949874], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825565546, 0.50399, [0.0072278], [0.0074446], [0.0072566], [0.0073137], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007369625032879412], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825565800, 0.50464, [0.0072791], [0.007575], [0.0073564], [0.0074701], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017741700867190957], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825566052, 0.45458, [0.0017674], [0.0017861], [0.0017728], [0.0017783], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011001541977748274], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825566282, 0.44987, [0.0010917], [0.0011047], [0.0010956], [0.0011024], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003939505959688513], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825566507, 0.45816, [0.00038898], [0.00040377], [0.00039244], [0.00039557], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0009230868308804929], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825566735, 0.46308, [0.00090786], [0.00093943], [0.00091159], [0.00093256], [12], [10]], "benchmarks.TextSuite.time_divide": [[2.575966489250557e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825566969, 0.46142, [2.5608e-05], [2.6152e-05], [2.5685e-05], [2.5979e-05], [416], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00019376636607505916], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825567199, 0.46611, [0.00019229], [0.00019875], [0.0001934], [0.00019511], [56], [10]], "benchmarks.TextSuite.time_fit": [[4.467660479372266e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825567431, 0.45042, [4.4609e-05], [4.5425e-05], [4.4648e-05], [4.4719e-05], [239], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.000344913967344309], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825567660, 0.45642, [0.00034254], [0.00034833], [0.00034458], [0.00034625], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0004846638132056052], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825567888, 0.45441, [0.00047608], [0.00049397], [0.00047921], [0.00048739], [22], [10]], "benchmarks.TextSuite.time_render": [[4.735607883040804e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825568119, 0.45482, [4.7085e-06], [4.7979e-06], [4.7261e-06], [4.7688e-06], [2235], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[9.053736378646587e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825568348, 0.46377, [8.922e-05], [9.1971e-05], [8.9941e-05], [9.0734e-05], [121], [10]], "benchmarks.TextSuite.time_split": [[3.6081285444928e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825568580, 0.46739, [3.5578e-05], [3.7086e-05], [3.5827e-05], [3.6314e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028678507691151217], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825568813, 0.45538, [0.00028144], [0.00030208], [0.00028445], [0.00028971], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001132669004922112], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825569045, 0.44964, [0.0011242], [0.0011545], [0.001127], [0.0011395], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013965052494313568], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825569266, 0.45364, [0.0013885], [0.0014049], [0.0013917], [0.0013995], [8], [10]]}, "durations": {}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/53d9eeaf-virtualenv-py3.10.json
================================================
{"commit_hash": "53d9eeafe01e293a1eb5d9bc65b5a611b46dad53", "env_name": "virtualenv-py3.10", "date": 1638033096000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7049279486400416e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929440364, 0.46631, [1.6952e-07], [1.7084e-07], [1.7022e-07], [1.7068e-07], [64469], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7017859373834976e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929440596, 0.46317, [1.6913e-07], [1.7077e-07], [1.6972e-07], [1.7037e-07], [64364], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7037698439109146e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929440827, 0.46392, [1.6957e-07], [1.7122e-07], [1.6996e-07], [1.7081e-07], [64443], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7020052975934573e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929441060, 0.46301, [1.6894e-07], [1.7106e-07], [1.6975e-07], [1.7051e-07], [63988], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7120931499167352e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929441292, 0.46571, [1.697e-07], [1.8041e-07], [1.7066e-07], [1.7236e-07], [63789], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.70363939930509e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929441525, 0.43888, [1.6949e-07], [1.71e-07], [1.6996e-07], [1.7092e-07], [59154], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011072729001170957], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929441745, 0.45553, [0.0011021], [0.0011113], [0.0011049], [0.001109], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015153422843598363], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929441971, 0.45177, [0.0015073], [0.0015185], [0.0015136], [0.0015181], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014005104385432787], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929442200, 0.45317, [0.0013962], [0.001413], [0.0013972], [0.0014056], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.141952810339963e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929442426, 0.46354, [1.1367e-07], [1.1457e-07], [1.1397e-07], [1.1432e-07], [96100], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1403247722285144e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929442658, 0.46318, [1.1374e-07], [1.1458e-07], [1.1399e-07], [1.1427e-07], [95929], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.144795280331981e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929442889, 0.46421, [1.1427e-07], [1.1652e-07], [1.1436e-07], [1.1471e-07], [95936], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929436790, 0.065786], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929436856, 0.065362], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929436922, 0.065903], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002355558300041594], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929443123, 0.46045, [0.0023391], [0.0023658], [0.0023506], [0.0023593], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014035625008546049], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929443357, 0.45078, [0.0013955], [0.0014249], [0.0014003], [0.0014093], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037317783945971835], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929443584, 0.44929, [0.00036973], [0.00037654], [0.00037024], [0.00037593], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034051880638505665], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929443809, 0.45408, [0.00033991], [0.00034984], [0.00034031], [0.00034095], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.544216744663229e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929444035, 0.45751, [2.5366e-05], [2.5573e-05], [2.5389e-05], [2.5473e-05], [424], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001841946811102138], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929444262, 0.45511, [0.00018351], [0.00018492], [0.00018408], [0.00018442], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.366394494688709e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929444489, 0.44753, [4.3524e-05], [4.388e-05], [4.359e-05], [4.3755e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003245524191785784], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929444716, 0.43766, [0.00032402], [0.00032512], [0.00032441], [0.00032487], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003566702592973437], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929444934, 0.44644, [0.00035582], [0.00035851], [0.00035621], [0.00035695], [29], [10]], "benchmarks.TextSuite.time_render": [[4.666720238173253e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929445157, 0.45206, [4.6589e-06], [4.6915e-06], [4.6618e-06], [4.6727e-06], [2327], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.53927383559494e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929445386, 0.45948, [8.4661e-05], [8.5832e-05], [8.515e-05], [8.5439e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.512439156564489e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929445617, 0.45113, [3.5094e-05], [3.5178e-05], [3.511e-05], [3.5149e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027426918409458414], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929445847, 0.44924, [0.00027335], [0.00027611], [0.00027389], [0.00027463], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001357997374725528], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929446071, 0.4553, [0.0013519], [0.0013647], [0.0013535], [0.0013604], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014475237860876533], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929446302, 0.44455, [0.0014457], [0.0014561], [0.001446], [0.0014493], [7], [10]]}, "durations": {"<build>": 1.9948718547821045}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/550d3911-virtualenv-py3.10.json
================================================
{"commit_hash": "550d391171934874ec85ef7bcad2292d8728c1ce", "env_name": "virtualenv-py3.10", "date": 1632474176000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7012055225441422e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928173768, 0.45874, [1.6935e-07], [1.7183e-07], [1.6987e-07], [1.7106e-07], [64752], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.6988035409443387e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928174000, 0.46387, [1.6862e-07], [1.7053e-07], [1.6945e-07], [1.7023e-07], [64386], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7065502321372411e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928174231, 0.46129, [1.6914e-07], [1.7181e-07], [1.6991e-07], [1.7126e-07], [64542], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7065929182325723e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928174465, 0.44014, [1.697e-07], [1.7205e-07], [1.7036e-07], [1.7127e-07], [58848], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.6986830260259836e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928174682, 0.46129, [1.6949e-07], [1.7137e-07], [1.6968e-07], [1.7093e-07], [63737], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7017289076060707e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928174913, 0.4629, [1.6913e-07], [1.7065e-07], [1.6973e-07], [1.7043e-07], [64237], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001029439600824844], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928175144, 0.45227, [0.0010276], [0.0010308], [0.0010281], [0.0010306], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014290178556361102], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928175369, 0.44384, [0.0014206], [0.001443], [0.0014248], [0.0014332], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013021406248299172], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928175589, 0.44269, [0.0012989], [0.0013057], [0.0013009], [0.0013048], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1429133220318334e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928175814, 0.46182, [1.1391e-07], [1.1468e-07], [1.1422e-07], [1.144e-07], [96462], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1416457898368397e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928176047, 0.46146, [1.1384e-07], [1.1438e-07], [1.1407e-07], [1.1428e-07], [95720], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1422249136281769e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928176278, 0.45943, [1.1376e-07], [1.1534e-07], [1.1416e-07], [1.1494e-07], [95579], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928170194, 0.065791], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928170260, 0.065146], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928170325, 0.065913], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021364042011555286], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928176509, 0.45155, [0.0021183], [0.0021539], [0.0021295], [0.002141], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012852187519456493], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928176738, 0.45139, [0.0012792], [0.001293], [0.0012816], [0.0012885], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003731508617859398], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928176963, 0.46094, [0.00036765], [0.00037918], [0.00036812], [0.00037813], [29], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034339046772314055], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928177194, 0.4551, [0.00034029], [0.00034594], [0.00034061], [0.0003452], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5356557394434596e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928177421, 0.45924, [2.5314e-05], [2.5461e-05], [2.5326e-05], [2.5394e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018453017250506272], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928177650, 0.4541, [0.00018338], [0.0001853], [0.00018441], [0.00018497], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3428305671776565e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928177877, 0.44844, [4.3361e-05], [4.3578e-05], [4.3405e-05], [4.3483e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032479299989063293], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928178105, 0.43769, [0.00032381], [0.00032571], [0.00032464], [0.00032488], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003564590512943486], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928178323, 0.44647, [0.00035473], [0.00035763], [0.00035506], [0.00035739], [29], [10]], "benchmarks.TextSuite.time_render": [[4.6801607524370915e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928178544, 0.45326, [4.6746e-06], [4.6882e-06], [4.677e-06], [4.6839e-06], [2339], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.483691408400773e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928178775, 0.4581, [8.4367e-05], [8.5389e-05], [8.4512e-05], [8.5327e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.525615579451664e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928179006, 0.45066, [3.5121e-05], [3.5416e-05], [3.5163e-05], [3.5352e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027402082885505245], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928179236, 0.44612, [0.00027276], [0.0002755], [0.00027325], [0.00027431], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010991021001245827], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928179458, 0.44497, [0.0010967], [0.0011016], [0.0010983], [0.0011004], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013653568112204084], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928179680, 0.45591, [0.0013635], [0.0013674], [0.0013648], [0.0013661], [8], [10]]}, "durations": {"<build>": 1.9889721870422363}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/55e11902-virtualenv-py3.10.json
================================================
{"commit_hash": "55e11902ab7d1c959122baaee4f98966fd30209f", "env_name": "virtualenv-py3.10", "date": 1637873229000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7009309752207926e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929454849, 0.46725, [1.6942e-07], [1.7118e-07], [1.699e-07], [1.7076e-07], [64529], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7049500323739197e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929455082, 0.46614, [1.6944e-07], [1.7237e-07], [1.7005e-07], [1.7157e-07], [64644], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.70109690025565e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929455316, 0.46141, [1.6911e-07], [1.7078e-07], [1.6966e-07], [1.7031e-07], [63032], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.6999118625141967e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929455544, 0.46294, [1.6911e-07], [1.7219e-07], [1.6988e-07], [1.7079e-07], [64389], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7029554885531188e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929455776, 0.43871, [1.6953e-07], [1.7053e-07], [1.6994e-07], [1.7038e-07], [59178], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.700329927267081e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929455995, 0.46798, [1.6886e-07], [1.712e-07], [1.6983e-07], [1.7066e-07], [64499], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011053270995034837], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929456229, 0.45552, [0.0011022], [0.0011108], [0.001105], [0.0011066], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001516476142569445], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929456454, 0.45336, [0.0015102], [0.0015254], [0.0015136], [0.0015206], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014032265626156004], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929456683, 0.4518, [0.0013989], [0.0014156], [0.0014013], [0.0014054], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1443972510031082e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929456911, 0.44705, [1.1404e-07], [1.1613e-07], [1.1435e-07], [1.1463e-07], [87549], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.145170262736998e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929457140, 0.46136, [1.1389e-07], [1.1622e-07], [1.1412e-07], [1.1476e-07], [95206], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1427112499677163e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929457370, 0.45761, [1.1383e-07], [1.1437e-07], [1.142e-07], [1.1434e-07], [96356], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929451267, 0.066028], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929451333, 0.065509], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929451398, 0.065771], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002346887398744002], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929457602, 0.45872, [0.0023343], [0.0023599], [0.0023437], [0.0023479], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014088047500990797], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929457836, 0.46049, [0.0014024], [0.001418], [0.0014048], [0.0014129], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003711837858385739], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929458064, 0.4483, [0.0003703], [0.00037339], [0.00037082], [0.00037233], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003421592902609958], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929458287, 0.45459, [0.00034108], [0.0003524], [0.00034149], [0.0003424], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5493055157103258e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929458514, 0.44971, [2.546e-05], [2.5587e-05], [2.5477e-05], [2.5517e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001844300847042794], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929458743, 0.46116, [0.00018405], [0.00018572], [0.00018436], [0.00018474], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.342130773233227e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929458973, 0.44822, [4.3317e-05], [4.359e-05], [4.3382e-05], [4.3503e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003239267878763547], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929459201, 0.45607, [0.0003227], [0.00032701], [0.00032375], [0.00032407], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.000356247827735858], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929459429, 0.44639, [0.00035549], [0.00035792], [0.0003556], [0.00035649], [29], [10]], "benchmarks.TextSuite.time_render": [[4.677279566679207e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929459651, 0.45303, [4.6528e-06], [4.6861e-06], [4.6622e-06], [4.6829e-06], [2334], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.52260782266967e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929459881, 0.45707, [8.4416e-05], [8.5401e-05], [8.5089e-05], [8.526e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.524391967268874e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929460110, 0.4482, [3.5221e-05], [3.5331e-05], [3.523e-05], [3.527e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002741030789605391], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929460338, 0.44744, [0.00027327], [0.00027529], [0.00027397], [0.00027455], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013605468757305061], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929460561, 0.45554, [0.001354], [0.0013646], [0.0013558], [0.0013632], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001452008929585905], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929460793, 0.44547, [0.0014487], [0.0014565], [0.0014494], [0.0014536], [7], [10]]}, "durations": {"<build>": 1.9884757995605469}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/573125e9-virtualenv-py3.10.json
================================================
{"commit_hash": "573125e9b4eaa4b25bb1a911cf61e365b266afba", "env_name": "virtualenv-py3.10", "date": 1606842626000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7035735748782961e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929132730, 0.4547, [1.6957e-07], [1.7111e-07], [1.7008e-07], [1.704e-07], [63922], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7011813100056663e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929132957, 0.45508, [1.6938e-07], [1.7093e-07], [1.6986e-07], [1.7054e-07], [64894], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.705091724398945e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929133187, 0.45669, [1.6911e-07], [1.7386e-07], [1.6977e-07], [1.707e-07], [64216], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7003631710159307e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929133415, 0.45401, [1.6895e-07], [1.7064e-07], [1.6969e-07], [1.705e-07], [63675], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7076965539820025e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929133642, 0.45636, [1.6952e-07], [1.7719e-07], [1.703e-07], [1.731e-07], [64054], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.704083834704045e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929133869, 0.45792, [1.6976e-07], [1.7225e-07], [1.6984e-07], [1.7067e-07], [64175], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010274875501636415], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929134097, 0.44408, [0.0010233], [0.0010341], [0.0010239], [0.0010304], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014428512118424156], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929134318, 0.43837, [0.0014369], [0.0014536], [0.0014413], [0.0014458], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014141536248644115], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929134536, 0.44569, [0.0014093], [0.0014188], [0.0014126], [0.0014145], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1413853433200745e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929134760, 0.45277, [1.1396e-07], [1.161e-07], [1.1402e-07], [1.1467e-07], [96135], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.14545181153452e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929134987, 0.45326, [1.1433e-07], [1.1619e-07], [1.1443e-07], [1.1497e-07], [94741], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1431372140374344e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929135215, 0.45566, [1.1376e-07], [1.1534e-07], [1.1389e-07], [1.151e-07], [95894], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929129197, 0.062502], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929129260, 0.061635], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929129321, 0.061735], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002750234376435401], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929135444, 0.44358, [0.0027407], [0.0027546], [0.002747], [0.0027524], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0018561249986911812], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929135663, 0.44993, [0.001845], [0.0018771], [0.0018483], [0.0018688], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006638372187808272], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929135885, 0.43884, [0.00065885], [0.00066748], [0.00066337], [0.00066538], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005474407892171783], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929136107, 0.44273, [0.00054382], [0.00055731], [0.00054666], [0.00055638], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8176863155462533e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929136326, 0.449, [2.7763e-05], [2.8728e-05], [2.7805e-05], [2.8691e-05], [380], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.000187044956347611], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929136552, 0.44621, [0.00018575], [0.00018908], [0.00018607], [0.00018782], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.226137247155476e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929136775, 0.44798, [4.2102e-05], [4.2582e-05], [4.2197e-05], [4.2289e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003306175964216011], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929136998, 0.43596, [0.00032933], [0.0003318], [0.00033006], [0.00033124], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00039414744242094457], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929137215, 0.43587, [0.00039226], [0.00039631], [0.0003928], [0.00039555], [26], [10]], "benchmarks.TextSuite.time_render": [[4.667174434155948e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929137432, 0.44509, [4.646e-06], [4.6776e-06], [4.6581e-06], [4.6707e-06], [2339], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.516194520780118e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929137659, 0.45219, [8.4795e-05], [8.6022e-05], [8.5094e-05], [8.5459e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.374592788765231e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929137887, 0.44454, [3.3683e-05], [3.3824e-05], [3.3728e-05], [3.378e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002786886348936556], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929138108, 0.44962, [0.00027786], [0.00027951], [0.0002781], [0.00027909], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001147025499247118], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929138326, 0.44111, [0.0011434], [0.0011533], [0.0011447], [0.001149], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015302321428732413], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929138544, 0.44527, [0.0015265], [0.0015332], [0.0015278], [0.0015325], [7], [10]]}, "durations": {"<build>": 1.9958610534667969}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/579a29c8-virtualenv-py3.10.json
================================================
{"commit_hash": "579a29c82081aa74437d9e2483ac9862c048415d", "env_name": "virtualenv-py3.10", "date": 1595868101000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.736474545074484e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928778555, 0.4267, [1.7119e-07], [1.739e-07], [1.7241e-07], [1.7377e-07], [58852], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7340327364317818e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928778767, 0.42826, [1.7185e-07], [1.7397e-07], [1.7259e-07], [1.7373e-07], [59074], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7354063503795828e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928778980, 0.42553, [1.7303e-07], [1.7386e-07], [1.7329e-07], [1.7369e-07], [58533], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7178092996091828e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928779192, 0.4321, [1.692e-07], [1.739e-07], [1.699e-07], [1.7342e-07], [58358], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7230198439390232e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928779410, 0.44067, [1.6987e-07], [1.8203e-07], [1.7041e-07], [1.7417e-07], [64308], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7332703953086618e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928779633, 0.42248, [1.7291e-07], [1.742e-07], [1.7313e-07], [1.7415e-07], [57889], [10]], "benchmarks.PrettySuite.time_pretty": [[0.002227433299412951], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928779844, 0.43937, [0.0021946], [0.0022601], [0.0021961], [0.0022555], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928774498, 0.059132], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928774557, 0.059068], "benchmarks.StyleSuite.time_parse_ansi": [[1.1624317894753063e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928780062, 0.44065, [1.1579e-07], [1.1657e-07], [1.1603e-07], [1.1633e-07], [96244], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.150645199851889e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928780278, 0.44023, [1.1359e-07], [1.1631e-07], [1.1389e-07], [1.1608e-07], [96311], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1509978583019232e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928780495, 0.44997, [1.1455e-07], [1.1655e-07], [1.1477e-07], [1.1623e-07], [95745], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928775289, 0.058777], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928775348, 0.058742], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928775407, 0.058794], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002142004200140946], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928780721, 0.44142, [0.0021327], [0.0021544], [0.00214], [0.0021438], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014956279275273637], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928780944, 0.43438, [0.0014902], [0.0015024], [0.001493], [0.0014975], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.000673062500815528], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928781165, 0.43958, [0.00067142], [0.00068082], [0.00067214], [0.00067439], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005573969208757933], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928781386, 0.43169, [0.00055353], [0.00055903], [0.00055649], [0.00055757], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8313752580726644e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928781606, 0.43606, [2.8265e-05], [2.8377e-05], [2.8291e-05], [2.8348e-05], [382], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001889353068116562], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928781829, 0.44303, [0.00018718], [0.00019134], [0.00018733], [0.00019102], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.287974996259436e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928782052, 0.43385, [4.276e-05], [4.301e-05], [4.2847e-05], [4.2901e-05], [250], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003364569838008573], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928782272, 0.4345, [0.00033568], [0.00033702], [0.00033619], [0.00033679], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928777196, 0.059081], "benchmarks.TextSuite.time_render": [[4.732899489164659e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928782488, 0.44164, [4.6523e-06], [4.8086e-06], [4.668e-06], [4.7919e-06], [2333], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.669725398898924e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928782715, 0.44273, [8.616e-05], [8.6896e-05], [8.6663e-05], [8.675e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.4393229165848774e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928782938, 0.44396, [3.4276e-05], [3.5123e-05], [3.4315e-05], [3.4461e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028335472971603677], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928783160, 0.44001, [0.0002798], [0.00028579], [0.00028012], [0.00028498], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011618008882376468], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928783384, 0.42902, [0.0011601], [0.001167], [0.0011605], [0.0011627], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015376249981012993], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928783601, 0.43825, [0.0015175], [0.0015529], [0.0015184], [0.0015505], [7], [10]]}, "durations": {"<build>": 1.9670758247375488}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/588f0331-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "588f0331ffa6fee4976b5c33a6dc42f047d5cf85", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644752406000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.706340967710973e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826161597, 0.44032, [1.7e-07], [1.7231e-07], [1.7052e-07], [1.7188e-07], [58849], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7075151087194613e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826161817, 0.46953, [1.6885e-07], [1.7176e-07], [1.7018e-07], [1.7089e-07], [64981], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.745834309246403e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826162051, 0.45684, [1.7381e-07], [1.7518e-07], [1.7453e-07], [1.7483e-07], [63765], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7030063803001146e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826162284, 0.45468, [1.685e-07], [1.7061e-07], [1.697e-07], [1.7051e-07], [64100], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.699143821464623e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826162516, 0.46364, [1.6941e-07], [1.7107e-07], [1.6957e-07], [1.7082e-07], [64263], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7143095860138926e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826162747, 0.45349, [1.6875e-07], [1.7446e-07], [1.7022e-07], [1.734e-07], [64289], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011177152110677627], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826162978, 0.44343, [0.0011144], [0.0011243], [0.001115], [0.0011198], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015673005753862007], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826163199, 0.44961, [0.0015548], [0.0015905], [0.0015605], [0.0015814], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001416468687239103], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826163420, 0.45529, [0.0014037], [0.0014498], [0.0014087], [0.0014271], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1492579527608297e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826163648, 0.46571, [1.1445e-07], [1.157e-07], [1.1467e-07], [1.153e-07], [95175], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1477643127643456e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826163879, 0.46177, [1.1377e-07], [1.1522e-07], [1.1424e-07], [1.1491e-07], [95751], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1538483279764903e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826164110, 0.48411, [1.1423e-07], [1.1702e-07], [1.1464e-07], [1.1613e-07], [96135], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.00843319803243503], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826164344, 0.51384, [0.0083597], [0.0086656], [0.0083916], [0.0085334], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008487468992825598], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826164600, 0.51665, [0.0084212], [0.0085374], [0.0084537], [0.0085106], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008444958250038326], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826164859, 0.51409, [0.0083782], [0.0085544], [0.0084233], [0.0084985], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018788890059416494], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826165116, 0.4492, [0.0018695], [0.0019035], [0.0018744], [0.0018797], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011600625002756715], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826165342, 0.44759, [0.0011533], [0.0012109], [0.001155], [0.0011754], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037530951833884634], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826165568, 0.45694, [0.00037022], [0.00038011], [0.00037108], [0.00037895], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003513198856624865], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826165795, 0.44986, [0.00034033], [0.0003579], [0.00034318], [0.00035449], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5403638356998738e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826166022, 0.45771, [2.5309e-05], [2.5762e-05], [2.533e-05], [2.5444e-05], [419], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018521576878681247], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826166250, 0.45158, [0.00018422], [0.00018873], [0.00018487], [0.00018606], [56], [10]], "benchmarks.TextSuite.time_fit": [[4.369386687354229e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826166472, 0.44772, [4.3507e-05], [4.4594e-05], [4.3624e-05], [4.3935e-05], [229], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003273087116240552], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826166689, 0.46343, [0.00032468], [0.00032976], [0.00032519], [0.00032813], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003586824830814168], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826166919, 0.45629, [0.00035577], [0.00036208], [0.00035799], [0.00035964], [29], [10]], "benchmarks.TextSuite.time_render": [[4.677615773799041e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826167149, 0.46113, [4.6526e-06], [4.7187e-06], [4.6637e-06], [4.6865e-06], [2348], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.571145260398548e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826167384, 0.45848, [8.4982e-05], [8.5796e-05], [8.5638e-05], [8.5764e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.525744156016932e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826167615, 0.45368, [3.5128e-05], [3.5621e-05], [3.5188e-05], [3.5292e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.000276669391161321], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826167844, 0.45233, [0.00027437], [0.00028055], [0.00027457], [0.00027933], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013735052343690768], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826168070, 0.4644, [0.0013614], [0.0014333], [0.0013643], [0.0014119], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014771667275843875], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826168303, 0.45466, [0.0014486], [0.001516], [0.0014582], [0.0015008], [7], [10]]}, "durations": {"<build>": 1.956470012664795}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/58bfa48f-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "58bfa48f98e30bb3afd1d3126d23177092bc6ca3", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1653296248000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7342157939003018e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889261859, 0.45752, [1.7032e-07], [1.7686e-07], [1.7069e-07], [1.7564e-07], [63861], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.73854090949607e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889262092, 0.44253, [1.7337e-07], [1.7439e-07], [1.7355e-07], [1.7401e-07], [58560], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7338848705140305e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889262312, 0.45778, [1.6991e-07], [1.7461e-07], [1.7294e-07], [1.7376e-07], [64665], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7446167454812735e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889262545, 0.47083, [1.7352e-07], [1.7609e-07], [1.7403e-07], [1.7527e-07], [64189], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.74488233617892e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889262780, 0.46054, [1.7404e-07], [1.7594e-07], [1.7418e-07], [1.7474e-07], [62088], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7437420178601093e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889263009, 0.46031, [1.7192e-07], [1.7564e-07], [1.7373e-07], [1.745e-07], [62593], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010771978879347442], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889263241, 0.45255, [0.0010714], [0.0010819], [0.0010742], [0.0010797], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014861904949481997], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889263473, 0.4498, [0.0014815], [0.0015173], [0.0014838], [0.0014922], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001183898175238735], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889263701, 0.4523, [0.0011797], [0.0011886], [0.0011818], [0.0011851], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.167957192451943e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889263932, 0.43947, [1.164e-07], [1.1772e-07], [1.1671e-07], [1.175e-07], [87754], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1601590930000292e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889264152, 0.43903, [1.1398e-07], [1.1841e-07], [1.1495e-07], [1.1639e-07], [87495], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1418641043137114e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889264371, 0.46425, [1.1404e-07], [1.1536e-07], [1.1415e-07], [1.1446e-07], [95894], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007743781199678779], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889264604, 0.50379, [0.0076001], [0.0077915], [0.0077195], [0.0077597], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.0076522810268215835], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889264863, 0.51726, [0.007539], [0.0077767], [0.0075902], [0.0077432], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007704156043473631], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889265119, 0.51667, [0.0075377], [0.0078101], [0.007598], [0.0077404], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017654409166425467], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889265380, 0.45065, [0.0017519], [0.0017799], [0.0017611], [0.0017754], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001073685451410711], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889265607, 0.44234, [0.0010692], [0.0010796], [0.0010721], [0.0010787], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00039311883005279085], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889265828, 0.44493, [0.00038849], [0.00039579], [0.00039044], [0.00039493], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003451895149004075], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889266052, 0.45587, [0.00034115], [0.00035883], [0.00034144], [0.00035061], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.589355711769888e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889266282, 0.44811, [2.5343e-05], [2.6053e-05], [2.5772e-05], [2.599e-05], [421], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001882288162991152], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889266510, 0.45647, [0.00018754], [0.00019069], [0.00018768], [0.00018859], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.404082106865518e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889266743, 0.451, [4.3407e-05], [4.4686e-05], [4.3514e-05], [4.4429e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033420095625784124], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889266971, 0.45287, [0.00033088], [0.00033635], [0.00033179], [0.00033473], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003637413791348708], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889267197, 0.45578, [0.00036133], [0.00038546], [0.00036241], [0.00036618], [29], [10]], "benchmarks.TextSuite.time_render": [[4.657523101593694e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889267424, 0.45781, [4.6467e-06], [4.6855e-06], [4.6483e-06], [4.6698e-06], [2340], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.651509415358305e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889267657, 0.46113, [8.526e-05], [8.7464e-05], [8.5999e-05], [8.7084e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5955513391041326e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889267890, 0.4517, [3.5815e-05], [3.6086e-05], [3.589e-05], [3.5997e-05], [303], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002821981906890869], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889268121, 0.45054, [0.00027929], [0.00028559], [0.0002801], [0.00028443], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011135625070892276], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889268346, 0.45638, [0.0010959], [0.0011363], [0.0010977], [0.0011302], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001364481751807034], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889268572, 0.44837, [0.0013517], [0.0013846], [0.0013561], [0.0013746], [8], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.02687050006352365], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892974941, 0.62648, [0.02675], [0.027657], [0.026822], [0.026948], [1], [10]]}, "durations": {"<build>": 1.8460087776184082}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/5f021978-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "5f0219786bbaf994061011df087602d5edff5d66", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1641724467000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7125026928073025e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889105449, 0.45966, [1.6964e-07], [1.72e-07], [1.7068e-07], [1.7142e-07], [62701], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7061801629513323e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889105677, 0.45594, [1.6883e-07], [1.7128e-07], [1.7035e-07], [1.7098e-07], [62505], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7063520495892483e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889105904, 0.45496, [1.6969e-07], [1.7353e-07], [1.7007e-07], [1.709e-07], [62838], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7040363257491073e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889106132, 0.45717, [1.6889e-07], [1.76e-07], [1.7013e-07], [1.7193e-07], [64212], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7070551456647727e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889106365, 0.45274, [1.6808e-07], [1.7422e-07], [1.7042e-07], [1.7113e-07], [64246], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7032055980746393e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889106596, 0.46414, [1.6854e-07], [1.7208e-07], [1.6986e-07], [1.7098e-07], [64754], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011161229573190211], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889106829, 0.45747, [0.0011084], [0.0011727], [0.0011095], [0.0011403], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001558681484311819], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889107055, 0.4496, [0.0015505], [0.0016003], [0.0015532], [0.0015794], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014088776224525645], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889107278, 0.45705, [0.0014025], [0.0014452], [0.0014079], [0.001413], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.146043771530965e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889107506, 0.46346, [1.1391e-07], [1.1508e-07], [1.1418e-07], [1.1494e-07], [95543], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1518361826406187e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889107738, 0.44301, [1.1399e-07], [1.1658e-07], [1.1442e-07], [1.1563e-07], [86626], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1432747179804533e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889107963, 0.463, [1.1404e-07], [1.1456e-07], [1.1423e-07], [1.1439e-07], [96283], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008417094009928405], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889108197, 0.51559, [0.0083619], [0.0085092], [0.0083935], [0.0084234], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008446156047284603], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889108455, 0.5172, [0.008397], [0.0084707], [0.0084183], [0.0084571], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008400958497077227], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889108713, 0.51204, [0.0083496], [0.008468], [0.0083965], [0.008425], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002416920801624656], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889108970, 0.4666, [0.0024037], [0.0024234], [0.0024148], [0.0024188], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014359910772847278], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889109197, 0.44559, [0.0014297], [0.001447], [0.0014322], [0.0014402], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038448457295695937], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889109418, 0.44744, [0.00037524], [0.0003924], [0.00037714], [0.00038642], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003410067236531646], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889109638, 0.45528, [0.00033953], [0.00035125], [0.00033999], [0.00034418], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5539383528827926e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889109866, 0.46349, [2.5294e-05], [2.6374e-05], [2.5378e-05], [2.5896e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018462535507720093], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889110098, 0.45875, [0.00018406], [0.00019066], [0.00018434], [0.00018503], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.359230879936519e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889110328, 0.44847, [4.3318e-05], [4.5098e-05], [4.3498e-05], [4.3696e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003284772709858688], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889110555, 0.45946, [0.00032442], [0.0003297], [0.00032788], [0.00032948], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035900360471087284], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889110784, 0.45, [0.00035355], [0.00036332], [0.00035598], [0.00035995], [29], [10]], "benchmarks.TextSuite.time_render": [[4.6927726525586365e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889111009, 0.45673, [4.6475e-06], [4.7399e-06], [4.6567e-06], [4.7037e-06], [2347], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.559505477023777e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889111241, 0.45945, [8.374e-05], [8.618e-05], [8.5037e-05], [8.5994e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.533833735779702e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889111472, 0.45158, [3.5159e-05], [3.5686e-05], [3.5202e-05], [3.5528e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027520010419386], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889111702, 0.45043, [0.00027382], [0.00027872], [0.00027424], [0.00027648], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001362252573017031], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889111928, 0.4584, [0.0013546], [0.001366], [0.0013614], [0.0013648], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014570893586746284], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889112159, 0.44882, [0.0014507], [0.0014635], [0.0014544], [0.0014617], [7], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.029055812396109104], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892950094, 0.66979, [0.028916], [0.030354], [0.028985], [0.029337], [1], [10]]}, "durations": {"<build>": 1.8365740776062012}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/5f021978-virtualenv-py3.10.json
================================================
{"commit_hash": "5f0219786bbaf994061011df087602d5edff5d66", "env_name": "virtualenv-py3.10", "date": 1641724467000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7035226366991395e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928463178, 0.47121, [1.6929e-07], [1.7638e-07], [1.6994e-07], [1.7237e-07], [64033], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7104967550450717e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928463413, 0.46938, [1.6922e-07], [1.7177e-07], [1.7068e-07], [1.7127e-07], [64539], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7066034108752568e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928463648, 0.46867, [1.7032e-07], [1.7179e-07], [1.7059e-07], [1.7141e-07], [64263], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7124313816843975e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928463884, 0.47297, [1.6969e-07], [1.7395e-07], [1.6993e-07], [1.7356e-07], [64706], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7017476167767825e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928464120, 0.4696, [1.6905e-07], [1.7056e-07], [1.6976e-07], [1.7038e-07], [64565], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.697733419053571e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928464356, 0.46247, [1.6873e-07], [1.706e-07], [1.6969e-07], [1.7029e-07], [65001], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011088667015428655], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928464592, 0.45823, [0.0011033], [0.0011204], [0.0011067], [0.001113], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001552386928649087], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928464819, 0.45069, [0.0015479], [0.001557], [0.0015505], [0.0015543], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014095390633883653], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928465042, 0.45741, [0.0014019], [0.0014361], [0.001404], [0.0014129], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1439336631824014e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928465271, 0.46735, [1.14e-07], [1.1545e-07], [1.1413e-07], [1.1443e-07], [96508], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1472853324673091e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928465505, 0.45557, [1.1426e-07], [1.1677e-07], [1.144e-07], [1.153e-07], [95846], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1652326348148687e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928465728, 0.47055, [1.1609e-07], [1.1682e-07], [1.1644e-07], [1.1658e-07], [96202], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008522239499143325], [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928465964, 0.52198, [0.0084901], [0.0085779], [0.0085138], [0.0085343], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008546103999833576], [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928466225, 0.52079, [0.0084924], [0.0085719], [0.0085191], [0.0085522], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008535864493751433], [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928466486, 0.51968, [0.0084976], [0.0085744], [0.0085191], [0.0085518], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002401412499602884], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928466746, 0.47729, [0.0023849], [0.0024111], [0.0023929], [0.0024044], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014333512143431498], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928466985, 0.44636, [0.0014275], [0.0014408], [0.0014295], [0.0014357], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038671653549369827], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928467206, 0.45238, [0.00038171], [0.00039182], [0.00038211], [0.00039098], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003404233871298211], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928467438, 0.45553, [0.00033704], [0.00035018], [0.00033738], [0.00034487], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.531585199997211e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928467663, 0.46305, [2.5279e-05], [2.5447e-05], [2.5293e-05], [2.5356e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018472809486034936], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928467894, 0.45794, [0.00018414], [0.00018541], [0.00018456], [0.00018487], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3558418377758746e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928468123, 0.44959, [4.3458e-05], [4.3744e-05], [4.3534e-05], [4.3643e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032473737850192595], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928468352, 0.4597, [0.0003236], [0.00032612], [0.00032425], [0.00032511], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035738648248611596], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928468581, 0.44933, [0.00035701], [0.00035825], [0.00035717], [0.00035775], [29], [10]], "benchmarks.TextSuite.time_render": [[4.668496161822756e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928468804, 0.45655, [4.6568e-06], [4.6896e-06], [4.6596e-06], [4.6708e-06], [2346], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.519108200744085e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928469036, 0.46041, [8.5037e-05], [8.5481e-05], [8.5088e-05], [8.5372e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5178668325703625e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928469268, 0.45318, [3.5077e-05], [3.5333e-05], [3.5146e-05], [3.5209e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002742088813408229], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928469499, 0.45048, [0.00027373], [0.00027495], [0.00027405], [0.00027469], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013609556881419849], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928469724, 0.45751, [0.0013536], [0.001364], [0.0013562], [0.0013628], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014542143554925652], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928469956, 0.44957, [0.001449], [0.0014817], [0.0014521], [0.0014696], [7], [10]]}, "durations": {"<build>": 2.003809928894043}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/5f03e3ba-virtualenv-py3.10.json
================================================
{"commit_hash": "5f03e3ba5306ea935126d354d71d3c7bb4dec3a3", "env_name": "virtualenv-py3.10", "date": 1603019948000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7029400369316336e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928962279, 0.4288, [1.7001e-07], [1.7142e-07], [1.7018e-07], [1.7081e-07], [58853], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.6975923588875979e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928962494, 0.45268, [1.6889e-07], [1.7064e-07], [1.6947e-07], [1.7004e-07], [64449], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7122144386242466e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928962720, 0.44383, [1.6952e-07], [1.7701e-07], [1.7086e-07], [1.7138e-07], [64662], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7052503344942357e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928962945, 0.45549, [1.7007e-07], [1.7118e-07], [1.7026e-07], [1.71e-07], [64114], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7053431360609528e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928963173, 0.45722, [1.6968e-07], [1.7377e-07], [1.7023e-07], [1.7067e-07], [64348], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7023318621135e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928963401, 0.456, [1.6909e-07], [1.7173e-07], [1.6969e-07], [1.7074e-07], [64144], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010147333494387567], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928963629, 0.4386, [0.0010127], [0.0010217], [0.0010137], [0.0010151], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928957985, 0.061291], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014055181873118272], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928963848, 0.44808, [0.0014012], [0.0014379], [0.0014023], [0.0014139], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1483355694441893e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928964074, 0.45479, [1.1393e-07], [1.1562e-07], [1.14e-07], [1.1537e-07], [95375], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1531780253540436e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928964302, 0.4352, [1.139e-07], [1.158e-07], [1.1473e-07], [1.1552e-07], [87364], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1466431835136977e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928964524, 0.44575, [1.1395e-07], [1.172e-07], [1.1447e-07], [1.1641e-07], [95954], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928958936, 0.060677], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928958997, 0.060723], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928959058, 0.060341], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0027481563738547266], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928964743, 0.44822, [0.0027384], [0.0027943], [0.0027456], [0.0027549], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0018641839997144416], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928964966, 0.45091, [0.0018554], [0.0018823], [0.0018621], [0.001872], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006637421874984284], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928965189, 0.44186, [0.00065813], [0.00067295], [0.00066221], [0.00066779], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005481392635326636], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928965415, 0.44284, [0.00054686], [0.0005553], [0.0005472], [0.00055266], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.7963297092051037e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928965636, 0.44729, [2.7859e-05], [2.8125e-05], [2.7886e-05], [2.8073e-05], [382], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018773648250651985], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928965859, 0.44907, [0.00018706], [0.00019296], [0.0001872], [0.00019119], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.22623665238994e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928966086, 0.45329, [4.2169e-05], [4.265e-05], [4.2204e-05], [4.2296e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003306686773993856], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928966316, 0.43283, [0.000329], [0.00033176], [0.00033028], [0.00033116], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928960899, 0.061053], "benchmarks.TextSuite.time_render": [[4.670691716725854e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928966531, 0.44117, [4.6569e-06], [4.6863e-06], [4.6596e-06], [4.6803e-06], [2329], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.543684650542523e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928966755, 0.44878, [8.492e-05], [8.6589e-05], [8.5022e-05], [8.5955e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.391310484373882e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928966982, 0.44135, [3.377e-05], [3.4059e-05], [3.38e-05], [3.4e-05], [310], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027908670214143257], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928967202, 0.43236, [0.00027816], [0.0002797], [0.00027871], [0.00027919], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011475694466045955], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928967417, 0.43754, [0.0011417], [0.0011546], [0.0011434], [0.0011509], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015298422139104722], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928967634, 0.44091, [0.0015248], [0.0015364], [0.0015273], [0.0015305], [7], [10]]}, "durations": {"<build>": 2.012441873550415}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/5f55063b-virtualenv-py3.10.json
================================================
{"commit_hash": "5f55063b139e5fcb70dc75cbebd4195c48f1e9bc", "env_name": "virtualenv-py3.10", "date": 1593030443000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7426155866769343e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928557720, 0.44015, [1.7078e-07], [1.7553e-07], [1.7241e-07], [1.7483e-07], [64410], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7307732454880455e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928557935, 0.43725, [1.7199e-07], [1.7359e-07], [1.7266e-07], [1.7338e-07], [64320], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7381171223370905e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928558158, 0.42462, [1.7164e-07], [1.7654e-07], [1.7314e-07], [1.7427e-07], [59024], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7338147194241619e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928558369, 0.42713, [1.7146e-07], [1.7358e-07], [1.7326e-07], [1.7349e-07], [58695], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7082182191926202e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928558579, 0.43687, [1.6988e-07], [1.7426e-07], [1.6999e-07], [1.7256e-07], [64458], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7132887430961657e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928558802, 0.44965, [1.6957e-07], [1.739e-07], [1.698e-07], [1.7355e-07], [64441], [10]], "benchmarks.PrettySuite.time_pretty": [[0.002201112496550195], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928559028, 0.43323, [0.0021928], [0.0022446], [0.0021973], [0.0022294], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928554011, 0.057544], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928554069, 0.057697], "benchmarks.StyleSuite.time_parse_ansi": [[1.157208851811601e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928559242, 0.4371, [1.1398e-07], [1.1696e-07], [1.143e-07], [1.1675e-07], [95939], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.152207594246434e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928559457, 0.43555, [1.1365e-07], [1.1663e-07], [1.1392e-07], [1.1644e-07], [95894], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1548119693731335e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928559671, 0.44418, [1.1413e-07], [1.1717e-07], [1.1445e-07], [1.1647e-07], [94878], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928554793, 0.057445], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928554850, 0.057195], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928554907, 0.056875], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0020350915991002696], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928559894, 0.42237, [0.0020269], [0.0020659], [0.0020317], [0.0020452], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014367262150959245], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928560108, 0.4207, [0.001434], [0.0014608], [0.0014345], [0.0014396], [7], [10]], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928555382, 0.057685], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928555440, 0.057371], "benchmarks.TextSuite.time_divide": [[2.82225680704526e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928560321, 0.4417, [2.7741e-05], [2.8701e-05], [2.7832e-05], [2.8494e-05], [382], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001870984136797327], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928560542, 0.4333, [0.00018636], [0.000188], [0.00018692], [0.00018728], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.2128788602718785e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928560763, 0.44034, [4.2025e-05], [4.292e-05], [4.2065e-05], [4.2777e-05], [253], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003335685483292646], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928560983, 0.42822, [0.00033024], [0.00033744], [0.00033108], [0.00033605], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928556368, 0.057561], "benchmarks.TextSuite.time_render": [[4.675921118193493e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928561195, 0.43693, [4.6644e-06], [4.6917e-06], [4.675e-06], [4.6765e-06], [2339], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.527701947969035e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928561417, 0.44177, [8.5037e-05], [8.596e-05], [8.5078e-05], [8.5696e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.374086849976561e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928561640, 0.43075, [3.3632e-05], [3.4252e-05], [3.3707e-05], [3.3846e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002787668915540987], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928561855, 0.42758, [0.00027809], [0.00028596], [0.00027844], [0.00027954], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011450092214444238], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928562068, 0.42967, [0.001136], [0.0011669], [0.0011372], [0.0011539], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015197291421437903], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928562282, 0.43347, [0.0015173], [0.0015357], [0.0015195], [0.0015202], [7], [10]]}, "durations": {"<build>": 1.9274108409881592}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/5f82274a-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "5f82274a8094734c510166444c72ec6236ca051f", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645959537000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.743343737214693e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825877822, 0.47018, [1.731e-07], [1.7707e-07], [1.7368e-07], [1.7504e-07], [63592], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7218657720673968e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825878055, 0.44521, [1.7003e-07], [1.7394e-07], [1.7204e-07], [1.7347e-07], [59074], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.742930855984107e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825878277, 0.44184, [1.7236e-07], [1.7464e-07], [1.7372e-07], [1.7446e-07], [58500], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.729225522861485e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825878496, 0.44843, [1.7061e-07], [1.7417e-07], [1.7149e-07], [1.7323e-07], [64436], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.743164629772126e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825878719, 0.46674, [1.7311e-07], [1.7578e-07], [1.7395e-07], [1.7448e-07], [63011], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.713117437393854e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825878950, 0.47058, [1.6899e-07], [1.7461e-07], [1.7107e-07], [1.7182e-07], [63804], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011391944329564772], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825879186, 0.45772, [0.0011211], [0.0011803], [0.0011303], [0.0011637], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001583559505109276], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825879414, 0.45589, [0.001562], [0.0016526], [0.0015783], [0.0015943], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014363124937517568], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825879640, 0.45956, [0.00143], [0.0014407], [0.0014337], [0.0014377], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1700840318105111e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825879869, 0.45857, [1.1639e-07], [1.1738e-07], [1.1665e-07], [1.1727e-07], [92944], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1712262035399012e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825880099, 0.44846, [1.1577e-07], [1.1805e-07], [1.1667e-07], [1.1719e-07], [87180], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1693544063101322e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825880321, 0.44663, [1.1546e-07], [1.1774e-07], [1.1653e-07], [1.1707e-07], [87572], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008663208223879337], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825880545, 0.52686, [0.0085918], [0.0091291], [0.0086087], [0.0087693], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008657364698592573], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825880808, 0.52518, [0.0084542], [0.008804], [0.0086402], [0.0086842], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008623770729172975], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825881070, 0.5329, [0.0085388], [0.0093817], [0.0086013], [0.0086302], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001916774354564647], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825881340, 0.46101, [0.0019062], [0.0019437], [0.0019106], [0.0019243], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011857708321056431], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825881574, 0.4558, [0.0011666], [0.0012315], [0.0011774], [0.0011993], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038335714738682976], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825881803, 0.45989, [0.00037618], [0.00038673], [0.00038157], [0.00038471], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00035019684582948685], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825882032, 0.44427, [0.00034862], [0.00036038], [0.00034895], [0.00035164], [29], [10]], "benchmarks.TextSuite.time_divide": [[2.569657509418017e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825882253, 0.45517, [2.5397e-05], [2.6656e-05], [2.5503e-05], [2.6302e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018883440523119322], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825882485, 0.47104, [0.00018811], [0.00018958], [0.00018873], [0.00018897], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.462858842012762e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825882719, 0.46058, [4.4341e-05], [4.5189e-05], [4.4388e-05], [4.4794e-05], [238], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033246772739315225], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825882946, 0.44694, [0.00032631], [0.00033632], [0.00032908], [0.00033441], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003751160527047302], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825883168, 0.45432, [0.00036414], [0.00039925], [0.00036607], [0.00039067], [28], [10]], "benchmarks.TextSuite.time_render": [[4.737919929757669e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825883393, 0.46327, [4.6959e-06], [4.8188e-06], [4.7049e-06], [4.7507e-06], [2323], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.65956370564779e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825883627, 0.46352, [8.5706e-05], [8.8472e-05], [8.6453e-05], [8.6907e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.592293021676977e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825883859, 0.46462, [3.5816e-05], [3.6066e-05], [3.5851e-05], [3.6002e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028160690807884465], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825884091, 0.45708, [0.00027937], [0.00028461], [0.00028023], [0.0002834], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013931562571087852], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825884319, 0.45206, [0.0013882], [0.0014071], [0.0013898], [0.0013944], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014915327109130366], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825884544, 0.44438, [0.0014834], [0.0015063], [0.0014885], [0.0014949], [7], [10]]}, "durations": {"<build>": 1.857170820236206}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/5fafb92f-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "5fafb92f3d4e8cfc28304219ad7f4fa5fb8e5eb4", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644399075000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7399852695687427e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826398489, 0.4663, [1.6989e-07], [1.7483e-07], [1.709e-07], [1.7453e-07], [64189], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7227958961972511e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826398722, 0.46923, [1.7073e-07], [1.7487e-07], [1.7123e-07], [1.7319e-07], [64301], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7066921732581514e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826398957, 0.4662, [1.6934e-07], [1.7114e-07], [1.6995e-07], [1.709e-07], [64308], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7091079531131808e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826399193, 0.43866, [1.6824e-07], [1.7347e-07], [1.7021e-07], [1.7198e-07], [58959], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7101199987222174e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826399410, 0.46575, [1.6932e-07], [1.7394e-07], [1.7059e-07], [1.7157e-07], [64341], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7040318934053005e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826399643, 0.46968, [1.6889e-07], [1.7155e-07], [1.7011e-07], [1.7098e-07], [63980], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011217245030113393], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826399875, 0.4451, [0.0011101], [0.0011305], [0.0011126], [0.0011255], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015626071420099053], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826400097, 0.4498, [0.0015591], [0.0015756], [0.0015608], [0.0015636], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014161275612423196], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826400320, 0.45828, [0.0014057], [0.0014693], [0.0014133], [0.0014221], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1552996485734003e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826400550, 0.46624, [1.1411e-07], [1.1877e-07], [1.1454e-07], [1.1627e-07], [95261], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.146101954614435e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826400783, 0.46193, [1.1427e-07], [1.1648e-07], [1.1449e-07], [1.1553e-07], [94636], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1544141038036588e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826401013, 0.46545, [1.142e-07], [1.1691e-07], [1.1452e-07], [1.1668e-07], [96024], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.00850341672776267], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826401248, 0.52094, [0.0084396], [0.0088291], [0.0084803], [0.0086481], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008493792032822967], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826401507, 0.52226, [0.0084204], [0.0088584], [0.0084669], [0.0085467], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008494447800330818], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826401766, 0.5212, [0.0084076], [0.0089673], [0.0084427], [0.0086693], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018803576628367105], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826402029, 0.45537, [0.0018782], [0.0019039], [0.0018787], [0.0018861], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001166638905285961], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826402261, 0.45161, [0.0011607], [0.0011742], [0.0011649], [0.0011688], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038451233585537584], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826402490, 0.45031, [0.00037704], [0.00038532], [0.00038311], [0.00038506], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003430275622034265], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826402714, 0.46096, [0.00034118], [0.00035631], [0.00034231], [0.00034604], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5470188120380044e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826402944, 0.4667, [2.5278e-05], [2.5719e-05], [2.5368e-05], [2.5512e-05], [420], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018512248262313419], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826403175, 0.46267, [0.00018358], [0.00018897], [0.00018491], [0.00018576], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.436983438285668e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826403407, 0.4517, [4.3625e-05], [4.5288e-05], [4.4011e-05], [4.4441e-05], [242], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003384993637375759], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826403635, 0.45472, [0.00032744], [0.00036642], [0.00032817], [0.00035361], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003575804635304315], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826403868, 0.45753, [0.00035586], [0.00036667], [0.00035663], [0.00036065], [29], [10]], "benchmarks.TextSuite.time_render": [[4.684197568376936e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826404101, 0.45574, [4.672e-06], [4.6989e-06], [4.6802e-06], [4.6906e-06], [2334], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.543586270429019e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826404333, 0.45921, [8.5231e-05], [8.5865e-05], [8.5323e-05], [8.5481e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5375544232212836e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826404564, 0.45381, [3.521e-05], [3.5769e-05], [3.5254e-05], [3.5549e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002773651289508531], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826404795, 0.45328, [0.00027451], [0.00028034], [0.00027503], [0.0002798], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013764713803539053], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826405022, 0.47141, [0.0013632], [0.0013959], [0.0013673], [0.0013887], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014580208475568465], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826405255, 0.45451, [0.0014559], [0.001466], [0.0014574], [0.0014603], [7], [10]]}, "durations": {"<build>": 1.837172031402588}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/60dadaf2-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "60dadaf2c6771340db9d785af99deadc8293b19a", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644578004000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7301140376972956e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826240336, 0.47243, [1.7033e-07], [1.7777e-07], [1.7136e-07], [1.7613e-07], [64325], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7291568914310597e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826240573, 0.47562, [1.7106e-07], [1.7641e-07], [1.7197e-07], [1.7336e-07], [64220], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7157439593950507e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826240814, 0.44188, [1.706e-07], [1.7698e-07], [1.7121e-07], [1.7293e-07], [58666], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7711814523274383e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826241034, 0.47424, [1.7159e-07], [1.8569e-07], [1.7249e-07], [1.8159e-07], [63739], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7100303312390218e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826241271, 0.46681, [1.699e-07], [1.7243e-07], [1.7032e-07], [1.7172e-07], [64133], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7120949491441302e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826241508, 0.45927, [1.7077e-07], [1.7206e-07], [1.7101e-07], [1.7163e-07], [64722], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001124578670391606], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826241732, 0.44949, [0.0011137], [0.0011671], [0.0011219], [0.0011279], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.00156393156586481], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826241956, 0.45684, [0.0015535], [0.0016626], [0.0015596], [0.001571], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001438565130229108], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826242180, 0.46228, [0.0014023], [0.0014801], [0.0014232], [0.0014614], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1656158200036298e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826242410, 0.4514, [1.1591e-07], [1.1711e-07], [1.163e-07], [1.1689e-07], [87309], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1514877061452405e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826242628, 0.46228, [1.1469e-07], [1.1641e-07], [1.1498e-07], [1.1543e-07], [95409], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1519506642228855e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826242862, 0.45275, [1.1442e-07], [1.165e-07], [1.1486e-07], [1.1577e-07], [96567], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008466718951240182], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826243086, 0.52154, [0.0084301], [0.0085824], [0.0084401], [0.0085002], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008480062533635646], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826243347, 0.51787, [0.0084259], [0.0087054], [0.0084638], [0.0084956], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008463458274491131], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826243608, 0.51821, [0.0084089], [0.0087854], [0.0084352], [0.0085003], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018837464934525392], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826243867, 0.46313, [0.0018649], [0.0019292], [0.0018705], [0.0019004], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001158921280875802], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826244097, 0.44637, [0.0011528], [0.0011789], [0.0011554], [0.0011631], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003760803540769432], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826244323, 0.45374, [0.00037193], [0.0003797], [0.00037242], [0.00037871], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034725138296683633], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826244547, 0.44689, [0.00033558], [0.00035352], [0.00033697], [0.00035211], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5398066725434263e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826244767, 0.46602, [2.5247e-05], [2.5601e-05], [2.5306e-05], [2.5468e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018542745341879448], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826244999, 0.4564, [0.00018495], [0.00018988], [0.00018513], [0.0001862], [56], [10]], "benchmarks.TextSuite.time_fit": [[4.3694585939625004e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826245227, 0.44931, [4.3591e-05], [4.4231e-05], [4.3644e-05], [4.3901e-05], [244], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032715972823401296], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826245456, 0.46218, [0.00032485], [0.00033073], [0.00032515], [0.00032864], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035722198462563343], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826245687, 0.45168, [0.00035559], [0.00036945], [0.00035634], [0.00035812], [29], [10]], "benchmarks.TextSuite.time_render": [[4.7049865978517275e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826245911, 0.46066, [4.6865e-06], [4.7786e-06], [4.6937e-06], [4.7246e-06], [2322], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.674669504490874e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826246142, 0.4618, [8.4685e-05], [8.9624e-05], [8.5196e-05], [8.7454e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.5510280510422836e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826246372, 0.45366, [3.5202e-05], [3.5648e-05], [3.522e-05], [3.5569e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027730153861308564], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826246604, 0.46065, [0.0002747], [0.00028653], [0.00027482], [0.00028012], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013729999482166022], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826246838, 0.45801, [0.0013622], [0.0014208], [0.0013691], [0.0013879], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014613541508359568], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826247072, 0.44583, [0.0014555], [0.0014651], [0.0014583], [0.0014637], [7], [10]]}, "durations": {"<build>": 1.8072452545166016}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/64471afc-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "64471afccde73c7f6b892afbc0a1c8fd72980565", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645958236000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7382626935556808e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825925035, 0.46633, [1.7345e-07], [1.7432e-07], [1.7368e-07], [1.7392e-07], [63167], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7467428898512738e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825925268, 0.44711, [1.7348e-07], [1.759e-07], [1.7394e-07], [1.7518e-07], [63796], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7380863306491789e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825925491, 0.44701, [1.7232e-07], [1.7958e-07], [1.7332e-07], [1.7467e-07], [58043], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7443738396690643e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825925714, 0.44528, [1.731e-07], [1.7642e-07], [1.7399e-07], [1.7522e-07], [58580], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.747520327168885e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825925936, 0.45115, [1.7261e-07], [1.7522e-07], [1.743e-07], [1.7488e-07], [64507], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.740913045183019e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825926161, 0.44066, [1.7232e-07], [1.75e-07], [1.7386e-07], [1.7461e-07], [58064], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001158874999317858], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825926382, 0.44878, [0.0011346], [0.0012594], [0.0011385], [0.0012397], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0016035357756274088], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825926606, 0.46101, [0.0015686], [0.0016424], [0.0015913], [0.0016086], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001440442749299109], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825926834, 0.46127, [0.0014297], [0.001446], [0.001438], [0.0014433], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1772832968132847e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825927064, 0.46426, [1.1617e-07], [1.2015e-07], [1.1668e-07], [1.1913e-07], [92316], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1708050407953429e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825927294, 0.44527, [1.1629e-07], [1.1814e-07], [1.1688e-07], [1.1737e-07], [87716], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1699819660524517e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825927516, 0.46542, [1.1658e-07], [1.1743e-07], [1.1684e-07], [1.1716e-07], [94221], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.00864261481910944], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825927749, 0.524, [0.0085636], [0.0087744], [0.008621], [0.0087515], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.00857382279355079], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825928012, 0.52235, [0.0085318], [0.0086374], [0.0085675], [0.0085849], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.0086860730079934], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825928274, 0.52571, [0.0085874], [0.0087253], [0.0086151], [0.0086975], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019199479332504172], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825928538, 0.45735, [0.0018889], [0.0019687], [0.0019171], [0.0019488], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011890625012003714], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825928769, 0.45746, [0.0011757], [0.0012249], [0.0011827], [0.0011976], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038256176464658765], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825928999, 0.46069, [0.0003773], [0.00038731], [0.00037918], [0.00038389], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003486479011674722], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825929228, 0.45262, [0.00034554], [0.00035923], [0.00034779], [0.00035328], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5842328010717543e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825929453, 0.4613, [2.541e-05], [2.5984e-05], [2.5778e-05], [2.59e-05], [410], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.000189300438617928], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825929680, 0.46213, [0.000188], [0.00019252], [0.00018863], [0.00018985], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.465354907368559e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825929908, 0.45515, [4.363e-05], [4.5475e-05], [4.4333e-05], [4.474e-05], [243], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003328407070629539], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825930138, 0.44905, [0.00032623], [0.00033966], [0.00032912], [0.0003355], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003624441950315875], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825930363, 0.44392, [0.00036069], [0.00036504], [0.00036151], [0.00036373], [28], [10]], "benchmarks.TextSuite.time_render": [[4.773007351986446e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825930584, 0.46053, [4.7596e-06], [5.161e-06], [4.7698e-06], [4.8271e-06], [2290], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.73990678067865e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825930820, 0.44926, [8.5369e-05], [8.9539e-05], [8.6509e-05], [8.8593e-05], [116], [10]], "benchmarks.TextSuite.time_split": [[3.5915124512107016e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825931048, 0.45339, [3.5757e-05], [3.7142e-05], [3.5839e-05], [3.6094e-05], [284], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002821940763265287], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825931271, 0.46403, [0.00027991], [0.00028479], [0.00028129], [0.00028354], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0014019400550751016], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825931500, 0.45459, [0.0013645], [0.0014118], [0.0013894], [0.0014059], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014835446241444775], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825931726, 0.44251, [0.0014715], [0.0015367], [0.0014784], [0.0014847], [7], [10]]}, "durations": {"<build>": 1.830014944076538}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/646d933d-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "646d933d47514c249bc69afba39df14431d94cfb", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645958081000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.73237043305244e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825956398, 0.46812, [1.7136e-07], [1.7392e-07], [1.7284e-07], [1.735e-07], [63286], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.736568638180725e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825956631, 0.44305, [1.7101e-07], [1.7453e-07], [1.7288e-07], [1.7422e-07], [59184], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7148725982324765e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825956851, 0.45003, [1.705e-07], [1.7253e-07], [1.7107e-07], [1.7215e-07], [60595], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.71427118395166e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825957074, 0.44005, [1.7e-07], [1.7446e-07], [1.7097e-07], [1.726e-07], [58459], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.724106727546551e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825957293, 0.46115, [1.702e-07], [1.7593e-07], [1.708e-07], [1.7392e-07], [64201], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.729388579633591e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825957525, 0.44155, [1.7085e-07], [1.7553e-07], [1.7259e-07], [1.7393e-07], [58396], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011200578753939932], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825957745, 0.44944, [0.0011145], [0.0011393], [0.0011173], [0.0011349], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015660595714247652], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825957969, 0.45384, [0.0015547], [0.0016285], [0.0015596], [0.0015739], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001410059878253378], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825958194, 0.45579, [0.0014077], [0.0014227], [0.0014086], [0.0014119], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1625642889284909e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825958423, 0.46069, [1.1407e-07], [1.1729e-07], [1.1527e-07], [1.1683e-07], [94305], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1673661478713502e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825958653, 0.45577, [1.1619e-07], [1.1733e-07], [1.1659e-07], [1.1717e-07], [90840], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1635387407226164e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825958880, 0.44161, [1.1589e-07], [1.177e-07], [1.1619e-07], [1.1704e-07], [87291], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008635979203972965], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825959100, 0.52277, [0.0084141], [0.0088025], [0.008554], [0.0086797], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008454937487840652], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825959362, 0.51774, [0.0083853], [0.0086538], [0.0084339], [0.0084761], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.00862378120655194], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825959621, 0.52282, [0.0085677], [0.0086719], [0.0085886], [0.0086481], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018987916798020403], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825959882, 0.45434, [0.0018731], [0.0019211], [0.0018772], [0.0019125], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011720532784238458], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825960108, 0.45021, [0.0011642], [0.0011869], [0.0011682], [0.0011759], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038993905764073133], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825960336, 0.44584, [0.00038325], [0.00040125], [0.0003844], [0.00039829], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034626006502015835], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825960560, 0.44145, [0.00034479], [0.00035661], [0.00034563], [0.00034749], [29], [10]], "benchmarks.TextSuite.time_divide": [[2.56841482437852e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825960779, 0.45347, [2.5371e-05], [2.6027e-05], [2.5455e-05], [2.576e-05], [404], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018841595637836847], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825961003, 0.46568, [0.00018475], [0.00020266], [0.00018524], [0.00019617], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.4278535862774155e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825961240, 0.45377, [4.3995e-05], [4.5255e-05], [4.4151e-05], [4.4485e-05], [238], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003304816817751888], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825961471, 0.45469, [0.00032759], [0.00033157], [0.00032921], [0.00033104], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035984339674228225], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825961702, 0.45288, [0.00035576], [0.0003712], [0.00035731], [0.00036193], [29], [10]], "benchmarks.TextSuite.time_render": [[4.8334422322562445e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825961925, 0.45916, [4.649e-06], [5.179e-06], [4.7036e-06], [5.017e-06], [2301], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.63921670243144e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825962153, 0.46384, [8.514e-05], [8.8153e-05], [8.6029e-05], [8.6832e-05], [125], [10]], "benchmarks.TextSuite.time_split": [[3.5884874788197607e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825962382, 0.45955, [3.5258e-05], [3.6569e-05], [3.543e-05], [3.6252e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002804155417441114], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825962613, 0.45621, [0.00027784], [0.00028802], [0.00027916], [0.00028269], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013783359463559464], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825962837, 0.46346, [0.0013704], [0.0013881], [0.001373], [0.0013826], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014885119162499905], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825963069, 0.45417, [0.001484], [0.00154], [0.001486], [0.0014925], [7], [10]]}, "durations": {"<build>": 1.833448886871338}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/64755d41-virtualenv-py3.10.json
================================================
{"commit_hash": "64755d41fa02fce7ec96e93c2356c45e2e489111", "env_name": "virtualenv-py3.10", "date": 1614430154000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.6965338984778662e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929046829, 0.46, [1.687e-07], [1.7121e-07], [1.6948e-07], [1.7025e-07], [64424], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.704037171582712e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929047060, 0.43072, [1.6973e-07], [1.7137e-07], [1.702e-07], [1.7071e-07], [58920], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.706237033781775e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929047274, 0.44922, [1.6924e-07], [1.805e-07], [1.7032e-07], [1.7162e-07], [64400], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7043955852118696e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929047503, 0.45591, [1.6887e-07], [1.7088e-07], [1.7008e-07], [1.7055e-07], [64451], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7031919212220384e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929047733, 0.45571, [1.6977e-07], [1.7077e-07], [1.7003e-07], [1.7058e-07], [64339], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7052593059742275e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929047962, 0.45449, [1.6895e-07], [1.711e-07], [1.6988e-07], [1.7096e-07], [63516], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010033427732361652], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929048189, 0.45091, [0.0009986], [0.0010074], [0.0010008], [0.0010042], [11], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014030390011612326], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929048413, 0.4473, [0.0014005], [0.0014155], [0.0014015], [0.0014056], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013944688107585534], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929048637, 0.44478, [0.0013901], [0.001403], [0.0013931], [0.0013962], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1404005064879602e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929048860, 0.45724, [1.1353e-07], [1.1507e-07], [1.1388e-07], [1.1435e-07], [96041], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1528624321089372e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929049089, 0.45136, [1.1368e-07], [1.1667e-07], [1.1409e-07], [1.1657e-07], [93866], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1400625216944154e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929049313, 0.45482, [1.1364e-07], [1.1453e-07], [1.138e-07], [1.1435e-07], [95488], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929043306, 0.063175], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929043370, 0.062626], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929043432, 0.062161], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0023428916989360004], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929049541, 0.46131, [0.0023405], [0.0023488], [0.002341], [0.0023454], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014403332856350712], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929049772, 0.44078, [0.0014346], [0.0014532], [0.0014393], [0.0014425], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006583841559404391], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929049990, 0.43817, [0.00065618], [0.00066033], [0.00065775], [0.00065947], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005479879213166178], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929050212, 0.445, [0.00054439], [0.00057321], [0.00054576], [0.00055696], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.5343872384283808e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929050431, 0.4548, [2.5303e-05], [2.5408e-05], [2.5342e-05], [2.5378e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001848050622876534], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929050656, 0.44336, [0.00018405], [0.00018564], [0.00018457], [0.00018496], [56], [10]], "benchmarks.TextSuite.time_fit": [[4.3598299950589335e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929050875, 0.44159, [4.3447e-05], [4.3758e-05], [4.3496e-05], [4.3717e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003240322581522407], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929051099, 0.43042, [0.00032367], [0.0003245], [0.00032387], [0.00032422], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00038991435226139236], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929051313, 0.4457, [0.00038817], [0.00039106], [0.00038868], [0.00039061], [27], [10]], "benchmarks.TextSuite.time_render": [[4.681328553562882e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929051535, 0.44673, [4.6717e-06], [4.7011e-06], [4.6742e-06], [4.6885e-06], [2336], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.539192583612021e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929051762, 0.45511, [8.477e-05], [8.665e-05], [8.5005e-05], [8.5749e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5212323016278426e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929051988, 0.44421, [3.5087e-05], [3.5336e-05], [3.513e-05], [3.5259e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027470724997233207], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929052215, 0.44087, [0.00027314], [0.00027617], [0.00027383], [0.00027545], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010986958499415778], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929052434, 0.43797, [0.0010954], [0.0011024], [0.0010959], [0.0011016], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014876964269205928], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929052652, 0.43619, [0.0014852], [0.0014927], [0.0014868], [0.0014895], [7], [10]]}, "durations": {"<build>": 2.0037131309509277}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/656b7a18-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "656b7a185d7f7c3a1f28e58f74683d03ab4349a9", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1646925441000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.695967628533319e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889152432, 0.46212, [1.6892e-07], [1.7037e-07], [1.6937e-07], [1.698e-07], [64048], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7078242813692316e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889152662, 0.46652, [1.6985e-07], [1.7126e-07], [1.7036e-07], [1.7108e-07], [64427], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7138044611102748e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889152895, 0.45169, [1.6997e-07], [1.7276e-07], [1.7085e-07], [1.7173e-07], [64452], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7073270359967704e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889153117, 0.46044, [1.6963e-07], [1.712e-07], [1.7044e-07], [1.7107e-07], [64303], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7044387402856688e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889153350, 0.45787, [1.686e-07], [1.7173e-07], [1.6968e-07], [1.7098e-07], [63197], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7136177929454482e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889153579, 0.43872, [1.7014e-07], [1.7363e-07], [1.7081e-07], [1.7227e-07], [58931], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011235578891096844], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889153798, 0.44518, [0.0011162], [0.001154], [0.0011193], [0.0011253], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015736517795760716], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889154020, 0.45277, [0.0015614], [0.0016089], [0.0015641], [0.001593], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014207057392923161], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889154243, 0.4573, [0.0014108], [0.0014608], [0.0014142], [0.0014243], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1612970511987328e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889154471, 0.44868, [1.1382e-07], [1.1762e-07], [1.1572e-07], [1.1648e-07], [96476], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.144489106749746e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889154695, 0.46008, [1.1363e-07], [1.1727e-07], [1.1428e-07], [1.1475e-07], [94619], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1421602705577891e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889154925, 0.46259, [1.1389e-07], [1.1759e-07], [1.1402e-07], [1.1447e-07], [95516], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008529093698598444], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889155156, 0.51871, [0.0084298], [0.0086908], [0.008483], [0.008561], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.00849857268622145], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889155415, 0.52156, [0.0084118], [0.0086924], [0.0084531], [0.0085243], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008472281275317073], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889155678, 0.51595, [0.0084072], [0.0086811], [0.0084515], [0.0084975], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018937881686724722], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889155935, 0.45386, [0.0018786], [0.0019425], [0.00189], [0.0018967], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011757384442413845], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889156163, 0.45186, [0.0011696], [0.0011805], [0.0011736], [0.0011768], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003875913456655466], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889156391, 0.45207, [0.00037483], [0.00040201], [0.00037531], [0.00039936], [26], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003423548393672513], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889156616, 0.45745, [0.00033948], [0.00035282], [0.00033982], [0.0003442], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5283711404497413e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889156845, 0.45333, [2.5254e-05], [2.5484e-05], [2.5258e-05], [2.5332e-05], [419], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001852203306536806], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889157071, 0.46308, [0.00018441], [0.00018697], [0.0001846], [0.00018553], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.3586214031357835e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889157303, 0.44989, [4.3444e-05], [4.4759e-05], [4.3499e-05], [4.3984e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003295808176820477], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889157532, 0.46416, [0.00032408], [0.00033872], [0.00032513], [0.000332], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003588405188879576], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889157763, 0.45062, [0.00035526], [0.00035987], [0.00035801], [0.00035931], [29], [10]], "benchmarks.TextSuite.time_render": [[4.688694656663102e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889157987, 0.45423, [4.6654e-06], [4.8204e-06], [4.6858e-06], [4.7191e-06], [2319], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.590518419931488e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889158217, 0.46115, [8.496e-05], [8.834e-05], [8.5506e-05], [8.6369e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.555661495230705e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889158449, 0.46542, [3.5306e-05], [3.6969e-05], [3.5438e-05], [3.5683e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027879385743290186], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889158680, 0.45487, [0.00027687], [0.00028386], [0.00027772], [0.00028075], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013786979397991672], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889158907, 0.45191, [0.001365], [0.0013843], [0.0013748], [0.0013805], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014588035742885302], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889159132, 0.44941, [0.0014498], [0.0014659], [0.0014579], [0.0014603], [7], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.02917008358053863], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892957678, 0.66867, [0.028961], [0.030123], [0.029048], [0.029401], [1], [10]]}, "durations": {"<build>": 1.871661901473999}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/666d0cf2-virtualenv-py3.10.json
================================================
{"commit_hash": "666d0cf2b2eca98ff75bd260f91b200d0bb82e90", "env_name": "virtualenv-py3.10", "date": 1637405513000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7059216979300207e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929483869, 0.46535, [1.6993e-07], [1.7094e-07], [1.7045e-07], [1.7081e-07], [64392], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.709019096843553e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929484100, 0.46715, [1.69e-07], [1.717e-07], [1.7019e-07], [1.7136e-07], [64405], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7002134261694357e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929484334, 0.46378, [1.6929e-07], [1.7051e-07], [1.6954e-07], [1.7017e-07], [64543], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7039360575301497e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929484568, 0.45849, [1.6915e-07], [1.7143e-07], [1.6969e-07], [1.7058e-07], [63401], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7012746920399016e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929484797, 0.46463, [1.6888e-07], [1.7061e-07], [1.6962e-07], [1.7021e-07], [64490], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.698780700455599e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929485030, 0.4678, [1.6942e-07], [1.7151e-07], [1.6966e-07], [1.7036e-07], [64328], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001039016699360218], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929485261, 0.45232, [0.0010348], [0.0010461], [0.0010373], [0.0010427], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001429678570795139], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929485485, 0.44288, [0.001422], [0.0014424], [0.0014263], [0.0014325], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013064713111816673], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929485704, 0.44442, [0.0013024], [0.0013231], [0.0013039], [0.0013094], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1418550215190512e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929485930, 0.4571, [1.1387e-07], [1.1535e-07], [1.1402e-07], [1.1468e-07], [94759], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1405231649255829e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929486158, 0.44506, [1.1346e-07], [1.174e-07], [1.1372e-07], [1.1567e-07], [87802], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1406058148527631e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929486385, 0.46433, [1.1388e-07], [1.1636e-07], [1.1396e-07], [1.1542e-07], [96465], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929480287, 0.065892], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929480353, 0.06518], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929480419, 0.064819], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0022066499950597063], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929486618, 0.45052, [0.0021978], [0.0022218], [0.0022014], [0.0022086], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0013307968747540144], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929486841, 0.45045, [0.0013223], [0.0013412], [0.0013249], [0.001334], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003770327499036544], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929487070, 0.45037, [0.0003715], [0.00037914], [0.00037257], [0.00037736], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034180240313177025], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929487293, 0.45233, [0.00033766], [0.00034821], [0.00033838], [0.00034259], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5328922338838523e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929487517, 0.45603, [2.5101e-05], [2.5532e-05], [2.5159e-05], [2.5482e-05], [425], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018498636175003224], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929487743, 0.45479, [0.00018346], [0.00018634], [0.0001842], [0.00018552], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.349864433222352e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929487970, 0.44737, [4.3458e-05], [4.4164e-05], [4.3487e-05], [4.3546e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003249583232607092], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929488197, 0.43982, [0.00032337], [0.00032803], [0.00032414], [0.00032677], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003559333335336608], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929488413, 0.45738, [0.00035458], [0.00036427], [0.00035485], [0.0003571], [30], [10]], "benchmarks.TextSuite.time_render": [[4.681305513344945e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929488639, 0.45041, [4.6548e-06], [4.6957e-06], [4.659e-06], [4.6905e-06], [2324], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.511783971698605e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929488867, 0.45545, [8.4799e-05], [8.5566e-05], [8.5074e-05], [8.5398e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.528940459019443e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929489097, 0.44655, [3.5224e-05], [3.5363e-05], [3.5262e-05], [3.5303e-05], [304], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027400657908353756], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929489324, 0.44615, [0.00027351], [0.00027464], [0.00027372], [0.00027418], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001119129150174558], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929489545, 0.45786, [0.0010965], [0.0011302], [0.0011088], [0.0011242], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013640703109558672], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929489779, 0.4553, [0.0013606], [0.0013689], [0.0013627], [0.0013659], [8], [10]]}, "durations": {"<build>": 1.988671064376831}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/690507d4-virtualenv-py3.10.json
================================================
{"commit_hash": "690507d4f39ff4ae9e5618711627037ac26e256c", "env_name": "virtualenv-py3.10", "date": 1621287005000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7055391959849702e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928333083, 0.45456, [1.6973e-07], [1.7106e-07], [1.7025e-07], [1.7079e-07], [63734], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7052009692883833e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928333310, 0.45405, [1.698e-07], [1.7099e-07], [1.702e-07], [1.7078e-07], [64861], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.703780635253241e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928333539, 0.4547, [1.6939e-07], [1.7126e-07], [1.6989e-07], [1.7093e-07], [63369], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.6995471132619938e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928333766, 0.4524, [1.6931e-07], [1.7085e-07], [1.6965e-07], [1.7004e-07], [62797], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.696196676231718e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928333992, 0.4566, [1.6902e-07], [1.7076e-07], [1.6928e-07], [1.7005e-07], [64278], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7001884858257172e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928334220, 0.43228, [1.6891e-07], [1.7229e-07], [1.6969e-07], [1.7032e-07], [59209], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010318208500393667], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928334436, 0.44465, [0.0010292], [0.0010381], [0.0010304], [0.0010331], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014297995003289543], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928334657, 0.46539, [0.0014239], [0.0014329], [0.001426], [0.0014314], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014235286253097001], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928334885, 0.45289, [0.0014219], [0.0014304], [0.0014222], [0.0014275], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1557706520754057e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928335110, 0.45123, [1.1465e-07], [1.1658e-07], [1.1475e-07], [1.1573e-07], [93849], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1424178187962725e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928335334, 0.45577, [1.1396e-07], [1.1479e-07], [1.1422e-07], [1.1435e-07], [95551], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1490234874890529e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928335563, 0.45654, [1.1419e-07], [1.1781e-07], [1.1454e-07], [1.1534e-07], [95247], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928329594, 0.063525], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928329658, 0.062237], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928329720, 0.062164], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002133625099668279], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928335790, 0.44434, [0.0021128], [0.0021426], [0.002121], [0.0021377], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012864271247963188], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928336016, 0.43432, [0.0012799], [0.0012952], [0.0012842], [0.0012901], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006589544382222812], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928336236, 0.439, [0.00065683], [0.00066446], [0.0006584], [0.00065952], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005474320519409192], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928336457, 0.44326, [0.00054373], [0.00055577], [0.00054547], [0.00055243], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.5388628264943903e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928336676, 0.45107, [2.5238e-05], [2.5484e-05], [2.531e-05], [2.5444e-05], [425], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018476078448343444], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928336900, 0.44887, [0.00018387], [0.00018535], [0.00018469], [0.00018495], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.347839755803866e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928337125, 0.43851, [4.3333e-05], [4.3669e-05], [4.3353e-05], [4.3572e-05], [244], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032490995128624017], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928337348, 0.43061, [0.00032458], [0.0003259], [0.00032468], [0.00032516], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003564339136134769], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928337562, 0.43987, [0.00035575], [0.00035723], [0.000356], [0.00035682], [29], [10]], "benchmarks.TextSuite.time_render": [[4.700765783165551e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928337780, 0.44748, [4.6678e-06], [4.7389e-06], [4.679e-06], [4.7266e-06], [2329], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.534749599675706e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928338008, 0.45211, [8.518e-05], [8.6115e-05], [8.5281e-05], [8.56e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.526865361445565e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928338236, 0.44223, [3.5155e-05], [3.5436e-05], [3.5219e-05], [3.5289e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002749084344127608], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928338461, 0.44124, [0.00027333], [0.00027587], [0.00027442], [0.00027528], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010947916991426608], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928338681, 0.44788, [0.0010928], [0.0010971], [0.0010935], [0.0010954], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014860387870742542], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928338909, 0.43559, [0.0014818], [0.0014929], [0.0014832], [0.00149], [7], [10]]}, "durations": {"<build>": 1.981421947479248}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/6d7ba589-virtualenv-py3.10.json
================================================
{"commit_hash": "6d7ba589e2e37e91f12d0a0d4e4a6ae0c9e144a5", "env_name": "virtualenv-py3.10", "date": 1591790104000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [null, [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928507933, 0.059222], "benchmarks.ColorSuite.time_downgrade_to_standard": [null, [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928507992, 0.058364], "benchmarks.ColorSuite.time_downgrade_to_windows": [null, [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928508051, 0.058069], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [null, [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928508109, 0.059971], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [null, [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928508169, 0.058018], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [null, [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928508227, 0.058165], "benchmarks.PrettySuite.time_pretty": [null, [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928508285, 0.058273], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928508343, 0.05774], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928508401, 0.057994], "benchmarks.StyleSuite.time_parse_ansi": [null, [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928508459, 0.058585], "benchmarks.StyleSuite.time_parse_hex": [null, [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928508518, 0.058293], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [null, [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928508576, 0.059203], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928508636, 0.058099], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928508694, 0.058112], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928508752, 0.057669], "benchmarks.TableSuite.time_table_heavy_wrapping": [null, [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928508810, 0.058181], "benchmarks.TableSuite.time_table_no_wrapping": [null, [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928508868, 0.05935], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928508927, 0.058248], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928508986, 0.057603], "benchmarks.TextSuite.time_divide": [null, [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928509043, 0.057807], "benchmarks.TextSuite.time_divide_unicode_heavy": [null, [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928509101, 0.057848], "benchmarks.TextSuite.time_fit": [null, [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928509159, 0.058172], "benchmarks.TextSuite.time_fit_unicode_heavy": [null, [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928509217, 0.057525], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928509275, 0.057732], "benchmarks.TextSuite.time_render": [null, [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928509333, 0.057952], "benchmarks.TextSuite.time_render_unicode_heavy": [null, [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928509391, 0.057931], "benchmarks.TextSuite.time_split": [null, [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928509449, 0.057919], "benchmarks.TextSuite.time_split_unicode_heavy": [null, [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928509507, 0.058091], "benchmarks.TextSuite.time_wrapping": [null, [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928509565, 0.057806], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [null, [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928509623, 0.057942]}, "durations": {"<build>": 1.957338809967041}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/71135d19-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "71135d19209f094293b077a10d18d484e6168505", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645958523000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7358246535271108e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825893575, 0.44318, [1.7065e-07], [1.7643e-07], [1.7228e-07], [1.7423e-07], [58655], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.736124033088963e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825893795, 0.44593, [1.7182e-07], [1.7619e-07], [1.7325e-07], [1.7401e-07], [59269], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.749896264640863e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825894018, 0.46343, [1.7364e-07], [1.7621e-07], [1.744e-07], [1.7527e-07], [62230], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7379012680051676e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825894249, 0.44671, [1.7308e-07], [1.7451e-07], [1.735e-07], [1.7389e-07], [64432], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.733303655393922e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825894473, 0.46653, [1.7051e-07], [1.7541e-07], [1.7209e-07], [1.7506e-07], [63422], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7343309261250583e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825894705, 0.46525, [1.7204e-07], [1.738e-07], [1.7297e-07], [1.7354e-07], [64208], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011425231738636892], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825894938, 0.44771, [0.0011188], [0.0011575], [0.0011275], [0.001147], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015932023525238037], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825895162, 0.45907, [0.0015868], [0.001625], [0.0015893], [0.0015971], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014345703093567863], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825895390, 0.47252, [0.0014051], [0.0014773], [0.0014161], [0.0014638], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1676538334593278e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825895620, 0.46028, [1.1408e-07], [1.172e-07], [1.1606e-07], [1.1685e-07], [94211], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1655173310349131e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825895851, 0.44085, [1.1565e-07], [1.1801e-07], [1.1619e-07], [1.1716e-07], [86386], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1661300664402947e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825896068, 0.44516, [1.1632e-07], [1.1726e-07], [1.1644e-07], [1.1684e-07], [87668], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008641979191452265], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825896289, 0.52586, [0.0084038], [0.0088186], [0.0085993], [0.0086823], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.00851668749237433], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825896551, 0.5211, [0.0084093], [0.0088585], [0.0084419], [0.0086228], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008634395664557815], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825896813, 0.52482, [0.0085491], [0.0087593], [0.0085878], [0.0086875], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019091840755815306], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825897075, 0.45682, [0.0018841], [0.001965], [0.0019027], [0.0019238], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011747037189909154], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825897305, 0.45363, [0.0011638], [0.0012015], [0.0011674], [0.001185], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038224197655486374], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825897534, 0.45116, [0.0003805], [0.00039014], [0.00038159], [0.00038563], [26], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003447604171621303], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825897762, 0.44968, [0.0003377], [0.00035857], [0.00033951], [0.0003484], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5695813607084208e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825897984, 0.46225, [2.5259e-05], [2.6108e-05], [2.5298e-05], [2.6034e-05], [416], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018839838530606867], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825898214, 0.46211, [0.00018547], [0.00018991], [0.00018631], [0.00018906], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.4390816735673924e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825898442, 0.45456, [4.363e-05], [4.4671e-05], [4.3802e-05], [4.4431e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033279030673926877], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825898672, 0.45041, [0.00033036], [0.00033545], [0.00033086], [0.00033508], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003633422477703009], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825898896, 0.44343, [0.00036102], [0.00036936], [0.00036256], [0.00036411], [28], [10]], "benchmarks.TextSuite.time_render": [[4.710008293819928e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825899116, 0.4546, [4.6854e-06], [4.8636e-06], [4.6979e-06], [4.7489e-06], [2289], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.71464966737207e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825899346, 0.46363, [8.5529e-05], [8.7916e-05], [8.6159e-05], [8.7407e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.6450096838224944e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825899579, 0.45307, [3.5565e-05], [3.702e-05], [3.6263e-05], [3.65e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002821204850349475], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825899804, 0.45423, [0.00027555], [0.00028894], [0.0002781], [0.00028663], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001388393182423897], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825900029, 0.45342, [0.0013811], [0.0014218], [0.001386], [0.0014005], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014838482020422816], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825900254, 0.44593, [0.0014659], [0.001492], [0.0014802], [0.0014882], [7], [10]]}, "durations": {"<build>": 1.8434970378875732}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/7441bf27-virtualenv-py3.10.json
================================================
{"commit_hash": "7441bf27f3a023c9d3cd57229e4e5e06ec1b8e9f", "env_name": "virtualenv-py3.10", "date": 1604838636000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.69993956141873e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929118445, 0.45436, [1.6902e-07], [1.706e-07], [1.6959e-07], [1.7017e-07], [64611], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.6992707311881512e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929118673, 0.455, [1.6811e-07], [1.709e-07], [1.6974e-07], [1.7026e-07], [64160], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7042165959298685e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929118900, 0.45666, [1.6919e-07], [1.7381e-07], [1.7017e-07], [1.7061e-07], [64392], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.701407808991948e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929119128, 0.45565, [1.6887e-07], [1.7082e-07], [1.6945e-07], [1.7043e-07], [64057], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7025582359342565e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929119356, 0.45392, [1.6901e-07], [1.7342e-07], [1.6943e-07], [1.711e-07], [64523], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7029257402860175e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929119585, 0.45366, [1.6925e-07], [1.7076e-07], [1.6988e-07], [1.7071e-07], [64840], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001029433349322062], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929119815, 0.44297, [0.0010255], [0.0010321], [0.0010274], [0.0010301], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014356697169465146], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929120035, 0.43558, [0.0014312], [0.0014429], [0.0014338], [0.0014394], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014150416882330319], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929120252, 0.44498, [0.0014119], [0.0014206], [0.0014127], [0.0014172], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1404079408120664e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929120475, 0.45216, [1.1347e-07], [1.1506e-07], [1.1361e-07], [1.1444e-07], [95443], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1443809598085704e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929120701, 0.45489, [1.1399e-07], [1.149e-07], [1.1439e-07], [1.1467e-07], [95745], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1409922493678854e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929120929, 0.45508, [1.1383e-07], [1.1421e-07], [1.1406e-07], [1.1418e-07], [95989], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929114929, 0.061891], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929114991, 0.061595], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929115052, 0.061577], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0027333021243975963], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929121156, 0.44115, [0.0027268], [0.0027483], [0.0027288], [0.0027398], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0018545936666972314], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929121374, 0.44863, [0.0018451], [0.0018652], [0.0018506], [0.0018572], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006624596562687657], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929121595, 0.43908, [0.00065986], [0.00066608], [0.00066138], [0.00066306], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005470712632431011], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929121816, 0.44171, [0.00054432], [0.0005528], [0.00054458], [0.00054816], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8061184237135182e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929122035, 0.44841, [2.8018e-05], [2.8198e-05], [2.8056e-05], [2.8065e-05], [380], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018741521042804315], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929122258, 0.44715, [0.00018649], [0.00018802], [0.00018726], [0.00018763], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2205236956896074e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929122481, 0.44443, [4.2101e-05], [4.2355e-05], [4.2137e-05], [4.2255e-05], [249], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003298904517695548], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929122702, 0.43364, [0.00032901], [0.00033133], [0.00032954], [0.00033032], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003926722694394322], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929122917, 0.43529, [0.00039187], [0.00039371], [0.0003923], [0.00039293], [26], [10]], "benchmarks.TextSuite.time_render": [[4.680221675507437e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929123134, 0.44451, [4.662e-06], [4.6956e-06], [4.6704e-06], [4.6843e-06], [2330], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.536893306080047e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929123359, 0.448, [8.4807e-05], [8.5676e-05], [8.5224e-05], [8.5509e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.379626033534578e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929123585, 0.44541, [3.3681e-05], [3.3922e-05], [3.3742e-05], [3.382e-05], [313], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002797815407550818], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929123806, 0.437, [0.00027888], [0.00028045], [0.0002795], [0.00027998], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001141516221751873], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929124024, 0.43956, [0.0011405], [0.0011435], [0.0011408], [0.0011423], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001525812431022392], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929124242, 0.44277, [0.0015221], [0.0015345], [0.0015229], [0.0015302], [7], [10]]}, "durations": {"<build>": 1.9917261600494385}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/76620730-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "76620730b58b0ba60c978eb93d55a3e37caaa05b", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645912262000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7132951522211086e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825987754, 0.46677, [1.7005e-07], [1.7193e-07], [1.7062e-07], [1.7175e-07], [64334], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.732306145163987e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825987989, 0.44066, [1.6939e-07], [1.7421e-07], [1.7228e-07], [1.7399e-07], [58641], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7414816341177177e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825988208, 0.45089, [1.7339e-07], [1.7491e-07], [1.7368e-07], [1.7471e-07], [64665], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7136101528493267e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825988433, 0.43886, [1.7016e-07], [1.7402e-07], [1.7111e-07], [1.7162e-07], [58794], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7295875887048033e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825988650, 0.46183, [1.7062e-07], [1.7437e-07], [1.7154e-07], [1.7366e-07], [63446], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7358861197658158e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825988880, 0.43914, [1.7158e-07], [1.7444e-07], [1.7205e-07], [1.7391e-07], [58943], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011182777299028304], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825989099, 0.44939, [0.0011095], [0.0011376], [0.0011123], [0.0011246], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015663839377728955], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825989325, 0.45173, [0.0015531], [0.00162], [0.0015606], [0.0015929], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001441658881958574], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825989548, 0.46309, [0.0014227], [0.001497], [0.0014366], [0.0014483], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1558425089663786e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825989780, 0.46443, [1.1399e-07], [1.1715e-07], [1.1509e-07], [1.1683e-07], [95423], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1595409328951017e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825990015, 0.45682, [1.1486e-07], [1.1732e-07], [1.1543e-07], [1.1693e-07], [95727], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1466393457731214e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825990249, 0.43943, [1.1426e-07], [1.1539e-07], [1.1458e-07], [1.149e-07], [87626], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008563343726564199], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825990470, 0.52202, [0.0083988], [0.0086715], [0.0084843], [0.0086232], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008613072976004332], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825990729, 0.5296, [0.0083977], [0.0094959], [0.008452], [0.0094318], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008553031308110803], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825990991, 0.52504, [0.00848], [0.0088186], [0.008496], [0.0086516], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019338680043195684], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825991250, 0.4635, [0.0018812], [0.0022427], [0.0018962], [0.0020048], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011800231619013678], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825991489, 0.45704, [0.0011618], [0.0012188], [0.001172], [0.0011943], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038792486053093204], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825991722, 0.45332, [0.00038264], [0.00039107], [0.00038708], [0.00038969], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003452997264121809], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825991953, 0.46729, [0.00034029], [0.00035963], [0.00034252], [0.00034779], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.563867498846615e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825992186, 0.45471, [2.5383e-05], [2.6089e-05], [2.5434e-05], [2.6022e-05], [425], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018457003572056518], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825992418, 0.46029, [0.00018416], [0.00018692], [0.00018448], [0.00018532], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.410484653650498e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825992647, 0.45298, [4.3579e-05], [4.4766e-05], [4.3773e-05], [4.4432e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.000327803667239619], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825992877, 0.46322, [0.00032591], [0.00033525], [0.00032631], [0.0003289], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035715444768168804], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825993109, 0.45087, [0.00035655], [0.00036032], [0.00035674], [0.00035781], [29], [10]], "benchmarks.TextSuite.time_render": [[4.7034749966058965e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825993332, 0.45899, [4.6883e-06], [4.8476e-06], [4.6982e-06], [4.706e-06], [2337], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.69535401256548e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825993565, 0.46539, [8.5346e-05], [8.9739e-05], [8.5876e-05], [8.8235e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.5818744221896635e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825993798, 0.46514, [3.5205e-05], [3.655e-05], [3.5565e-05], [3.6218e-05], [297], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002787017637226535], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825994025, 0.45775, [0.00027521], [0.00028496], [0.00027609], [0.00028166], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013723463925998658], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825994253, 0.46032, [0.0013645], [0.0014031], [0.0013671], [0.0013791], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014697767827393754], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825994486, 0.45131, [0.0014542], [0.0014875], [0.0014614], [0.0014847], [7], [10]]}, "durations": {"<build>": 1.814913034439087}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/79ea1c1d-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "79ea1c1d91f8bdd367b5a2cdf34578c54eb04615", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644833873000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.703416604757413e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826145592, 0.46449, [1.6972e-07], [1.7088e-07], [1.7007e-07], [1.7071e-07], [64093], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7107574802186616e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826145824, 0.45529, [1.6979e-07], [1.7197e-07], [1.7088e-07], [1.7147e-07], [64370], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7316086177717843e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826146057, 0.44808, [1.7059e-07], [1.774e-07], [1.7216e-07], [1.7595e-07], [64378], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7175014351392872e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826146282, 0.46638, [1.7027e-07], [1.7694e-07], [1.7116e-07], [1.7389e-07], [64363], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7153122149608008e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826146515, 0.45822, [1.7054e-07], [1.7271e-07], [1.7089e-07], [1.7218e-07], [62540], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.713283634791182e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826146744, 0.46432, [1.7053e-07], [1.741e-07], [1.7082e-07], [1.7322e-07], [63657], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011202824017446903], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826146977, 0.44534, [0.0011113], [0.0011795], [0.0011176], [0.0011256], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015747053548693657], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826147199, 0.45866, [0.0015607], [0.0017165], [0.0015637], [0.0016485], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001412260447978042], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826147427, 0.45955, [0.0014026], [0.0014377], [0.0014083], [0.0014174], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1575754535117167e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826147660, 0.46256, [1.1419e-07], [1.1733e-07], [1.1434e-07], [1.1714e-07], [95756], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1493195716047178e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826147892, 0.4535, [1.1425e-07], [1.1528e-07], [1.1482e-07], [1.1512e-07], [92657], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1469014979065884e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826148118, 0.46836, [1.1403e-07], [1.1502e-07], [1.1448e-07], [1.1476e-07], [95475], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008510927204042673], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826148354, 0.52456, [0.0084601], [0.0089971], [0.0084713], [0.0087609], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008474135538563132], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826148619, 0.52309, [0.0083666], [0.0092382], [0.0084165], [0.0086708], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008645093475934118], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826148884, 0.53595, [0.0084243], [0.0092085], [0.0084811], [0.0088675], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019665485791241126], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826149162, 0.48164, [0.0018632], [0.0021424], [0.0018954], [0.0019763], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011688379519101647], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826149404, 0.46614, [0.0011627], [0.0012182], [0.0011673], [0.0011808], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037898064640882827], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826149636, 0.45751, [0.00037314], [0.00038026], [0.0003741], [0.00037952], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003488277822422484], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826149863, 0.45396, [0.00034053], [0.00037088], [0.00034146], [0.00035783], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5397135177627207e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826150091, 0.45042, [2.5255e-05], [2.5582e-05], [2.5328e-05], [2.5498e-05], [400], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001855662142458771], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826150315, 0.45017, [0.0001847], [0.00018672], [0.0001853], [0.00018629], [56], [10]], "benchmarks.TextSuite.time_fit": [[4.4221173477720235e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826150539, 0.45992, [4.3513e-05], [4.5013e-05], [4.3606e-05], [4.4685e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003318944833271446], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826150776, 0.45444, [0.00032498], [0.00033925], [0.00032586], [0.00033581], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00037277012196337356], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826151007, 0.47208, [0.00035727], [0.00045654], [0.0003603], [0.00039745], [29], [10]], "benchmarks.TextSuite.time_render": [[4.689688952064612e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826151249, 0.46529, [4.6421e-06], [4.742e-06], [4.6852e-06], [4.7276e-06], [2332], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.622688710602233e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826151488, 0.45359, [8.5391e-05], [8.9274e-05], [8.572e-05], [8.796e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.537256497430143e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826151712, 0.45045, [3.52e-05], [3.6554e-05], [3.5248e-05], [3.5534e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.000277070720729075], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826151941, 0.45314, [0.00027563], [0.00027802], [0.00027582], [0.0002777], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001376611937303096], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826152168, 0.46693, [0.0013695], [0.0014287], [0.0013717], [0.0013787], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014874018628948501], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826152406, 0.45676, [0.0014565], [0.0015594], [0.0014627], [0.0015097], [7], [10]]}, "durations": {"<build>": 1.8048322200775146}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/7bad81d5-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "7bad81d5a6c82ca0442eed59d868fc904984b6c1", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645959878000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.731511614571098e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825830648, 0.44012, [1.7102e-07], [1.7395e-07], [1.7151e-07], [1.7358e-07], [58219], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7433838084250843e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825830867, 0.45573, [1.7329e-07], [1.7622e-07], [1.7354e-07], [1.747e-07], [64444], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7398219594512195e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825831092, 0.44852, [1.7217e-07], [1.7466e-07], [1.7342e-07], [1.7437e-07], [64170], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7411051191695882e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825831316, 0.46167, [1.7166e-07], [1.7435e-07], [1.7382e-07], [1.7429e-07], [63993], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7190646424962193e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825831550, 0.46456, [1.6996e-07], [1.7569e-07], [1.7136e-07], [1.7313e-07], [63397], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7395118748787767e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825831781, 0.4595, [1.7113e-07], [1.8361e-07], [1.7174e-07], [1.7555e-07], [64080], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011384721664297911], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825832007, 0.45043, [0.0011272], [0.0011617], [0.0011361], [0.0011497], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015927351445757917], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825832231, 0.45641, [0.0015622], [0.0016234], [0.0015813], [0.0015956], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001439735060557723], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825832456, 0.44729, [0.0014232], [0.0014501], [0.001435], [0.0014415], [7], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.167718294573881e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825832677, 0.44185, [1.1636e-07], [1.1734e-07], [1.1642e-07], [1.1705e-07], [87051], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1713643556132539e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825832898, 0.44417, [1.1645e-07], [1.1859e-07], [1.1704e-07], [1.1726e-07], [87145], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1673255913250815e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825833117, 0.45051, [1.1551e-07], [1.184e-07], [1.1649e-07], [1.1729e-07], [87517], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008449062763247639], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825833346, 0.52164, [0.0083843], [0.0087984], [0.0084354], [0.0084932], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008705187472514808], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825833607, 0.53324, [0.008545], [0.0094974], [0.0086484], [0.0087819], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008624823007266968], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825833872, 0.53001, [0.0084858], [0.0087701], [0.0086079], [0.0086686], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019010313359710078], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825834134, 0.45544, [0.0018747], [0.0019247], [0.0018865], [0.0019085], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001190356496307585], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825834364, 0.4553, [0.0011561], [0.0012153], [0.0011645], [0.001197], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003901584797339248], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825834594, 0.45347, [0.00038308], [0.00039073], [0.00038729], [0.00039036], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.000342212354524001], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825834824, 0.46053, [0.00034006], [0.00035962], [0.00034054], [0.00034392], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.545119102507055e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825835054, 0.45918, [2.5296e-05], [2.6376e-05], [2.5344e-05], [2.6106e-05], [423], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001887094153187655], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825835282, 0.4682, [0.00018831], [0.00018929], [0.0001885], [0.0001889], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.444211066822658e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825835514, 0.45537, [4.3895e-05], [4.4963e-05], [4.4102e-05], [4.4663e-05], [244], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003294643735693347], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825835745, 0.45347, [0.00032852], [0.00033142], [0.00032927], [0.00033015], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036279525977141896], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825835968, 0.45365, [0.00036173], [0.00036402], [0.00036233], [0.00036338], [29], [10]], "benchmarks.TextSuite.time_render": [[4.735205595670699e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825836192, 0.44899, [4.678e-06], [4.7891e-06], [4.7032e-06], [4.7717e-06], [2332], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.687204736336244e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825836415, 0.46171, [8.5715e-05], [8.741e-05], [8.6053e-05], [8.7015e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.581846389791061e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825836647, 0.45105, [3.536e-05], [3.6391e-05], [3.5603e-05], [3.5991e-05], [290], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028111951695264955], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825836871, 0.46567, [0.00027938], [0.00029743], [0.00028016], [0.00028259], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013887499953852966], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825837099, 0.45588, [0.0013707], [0.0014027], [0.0013813], [0.0013961], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014872232152681264], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825837323, 0.44594, [0.0014817], [0.0014969], [0.0014859], [0.0014892], [7], [10]]}, "durations": {"<build>": 1.8380367755889893}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/7d00fa83-virtualenv-py3.10.json
================================================
{"commit_hash": "7d00fa83f262ae3bd6fa6c27661e0894675900fc", "env_name": "virtualenv-py3.10", "date": 1601133139000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7152168381914458e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928935586, 0.45022, [1.7037e-07], [1.7468e-07], [1.7094e-07], [1.7302e-07], [64611], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7124719806948264e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928935812, 0.42435, [1.7021e-07], [1.7596e-07], [1.7065e-07], [1.7297e-07], [59068], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7004018757994035e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928936025, 0.44922, [1.694e-07], [1.7119e-07], [1.695e-07], [1.7066e-07], [64485], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7023790921083508e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928936249, 0.44529, [1.6892e-07], [1.7351e-07], [1.6959e-07], [1.7213e-07], [64905], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7052329803763258e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928936476, 0.44483, [1.6918e-07], [1.7618e-07], [1.6994e-07], [1.7237e-07], [64791], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7033085957146206e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928936701, 0.43773, [1.6877e-07], [1.7081e-07], [1.6981e-07], [1.7038e-07], [64680], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0009145681820386512], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928936926, 0.42703, [0.00091065], [0.000919], [0.00091292], [0.0009166], [11], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928931372, 0.057696], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013091172495478531], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928937139, 0.43233, [0.0013056], [0.0013171], [0.0013087], [0.0013098], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1448396771341196e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928937361, 0.42008, [1.1412e-07], [1.1601e-07], [1.1422e-07], [1.1476e-07], [87636], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1539506549148682e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928937571, 0.44916, [1.1406e-07], [1.1704e-07], [1.1436e-07], [1.1656e-07], [95693], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1471164977843093e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928937796, 0.43959, [1.1401e-07], [1.1677e-07], [1.1446e-07], [1.1558e-07], [95306], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928932299, 0.05767], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928932357, 0.057931], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928932415, 0.057468], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002859541626094142], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928938012, 0.43849, [0.0028467], [0.0028628], [0.002852], [0.0028608], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001917430582883147], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928938236, 0.4463, [0.0019126], [0.0019259], [0.0019149], [0.0019222], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006689111003652215], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928938458, 0.43736, [0.00066326], [0.00068545], [0.00066453], [0.00068324], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.000553631944866437], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928938676, 0.42185, [0.0005489], [0.0005577], [0.00055082], [0.00055466], [18], [10]], "benchmarks.TextSuite.time_divide": [[2.7876415161668826e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928938884, 0.43846, [2.7764e-05], [2.8006e-05], [2.7789e-05], [2.7922e-05], [383], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018746380718719018], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928939102, 0.43805, [0.00018712], [0.00018808], [0.0001874], [0.00018764], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.230848390582844e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928939321, 0.43639, [4.2038e-05], [4.2757e-05], [4.2158e-05], [4.2459e-05], [249], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003381525480841857], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928939537, 0.43111, [0.00033217], [0.00033881], [0.00033273], [0.00033864], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928934224, 0.058127], "benchmarks.TextSuite.time_render": [[4.670490798636853e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928939751, 0.43583, [4.667e-06], [4.6942e-06], [4.6685e-06], [4.6866e-06], [2337], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.537926778516284e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928939972, 0.43947, [8.4675e-05], [8.5659e-05], [8.5186e-05], [8.5463e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.3882745181192426e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928940193, 0.43579, [3.3822e-05], [3.3982e-05], [3.3851e-05], [3.3898e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002802438110528463], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928940410, 0.42857, [0.00027797], [0.00028093], [0.00027941], [0.00028069], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011615555558819324], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928940624, 0.43524, [0.0011469], [0.0011728], [0.0011496], [0.0011715], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015286369286643875], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928940839, 0.43395, [0.0015273], [0.0015322], [0.0015279], [0.00153], [7], [10]]}, "durations": {"<build>": 1.9654920101165771}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/7d02d29b-virtualenv-py3.10.json
================================================
{"commit_hash": "7d02d29ba887c5c2b0203e0fb7e3c34cf1e14079", "env_name": "virtualenv-py3.10", "date": 1620839897000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7077510481264497e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928318810, 0.45309, [1.6936e-07], [1.7157e-07], [1.707e-07], [1.7092e-07], [64410], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.706749065736248e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928319038, 0.45742, [1.6839e-07], [1.777e-07], [1.7044e-07], [1.7107e-07], [64040], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7087207586668443e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928319267, 0.44896, [1.6999e-07], [1.7179e-07], [1.7071e-07], [1.7138e-07], [64421], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.6970038628436962e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928319497, 0.45759, [1.6928e-07], [1.7042e-07], [1.6943e-07], [1.7033e-07], [64463], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.702653902179122e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928319726, 0.45623, [1.6886e-07], [1.7112e-07], [1.6917e-07], [1.7068e-07], [64311], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6978547887025366e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928319953, 0.45391, [1.6856e-07], [1.7095e-07], [1.6965e-07], [1.7017e-07], [64982], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010310937490430661], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928320182, 0.44358, [0.0010281], [0.0010342], [0.0010303], [0.0010327], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014274505010689609], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928320403, 0.45385, [0.0014251], [0.0014358], [0.0014254], [0.001431], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014291428565879221], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928320629, 0.43585, [0.0014252], [0.0014377], [0.0014274], [0.0014305], [7], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1466584996186426e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928320845, 0.45462, [1.1386e-07], [1.1489e-07], [1.1426e-07], [1.1481e-07], [95309], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1440406518055994e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928321073, 0.45606, [1.1405e-07], [1.149e-07], [1.1421e-07], [1.1456e-07], [95471], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1432087586143092e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928321302, 0.45638, [1.1421e-07], [1.1494e-07], [1.1425e-07], [1.146e-07], [96087], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928315316, 0.062295], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928315379, 0.06217], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928315441, 0.061908], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002121429200633429], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928321531, 0.44301, [0.0021103], [0.0021321], [0.0021124], [0.0021268], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012849895647377707], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928321756, 0.44529, [0.0012761], [0.0012971], [0.0012803], [0.0012876], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006609492183997645], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928321977, 0.44011, [0.00065855], [0.00066375], [0.000659], [0.00066209], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005540559474244027], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928322200, 0.43631, [0.00054473], [0.00055554], [0.00054723], [0.00055462], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.5303272734231173e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928322419, 0.4549, [2.5237e-05], [2.5439e-05], [2.5239e-05], [2.5395e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001852891554931532], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928322645, 0.4503, [0.00018411], [0.0001862], [0.0001845], [0.00018571], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.348280693866252e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928322871, 0.44136, [4.3388e-05], [4.3622e-05], [4.344e-05], [4.358e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032538104841801067], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928323095, 0.43236, [0.00032391], [0.00032614], [0.00032494], [0.0003257], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003564827583714163], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928323309, 0.4387, [0.00035554], [0.00035729], [0.00035597], [0.00035685], [29], [10]], "benchmarks.TextSuite.time_render": [[4.679865193169243e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928323527, 0.44595, [4.6556e-06], [4.7006e-06], [4.6596e-06], [4.6866e-06], [2333], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.495348447468132e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928323754, 0.45365, [8.4525e-05], [8.6103e-05], [8.4707e-05], [8.5316e-05], [129], [10]], "benchmarks.TextSuite.time_split": [[3.518007681978976e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928323983, 0.44174, [3.5117e-05], [3.5323e-05], [3.5155e-05], [3.5208e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002751134869820242], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928324208, 0.442, [0.00027418], [0.00027559], [0.00027491], [0.00027528], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011011437498382294], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928324429, 0.43825, [0.0010993], [0.0011034], [0.0011002], [0.0011017], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014841130718455783], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928324647, 0.43485, [0.0014816], [0.0014891], [0.0014835], [0.0014849], [7], [10]]}, "durations": {"<build>": 2.0028321743011475}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/7e4a2db4-virtualenv-py3.10.json
================================================
{"commit_hash": "7e4a2db4afa29a59ff90d265ad115a225038a5d0", "env_name": "virtualenv-py3.10", "date": 1597915067000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7312274627873389e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928843145, 0.42725, [1.718e-07], [1.7357e-07], [1.7281e-07], [1.733e-07], [59069], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7344319274046708e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928843357, 0.42102, [1.7202e-07], [1.7496e-07], [1.7232e-07], [1.739e-07], [58188], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.777581145458935e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928843566, 0.42961, [1.7185e-07], [1.7928e-07], [1.7674e-07], [1.7828e-07], [58538], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.772104383225627e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928843781, 0.4363, [1.734e-07], [1.8227e-07], [1.7444e-07], [1.7931e-07], [58927], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7272044444259472e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928844001, 0.43276, [1.7104e-07], [1.7416e-07], [1.719e-07], [1.7337e-07], [58999], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7308010152578406e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928844218, 0.44067, [1.6953e-07], [1.752e-07], [1.7148e-07], [1.7371e-07], [64487], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0012555486108693811], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928844434, 0.44469, [0.0012361], [0.0013045], [0.0012413], [0.0012842], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928838944, 0.058717], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0016895034156429272], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928844656, 0.43305, [0.0016802], [0.0017085], [0.001685], [0.0016947], [6], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1612291047267581e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928844871, 0.43274, [1.1511e-07], [1.188e-07], [1.1582e-07], [1.1652e-07], [96550], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1627379717064531e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928845087, 0.43524, [1.1587e-07], [1.1659e-07], [1.1606e-07], [1.164e-07], [96787], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1638364998192817e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928845303, 0.422, [1.1568e-07], [1.1652e-07], [1.1609e-07], [1.1645e-07], [87022], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928839870, 0.057734], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928839928, 0.057605], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928839986, 0.059306], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0022837875003460795], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928845514, 0.43581, [0.0022611], [0.0023101], [0.002267], [0.0022996], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014666101425453754], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928845733, 0.42564, [0.0014631], [0.0014723], [0.0014644], [0.0014681], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006732291677811493], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928845948, 0.43034, [0.00066385], [0.00068119], [0.00066946], [0.00067633], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005628495281497533], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928846161, 0.42767, [0.00054804], [0.00058536], [0.00055807], [0.00056617], [18], [10]], "benchmarks.TextSuite.time_divide": [[2.8208985658150956e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928846371, 0.44365, [2.7865e-05], [2.9148e-05], [2.794e-05], [2.8449e-05], [383], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018850950883668766], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928846594, 0.44194, [0.00018701], [0.00019119], [0.00018714], [0.00019033], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2368358616119776e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928846816, 0.44202, [4.1847e-05], [4.2673e-05], [4.225e-05], [4.2569e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003364388389708174], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928847036, 0.43241, [0.00033108], [0.00033716], [0.00033583], [0.00033691], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928841789, 0.057951], "benchmarks.TextSuite.time_render": [[4.658614678212554e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928847251, 0.43115, [4.6482e-06], [4.7763e-06], [4.6519e-06], [4.6832e-06], [2119], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.536262896541302e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928847469, 0.4424, [8.4729e-05], [8.5824e-05], [8.5276e-05], [8.5483e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.368716559318939e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928847692, 0.43337, [3.3514e-05], [3.4128e-05], [3.3555e-05], [3.38e-05], [311], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002821019191508861], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928847907, 0.43083, [0.00027847], [0.00028576], [0.00027943], [0.00028431], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011662615563384155], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928848121, 0.42793, [0.0011651], [0.0011752], [0.0011655], [0.0011683], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015554523581938285], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928848338, 0.4403, [0.0015541], [0.0015578], [0.0015549], [0.0015561], [7], [10]]}, "durations": {"<build>": 2.0842061042785645}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/7edd619f-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "7edd619f1cde2c8c25bb5bf319a69534f76ffe40", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645958141000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7184339309962583e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825940720, 0.44164, [1.706e-07], [1.7613e-07], [1.7159e-07], [1.7311e-07], [58515], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.736386030630045e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825940938, 0.45634, [1.7015e-07], [1.7505e-07], [1.7155e-07], [1.7469e-07], [61377], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7361800084302734e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825941168, 0.44655, [1.7155e-07], [1.7553e-07], [1.7341e-07], [1.7452e-07], [58499], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7281709401441367e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825941391, 0.45236, [1.7051e-07], [1.7792e-07], [1.7138e-07], [1.7426e-07], [58519], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7211923711565374e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825941621, 0.4653, [1.7108e-07], [1.7474e-07], [1.7155e-07], [1.7385e-07], [63399], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7355223091358875e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825941857, 0.46069, [1.7086e-07], [1.7471e-07], [1.7174e-07], [1.7435e-07], [62634], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011370994875000583], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825942087, 0.44934, [0.0011287], [0.0011548], [0.0011361], [0.0011389], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015941369347274303], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825942312, 0.4644, [0.0015689], [0.0016538], [0.0015898], [0.0016159], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014438362891918846], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825942540, 0.44588, [0.0014173], [0.0014789], [0.0014305], [0.0014486], [7], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1682794126022529e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825942761, 0.44688, [1.1648e-07], [1.1737e-07], [1.1674e-07], [1.1701e-07], [95822], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1713763822638963e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825942986, 0.43986, [1.1602e-07], [1.1817e-07], [1.1654e-07], [1.1755e-07], [86655], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1638646239324005e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825943204, 0.44006, [1.1489e-07], [1.1742e-07], [1.1547e-07], [1.1669e-07], [87527], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008462395751848817], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825943423, 0.51958, [0.0083906], [0.0087459], [0.0084453], [0.00854], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008620249689556658], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825943684, 0.53575, [0.0084561], [0.0087252], [0.0086013], [0.0086514], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008618729538284242], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825943947, 0.52719, [0.008456], [0.0088275], [0.0085055], [0.0086899], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019067395866538086], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825944208, 0.45432, [0.0018811], [0.0019596], [0.0018989], [0.0019154], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011741875075838631], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825944438, 0.45345, [0.0011584], [0.0011944], [0.0011606], [0.0011897], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038412128924392164], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825944667, 0.46141, [0.00037929], [0.00038836], [0.00038047], [0.00038726], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034901678877612277], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825944893, 0.46498, [0.00034646], [0.0003576], [0.00034729], [0.00035451], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.6008850969199284e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825945124, 0.45675, [2.5396e-05], [2.626e-05], [2.5768e-05], [2.6201e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018600540891013762], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825945347, 0.43941, [0.00018443], [0.00018879], [0.00018553], [0.00018815], [54], [10]], "benchmarks.TextSuite.time_fit": [[4.428120814643953e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825945566, 0.4546, [4.3887e-05], [4.4568e-05], [4.3932e-05], [4.4498e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003282379043558913], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825945795, 0.44687, [0.00032733], [0.00033856], [0.00032748], [0.00033336], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003599992768582085], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825946017, 0.45063, [0.00035516], [0.00036365], [0.00035669], [0.00036276], [29], [10]], "benchmarks.TextSuite.time_render": [[4.759544411497395e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825946240, 0.46094, [4.6885e-06], [4.819e-06], [4.6984e-06], [4.8069e-06], [2329], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.587995987562906e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825946472, 0.45265, [8.5038e-05], [8.8199e-05], [8.5345e-05], [8.6557e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.618252953648373e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825946702, 0.45662, [3.5313e-05], [3.6348e-05], [3.6056e-05], [3.6227e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002814172123754887], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825946936, 0.45831, [0.00027538], [0.00028491], [0.0002783], [0.00028399], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013940807402832434], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825947165, 0.459, [0.0013697], [0.0014048], [0.0013837], [0.0013956], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014918809257713811], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825947391, 0.44819, [0.0014817], [0.0015149], [0.0014852], [0.0014929], [7], [10]]}, "durations": {"<build>": 1.828949213027954}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/7ef7ffee-virtualenv-py3.10.json
================================================
{"commit_hash": "7ef7ffeee33f269be0a9c36efad943ac8bd15487", "env_name": "virtualenv-py3.10", "date": 1609437433000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.6997115926848885e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929204123, 0.45748, [1.6906e-07], [1.7159e-07], [1.6974e-07], [1.7082e-07], [64319], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.706327780843142e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929204351, 0.45507, [1.6897e-07], [1.7215e-07], [1.7017e-07], [1.7123e-07], [64363], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.707562660580813e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929204579, 0.44674, [1.6962e-07], [1.7201e-07], [1.6994e-07], [1.7098e-07], [64554], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7003118888666897e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929204806, 0.45514, [1.6919e-07], [1.7091e-07], [1.6945e-07], [1.7037e-07], [64286], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7044878890213844e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929205033, 0.45498, [1.7014e-07], [1.7266e-07], [1.7024e-07], [1.7136e-07], [64156], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7011135523638199e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929205260, 0.45723, [1.6903e-07], [1.7123e-07], [1.6939e-07], [1.7038e-07], [64447], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010279999507474711], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929205487, 0.44118, [0.0010227], [0.0010321], [0.0010253], [0.0010298], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014366607148466365], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929205705, 0.43525, [0.0014323], [0.001451], [0.0014361], [0.0014396], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014127708127489313], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929205920, 0.44605, [0.0014089], [0.0014172], [0.0014096], [0.0014134], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1407525987620847e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929206143, 0.45375, [1.1387e-07], [1.1429e-07], [1.1394e-07], [1.1424e-07], [95828], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1432287290079367e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929206370, 0.45274, [1.1392e-07], [1.1498e-07], [1.1413e-07], [1.1467e-07], [95344], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1463674062890038e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929206595, 0.45355, [1.1425e-07], [1.1496e-07], [1.1445e-07], [1.1468e-07], [95385], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929200596, 0.062448], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929200659, 0.061732], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929200721, 0.061748], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.003225901000405429], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929206822, 0.47048, [0.0032218], [0.0032385], [0.0032253], [0.0032281], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.002120674998150207], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929207055, 0.44282, [0.0021002], [0.0021341], [0.0021094], [0.0021281], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006601445311389398], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929207279, 0.44052, [0.00065804], [0.00066373], [0.00065897], [0.00066197], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.000546400237669188], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929207500, 0.44218, [0.00054333], [0.00055386], [0.0005453], [0.00054747], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8034559086825592e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929207718, 0.44825, [2.7841e-05], [2.831e-05], [2.7864e-05], [2.8285e-05], [381], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018681578078764703], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929207942, 0.44605, [0.0001861], [0.00018853], [0.00018647], [0.00018714], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.239101994845764e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929208165, 0.43927, [4.2093e-05], [4.244e-05], [4.2172e-05], [4.2416e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003296060604043305], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929208387, 0.45608, [0.00032852], [0.00033145], [0.00032881], [0.00033094], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00039179086497125146], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929208613, 0.43372, [0.0003914], [0.00039339], [0.0003916], [0.00039198], [26], [10]], "benchmarks.TextSuite.time_render": [[4.708054804081965e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929208828, 0.44413, [4.6782e-06], [4.716e-06], [4.7039e-06], [4.7135e-06], [2317], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.508661421800516e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929209053, 0.44699, [8.4722e-05], [8.6361e-05], [8.4774e-05], [8.5719e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.385616983928813e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929209279, 0.44384, [3.3669e-05], [3.3995e-05], [3.3734e-05], [3.389e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027874831072482705], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929209499, 0.43593, [0.00027804], [0.0002805], [0.00027849], [0.00027933], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011445926098127125], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929209716, 0.43905, [0.0011432], [0.0011518], [0.001144], [0.0011452], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015272857147335473], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929209934, 0.4428, [0.0015239], [0.0015356], [0.0015245], [0.0015317], [7], [10]]}, "durations": {"<build>": 1.9905059337615967}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/83756d62-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "83756d624022d88082cf08ad49613d15b86ced21", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644495177000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7131425766632752e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826319316, 0.46223, [1.6975e-07], [1.7275e-07], [1.7011e-07], [1.7257e-07], [63142], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7106519341347727e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826319547, 0.46482, [1.6889e-07], [1.7282e-07], [1.7089e-07], [1.721e-07], [63994], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7094999681180878e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826319781, 0.46118, [1.6906e-07], [1.7357e-07], [1.7015e-07], [1.7156e-07], [64397], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7088217582126208e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826320019, 0.45778, [1.6964e-07], [1.7209e-07], [1.7066e-07], [1.7107e-07], [64410], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.705508084422705e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826320253, 0.46624, [1.6882e-07], [1.7268e-07], [1.6983e-07], [1.711e-07], [64123], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.719202389096079e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826320486, 0.46559, [1.7098e-07], [1.7341e-07], [1.7164e-07], [1.7234e-07], [64004], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001119486120943394], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826320719, 0.44279, [0.001114], [0.0011621], [0.0011154], [0.0011253], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015703303672905478], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826320939, 0.45966, [0.0015648], [0.0016062], [0.0015676], [0.0015737], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014154088130453601], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826321166, 0.45892, [0.0014068], [0.0014719], [0.0014112], [0.001455], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1488627669723166e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826321394, 0.45219, [1.1455e-07], [1.1585e-07], [1.1471e-07], [1.1528e-07], [91326], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1501622282831073e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826321618, 0.46592, [1.1471e-07], [1.1559e-07], [1.1485e-07], [1.1518e-07], [95603], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1480839105088124e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826321852, 0.46177, [1.1406e-07], [1.1616e-07], [1.1452e-07], [1.1516e-07], [94745], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008464572951197624], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826322082, 0.51621, [0.0084055], [0.0085609], [0.0084366], [0.0084812], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008465896011330187], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826322341, 0.52082, [0.0084217], [0.0088018], [0.0084278], [0.0085984], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008483562443871051], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826322602, 0.51825, [0.0083971], [0.0087765], [0.0084113], [0.0085855], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018836700861963134], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826322861, 0.45931, [0.0018656], [0.001895], [0.0018782], [0.0018858], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011581828972945611], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826323088, 0.44683, [0.0011513], [0.0011723], [0.0011546], [0.0011613], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037753198245939396], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826323314, 0.45186, [0.0003759], [0.00038451], [0.00037609], [0.00038229], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003438716446379981], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826323537, 0.45098, [0.00034058], [0.00035531], [0.00034356], [0.00034455], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5485276777404717e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826323767, 0.45779, [2.5395e-05], [2.6167e-05], [2.544e-05], [2.5538e-05], [416], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018554093038434524], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826323993, 0.46074, [0.00018474], [0.0001894], [0.00018485], [0.00018646], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.3975510064284414e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826324218, 0.45479, [4.3547e-05], [4.5249e-05], [4.3652e-05], [4.4206e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032760227578833246], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826324446, 0.45257, [0.00032563], [0.00032906], [0.00032696], [0.00032837], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003565668072230343], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826324677, 0.44862, [0.00035549], [0.00035765], [0.00035578], [0.0003568], [29], [10]], "benchmarks.TextSuite.time_render": [[4.687105110480913e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826324899, 0.45419, [4.6736e-06], [4.7106e-06], [4.6832e-06], [4.6905e-06], [2321], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.639468496122698e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826325130, 0.46513, [8.5587e-05], [9.0549e-05], [8.5922e-05], [8.7172e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.525928214573526e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826325362, 0.46143, [3.5133e-05], [3.579e-05], [3.5216e-05], [3.5516e-05], [303], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002777554879063054], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826325592, 0.45531, [0.0002754], [0.00028398], [0.00027688], [0.00028123], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013906848907936364], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826325818, 0.4654, [0.0013672], [0.0014488], [0.0013732], [0.0014171], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014664107833855919], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826326051, 0.44532, [0.0014543], [0.0014996], [0.001463], [0.0014693], [7], [10]]}, "durations": {"<build>": 1.8162689208984375}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/837b6d7e-virtualenv-py3.10.json
================================================
{"commit_hash": "837b6d7e85254f0047cb41a4cbe0e4b00f54809d", "env_name": "virtualenv-py3.10", "date": 1593800813000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7314400652883433e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928628094, 0.43377, [1.7156e-07], [1.7366e-07], [1.7265e-07], [1.7323e-07], [64761], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7027701335729176e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928628311, 0.45028, [1.6933e-07], [1.7068e-07], [1.6991e-07], [1.7056e-07], [64681], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7082448805436622e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928628535, 0.4374, [1.6882e-07], [1.7336e-07], [1.7015e-07], [1.7289e-07], [64121], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.716318124119509e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928628757, 0.43994, [1.7043e-07], [1.7408e-07], [1.707e-07], [1.7392e-07], [64315], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.731136091072997e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928628981, 0.42481, [1.7236e-07], [1.7422e-07], [1.7288e-07], [1.7371e-07], [58807], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7379118770533637e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928629192, 0.45223, [1.7311e-07], [1.7478e-07], [1.7336e-07], [1.7419e-07], [64285], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0022265042032813655], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928629419, 0.43745, [0.0022056], [0.0022521], [0.002208], [0.0022448], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928624370, 0.058751], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928624429, 0.058399], "benchmarks.StyleSuite.time_parse_ansi": [[1.1601193713591404e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928629634, 0.44023, [1.1556e-07], [1.1614e-07], [1.159e-07], [1.1604e-07], [96547], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1387365450129381e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928629859, 0.43791, [1.1344e-07], [1.1448e-07], [1.1376e-07], [1.1429e-07], [96434], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1488108242607518e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928630083, 0.43797, [1.1354e-07], [1.1628e-07], [1.138e-07], [1.1613e-07], [96138], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928625132, 0.058143], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928625190, 0.057854], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928625248, 0.057857], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002100912400055677], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928630306, 0.43308, [0.0020977], [0.0021073], [0.0021003], [0.0021016], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014629047156112002], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928630525, 0.42589, [0.0014545], [0.0014674], [0.0014561], [0.001465], [7], [10]], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928625732, 0.058355], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928625790, 0.058843], "benchmarks.TextSuite.time_divide": [[2.778382078357428e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928630740, 0.44048, [2.7731e-05], [2.783e-05], [2.774e-05], [2.7793e-05], [385], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001872054037225449], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928630960, 0.43882, [0.00018586], [0.0001878], [0.00018685], [0.00018744], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.273183603072539e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928631179, 0.44109, [4.2158e-05], [4.3363e-05], [4.227e-05], [4.3173e-05], [250], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.000335991935102239], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928631400, 0.43127, [0.00033443], [0.00033806], [0.00033488], [0.00033686], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928626729, 0.058235], "benchmarks.TextSuite.time_render": [[4.682887363269996e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928631614, 0.4372, [4.6773e-06], [4.6896e-06], [4.681e-06], [4.6848e-06], [2326], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.672292907557296e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928631836, 0.44366, [8.4552e-05], [8.811e-05], [8.6325e-05], [8.7698e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.445008112905341e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928632058, 0.43619, [3.3619e-05], [3.4768e-05], [3.4274e-05], [3.4602e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002822015812853351], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928632274, 0.43194, [0.00027969], [0.00028413], [0.0002807], [0.00028398], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011445162219590405], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928632490, 0.43268, [0.0011387], [0.0011504], [0.001142], [0.0011454], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015336725711157279], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928632704, 0.43729, [0.0015169], [0.0015511], [0.0015199], [0.0015466], [7], [10]]}, "durations": {"<build>": 1.9572207927703857}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/877c53d9-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "877c53d9c58002b517f451139dda148619e97b33", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644676299000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7042891479487422e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826208843, 0.46354, [1.6935e-07], [1.7248e-07], [1.7012e-07], [1.7115e-07], [64290], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7168218643203964e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826209075, 0.45897, [1.7077e-07], [1.8134e-07], [1.7098e-07], [1.7709e-07], [64234], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.708619206179827e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826209303, 0.45, [1.6908e-07], [1.7261e-07], [1.7061e-07], [1.7135e-07], [61215], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7062951286118297e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826209528, 0.45632, [1.7002e-07], [1.7135e-07], [1.7039e-07], [1.7081e-07], [63785], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7510242560195752e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826209761, 0.47077, [1.7092e-07], [1.7823e-07], [1.7129e-07], [1.7784e-07], [64359], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.730160297167318e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826209999, 0.46201, [1.7047e-07], [1.7487e-07], [1.7125e-07], [1.7424e-07], [64009], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001139048616298371], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826210226, 0.45861, [0.0011164], [0.0011886], [0.0011202], [0.0011518], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001560425651924951], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826210455, 0.45303, [0.0015535], [0.0015703], [0.0015591], [0.0015633], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014142838772386312], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826210679, 0.46244, [0.0014039], [0.0014239], [0.0014109], [0.0014176], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1503661580698256e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826210907, 0.46291, [1.1425e-07], [1.1616e-07], [1.144e-07], [1.1545e-07], [94933], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1450679967596948e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826211138, 0.46332, [1.1406e-07], [1.1869e-07], [1.1423e-07], [1.1506e-07], [95818], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1548031633238026e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826211371, 0.46208, [1.1443e-07], [1.1789e-07], [1.1458e-07], [1.167e-07], [93659], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008563697978388518], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826211601, 0.51964, [0.0083905], [0.0088111], [0.0084783], [0.0086492], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008488312480039895], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826211861, 0.5202, [0.0084346], [0.0085491], [0.0084591], [0.0085242], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008432291506323963], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826212122, 0.5194, [0.0083922], [0.0088502], [0.0084025], [0.0084632], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018819688314882417], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826212384, 0.46189, [0.0018725], [0.0019986], [0.001877], [0.0019192], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001161995343863964], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826212612, 0.44711, [0.0011526], [0.0012138], [0.0011547], [0.001169], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003809017819418971], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826212839, 0.45955, [0.00037841], [0.00038627], [0.0003805], [0.00038188], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003414076520130038], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826213068, 0.44878, [0.00033986], [0.00035034], [0.000341], [0.00034215], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.540846952876246e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826213291, 0.46303, [2.538e-05], [2.5544e-05], [2.5388e-05], [2.5457e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018596300124672466], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826213521, 0.46624, [0.00018469], [0.0001946], [0.00018517], [0.00018991], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.367874127489571e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826213751, 0.4663, [4.3519e-05], [4.431e-05], [4.3644e-05], [4.3863e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003278143950879122], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826213984, 0.46456, [0.00032533], [0.00033045], [0.00032593], [0.00032859], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035601149810927696], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826214218, 0.4499, [0.00035544], [0.00036724], [0.00035583], [0.00035747], [29], [10]], "benchmarks.TextSuite.time_render": [[4.700414946700146e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826214442, 0.45779, [4.6613e-06], [4.7467e-06], [4.6833e-06], [4.7025e-06], [2339], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.5522789049719e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826214674, 0.45704, [8.5291e-05], [8.6085e-05], [8.5361e-05], [8.578e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5583686430828046e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826214908, 0.45458, [3.5148e-05], [3.5745e-05], [3.5324e-05], [3.5628e-05], [295], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027771929193190053], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826215132, 0.45211, [0.00027515], [0.00028044], [0.00027621], [0.000279], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013690077466890216], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826215354, 0.45186, [0.0013632], [0.0014103], [0.0013663], [0.0013817], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014557678452027695], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826215578, 0.45062, [0.0014491], [0.0014842], [0.0014531], [0.001457], [7], [10]]}, "durations": {"<build>": 1.8090972900390625}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/88b07b3e-virtualenv-py3.10.json
================================================
{"commit_hash": "88b07b3ebc64356e6036bb8a2f33b006af64f7a7", "env_name": "virtualenv-py3.10", "date": 1610705207000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7024395317885234e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929275552, 0.4558, [1.6925e-07], [1.7062e-07], [1.6967e-07], [1.7054e-07], [59618], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7039474633023662e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929275769, 0.45688, [1.6977e-07], [1.707e-07], [1.7021e-07], [1.7051e-07], [64259], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7085925471028554e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929275997, 0.45949, [1.7047e-07], [1.716e-07], [1.7067e-07], [1.713e-07], [63654], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.6988362170702758e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929276226, 0.45801, [1.6885e-07], [1.7161e-07], [1.6956e-07], [1.7016e-07], [63835], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.699852078992171e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929276456, 0.45899, [1.691e-07], [1.7179e-07], [1.697e-07], [1.7004e-07], [64392], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7007414558399993e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929276686, 0.46057, [1.6966e-07], [1.709e-07], [1.6978e-07], [1.7068e-07], [64252], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010232624990749173], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929276914, 0.44575, [0.0010199], [0.0010282], [0.0010218], [0.0010261], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014402618565197503], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929277134, 0.43938, [0.0014295], [0.0014576], [0.0014332], [0.0014474], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014254296856961446], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929277353, 0.45935, [0.0014094], [0.0014915], [0.001415], [0.0014579], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1414959633109373e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929277591, 0.45539, [1.1374e-07], [1.1518e-07], [1.1406e-07], [1.1437e-07], [95751], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1459040947674226e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929277820, 0.45661, [1.142e-07], [1.1646e-07], [1.1422e-07], [1.1584e-07], [95759], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1420448083004163e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929278050, 0.45519, [1.137e-07], [1.1515e-07], [1.1399e-07], [1.1464e-07], [95630], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929271990, 0.062413], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929272053, 0.061734], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929272115, 0.061817], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0032390416236012243], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929278278, 0.46664, [0.0032268], [0.0032562], [0.0032348], [0.0032404], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.00213432919990737], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929278514, 0.44632, [0.0021176], [0.0021573], [0.0021264], [0.0021419], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006624570314670564], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929278740, 0.44399, [0.00065892], [0.0006752], [0.00066057], [0.00067112], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005475789473980274], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929278964, 0.44477, [0.00054442], [0.00055428], [0.00054638], [0.00054814], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.785563578661385e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929279184, 0.44793, [2.7741e-05], [2.7975e-05], [2.7784e-05], [2.787e-05], [383], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018819684492913877], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929279408, 0.45633, [0.000187], [0.00019449], [0.00018749], [0.00018916], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.244121055492023e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929279635, 0.44965, [4.2208e-05], [4.386e-05], [4.227e-05], [4.2752e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003306290323493041], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929279855, 0.43765, [0.00032947], [0.00033426], [0.00033029], [0.00033243], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00039268511542244454], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929280072, 0.43942, [0.00039134], [0.00040039], [0.00039235], [0.0003952], [26], [10]], "benchmarks.TextSuite.time_render": [[4.67088127233714e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929280287, 0.45986, [4.6494e-06], [4.7587e-06], [4.6563e-06], [4.6839e-06], [2333], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.528571428513036e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929280516, 0.45045, [8.4575e-05], [8.6745e-05], [8.494e-05], [8.629e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.392754973528776e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929280742, 0.44714, [3.3744e-05], [3.4147e-05], [3.3868e-05], [3.4032e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002799898647936061], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929280965, 0.44157, [0.00027838], [0.00028276], [0.00027951], [0.00028074], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001156333332700241], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929281184, 0.43864, [0.0011494], [0.0012274], [0.00115], [0.0011836], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015330029979980153], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929281404, 0.45116, [0.0015266], [0.0015464], [0.0015283], [0.0015362], [7], [10]]}, "durations": {"<build>": 2.0033068656921387}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/8a7f5d82-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "8a7f5d82ba7bbe108a17bdc75720d11852968aed", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1608315995000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7315740074272938e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889335145, 0.45574, [1.6956e-07], [1.7936e-07], [1.727e-07], [1.7323e-07], [64300], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7330832732198631e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889335371, 0.43094, [1.7213e-07], [1.7572e-07], [1.7309e-07], [1.7365e-07], [58394], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7303657209770586e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889335587, 0.44694, [1.722e-07], [1.7374e-07], [1.726e-07], [1.7321e-07], [64012], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7310648622555538e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889335817, 0.45109, [1.722e-07], [1.7492e-07], [1.7296e-07], [1.7384e-07], [62505], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7390051221142053e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889336043, 0.45318, [1.7326e-07], [1.7667e-07], [1.7378e-07], [1.7432e-07], [61862], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7363054226142995e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889336269, 0.45529, [1.6946e-07], [1.7688e-07], [1.7343e-07], [1.75e-07], [62543], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010482750134542585], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889336498, 0.43852, [0.0010416], [0.0010614], [0.001044], [0.0010507], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014676071503864868], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889336722, 0.43998, [0.0014524], [0.0014957], [0.0014665], [0.0014751], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001442955424343901], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889336941, 0.43464, [0.0014344], [0.0014488], [0.0014409], [0.0014457], [7], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1661992289759544e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889337156, 0.44301, [1.1629e-07], [1.1827e-07], [1.1636e-07], [1.1721e-07], [91447], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1712855087674812e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889337378, 0.44967, [1.1614e-07], [1.1905e-07], [1.1631e-07], [1.1827e-07], [92637], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1640622229546718e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889337601, 0.43056, [1.161e-07], [1.1661e-07], [1.163e-07], [1.1652e-07], [87687], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889331639, 0.060793], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889331700, 0.060406], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889331761, 0.060394], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.003266026033088565], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889337817, 0.46452, [0.0032275], [0.0034176], [0.003239], [0.0032985], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0021595709258690476], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889338054, 0.43568, [0.0021542], [0.0021699], [0.0021554], [0.0021646], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.000676105567254126], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889338270, 0.43365, [0.00067434], [0.00068137], [0.00067488], [0.000678], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005599145017760364], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889338483, 0.44464, [0.00055477], [0.00057076], [0.00055793], [0.00056406], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.856977257066042e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889338704, 0.43983, [2.8348e-05], [2.8756e-05], [2.8479e-05], [2.8641e-05], [381], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00019035124416021923], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889338928, 0.44743, [0.0001896], [0.00019247], [0.00019009], [0.00019062], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2970188632153155e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889339150, 0.44665, [4.2825e-05], [4.3163e-05], [4.2874e-05], [4.2995e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003337486639558788], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889339373, 0.43672, [0.00033014], [0.00033663], [0.00033126], [0.0003351], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0004009108198806643], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889339589, 0.42829, [0.00040061], [0.00040219], [0.00040066], [0.00040147], [25], [10]], "benchmarks.TextSuite.time_render": [[4.771396233804051e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889339801, 0.43806, [4.7592e-06], [4.7808e-06], [4.7616e-06], [4.7783e-06], [2332], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.651597830788072e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889340018, 0.42439, [8.5111e-05], [8.8324e-05], [8.6167e-05], [8.6782e-05], [116], [10]], "benchmarks.TextSuite.time_split": [[3.4078591479322844e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889340230, 0.44829, [3.3776e-05], [3.427e-05], [3.3833e-05], [3.4236e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028980124389400353], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889340453, 0.44785, [0.00028369], [0.00029404], [0.00028678], [0.00029146], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011695601666967075], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889340675, 0.43824, [0.0011581], [0.0011953], [0.0011686], [0.0011738], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015595654424812111], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889340893, 0.44869, [0.0015503], [0.0015749], [0.0015575], [0.0015626], [7], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.03063635411672294], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892987539, 0.67922, [0.030465], [0.031102], [0.030555], [0.030726], [1], [10]]}, "durations": {"<build>": 1.837109088897705}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/8a7f5d82-virtualenv-py3.10.json
================================================
{"commit_hash": "8a7f5d82ba7bbe108a17bdc75720d11852968aed", "env_name": "virtualenv-py3.10", "date": 1608315995000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.6953014842832631e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929175581, 0.45837, [1.6859e-07], [1.7111e-07], [1.6924e-07], [1.7013e-07], [64614], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7055859463819154e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929175811, 0.4559, [1.6873e-07], [1.7156e-07], [1.7018e-07], [1.708e-07], [64605], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.6983904257291298e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929176040, 0.44875, [1.6884e-07], [1.7136e-07], [1.6931e-07], [1.7113e-07], [64837], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7045226080122942e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929176270, 0.45509, [1.6886e-07], [1.7153e-07], [1.6988e-07], [1.7096e-07], [64664], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7083843096820946e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929176500, 0.45395, [1.7e-07], [1.7213e-07], [1.7072e-07], [1.7119e-07], [63852], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7056262349747764e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929176726, 0.45651, [1.6929e-07], [1.7151e-07], [1.7002e-07], [1.7084e-07], [64784], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010255041997879744], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929176955, 0.44675, [0.0010244], [0.0010292], [0.0010247], [0.0010267], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014361369290522166], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929177179, 0.43637, [0.0014333], [0.0014427], [0.0014342], [0.0014383], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014121197491476778], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929177395, 0.447, [0.0014098], [0.001421], [0.0014109], [0.0014151], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1425290498552254e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929177619, 0.45619, [1.1397e-07], [1.1464e-07], [1.1399e-07], [1.1454e-07], [96212], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1409599503140356e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929177848, 0.454, [1.1369e-07], [1.1445e-07], [1.14e-07], [1.1423e-07], [95630], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1446415029047722e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929178076, 0.45409, [1.1422e-07], [1.1472e-07], [1.144e-07], [1.1465e-07], [95440], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929172058, 0.062077], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929172120, 0.062048], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929172183, 0.0617], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.003236182252294384], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929178304, 0.47107, [0.0032297], [0.0032508], [0.0032342], [0.0032376], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0021179625007789584], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929178538, 0.44453, [0.0021047], [0.0021287], [0.0021112], [0.0021221], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006580625004062313], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929178763, 0.43839, [0.00065668], [0.00066048], [0.00065736], [0.00065853], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005475537105475699], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929178985, 0.44479, [0.00054448], [0.00055454], [0.00054663], [0.00054887], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.7875818851161895e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929179207, 0.44904, [2.7843e-05], [2.942e-05], [2.7866e-05], [2.7925e-05], [381], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018679458758254585], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929179430, 0.44714, [0.00018551], [0.00018738], [0.0001863], [0.00018695], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2090219780690065e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929179653, 0.44407, [4.1999e-05], [4.2323e-05], [4.2038e-05], [4.2205e-05], [248], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032867472609429953], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929179874, 0.43478, [0.00032795], [0.00032909], [0.00032818], [0.00032894], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003919551348259959], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929180091, 0.43392, [0.00039115], [0.00039297], [0.00039193], [0.00039203], [26], [10]], "benchmarks.TextSuite.time_render": [[4.666072373758572e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929180306, 0.44691, [4.6561e-06], [4.6793e-06], [4.6635e-06], [4.6687e-06], [2349], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.524071870397165e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929180534, 0.45074, [8.491e-05], [8.5762e-05], [8.5152e-05], [8.5361e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.3787192268601546e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929180761, 0.44501, [3.3666e-05], [3.4061e-05], [3.376e-05], [3.385e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027918186498101095], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929180982, 0.43643, [0.00027714], [0.00028031], [0.00027802], [0.00027992], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011476018892911573], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929181199, 0.44175, [0.001142], [0.0011542], [0.0011425], [0.0011533], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001525970215360368], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929181419, 0.44329, [0.0015241], [0.0015296], [0.0015258], [0.0015279], [7], [10]]}, "durations": {"<build>": 1.9889202117919922}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/8b185610-virtualenv-py3.10.json
================================================
{"commit_hash": "8b185610d336693f2ff08c30157682ba7382d9ee", "env_name": "virtualenv-py3.10", "date": 1594399550000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7168903867823397e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928676356, 0.42605, [1.6868e-07], [1.7356e-07], [1.6987e-07], [1.7322e-07], [59181], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7156599994907917e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928676570, 0.45073, [1.6883e-07], [1.7373e-07], [1.6964e-07], [1.7334e-07], [64303], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.718635833089222e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928676797, 0.42913, [1.7004e-07], [1.7429e-07], [1.704e-07], [1.7331e-07], [64325], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7129236887015558e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928677012, 0.44036, [1.6838e-07], [1.74e-07], [1.6978e-07], [1.7338e-07], [64711], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7331575899968566e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928677228, 0.44188, [1.6939e-07], [1.7654e-07], [1.7198e-07], [1.7369e-07], [64611], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.730976246412862e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928677444, 0.4325, [1.7272e-07], [1.7357e-07], [1.728e-07], [1.7333e-07], [64538], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0022552750015165657], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928677659, 0.44322, [0.0022378], [0.0022778], [0.002239], [0.0022725], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928672618, 0.058588], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928672677, 0.058272], "benchmarks.StyleSuite.time_parse_ansi": [[1.1619377396060483e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928677879, 0.42452, [1.1594e-07], [1.1652e-07], [1.1606e-07], [1.1642e-07], [87793], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1637748378131947e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928678091, 0.44074, [1.1421e-07], [1.1725e-07], [1.1488e-07], [1.1682e-07], [95873], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.155181537751077e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928678307, 0.44095, [1.1416e-07], [1.1656e-07], [1.1456e-07], [1.1643e-07], [96041], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928673397, 0.058196], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928673455, 0.057861], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928673513, 0.058665], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002130449903779663], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928678525, 0.43856, [0.0021231], [0.0021428], [0.0021275], [0.0021371], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014712708590585472], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928678747, 0.42785, [0.0014624], [0.0014875], [0.0014652], [0.001481], [7], [10]], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928673999, 0.058368], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928674057, 0.058557], "benchmarks.TextSuite.time_divide": [[2.8091873364175325e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928678964, 0.44376, [2.7756e-05], [2.8428e-05], [2.7814e-05], [2.8354e-05], [383], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018709247345676677], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928679187, 0.439, [0.00018632], [0.00018768], [0.00018648], [0.00018735], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.283656973523492e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928679407, 0.43359, [4.2742e-05], [4.3007e-05], [4.2786e-05], [4.2897e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003362728551315564], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928679627, 0.43277, [0.00033497], [0.00033736], [0.00033578], [0.0003365], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928674988, 0.058294], "benchmarks.TextSuite.time_render": [[4.684978898870939e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928679842, 0.43744, [4.6601e-06], [4.7325e-06], [4.6687e-06], [4.705e-06], [2322], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.625716418464435e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928680065, 0.44709, [8.5348e-05], [8.7329e-05], [8.5556e-05], [8.6888e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.4101948380515346e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928680292, 0.43858, [3.3711e-05], [3.456e-05], [3.3737e-05], [3.4476e-05], [310], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.000282641891563135], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928680511, 0.43373, [0.00027884], [0.00028615], [0.00027948], [0.00028494], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011528495573050654], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928680726, 0.43438, [0.0011346], [0.0011632], [0.0011372], [0.0011614], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015347560007025354], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928680939, 0.43682, [0.001515], [0.0015497], [0.0015179], [0.0015489], [7], [10]]}, "durations": {"<build>": 1.964888095855713}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/8b47f338-virtualenv-py3.10.json
================================================
{"commit_hash": "8b47f338e2b17e0e97c973fb488c6d039cade3a6", "env_name": "virtualenv-py3.10", "date": 1637241388000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.704770948299811e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929498335, 0.46535, [1.6941e-07], [1.7118e-07], [1.6981e-07], [1.7073e-07], [64505], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7028041498662157e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929498566, 0.46247, [1.6948e-07], [1.7149e-07], [1.6998e-07], [1.7051e-07], [64845], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7013318067423483e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929498799, 0.4604, [1.6967e-07], [1.7044e-07], [1.7005e-07], [1.7037e-07], [64480], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7048964461196602e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929499030, 0.46266, [1.6978e-07], [1.7342e-07], [1.7018e-07], [1.7111e-07], [64702], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.710183421980304e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929499262, 0.4644, [1.6905e-07], [1.7343e-07], [1.7023e-07], [1.7189e-07], [64659], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7028929748629222e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929499495, 0.4667, [1.6938e-07], [1.7198e-07], [1.7009e-07], [1.7052e-07], [64686], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001039081248745788], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929499727, 0.44389, [0.0010375], [0.0010456], [0.0010384], [0.0010401], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014347708129207604], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929499952, 0.46215, [0.0014232], [0.0014423], [0.0014295], [0.0014374], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013174009982321877], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929500183, 0.44583, [0.0012999], [0.0013229], [0.0013051], [0.0013205], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.144420922600396e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929500410, 0.46225, [1.1388e-07], [1.1708e-07], [1.1436e-07], [1.1517e-07], [96170], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1470633126258756e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929500642, 0.44546, [1.1391e-07], [1.185e-07], [1.1428e-07], [1.1517e-07], [87568], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1445141108981999e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929500869, 0.46398, [1.1408e-07], [1.1492e-07], [1.1428e-07], [1.1471e-07], [96174], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929494748, 0.066077], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929494814, 0.066052], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929494880, 0.065718], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0022119542001746593], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929501102, 0.45225, [0.0021935], [0.0022166], [0.0022008], [0.0022153], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0013303228770382702], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929501325, 0.45344, [0.0013251], [0.0013386], [0.0013292], [0.0013349], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003806986605923157], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929501556, 0.45671, [0.00038033], [0.00038155], [0.00038042], [0.00038078], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034290322641496575], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929501782, 0.45645, [0.0003397], [0.0003518], [0.00034112], [0.0003484], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5345872369522895e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929502009, 0.4603, [2.5248e-05], [2.5446e-05], [2.5287e-05], [2.5395e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018478592241520127], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929502238, 0.45732, [0.0001843], [0.00019192], [0.0001846], [0.00018495], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3506973496714264e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929502467, 0.44784, [4.342e-05], [4.4112e-05], [4.3461e-05], [4.3614e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032628562926660264], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929502694, 0.43938, [0.00032502], [0.00032752], [0.00032557], [0.00032668], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.000355923844898794], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929502912, 0.44618, [0.00035429], [0.00035689], [0.00035487], [0.00035642], [29], [10]], "benchmarks.TextSuite.time_render": [[4.654723462910036e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929503134, 0.45355, [4.6398e-06], [4.6846e-06], [4.6485e-06], [4.6608e-06], [2327], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.532660635184555e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929503365, 0.45703, [8.4378e-05], [8.6022e-05], [8.5116e-05], [8.5704e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.539265578313332e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929503594, 0.45204, [3.5322e-05], [3.5428e-05], [3.5374e-05], [3.5422e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002751573418591809], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929503825, 0.4488, [0.00027426], [0.00028041], [0.00027456], [0.00027936], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010963458495098165], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929504049, 0.44783, [0.0010906], [0.0011211], [0.001092], [0.0011161], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013667968742083758], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929504272, 0.45775, [0.0013635], [0.0013722], [0.0013649], [0.0013686], [8], [10]]}, "durations": {"<build>": 1.9783689975738525}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/8c3e6be4-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "8c3e6be424f36522cbb3c4773e58a01f5f39761f", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644933711000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7135585838691637e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826114162, 0.46937, [1.7091e-07], [1.7416e-07], [1.7103e-07], [1.7193e-07], [64208], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7183538313576865e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826114398, 0.44132, [1.7012e-07], [1.755e-07], [1.7073e-07], [1.74e-07], [58755], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.716151886655022e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826114618, 0.46615, [1.7059e-07], [1.7398e-07], [1.7116e-07], [1.72e-07], [64308], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7074247623754106e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826114851, 0.46754, [1.6956e-07], [1.7257e-07], [1.7051e-07], [1.7211e-07], [64297], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7105141884012947e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826115086, 0.46995, [1.7048e-07], [1.7387e-07], [1.7071e-07], [1.7289e-07], [64518], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.717771812770255e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826115320, 0.45816, [1.7006e-07], [1.7456e-07], [1.709e-07], [1.7397e-07], [64263], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011182041955180467], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826115552, 0.47015, [0.0011117], [0.0011526], [0.0011159], [0.0011212], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015693422174081206], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826115781, 0.45157, [0.0015595], [0.0016294], [0.0015631], [0.0015835], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001414890619344078], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826116004, 0.46039, [0.0014101], [0.0014599], [0.0014111], [0.0014308], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1530259331732185e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826116235, 0.45582, [1.1412e-07], [1.1546e-07], [1.1451e-07], [1.1541e-07], [92963], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1473567355797761e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826116463, 0.43559, [1.1435e-07], [1.1537e-07], [1.1455e-07], [1.1501e-07], [87250], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1729228899809275e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826116680, 0.45515, [1.1411e-07], [1.1939e-07], [1.1581e-07], [1.1884e-07], [91748], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008478760486468673], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826116905, 0.5198, [0.0084486], [0.0087746], [0.0084715], [0.0085228], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008651614713016897], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826117165, 0.52485, [0.0083828], [0.0093682], [0.0085509], [0.0086635], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008540562237612903], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826117432, 0.52805, [0.0084705], [0.0088844], [0.0084797], [0.0085793], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.00187817367259413], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826117700, 0.46053, [0.0018628], [0.0018907], [0.0018681], [0.001883], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001168185224135717], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826117927, 0.45099, [0.0011618], [0.001209], [0.0011644], [0.0011726], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003848519284344677], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826118155, 0.46228, [0.00037674], [0.00038801], [0.00038051], [0.0003855], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034229032274696135], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826118387, 0.45906, [0.00033897], [0.00036185], [0.00034141], [0.00034967], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.603339221836491e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826118616, 0.45777, [2.5403e-05], [2.7247e-05], [2.5665e-05], [2.6998e-05], [418], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018650401800282692], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826118843, 0.45885, [0.00018517], [0.00018713], [0.0001855], [0.00018686], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.37701534365817e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826119070, 0.45382, [4.356e-05], [4.5081e-05], [4.3685e-05], [4.4022e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003285082127673156], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826119300, 0.46658, [0.00032605], [0.00033111], [0.00032647], [0.00033089], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003564956895043624], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826119532, 0.45342, [0.00035391], [0.00036414], [0.00035554], [0.00035809], [29], [10]], "benchmarks.TextSuite.time_render": [[4.701495904905291e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826119756, 0.45998, [4.67e-06], [4.7676e-06], [4.6786e-06], [4.7123e-06], [2340], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.634146797703579e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826119990, 0.46658, [8.5604e-05], [9.1966e-05], [8.5864e-05], [8.7482e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.555532758027412e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826120227, 0.46116, [3.5307e-05], [3.6125e-05], [3.5416e-05], [3.5948e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002770405814149662], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826120465, 0.45594, [0.0002745], [0.00028014], [0.00027487], [0.00027925], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013648879976244643], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826120695, 0.46027, [0.0013569], [0.0013774], [0.0013585], [0.0013694], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014584494388795327], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826120927, 0.44703, [0.0014539], [0.0014637], [0.0014554], [0.0014599], [7], [10]]}, "durations": {"<build>": 1.8221349716186523}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/8e649fea-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "8e649fea51859e426b2f6300e0a9c88c9c4b6415", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1646651989000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7296148473644882e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825799184, 0.44155, [1.7036e-07], [1.7625e-07], [1.7103e-07], [1.7421e-07], [58249], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.712369096919211e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825799405, 0.44151, [1.7063e-07], [1.7341e-07], [1.7073e-07], [1.7268e-07], [58900], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7211767777976432e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825799625, 0.46106, [1.7078e-07], [1.7407e-07], [1.7158e-07], [1.7299e-07], [63291], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7444780157350578e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825799856, 0.45625, [1.7174e-07], [1.776e-07], [1.7417e-07], [1.7477e-07], [64341], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.723542473311837e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825800081, 0.46486, [1.7046e-07], [1.7463e-07], [1.7086e-07], [1.7366e-07], [63358], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.741872043302675e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825800313, 0.45453, [1.7244e-07], [1.7516e-07], [1.7358e-07], [1.7462e-07], [64443], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011313078381742039], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825800537, 0.44807, [0.0011203], [0.0011721], [0.0011254], [0.0011421], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001572357224566596], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825800757, 0.45737, [0.0015662], [0.0016399], [0.0015681], [0.0015774], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014471666800091043], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825800984, 0.48279, [0.0014346], [0.0015139], [0.0014423], [0.0014562], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1677161746079992e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825801219, 0.45658, [1.1492e-07], [1.1727e-07], [1.1577e-07], [1.1697e-07], [95399], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1693596621789993e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825801442, 0.46612, [1.1657e-07], [1.175e-07], [1.168e-07], [1.1732e-07], [94535], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1687282022488142e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825801675, 0.45833, [1.1585e-07], [1.1832e-07], [1.1654e-07], [1.1729e-07], [92429], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008537739457096905], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825801904, 0.52007, [0.008461], [0.0087667], [0.0084985], [0.0086305], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.00855840597068891], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825802165, 0.52086, [0.0084258], [0.0088175], [0.0084521], [0.0086431], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.00847662502201274], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825802428, 0.5193, [0.0083884], [0.0087024], [0.0084644], [0.0086182], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001935211825184524], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825802689, 0.46617, [0.0018651], [0.0019747], [0.0018939], [0.0019532], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011646203800208038], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825802921, 0.45021, [0.0011567], [0.0011809], [0.0011601], [0.0011719], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003779412155771362], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825803149, 0.45616, [0.00037586], [0.00038152], [0.00037664], [0.00037904], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034683603312700027], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825803378, 0.46025, [0.0003416], [0.00036755], [0.00034253], [0.00035974], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.578717421396013e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825803612, 0.4592, [2.5266e-05], [2.6418e-05], [2.55e-05], [2.6104e-05], [422], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018633512884442662], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825803850, 0.46221, [0.00018468], [0.00018882], [0.0001851], [0.00018813], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.454996630202158e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825804084, 0.44871, [4.4126e-05], [4.4851e-05], [4.4388e-05], [4.465e-05], [236], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003318776782121389], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825804310, 0.4502, [0.00032789], [0.00033413], [0.00033082], [0.00033346], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036104310480556615], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825804532, 0.45627, [0.00035799], [0.00037105], [0.00035872], [0.00036299], [29], [10]], "benchmarks.TextSuite.time_render": [[4.7364100659981035e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825804759, 0.45788, [4.6997e-06], [4.7927e-06], [4.729e-06], [4.7432e-06], [2324], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.575114564544808e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825804993, 0.46272, [8.5523e-05], [8.8142e-05], [8.5561e-05], [8.6479e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.53954228587815e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825805227, 0.46103, [3.5234e-05], [3.6216e-05], [3.5376e-05], [3.5723e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002799523063004017], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825805457, 0.45601, [0.00027724], [0.00028138], [0.00027937], [0.00028101], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013868854293832555], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825805683, 0.45054, [0.0013698], [0.0013994], [0.0013855], [0.0013947], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001481374925268548], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825805907, 0.45142, [0.0014555], [0.0014894], [0.0014591], [0.0014854], [7], [10]]}, "durations": {"<build>": 1.824864149093628}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/911d305f-virtualenv-py3.10.json
================================================
{"commit_hash": "911d305fe718d989a5d3606c8e0cdf5db97bf8fe", "env_name": "virtualenv-py3.10", "date": 1592142712000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [null, [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928519164, 0.05889], "benchmarks.ColorSuite.time_downgrade_to_standard": [null, [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928519223, 0.058991], "benchmarks.ColorSuite.time_downgrade_to_windows": [null, [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928519282, 0.058612], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [null, [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928519341, 0.058286], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [null, [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928519400, 0.057999], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [null, [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928519458, 0.058387], "benchmarks.PrettySuite.time_pretty": [null, [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928519516, 0.057659], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928519574, 0.057636], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928519631, 0.057999], "benchmarks.StyleSuite.time_parse_ansi": [null, [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928519690, 0.058697], "benchmarks.StyleSuite.time_parse_hex": [null, [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928519748, 0.060165], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [null, [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928519809, 0.057682], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928519866, 0.058021], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928519924, 0.05799], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928519982, 0.05768], "benchmarks.TableSuite.time_table_heavy_wrapping": [null, [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928520040, 0.058119], "benchmarks.TableSuite.time_table_no_wrapping": [null, [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928520098, 0.059722], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928520158, 0.058841], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928520217, 0.057828], "benchmarks.TextSuite.time_divide": [null, [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928520275, 0.058048], "benchmarks.TextSuite.time_divide_unicode_heavy": [null, [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928520333, 0.057758], "benchmarks.TextSuite.time_fit": [null, [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928520391, 0.05827], "benchmarks.TextSuite.time_fit_unicode_heavy": [null, [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928520449, 0.057695], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928520507, 0.057978], "benchmarks.TextSuite.time_render": [null, [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928520565, 0.057817], "benchmarks.TextSuite.time_render_unicode_heavy": [null, [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928520623, 0.057796], "benchmarks.TextSuite.time_split": [null, [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928520681, 0.05822], "benchmarks.TextSuite.time_split_unicode_heavy": [null, [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928520739, 0.057887], "benchmarks.TextSuite.time_wrapping": [null, [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928520797, 0.05788], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [null, [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928520855, 0.057894]}, "durations": {"<build>": 1.9719171524047852}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/932e26b6-virtualenv-py3.10.json
================================================
{"commit_hash": "932e26b6508ccc10469a091f5e629dee8f2c124b", "env_name": "virtualenv-py3.10", "date": 1594142083000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7375078801034093e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928652230, 0.42456, [1.7282e-07], [1.7517e-07], [1.7355e-07], [1.7453e-07], [58370], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7232673024938964e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928652441, 0.42474, [1.7162e-07], [1.7374e-07], [1.7202e-07], [1.7317e-07], [59113], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7179807855122533e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928652652, 0.43885, [1.6901e-07], [1.7767e-07], [1.7004e-07], [1.7416e-07], [64119], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.738748867612897e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928652874, 0.42584, [1.7288e-07], [1.7448e-07], [1.7346e-07], [1.7405e-07], [58579], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7205797626414604e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928653085, 0.44103, [1.6998e-07], [1.7542e-07], [1.7083e-07], [1.7433e-07], [64328], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7357968707662575e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928653301, 0.44615, [1.6884e-07], [1.7752e-07], [1.7302e-07], [1.7394e-07], [64314], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0022556415991857644], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928653529, 0.44268, [0.0022447], [0.0022682], [0.0022478], [0.0022604], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928648504, 0.058183], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928648562, 0.058728], "benchmarks.StyleSuite.time_parse_ansi": [[1.1636780299431053e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928653747, 0.42378, [1.1596e-07], [1.1654e-07], [1.1619e-07], [1.1651e-07], [87415], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1610518087156556e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928653959, 0.42607, [1.1602e-07], [1.1714e-07], [1.1605e-07], [1.1639e-07], [87825], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1519156793616148e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928654172, 0.44173, [1.1384e-07], [1.1696e-07], [1.1411e-07], [1.165e-07], [96420], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928649271, 0.058128], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928649329, 0.058031], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928649387, 0.057526], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021029166993685065], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928654389, 0.43446, [0.0020978], [0.0021154], [0.0020997], [0.0021052], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014632678544980343], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928654609, 0.42624, [0.0014495], [0.0014684], [0.0014525], [0.0014662], [7], [10]], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928649870, 0.058305], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928649929, 0.05829], "benchmarks.TextSuite.time_divide": [[2.779296494252351e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928654825, 0.44419, [2.7688e-05], [2.8234e-05], [2.7726e-05], [2.8139e-05], [385], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00019048204332397414], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928655048, 0.43886, [0.00018928], [0.00019078], [0.00019018], [0.00019067], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.241432530345418e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928655273, 0.44251, [4.2136e-05], [4.3417e-05], [4.2318e-05], [4.2513e-05], [249], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003329099516474432], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928655494, 0.43602, [0.00032839], [0.000338], [0.00032894], [0.000337], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928650860, 0.058311], "benchmarks.TextSuite.time_render": [[4.727717685895485e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928655715, 0.44039, [4.6884e-06], [4.7761e-06], [4.6927e-06], [4.7662e-06], [2329], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.719368349829892e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928655940, 0.44761, [8.6326e-05], [8.8197e-05], [8.68e-05], [8.7318e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.4062033638549154e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928656165, 0.43906, [3.3642e-05], [3.4534e-05], [3.3693e-05], [3.4464e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028500112160612405], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928656385, 0.43557, [0.00028298], [0.00028643], [0.0002842], [0.00028562], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011527013880873306], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928656602, 0.43383, [0.0011354], [0.0011624], [0.0011386], [0.0011614], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015521250004115117], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928656818, 0.4409, [0.0015454], [0.0015612], [0.0015494], [0.0015548], [7], [10]]}, "durations": {"<build>": 1.9519822597503662}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/949e1f72-virtualenv-py3.10.json
================================================
{"commit_hash": "949e1f72fb9f2f90abb18cbdef47609a24febdb7", "env_name": "virtualenv-py3.10", "date": 1607775158000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7029757551577644e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929147028, 0.45655, [1.6968e-07], [1.7081e-07], [1.7003e-07], [1.7045e-07], [64550], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7129334648886068e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929147257, 0.45789, [1.7057e-07], [1.7384e-07], [1.7095e-07], [1.7286e-07], [64175], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7037231874163812e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929147485, 0.45818, [1.6941e-07], [1.733e-07], [1.6993e-07], [1.7098e-07], [64097], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7019146784158564e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929147713, 0.45524, [1.6928e-07], [1.7084e-07], [1.6971e-07], [1.7038e-07], [64123], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7040813538765309e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929147941, 0.45569, [1.697e-07], [1.7467e-07], [1.7002e-07], [1.7059e-07], [63784], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7041177953576877e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929148168, 0.45847, [1.697e-07], [1.712e-07], [1.7006e-07], [1.7062e-07], [64356], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010309937002602964], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929148396, 0.44574, [0.0010281], [0.0010354], [0.0010298], [0.0010314], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014440446414352793], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929148618, 0.43949, [0.0014396], [0.0014538], [0.001441], [0.001446], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014179766258166637], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929148836, 0.44533, [0.0014117], [0.0014268], [0.0014147], [0.0014216], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1481544149288418e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929149061, 0.45295, [1.1427e-07], [1.1543e-07], [1.1445e-07], [1.1495e-07], [94829], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1436803517864134e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929149288, 0.45272, [1.1379e-07], [1.1477e-07], [1.1416e-07], [1.1451e-07], [95120], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1455043607759289e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929149514, 0.45456, [1.1413e-07], [1.152e-07], [1.1445e-07], [1.1475e-07], [95309], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929143508, 0.061859], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929143570, 0.061879], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929143632, 0.061608], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002748364622675581], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929149742, 0.45106, [0.0027357], [0.0027663], [0.0027416], [0.0027589], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0018719340005191043], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929149962, 0.44157, [0.0018634], [0.0018768], [0.0018703], [0.0018723], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006610716236536973], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929150185, 0.44031, [0.00065694], [0.0006701], [0.00065804], [0.00066623], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005484835526562835], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929150409, 0.44485, [0.00054418], [0.00055302], [0.00054563], [0.00055031], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.786643714436783e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929150628, 0.4467, [2.7809e-05], [2.795e-05], [2.7834e-05], [2.7885e-05], [382], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001872562192658191], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929150851, 0.44655, [0.00018629], [0.00018763], [0.000187], [0.00018742], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.215380280098666e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929151074, 0.44672, [4.2108e-05], [4.2228e-05], [4.2135e-05], [4.219e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003298608874413936], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929151296, 0.43489, [0.00032922], [0.00033071], [0.00032967], [0.00033], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003935088081142077], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929151512, 0.43634, [0.00039083], [0.00039563], [0.00039177], [0.00039506], [26], [10]], "benchmarks.TextSuite.time_render": [[4.689375974753977e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929151728, 0.4435, [4.6454e-06], [4.7239e-06], [4.6508e-06], [4.7204e-06], [2310], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.544791398890084e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929151952, 0.45091, [8.4735e-05], [8.6213e-05], [8.532e-05], [8.5682e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.376495670892883e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929152179, 0.44394, [3.3636e-05], [3.3927e-05], [3.37e-05], [3.3829e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002801216213737388], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929152401, 0.43747, [0.00027783], [0.00028155], [0.0002787], [0.00028053], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001147650444181636], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929152618, 0.44158, [0.0011449], [0.0011499], [0.0011466], [0.0011488], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015247916432729524], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929152837, 0.44279, [0.0015232], [0.0015308], [0.001524], [0.001526], [7], [10]]}, "durations": {"<build>": 1.9965839385986328}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/95d8bf98-virtualenv-py3.10.json
================================================
{"commit_hash": "95d8bf9841d0f7f467d87e347d1620a054b9eee6", "env_name": "virtualenv-py3.10", "date": 1591521223000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [null, [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928504190, 0.060062], "benchmarks.ColorSuite.time_downgrade_to_standard": [null, [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928504251, 0.058234], "benchmarks.ColorSuite.time_downgrade_to_windows": [null, [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928504309, 0.05794], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [null, [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928504367, 0.057871], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [null, [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928504425, 0.057688], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [null, [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928504483, 0.058], "benchmarks.PrettySuite.time_pretty": [null, [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928504541, 0.058312], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928504599, 0.058035], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928504657, 0.058021], "benchmarks.StyleSuite.time_parse_ansi": [null, [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928504715, 0.059098], "benchmarks.StyleSuite.time_parse_hex": [null, [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928504774, 0.059978], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [null, [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928504835, 0.063138], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928504898, 0.060041], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928504958, 0.058854], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928505017, 0.058735], "benchmarks.TableSuite.time_table_heavy_wrapping": [null, [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928505076, 0.059871], "benchmarks.TableSuite.time_table_no_wrapping": [null, [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928505136, 0.058193], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928505194, 0.058021], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928505252, 0.05804], "benchmarks.TextSuite.time_divide": [null, [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928505310, 0.057805], "benchmarks.TextSuite.time_divide_unicode_heavy": [null, [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928505368, 0.058285], "benchmarks.TextSuite.time_fit": [null, [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928505426, 0.057829], "benchmarks.TextSuite.time_fit_unicode_heavy": [null, [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928505484, 0.057966], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928505542, 0.058825], "benchmarks.TextSuite.time_render": [null, [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928505601, 0.058993], "benchmarks.TextSuite.time_render_unicode_heavy": [null, [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928505660, 0.058045], "benchmarks.TextSuite.time_split": [null, [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928505718, 0.057868], "benchmarks.TextSuite.time_split_unicode_heavy": [null, [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928505776, 0.057619], "benchmarks.TextSuite.time_wrapping": [null, [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928505834, 0.058251], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [null, [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928505892, 0.057668]}, "durations": {"<build>": 2.12862491607666}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/96ea5fed-virtualenv-py3.10.json
================================================
{"commit_hash": "96ea5feddfa8130ca8e961ab772dfdbb836cb3fa", "env_name": "virtualenv-py3.10", "date": 1598372847000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7316030840513793e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928856427, 0.42741, [1.7267e-07], [1.7448e-07], [1.7288e-07], [1.7347e-07], [58952], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7276608421838726e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928856639, 0.4259, [1.7187e-07], [1.743e-07], [1.7218e-07], [1.7377e-07], [58923], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7196527954547122e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928856852, 0.43995, [1.6886e-07], [1.7405e-07], [1.7053e-07], [1.7321e-07], [64443], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7357961115949515e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928857076, 0.43478, [1.6868e-07], [1.7463e-07], [1.7103e-07], [1.7398e-07], [64809], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7308621182496977e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928857291, 0.43332, [1.717e-07], [1.744e-07], [1.7214e-07], [1.7368e-07], [58623], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7374265166264073e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928857511, 0.42335, [1.7291e-07], [1.7402e-07], [1.7341e-07], [1.7396e-07], [58652], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001097102051426191], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928857721, 0.43139, [0.0010913], [0.0011045], [0.0010954], [0.001099], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928852181, 0.058487], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001493163641758396], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928857937, 0.43031, [0.0014892], [0.0015001], [0.0014917], [0.0014972], [7], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1650578665402596e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928858156, 0.42528, [1.161e-07], [1.1773e-07], [1.1645e-07], [1.1664e-07], [87616], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1636110488428678e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928858369, 0.44929, [1.1598e-07], [1.1696e-07], [1.1628e-07], [1.1656e-07], [94647], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1662411426497627e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928858593, 0.42483, [1.1595e-07], [1.2152e-07], [1.164e-07], [1.1852e-07], [86956], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928853102, 0.059031], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928853162, 0.057906], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928853219, 0.057841], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0030062344994803425], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928858805, 0.45159, [0.0029959], [0.003032], [0.0030028], [0.0030158], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0019549964999896474], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928859036, 0.4454, [0.0019383], [0.0019804], [0.0019503], [0.0019601], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006746847328031435], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928859261, 0.42948, [0.00067265], [0.00068436], [0.00067422], [0.0006759], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005672357365256175], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928859472, 0.43532, [0.00055666], [0.00057062], [0.00056009], [0.00056754], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8418685870028115e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928859694, 0.44721, [2.8232e-05], [2.8618e-05], [2.8245e-05], [2.8555e-05], [382], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001885252192886056], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928859918, 0.44345, [0.00018577], [0.00019176], [0.00018654], [0.00019079], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.254158431510759e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928860137, 0.44786, [4.194e-05], [4.3131e-05], [4.2003e-05], [4.3078e-05], [249], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003303958388466028], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928860354, 0.42865, [0.00032919], [0.00033584], [0.00032968], [0.00033251], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928855047, 0.05887], "benchmarks.TextSuite.time_render": [[4.739229232535885e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928860567, 0.44225, [4.6743e-06], [4.8503e-06], [4.6821e-06], [4.7958e-06], [2323], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.498502347720205e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928860790, 0.44589, [8.4331e-05], [8.5831e-05], [8.4775e-05], [8.5298e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.433012977602163e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928861012, 0.44415, [3.41e-05], [3.4515e-05], [3.4156e-05], [3.4444e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028185135129574885], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928861231, 0.43494, [0.00027825], [0.00028467], [0.00027917], [0.00028441], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011610370565904304], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928861446, 0.43957, [0.0011431], [0.0011705], [0.0011456], [0.0011688], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015498154992071378], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928861673, 0.44193, [0.0015472], [0.0015531], [0.0015492], [0.0015514], [7], [10]]}, "durations": {"<build>": 2.083641767501831}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/972dedff-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "972dedff546a60642db36831dbb8aaab19077a2c", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644350984000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.705572840185152e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889136712, 0.46527, [1.6969e-07], [1.7115e-07], [1.7001e-07], [1.7079e-07], [64257], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7008147431153215e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889136944, 0.46899, [1.6935e-07], [1.7432e-07], [1.6999e-07], [1.7143e-07], [64474], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.715305914763738e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889137177, 0.45739, [1.7029e-07], [1.7368e-07], [1.7092e-07], [1.7167e-07], [62454], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7020818056880534e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889137405, 0.46282, [1.6955e-07], [1.72e-07], [1.6987e-07], [1.7068e-07], [64391], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7178404506917297e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889137638, 0.45828, [1.6893e-07], [1.7318e-07], [1.7081e-07], [1.7231e-07], [62650], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.716880190562759e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889137865, 0.43942, [1.6858e-07], [1.7572e-07], [1.709e-07], [1.7198e-07], [59106], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011146990711697275], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889138084, 0.44312, [0.0011071], [0.0011247], [0.0011123], [0.0011188], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015619196596422366], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889138304, 0.4504, [0.0015524], [0.0016186], [0.0015569], [0.0015667], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001412533936672844], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889138526, 0.45525, [0.0014088], [0.00143], [0.0014101], [0.0014183], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1455337522774206e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889138754, 0.45128, [1.1378e-07], [1.1835e-07], [1.1401e-07], [1.1519e-07], [92159], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.145999957238245e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889138979, 0.45278, [1.1405e-07], [1.1657e-07], [1.1438e-07], [1.1505e-07], [92524], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1473100367185286e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889139205, 0.45773, [1.1425e-07], [1.1518e-07], [1.1445e-07], [1.1486e-07], [94100], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008439635275863111], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889139434, 0.51381, [0.0083759], [0.008482], [0.0084209], [0.0084552], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008474020985886455], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889139690, 0.51713, [0.0083873], [0.0085409], [0.0084374], [0.0084901], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.0084359897300601], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889139949, 0.51758, [0.0083842], [0.0086107], [0.0084084], [0.0084568], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001867152750492096], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889140206, 0.46139, [0.0018571], [0.0018858], [0.0018611], [0.0018776], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011543587833229038], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889140433, 0.44698, [0.0011416], [0.0011909], [0.0011481], [0.0011615], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037268376243965965], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889140659, 0.4508, [0.00036996], [0.00037916], [0.00037126], [0.00037785], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003410826514785489], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889140883, 0.44935, [0.00034056], [0.00035085], [0.00034093], [0.00034253], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.53364825512954e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889141105, 0.45935, [2.5241e-05], [2.5465e-05], [2.53e-05], [2.5407e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001847072572704276], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889141336, 0.45711, [0.000183], [0.00018846], [0.00018445], [0.00018554], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3477987501061395e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889141565, 0.45007, [4.3379e-05], [4.4867e-05], [4.3397e-05], [4.3581e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032783737180814627], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889141794, 0.4415, [0.00032658], [0.00033803], [0.00032697], [0.00033167], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003590129299795833], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889142013, 0.45072, [0.00035316], [0.0003658], [0.0003549], [0.00036359], [29], [10]], "benchmarks.TextSuite.time_render": [[4.6789529733359815e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889142238, 0.45529, [4.6632e-06], [4.81e-06], [4.6703e-06], [4.7034e-06], [2340], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.548225832782919e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889142469, 0.45993, [8.514e-05], [8.6072e-05], [8.5354e-05], [8.5567e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5197577626722585e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889142700, 0.45033, [3.4971e-05], [3.5376e-05], [3.5063e-05], [3.5278e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002764501045212934], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889142930, 0.45159, [0.00027404], [0.00027906], [0.00027468], [0.000278], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013675312511622906], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889143156, 0.44667, [0.0013618], [0.0013768], [0.0013639], [0.0013731], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014536457601934671], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889143377, 0.44719, [0.001447], [0.0014627], [0.0014507], [0.0014572], [7], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.029000728856772184], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892955122, 0.6622, [0.02884], [0.0299], [0.028944], [0.0294], [1], [10]]}, "durations": {"<build>": 1.813249111175537}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/972dedff-virtualenv-py3.10.json
================================================
{"commit_hash": "972dedff546a60642db36831dbb8aaab19077a2c", "env_name": "virtualenv-py3.10", "date": 1644350984000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.6966378869754063e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928495086, 0.46992, [1.6874e-07], [1.7064e-07], [1.6945e-07], [1.7023e-07], [64687], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7017139318109407e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928495321, 0.45793, [1.6932e-07], [1.7182e-07], [1.6983e-07], [1.703e-07], [64740], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7002950434441852e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928495556, 0.46019, [1.6913e-07], [1.7472e-07], [1.6977e-07], [1.7424e-07], [64312], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7467250773761525e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928495790, 0.45191, [1.7185e-07], [1.7663e-07], [1.7369e-07], [1.7497e-07], [60206], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7190822590057033e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928496014, 0.46004, [1.6948e-07], [1.7801e-07], [1.7119e-07], [1.7264e-07], [64735], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7009651108030483e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928496250, 0.4653, [1.6952e-07], [1.7196e-07], [1.6986e-07], [1.707e-07], [64319], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011247847222774806], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928496482, 0.44639, [0.001112], [0.0011365], [0.0011158], [0.0011325], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015590207850826637], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928496704, 0.4506, [0.0015551], [0.0015745], [0.0015573], [0.0015604], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014094245016167406], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928496927, 0.45541, [0.0014043], [0.0014183], [0.0014068], [0.0014121], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.15377114080549e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928497155, 0.46082, [1.1383e-07], [1.1643e-07], [1.1402e-07], [1.1641e-07], [96374], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1530580833173779e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928497380, 0.4676, [1.1424e-07], [1.1631e-07], [1.1452e-07], [1.1606e-07], [95519], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1414555468820137e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928497613, 0.43722, [1.1394e-07], [1.1443e-07], [1.1403e-07], [1.1429e-07], [87802], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.00856696874689078], [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928497832, 0.52107, [0.0085105], [0.0085887], [0.0085325], [0.0085761], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008623926994914655], [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928498093, 0.52342, [0.0084933], [0.008741], [0.0085369], [0.0087188], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.0085112914966885], [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928498357, 0.52026, [0.0084441], [0.0085937], [0.0084911], [0.0085498], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018723436684619323], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928498617, 0.46144, [0.0018687], [0.0018865], [0.0018704], [0.0018784], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001163543945747531], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928498844, 0.45098, [0.0011545], [0.0011705], [0.0011583], [0.0011655], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003731056432505804], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928499071, 0.45304, [0.00036918], [0.0003779], [0.00036939], [0.00037736], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003431505324589389], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928499294, 0.45801, [0.00033954], [0.00035455], [0.00034024], [0.00034843], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5219379093086475e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928499521, 0.48708, [2.5129e-05], [2.5432e-05], [2.5169e-05], [2.5248e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001847848450716842], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928499751, 0.45863, [0.00018368], [0.00018612], [0.00018468], [0.00018542], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.354522359317047e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928499980, 0.45059, [4.3406e-05], [4.3589e-05], [4.3499e-05], [4.3567e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003285789090582649], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928500208, 0.46249, [0.00032374], [0.00033239], [0.00032437], [0.00033095], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036147917201341095], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928500440, 0.45334, [0.00035645], [0.00036522], [0.0003572], [0.00036511], [29], [10]], "benchmarks.TextSuite.time_render": [[4.6709620594807475e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928500664, 0.45489, [4.6603e-06], [4.6945e-06], [4.6672e-06], [4.6786e-06], [2333], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.508430858000793e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928500895, 0.46037, [8.4182e-05], [8.555e-05], [8.4551e-05], [8.528e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.515611525153282e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928501126, 0.45158, [3.5113e-05], [3.5189e-05], [3.5147e-05], [3.5168e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002742062053398397], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928501356, 0.45824, [0.00027279], [0.00027536], [0.00027397], [0.00027449], [39], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001361679685942363], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928501585, 0.45899, [0.0013561], [0.0013646], [0.0013591], [0.0013633], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014518333607286746], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928501817, 0.44956, [0.0014478], [0.0014776], [0.0014492], [0.0014702], [7], [10]]}, "durations": {"<build>": 1.9903857707977295}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/99831099-virtualenv-py3.10.json
================================================
{"commit_hash": "99831099bddeb1fc133dc17deb3743f0a6eeeabd", "env_name": "virtualenv-py3.10", "date": 1638115235000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.6982679175346359e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929411358, 0.4647, [1.6906e-07], [1.7112e-07], [1.6956e-07], [1.7051e-07], [64561], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.706459781564628e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929411589, 0.46668, [1.6944e-07], [1.7227e-07], [1.6994e-07], [1.7091e-07], [64359], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7064087511396272e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929411824, 0.44285, [1.6919e-07], [1.7259e-07], [1.703e-07], [1.7147e-07], [58843], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7012664847376487e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929412045, 0.46681, [1.6876e-07], [1.7083e-07], [1.6977e-07], [1.7042e-07], [64367], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7029855906558936e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929412279, 0.44022, [1.687e-07], [1.7099e-07], [1.6991e-07], [1.706e-07], [59129], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7017031937624742e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929412500, 0.44931, [1.683e-07], [1.7164e-07], [1.6926e-07], [1.7109e-07], [61097], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011088145998655818], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929412725, 0.45704, [0.0011029], [0.001145], [0.0011059], [0.0011133], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015167499285390867], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929412951, 0.45188, [0.0015075], [0.0015242], [0.0015143], [0.0015202], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013967474369565025], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929413181, 0.45271, [0.0013941], [0.0014128], [0.0013961], [0.0013988], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1438807979086921e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929413407, 0.46603, [1.1408e-07], [1.1454e-07], [1.1426e-07], [1.1447e-07], [96350], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1441311339866706e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929413641, 0.45787, [1.1415e-07], [1.1478e-07], [1.1421e-07], [1.1447e-07], [96505], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1426662973699961e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929413875, 0.4625, [1.1388e-07], [1.1447e-07], [1.1409e-07], [1.1438e-07], [95582], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929407766, 0.066034], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929407832, 0.065672], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929407898, 0.070778], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002354537500650622], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929414107, 0.46527, [0.0023322], [0.0023688], [0.0023464], [0.0023621], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001406848936312599], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929414342, 0.45461, [0.0013948], [0.0014186], [0.0014015], [0.0014138], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037511310750103027], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929414571, 0.452, [0.00036923], [0.00038161], [0.0003696], [0.00038101], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00033897580672806547], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929414798, 0.45278, [0.0003382], [0.00034913], [0.00033863], [0.00033953], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5416714819191904e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929415024, 0.45998, [2.5256e-05], [2.5557e-05], [2.5292e-05], [2.5498e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018457614627048568], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929415253, 0.45621, [0.00018413], [0.00018542], [0.00018451], [0.00018495], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.359315854839875e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929415482, 0.45154, [4.341e-05], [4.4443e-05], [4.3421e-05], [4.3797e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003251639671713835], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929415712, 0.44338, [0.00032456], [0.00032633], [0.0003251], [0.00032562], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035597701709524823], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929415931, 0.44762, [0.00035452], [0.00035662], [0.00035576], [0.00035616], [29], [10]], "benchmarks.TextSuite.time_render": [[4.6830586492034534e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929416153, 0.45532, [4.6658e-06], [4.7253e-06], [4.678e-06], [4.6892e-06], [2336], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.519799996251754e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929416385, 0.45802, [8.4782e-05], [8.5324e-05], [8.5154e-05], [8.5293e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5137730366032985e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929416615, 0.4508, [3.5055e-05], [3.5293e-05], [3.5131e-05], [3.5204e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027435251295652335], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929416846, 0.44989, [0.0002739], [0.00027633], [0.00027395], [0.00027475], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013601067494164454], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929417070, 0.4556, [0.0013565], [0.0013641], [0.0013585], [0.0013618], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.00144711607260563], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929417301, 0.44477, [0.001445], [0.0014551], [0.0014462], [0.0014513], [7], [10]]}, "durations": {"<build>": 1.9822556972503662}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/9a4fbf83-virtualenv-py3.10.json
================================================
{"commit_hash": "9a4fbf83c5051eaf94a88996292c438c895306d5", "env_name": "virtualenv-py3.10", "date": 1595437545000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7386930548873132e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928739952, 0.45265, [1.7111e-07], [1.7619e-07], [1.7318e-07], [1.7463e-07], [63637], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7230044321104053e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928740177, 0.44588, [1.6995e-07], [1.7494e-07], [1.7036e-07], [1.7383e-07], [62521], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.72545012648743e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928740397, 0.44363, [1.695e-07], [1.759e-07], [1.7023e-07], [1.7427e-07], [62227], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7037679203746364e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928740615, 0.44989, [1.6957e-07], [1.7424e-07], [1.6983e-07], [1.7327e-07], [64452], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.737208866830249e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928740839, 0.43956, [1.6957e-07], [1.7818e-07], [1.7001e-07], [1.7405e-07], [64524], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7139659365246047e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928741057, 0.45054, [1.6827e-07], [1.7392e-07], [1.6965e-07], [1.7337e-07], [64972], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0021915999008342625], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928741282, 0.43506, [0.0021855], [0.0022052], [0.0021888], [0.0021949], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928735895, 0.062236], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928735957, 0.06095], "benchmarks.StyleSuite.time_parse_ansi": [[1.1658293135745944e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928741497, 0.42647, [1.1614e-07], [1.1683e-07], [1.1638e-07], [1.1675e-07], [87476], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1498905654465906e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928741709, 0.43337, [1.1385e-07], [1.1637e-07], [1.1408e-07], [1.1618e-07], [87677], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.145625050099677e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928741928, 0.44186, [1.14e-07], [1.1499e-07], [1.1421e-07], [1.1496e-07], [96016], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928736665, 0.060719], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928736726, 0.058912], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928736785, 0.058785], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.00213501249672845], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928742152, 0.44067, [0.0020952], [0.0021407], [0.0021285], [0.0021365], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001505148786236532], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928742376, 0.43714, [0.0014974], [0.0015108], [0.0015001], [0.0015081], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.000671309699343207], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928742598, 0.43843, [0.00065785], [0.0006777], [0.00066951], [0.00067533], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005592442232429878], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928742818, 0.42836, [0.0005557], [0.00056451], [0.00055711], [0.00056129], [18], [10]], "benchmarks.TextSuite.time_divide": [[2.8101753942839998e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928743030, 0.43291, [2.7832e-05], [2.8438e-05], [2.7841e-05], [2.839e-05], [380], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018889364033831252], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928743250, 0.44454, [0.00018637], [0.0001921], [0.00018701], [0.0001909], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2501335963606834e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928743471, 0.43217, [4.2014e-05], [4.3025e-05], [4.2117e-05], [4.295e-05], [250], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003339798549272781], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928743690, 0.43164, [0.0003302], [0.00033798], [0.00033052], [0.00033699], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928738581, 0.059351], "benchmarks.TextSuite.time_render": [[4.728479212368737e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928743904, 0.43175, [4.6732e-06], [4.7967e-06], [4.6806e-06], [4.7775e-06], [2333], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.626853532476834e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928744120, 0.44458, [8.5439e-05], [8.705e-05], [8.5642e-05], [8.6704e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.386980897866033e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928744345, 0.4354, [3.3638e-05], [3.3934e-05], [3.3678e-05], [3.391e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002787044052368131], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928744562, 0.42997, [0.00027754], [0.00027963], [0.0002786], [0.00027892], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001163493056083098], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928744776, 0.4368, [0.0011444], [0.0011821], [0.0011587], [0.0011653], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001542642856033386], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928744993, 0.44139, [0.0015144], [0.0015682], [0.0015177], [0.0015639], [7], [10]]}, "durations": {"<build>": 2.0578808784484863}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/9abc0292-virtualenv-py3.10.json
================================================
{"commit_hash": "9abc0292c1f96433e4f87b10d5dea0d617b0ab23", "env_name": "virtualenv-py3.10", "date": 1597074281000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7436755900738068e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928830015, 0.43858, [1.7219e-07], [1.9119e-07], [1.7358e-07], [1.8241e-07], [58543], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7281580510216833e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928830235, 0.45154, [1.7127e-07], [1.76e-07], [1.7158e-07], [1.7382e-07], [62214], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7408680274644608e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928830455, 0.43516, [1.7292e-07], [1.8035e-07], [1.7353e-07], [1.7709e-07], [59854], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7334309856629754e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928830671, 0.45819, [1.7233e-07], [1.7734e-07], [1.7275e-07], [1.7519e-07], [63301], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.726152067704983e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928830903, 0.45786, [1.6992e-07], [1.7717e-07], [1.7109e-07], [1.7322e-07], [63629], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7279195024118287e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928831134, 0.43673, [1.697e-07], [1.7473e-07], [1.7052e-07], [1.7368e-07], [64946], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0013254479381430428], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928831351, 0.4335, [0.0013162], [0.0013434], [0.0013177], [0.0013398], [8], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928825940, 0.058209], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928825998, 0.057693], "benchmarks.StyleSuite.time_parse_ansi": [[1.1619074018194943e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928831567, 0.45128, [1.146e-07], [1.1696e-07], [1.16e-07], [1.1642e-07], [95735], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1617918764174161e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928831793, 0.4337, [1.147e-07], [1.1718e-07], [1.1571e-07], [1.1632e-07], [96226], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1625632190902994e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928832012, 0.4454, [1.1471e-07], [1.1751e-07], [1.1619e-07], [1.1638e-07], [96646], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928826725, 0.058334], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928826784, 0.057861], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928826842, 0.057589], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0023085165972588583], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928832229, 0.44221, [0.0023022], [0.002314], [0.0023044], [0.002309], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014938482158218644], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928832452, 0.43078, [0.0014653], [0.0015017], [0.0014732], [0.0014962], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006769309684386826], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928832670, 0.44257, [0.00067313], [0.00069285], [0.00067405], [0.00068539], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.000564776638283446], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928832897, 0.43519, [0.00055025], [0.00057366], [0.00056426], [0.00056881], [18], [10]], "benchmarks.TextSuite.time_divide": [[2.8389237465098558e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928833117, 0.44553, [2.8336e-05], [2.841e-05], [2.8386e-05], [2.8393e-05], [379], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00019049086825505488], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928833338, 0.44401, [0.00018818], [0.00019159], [0.00018865], [0.00019092], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.248857458737949e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928833559, 0.43865, [4.1986e-05], [4.3156e-05], [4.2111e-05], [4.3017e-05], [248], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033843211290772045], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928833779, 0.43836, [0.00033167], [0.00035884], [0.00033615], [0.00033982], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928828651, 0.063001], "benchmarks.TextSuite.time_render": [[4.777508618050992e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928833997, 0.4336, [4.7379e-06], [4.8187e-06], [4.751e-06], [4.8037e-06], [2322], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.65903406018584e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928834215, 0.42096, [8.5511e-05], [8.7115e-05], [8.6415e-05], [8.6664e-05], [116], [10]], "benchmarks.TextSuite.time_split": [[3.43698573907694e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928834428, 0.44215, [3.4307e-05], [3.4539e-05], [3.432e-05], [3.4417e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002845039463765617], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928834648, 0.43493, [0.00028015], [0.00029144], [0.00028329], [0.00028692], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011678935002742542], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928834866, 0.43851, [0.001162], [0.0011697], [0.0011639], [0.0011683], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015627648577459954], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928835084, 0.42995, [0.0015509], [0.0015655], [0.0015528], [0.0015645], [7], [10]]}, "durations": {"<build>": 2.013007164001465}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/9bfb6190-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "9bfb6190934d3b265610fc6e17fe80ee308a7483", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1653323951000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7372689061629233e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889277471, 0.45872, [1.7139e-07], [1.7398e-07], [1.728e-07], [1.7383e-07], [64059], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.72227206268047e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889277705, 0.46676, [1.6979e-07], [1.7477e-07], [1.71e-07], [1.74e-07], [64697], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.742297695617307e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889277938, 0.45159, [1.7272e-07], [1.7549e-07], [1.7365e-07], [1.747e-07], [64521], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7411869369824213e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889278165, 0.44251, [1.7298e-07], [1.7625e-07], [1.7333e-07], [1.7477e-07], [58639], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7412487285878584e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889278386, 0.4482, [1.7345e-07], [1.7697e-07], [1.738e-07], [1.7544e-07], [64381], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7268865724222828e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889278610, 0.45174, [1.7033e-07], [1.7534e-07], [1.7075e-07], [1.7457e-07], [65126], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001062279159668833], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889278836, 0.45984, [0.0010526], [0.0010914], [0.0010531], [0.0010648], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015024165789197597], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889279066, 0.45116, [0.0014806], [0.0015284], [0.0014855], [0.0015087], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0011690347326091593], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889279295, 0.45722, [0.0011559], [0.0012031], [0.0011579], [0.0011819], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1693716886398407e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889279524, 0.43871, [1.1393e-07], [1.1774e-07], [1.1542e-07], [1.1736e-07], [87632], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.151961914374428e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889279742, 0.45489, [1.1405e-07], [1.1649e-07], [1.1438e-07], [1.1617e-07], [95947], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.155438205274788e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889279973, 0.44673, [1.1407e-07], [1.1687e-07], [1.1464e-07], [1.1672e-07], [87152], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007660166476853192], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889280200, 0.52011, [0.0075555], [0.0077461], [0.0075736], [0.0077188], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007617114461027086], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889280459, 0.51393, [0.0075365], [0.0077359], [0.0075831], [0.0076751], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007680687529500574], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889280717, 0.51637, [0.0075266], [0.0077552], [0.0076598], [0.0077023], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017705380838985245], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889280977, 0.45265, [0.0017551], [0.0017809], [0.0017652], [0.0017759], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001100527064409107], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889281206, 0.44727, [0.0010888], [0.0011062], [0.0010923], [0.0011047], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003749798975306852], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889281429, 0.45565, [0.00037129], [0.00038053], [0.00037203], [0.00037834], [29], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00035224127538141704], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889281661, 0.46222, [0.00034271], [0.00036255], [0.00034613], [0.00035341], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5576680664207554e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889281893, 0.45521, [2.5263e-05], [2.5839e-05], [2.5356e-05], [2.5795e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018669879734831845], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889282125, 0.45655, [0.0001847], [0.00018862], [0.00018512], [0.00018823], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.4454336261414755e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889282357, 0.45318, [4.4261e-05], [4.4567e-05], [4.4364e-05], [4.4523e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.000332151873848371], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889282587, 0.44815, [0.00032944], [0.00033573], [0.00032987], [0.00033507], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036301079270397796], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889282812, 0.45017, [0.00036174], [0.00036584], [0.00036237], [0.00036344], [29], [10]], "benchmarks.TextSuite.time_render": [[4.748502321012086e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889283036, 0.45704, [4.7259e-06], [4.8349e-06], [4.7345e-06], [4.7746e-06], [2337], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.692610690481642e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889283268, 0.44487, [8.4854e-05], [8.7888e-05], [8.5525e-05], [8.7058e-05], [117], [10]], "benchmarks.TextSuite.time_split": [[3.5910598909584835e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889283496, 0.44364, [3.5808e-05], [3.6242e-05], [3.5829e-05], [3.598e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002825756581794275], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889283717, 0.45815, [0.00027852], [0.000284], [0.00027966], [0.00028365], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011207541450858117], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889283946, 0.45721, [0.0011089], [0.0011424], [0.0011143], [0.0011239], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001374708313960582], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889284172, 0.45041, [0.0013715], [0.0013818], [0.0013727], [0.0013763], [8], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.026937958551570773], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892977384, 0.62603, [0.026875], [0.028001], [0.026925], [0.027199], [1], [10]]}, "durations": {"<build>": 1.7995786666870117}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/9f2a426e-virtualenv-py3.10.json
================================================
{"commit_hash": "9f2a426ea7b27e9ef41bb08bff7b0481d4755aa6", "env_name": "virtualenv-py3.10", "date": 1603122075000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7051829723035e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928975704, 0.45428, [1.693e-07], [1.7101e-07], [1.6986e-07], [1.7082e-07], [64518], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7051761587887072e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928975930, 0.46355, [1.6948e-07], [1.7215e-07], [1.6979e-07], [1.7076e-07], [65168], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.709415406481479e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928976171, 0.45347, [1.7005e-07], [1.7176e-07], [1.7036e-07], [1.7125e-07], [64344], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7059708729575333e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928976397, 0.45258, [1.6983e-07], [1.7114e-07], [1.6995e-07], [1.7092e-07], [64550], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.703384136445452e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928976624, 0.45418, [1.6833e-07], [1.7615e-07], [1.7024e-07], [1.7078e-07], [64235], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7177979153814433e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928976850, 0.45908, [1.7044e-07], [1.7848e-07], [1.7136e-07], [1.7486e-07], [64112], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010149916502996347], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928977080, 0.43868, [0.0010119], [0.0010181], [0.0010128], [0.0010166], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928971420, 0.060655], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014040807491255691], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928977300, 0.44256, [0.0013988], [0.0014065], [0.0014005], [0.0014055], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1532585875856004e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928977521, 0.45513, [1.1431e-07], [1.158e-07], [1.1448e-07], [1.1559e-07], [96195], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1603592188811979e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928977749, 0.45409, [1.1362e-07], [1.167e-07], [1.1585e-07], [1.1627e-07], [96473], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1415330291053145e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928977978, 0.45153, [1.1392e-07], [1.1481e-07], [1.141e-07], [1.1423e-07], [96554], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928972379, 0.060603], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928972440, 0.060561], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928972501, 0.060786], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002737713624810567], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928978205, 0.43842, [0.0027315], [0.0027451], [0.0027353], [0.0027411], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0018642640012937286], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928978422, 0.45057, [0.0018511], [0.0018769], [0.0018549], [0.0018688], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006623398439842276], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928978646, 0.43926, [0.00065982], [0.00067771], [0.00066149], [0.00066308], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005538772108449944], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928978870, 0.43759, [0.0005478], [0.00055745], [0.00055289], [0.00055427], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.804970606462419e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928979094, 0.44976, [2.7928e-05], [2.8551e-05], [2.7933e-05], [2.8397e-05], [381], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018746636857956713], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928979321, 0.44782, [0.0001871], [0.00018883], [0.00018734], [0.00018771], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2384543824399195e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928979547, 0.44542, [4.2257e-05], [4.2464e-05], [4.237e-05], [4.2415e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003300188062337017], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928979769, 0.43135, [0.00032851], [0.00033092], [0.00032977], [0.00033058], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928974326, 0.060808], "benchmarks.TextSuite.time_render": [[4.699827059279202e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928979983, 0.43533, [4.6639e-06], [4.7512e-06], [4.6833e-06], [4.7404e-06], [2339], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.536799998637434e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928980202, 0.44936, [8.4795e-05], [8.5609e-05], [8.507e-05], [8.5445e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.391292790556923e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928980429, 0.44202, [3.3827e-05], [3.41e-05], [3.3843e-05], [3.4002e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028034289189727624], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928980649, 0.43415, [0.00027901], [0.00028106], [0.00027971], [0.00028047], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011459815011928892], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928980866, 0.43887, [0.001144], [0.001169], [0.001145], [0.0011484], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015235238575509618], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928981084, 0.43962, [0.0015199], [0.0015304], [0.001521], [0.0015274], [7], [10]]}, "durations": {"<build>": 1.9609119892120361}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/a27a3ee2-virtualenv-py3.10.json
================================================
{"commit_hash": "a27a3ee20bff6c6aa0642f31fb736e72d16abbce", "env_name": "virtualenv-py3.10", "date": 1600101858000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7042800680936237e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928909229, 0.42891, [1.6948e-07], [1.7485e-07], [1.7001e-07], [1.7153e-07], [64527], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7180735607927396e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928909443, 0.43918, [1.6933e-07], [1.7368e-07], [1.7038e-07], [1.7321e-07], [64518], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.717659715346583e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928909659, 0.42738, [1.6846e-07], [1.734e-07], [1.6999e-07], [1.7322e-07], [64490], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.737773394621508e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928909873, 0.43312, [1.7368e-07], [1.741e-07], [1.7373e-07], [1.7393e-07], [64504], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7345675113671666e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928910088, 0.42318, [1.724e-07], [1.7388e-07], [1.7312e-07], [1.7368e-07], [58799], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7281638282229994e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928910299, 0.42297, [1.715e-07], [1.736e-07], [1.7232e-07], [1.734e-07], [59044], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011325370562392184], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928910509, 0.42988, [0.0011302], [0.0011429], [0.0011322], [0.0011335], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928905022, 0.057851], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0015301667133046848], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928910722, 0.43497, [0.0015273], [0.0015373], [0.0015285], [0.0015313], [7], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1514082085278366e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928910943, 0.43922, [1.1388e-07], [1.1636e-07], [1.1418e-07], [1.1629e-07], [96321], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.148777592758897e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928911167, 0.44638, [1.144e-07], [1.1545e-07], [1.1446e-07], [1.1538e-07], [95312], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1430559190946105e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928911391, 0.44827, [1.1411e-07], [1.1458e-07], [1.1427e-07], [1.1436e-07], [96462], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928905957, 0.057415], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928906014, 0.057183], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928906072, 0.057108], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0030256926220317837], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928911616, 0.45324, [0.0030176], [0.0030308], [0.0030228], [0.0030281], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001963548582959144], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928911846, 0.44673, [0.0019601], [0.0020088], [0.0019621], [0.0019669], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006744960937794531], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928912074, 0.43447, [0.00067075], [0.00067785], [0.00067261], [0.0006755], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005577971314778551], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928912294, 0.43981, [0.00055435], [0.00056808], [0.00055484], [0.00055944], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.844203366817173e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928912514, 0.43454, [2.8263e-05], [2.8525e-05], [2.8334e-05], [2.8503e-05], [386], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00019038999105983398], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928912736, 0.44125, [0.00018992], [0.00019128], [0.00019023], [0.0001911], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.279382467275463e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928912956, 0.43349, [4.2366e-05], [4.3206e-05], [4.2775e-05], [4.2928e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033351546763667775], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928913178, 0.42827, [0.00033053], [0.00033667], [0.0003312], [0.0003356], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928907867, 0.057792], "benchmarks.TextSuite.time_render": [[4.679437361052641e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928913392, 0.43419, [4.66e-06], [4.7068e-06], [4.6688e-06], [4.7015e-06], [2323], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.515022648225568e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928913612, 0.44249, [8.4387e-05], [8.599e-05], [8.5056e-05], [8.5285e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.3680288489006504e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928913834, 0.4347, [3.3615e-05], [3.4087e-05], [3.3652e-05], [3.3837e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002821311893451304], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928914050, 0.43042, [0.00027872], [0.00028469], [0.00027904], [0.00028425], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011427662215687127], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928914265, 0.43025, [0.0011399], [0.0011449], [0.0011416], [0.0011444], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015367023567835402], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928914478, 0.43563, [0.0015217], [0.0015512], [0.0015235], [0.0015504], [7], [10]]}, "durations": {"<build>": 1.9690570831298828}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/a2f6688e-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "a2f6688ed395fafb772ab4107158ae59a548e3f1", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644577730000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7161136378530675e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826272097, 0.45613, [1.6995e-07], [1.7244e-07], [1.7118e-07], [1.7225e-07], [64307], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7099068633730226e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826272320, 0.46751, [1.6959e-07], [1.7417e-07], [1.7072e-07], [1.7134e-07], [63945], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7148952490907274e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826272551, 0.44748, [1.7044e-07], [1.7595e-07], [1.7102e-07], [1.7237e-07], [64342], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7055295106400394e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826272774, 0.46448, [1.6913e-07], [1.7577e-07], [1.7011e-07], [1.7089e-07], [64661], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.713860974553142e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826273008, 0.46451, [1.7004e-07], [1.7673e-07], [1.7099e-07], [1.7183e-07], [64366], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7131588094308027e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826273242, 0.46658, [1.6907e-07], [1.7178e-07], [1.7029e-07], [1.7156e-07], [64303], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011179235556887256], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826273475, 0.4443, [0.0011117], [0.0011244], [0.0011146], [0.0011217], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015668570662715606], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826273696, 0.45374, [0.0015638], [0.001627], [0.0015656], [0.0015689], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014148176851449534], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826273922, 0.45761, [0.0014079], [0.0015327], [0.0014105], [0.0014193], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1514154269462482e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826274150, 0.43805, [1.1462e-07], [1.1659e-07], [1.1478e-07], [1.1536e-07], [87482], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1611518250633151e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826274369, 0.44714, [1.1511e-07], [1.1737e-07], [1.1526e-07], [1.1685e-07], [86918], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1439283745774066e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826274597, 0.462, [1.1402e-07], [1.1592e-07], [1.1428e-07], [1.1519e-07], [95089], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008438635501079261], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826274829, 0.51533, [0.0084046], [0.0085955], [0.0084285], [0.0084662], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008488562772981822], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826275087, 0.52152, [0.00842], [0.0086536], [0.0084437], [0.0085252], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.00847804156364873], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826275348, 0.51839, [0.0084279], [0.0089881], [0.0084511], [0.0086097], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001885062491055578], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826275606, 0.47925, [0.0018763], [0.0019631], [0.0018798], [0.0018998], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011595208197832108], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826275835, 0.44908, [0.0011579], [0.0011759], [0.0011584], [0.0011656], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037416591242487945], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826276061, 0.45571, [0.0003736], [0.00038002], [0.00037385], [0.00037556], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003409569805127478], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826276287, 0.45983, [0.00033933], [0.00035214], [0.00034008], [0.00034233], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.55578392921211e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826276515, 0.45621, [2.5371e-05], [2.642e-05], [2.5472e-05], [2.6162e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018541020509819017], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826276747, 0.46439, [0.00018401], [0.0001871], [0.00018507], [0.00018571], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.4269900394194735e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826276980, 0.45577, [4.3586e-05], [4.5398e-05], [4.3646e-05], [4.4987e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033002021496720386], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826277210, 0.47409, [0.00032513], [0.00034118], [0.00032765], [0.00033194], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003562187349113325], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826277444, 0.45679, [0.00035453], [0.00035815], [0.00035552], [0.00035686], [30], [10]], "benchmarks.TextSuite.time_render": [[4.678721585446316e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826277672, 0.45652, [4.6722e-06], [4.6983e-06], [4.6744e-06], [4.6841e-06], [2340], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.526594865543302e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826277904, 0.46191, [8.5096e-05], [8.5814e-05], [8.5215e-05], [8.5565e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5513432521838695e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826278136, 0.45426, [3.5343e-05], [3.646e-05], [3.5491e-05], [3.5787e-05], [304], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027885361831929336], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826278368, 0.45744, [0.00027555], [0.00028692], [0.00027602], [0.00028351], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0014174166281009093], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826278600, 0.4674, [0.0013624], [0.0015352], [0.0013642], [0.0014994], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014634374861738513], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826278842, 0.45671, [0.0014561], [0.0014863], [0.0014602], [0.0014735], [7], [10]]}, "durations": {"<build>": 1.9061319828033447}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/a6d1d784-virtualenv-py3.10.json
================================================
{"commit_hash": "a6d1d784879fe939cd9c262d9b2f25a673ce88c9", "env_name": "virtualenv-py3.10", "date": 1638115443000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.693641204731282e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929367764, 0.46266, [1.6873e-07], [1.7074e-07], [1.69e-07], [1.6981e-07], [64513], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7028117153496322e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929367995, 0.45723, [1.6951e-07], [1.7192e-07], [1.6977e-07], [1.7154e-07], [64843], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7094650969542762e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929368229, 0.46035, [1.6947e-07], [1.7956e-07], [1.7021e-07], [1.7948e-07], [64021], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.702568146514439e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929368461, 0.44046, [1.6985e-07], [1.7068e-07], [1.7013e-07], [1.7055e-07], [59358], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.702479761820018e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929368681, 0.46671, [1.6968e-07], [1.7882e-07], [1.6997e-07], [1.7147e-07], [64234], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6955152081863054e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929368913, 0.46156, [1.6816e-07], [1.7047e-07], [1.6899e-07], [1.6997e-07], [65168], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001111442111626578], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929369147, 0.44229, [0.0011071], [0.0011155], [0.0011092], [0.0011131], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015210982861130365], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929369368, 0.45264, [0.0015103], [0.0015274], [0.0015192], [0.0015228], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014059401237318525], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929369598, 0.4546, [0.0014008], [0.0014107], [0.0014018], [0.001407], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.152333821686819e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929369823, 0.44698, [1.1407e-07], [1.1656e-07], [1.1484e-07], [1.1631e-07], [86564], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1524275221005641e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929370052, 0.44112, [1.1338e-07], [1.1696e-07], [1.1372e-07], [1.1677e-07], [85855], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1440585883210438e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929370275, 0.46163, [1.1379e-07], [1.1472e-07], [1.1427e-07], [1.1459e-07], [95086], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929364174, 0.068449], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929364243, 0.066985], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929364310, 0.066614], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0023555874009616676], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929370506, 0.46066, [0.0023453], [0.0023707], [0.0023519], [0.00236], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001407257812388707], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929370741, 0.45093, [0.0014003], [0.0014115], [0.0014025], [0.0014098], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038124766703091426], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929370968, 0.45235, [0.00036827], [0.00038583], [0.00036968], [0.0003839], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003428434030220453], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929371195, 0.45595, [0.00033961], [0.00035342], [0.00034035], [0.00035196], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.545662413365415e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929371422, 0.46099, [2.5421e-05], [2.5591e-05], [2.5437e-05], [2.5505e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018464798280359087], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929371653, 0.4549, [0.00018372], [0.00018503], [0.00018448], [0.00018482], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.341412396917907e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929371880, 0.44664, [4.3359e-05], [4.36e-05], [4.3363e-05], [4.3447e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003247979850240165], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929372107, 0.45621, [0.00032323], [0.00032554], [0.00032421], [0.00032509], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003560538617452478], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929372333, 0.4457, [0.00035422], [0.00035843], [0.00035561], [0.00035645], [29], [10]], "benchmarks.TextSuite.time_render": [[4.68243460391974e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929372555, 0.45353, [4.6678e-06], [4.708e-06], [4.6728e-06], [4.6874e-06], [2332], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.542684113061735e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929372785, 0.46289, [8.4381e-05], [9.2768e-05], [8.4666e-05], [8.5745e-05], [129], [10]], "benchmarks.TextSuite.time_split": [[3.5212895430828403e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929373019, 0.45, [3.5156e-05], [3.5402e-05], [3.5192e-05], [3.5231e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002742187502199637], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929373248, 0.44813, [0.00027246], [0.00027636], [0.00027312], [0.00027488], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.00135714318639657], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929373471, 0.45506, [0.0013541], [0.0013627], [0.0013552], [0.0013592], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014486667142981397], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929373701, 0.44424, [0.0014465], [0.0014527], [0.001448], [0.0014514], [7], [10]]}, "durations": {"<build>": 2.0430939197540283}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/a6ea9890-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "a6ea98901e3717ac6ab0e7a2799cc56b5c477c88", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644578031000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7088392944644641e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826224593, 0.46816, [1.6976e-07], [1.7626e-07], [1.7085e-07], [1.7352e-07], [64319], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7110493447481382e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826224828, 0.4655, [1.7007e-07], [1.7258e-07], [1.7082e-07], [1.7145e-07], [63834], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7093251938360136e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826225061, 0.43902, [1.6991e-07], [1.7276e-07], [1.706e-07], [1.7189e-07], [58771], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7071457878095554e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826225279, 0.45393, [1.6955e-07], [1.7376e-07], [1.7037e-07], [1.709e-07], [64133], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7081272226153223e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826225510, 0.43721, [1.7027e-07], [1.7124e-07], [1.7061e-07], [1.71e-07], [58635], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7091590933502896e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826225727, 0.46164, [1.6846e-07], [1.7369e-07], [1.7064e-07], [1.71e-07], [63330], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011206967626801794], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826225957, 0.44512, [0.0011128], [0.0011504], [0.0011152], [0.0011421], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015656279200421913], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826226178, 0.45077, [0.0015569], [0.0016], [0.0015618], [0.0015819], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001426604183507152], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826226401, 0.4589, [0.0014068], [0.0014772], [0.0014141], [0.0014415], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1476602599128932e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826226632, 0.46456, [1.1406e-07], [1.156e-07], [1.1445e-07], [1.1536e-07], [95564], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.149208224277164e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826226863, 0.45534, [1.1432e-07], [1.1566e-07], [1.1478e-07], [1.1514e-07], [93121], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.142728397105473e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826227090, 0.44176, [1.1382e-07], [1.1526e-07], [1.14e-07], [1.1448e-07], [87696], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.0084690204821527], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826227314, 0.52012, [0.0083866], [0.0085889], [0.0084343], [0.0084785], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.00849023973569274], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826227573, 0.5229, [0.0084227], [0.0088337], [0.0084474], [0.0086817], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008523833297658712], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826227836, 0.52482, [0.0083969], [0.009457], [0.0084449], [0.0091442], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001875013889123996], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826228103, 0.46485, [0.0018649], [0.00189], [0.0018713], [0.0018826], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011576620551447074], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826228334, 0.45228, [0.0011526], [0.0011756], [0.0011558], [0.0011613], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00039240144766294037], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826228563, 0.45434, [0.0003751], [0.00041785], [0.00037576], [0.00040973], [26], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034256316270799404], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826228788, 0.45725, [0.00033813], [0.00035008], [0.00033919], [0.0003447], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.538712920419907e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826229013, 0.46455, [2.5228e-05], [2.5684e-05], [2.5316e-05], [2.5422e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018563074991106987], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826229242, 0.45484, [0.00018512], [0.0001946], [0.0001852], [0.0001874], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3684255988260765e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826229471, 0.45694, [4.3521e-05], [4.4206e-05], [4.3574e-05], [4.3823e-05], [244], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032836363552081764], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826229700, 0.4661, [0.00032621], [0.00033052], [0.00032668], [0.00032947], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003576201153919101], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826229933, 0.46025, [0.00035504], [0.00036792], [0.00035567], [0.00035957], [30], [10]], "benchmarks.TextSuite.time_render": [[4.6897622379074735e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826230160, 0.45269, [4.6715e-06], [4.8033e-06], [4.6806e-06], [4.7428e-06], [2284], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.595275589976255e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826230389, 0.46133, [8.5006e-05], [8.869e-05], [8.5747e-05], [8.6626e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.544889310597891e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826230621, 0.46598, [3.5172e-05], [3.6239e-05], [3.5308e-05], [3.6062e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027756031761926253], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826230853, 0.45486, [0.0002747], [0.00028023], [0.00027531], [0.00027895], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013678281247848645], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826231079, 0.46074, [0.0013581], [0.0013925], [0.0013591], [0.0013726], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014634970076648252], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826231312, 0.45407, [0.0014586], [0.0015333], [0.00146], [0.0014677], [7], [10]]}, "durations": {"<build>": 1.8149588108062744}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/a81230bc-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "a81230bcff8e66a6e16522a0ab9186416d615f09", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1621440919000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7048077197972126e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889033755, 0.45619, [1.6965e-07], [1.7191e-07], [1.701e-07], [1.7066e-07], [64388], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.713326953404807e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889033983, 0.4586, [1.6974e-07], [1.7332e-07], [1.7092e-07], [1.7252e-07], [64290], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7121993341561338e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889034213, 0.43162, [1.6977e-07], [1.723e-07], [1.7035e-07], [1.7169e-07], [59266], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7083366311569771e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889034429, 0.45306, [1.6999e-07], [1.7171e-07], [1.706e-07], [1.7129e-07], [64730], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7049372611221387e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889034657, 0.45427, [1.6979e-07], [1.7113e-07], [1.7027e-07], [1.7092e-07], [63811], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.71271262563798e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889034884, 0.45304, [1.6869e-07], [1.7537e-07], [1.706e-07], [1.7331e-07], [64252], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010408041533082723], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889035111, 0.44724, [0.0010355], [0.0010705], [0.001037], [0.0010651], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001437294646166265], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889035334, 0.43672, [0.0014279], [0.0014902], [0.0014343], [0.0014447], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014316398384315626], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889035549, 0.43771, [0.0014222], [0.0014743], [0.0014294], [0.0014531], [7], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.161390181117145e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889035767, 0.44586, [1.1412e-07], [1.1781e-07], [1.1482e-07], [1.1698e-07], [95035], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1469245905393551e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889035985, 0.45231, [1.1441e-07], [1.1635e-07], [1.1463e-07], [1.1538e-07], [95361], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.14973712943755e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889036212, 0.45401, [1.1424e-07], [1.1665e-07], [1.1462e-07], [1.152e-07], [95634], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889030266, 0.063235], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889030330, 0.061589], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889030391, 0.060599], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021255041006952528], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889036439, 0.44147, [0.0021122], [0.0021398], [0.0021218], [0.0021339], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012807916209567338], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889036663, 0.4411, [0.0012709], [0.0012917], [0.0012769], [0.0012863], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006704791594529524], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889036882, 0.43923, [0.00065881], [0.00068459], [0.00066213], [0.00067602], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005531699433432598], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889037104, 0.44433, [0.00054552], [0.00056744], [0.00054909], [0.00055513], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.5357819886180745e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889037326, 0.44712, [2.5229e-05], [2.605e-05], [2.527e-05], [2.5375e-05], [422], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018443390606613508], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889037549, 0.44807, [0.00018368], [0.00018584], [0.00018417], [0.00018543], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.368494882495427e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889037773, 0.43955, [4.3596e-05], [4.3809e-05], [4.3652e-05], [4.3736e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032715995105043533], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889037996, 0.43277, [0.00032518], [0.00033058], [0.00032541], [0.00032878], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035755315008733805], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889038212, 0.43821, [0.00035629], [0.00035826], [0.00035701], [0.00035787], [29], [10]], "benchmarks.TextSuite.time_render": [[4.694289090837506e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889038430, 0.44396, [4.6686e-06], [4.7309e-06], [4.6913e-06], [4.7048e-06], [2323], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.519324400704207e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889038655, 0.44671, [8.4791e-05], [8.684e-05], [8.5059e-05], [8.5506e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.561958921589441e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889038880, 0.44342, [3.5142e-05], [3.6586e-05], [3.5276e-05], [3.6027e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002769205143283072], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889039105, 0.44602, [0.00027356], [0.00028677], [0.00027491], [0.00027897], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010970458621159195], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889039330, 0.44785, [0.0010937], [0.0011003], [0.0010949], [0.0010977], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015015506484944907], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889039558, 0.43905, [0.0014924], [0.0015272], [0.001499], [0.0015027], [7], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.029908020398579538], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892937701, 0.6635, [0.029867], [0.029986], [0.029873], [0.029951], [1], [10]]}, "durations": {"<build>": 1.8228800296783447}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/a81230bc-virtualenv-py3.10.json
================================================
{"commit_hash": "a81230bcff8e66a6e16522a0ab9186416d615f09", "env_name": "virtualenv-py3.10", "date": 1621440919000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7089820134849163e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928347340, 0.45862, [1.7e-07], [1.7457e-07], [1.7038e-07], [1.7177e-07], [64166], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7021133058504719e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928347569, 0.44902, [1.696e-07], [1.7089e-07], [1.6974e-07], [1.706e-07], [64851], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7093464614946301e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928347799, 0.43832, [1.6961e-07], [1.7247e-07], [1.7055e-07], [1.7112e-07], [60333], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.708929539256602e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928348018, 0.45747, [1.6953e-07], [1.7288e-07], [1.7004e-07], [1.7116e-07], [64374], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7095533240400798e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928348248, 0.45705, [1.6957e-07], [1.7225e-07], [1.7007e-07], [1.7169e-07], [64006], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7013976745683384e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928348476, 0.45399, [1.7002e-07], [1.7076e-07], [1.701e-07], [1.7062e-07], [63806], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010306896001566201], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928348703, 0.44456, [0.0010285], [0.0010362], [0.0010301], [0.0010322], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001427216124284314], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928348925, 0.45429, [0.0014229], [0.0014321], [0.0014246], [0.0014298], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014342976418057723], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928349151, 0.43711, [0.0014271], [0.0014412], [0.0014308], [0.0014379], [7], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1472595696275204e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928349368, 0.45598, [1.1421e-07], [1.1517e-07], [1.1438e-07], [1.1482e-07], [95828], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1479176945339659e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928349597, 0.45676, [1.1441e-07], [1.1687e-07], [1.1472e-07], [1.1508e-07], [95752], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.146414121082228e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928349826, 0.45598, [1.1409e-07], [1.1498e-07], [1.1449e-07], [1.1481e-07], [95593], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928343833, 0.063079], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928343896, 0.062244], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928343958, 0.062379], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002125933303614147], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928350055, 0.44442, [0.0021152], [0.0021442], [0.002121], [0.0021357], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001284916625081678], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928350280, 0.44527, [0.0012786], [0.0012955], [0.0012825], [0.00129], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006593489679289632], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928350502, 0.43857, [0.0006576], [0.00066139], [0.00065902], [0.00065983], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005478475795825943], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928350724, 0.44481, [0.00054467], [0.00055428], [0.00054712], [0.00054821], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.5265698322256757e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928350945, 0.45124, [2.5191e-05], [2.537e-05], [2.5224e-05], [2.5303e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018454670674239833], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928351169, 0.44915, [0.00018408], [0.00018504], [0.0001844], [0.00018485], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3587735771273485e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928351394, 0.44117, [4.3434e-05], [4.3712e-05], [4.3511e-05], [4.3678e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032423104593445635], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928351617, 0.45005, [0.00032311], [0.00032504], [0.00032386], [0.00032476], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035670832760937123], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928351841, 0.43927, [0.00035589], [0.00035784], [0.00035626], [0.00035733], [29], [10]], "benchmarks.TextSuite.time_render": [[4.675652580225816e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928352059, 0.44572, [4.6561e-06], [4.7094e-06], [4.6589e-06], [4.6924e-06], [2330], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.618554682016111e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928352285, 0.45317, [8.456e-05], [8.6489e-05], [8.6002e-05], [8.6316e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5144470565879314e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928352514, 0.44139, [3.5063e-05], [3.5388e-05], [3.5078e-05], [3.5229e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027454221019165983], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928352738, 0.44116, [0.00027362], [0.00027615], [0.00027384], [0.00027542], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010963437511236408], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928352959, 0.43727, [0.0010932], [0.0010995], [0.0010945], [0.0010984], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014880772858824848], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928353177, 0.4356, [0.0014842], [0.001494], [0.0014856], [0.0014912], [7], [10]]}, "durations": {"<build>": 1.9775969982147217}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/a8d2bb20-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "a8d2bb2004a4a1f12fd445039a62c07df56f834d", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1647856269000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.746105755289334e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825720199, 0.45348, [1.7285e-07], [1.7795e-07], [1.7394e-07], [1.7598e-07], [63888], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.731558023163308e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825720427, 0.46022, [1.6906e-07], [1.768e-07], [1.7148e-07], [1.7437e-07], [62335], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.707054134073588e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825720656, 0.44273, [1.6947e-07], [1.7179e-07], [1.6998e-07], [1.7132e-07], [59213], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7176827874502142e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825720876, 0.46409, [1.6939e-07], [1.7609e-07], [1.7051e-07], [1.7244e-07], [63350], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7111721350919448e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825721107, 0.45852, [1.7016e-07], [1.7718e-07], [1.7047e-07], [1.7417e-07], [64271], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7116105110002396e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825721339, 0.4721, [1.7016e-07], [1.73e-07], [1.7062e-07], [1.7199e-07], [64576], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010428812471218406], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825721575, 0.45079, [0.001033], [0.0010713], [0.0010359], [0.0010478], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015013898623042871], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825721805, 0.45232, [0.0014644], [0.0015619], [0.0014755], [0.0015356], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0011422823364329007], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825722031, 0.45677, [0.0011396], [0.0011694], [0.0011404], [0.0011465], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1435222590630156e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825722258, 0.46694, [1.138e-07], [1.1615e-07], [1.1401e-07], [1.1471e-07], [95599], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.155735561902593e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825722494, 0.44976, [1.1407e-07], [1.1722e-07], [1.1441e-07], [1.1694e-07], [89679], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.159752563532702e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825722717, 0.46491, [1.1416e-07], [1.1802e-07], [1.1467e-07], [1.1707e-07], [95035], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.00772461446467787], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825722949, 0.51444, [0.0075462], [0.0080961], [0.0075751], [0.0077696], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007656677218619734], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825723207, 0.52206, [0.0076012], [0.0078433], [0.0076142], [0.0077394], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007799614511895925], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825723469, 0.50662, [0.0075476], [0.007975], [0.0075761], [0.0079576], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.00174519441012914], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825723718, 0.45062, [0.0017387], [0.0018006], [0.0017409], [0.0017514], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001127035403624177], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825723945, 0.46328, [0.0010789], [0.0012893], [0.0010813], [0.0011915], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037897098393711664], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825724176, 0.46376, [0.00037484], [0.00038429], [0.00037782], [0.00037968], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003426975810960416], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825724406, 0.45861, [0.00034132], [0.00035455], [0.00034194], [0.00034636], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5613430177774997e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825724635, 0.45731, [2.5407e-05], [2.5915e-05], [2.5476e-05], [2.5692e-05], [416], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018545979911690217], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825724863, 0.45564, [0.00018488], [0.0001869], [0.00018518], [0.00018572], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.385399766554072e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825725090, 0.45451, [4.3713e-05], [4.4638e-05], [4.3784e-05], [4.392e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033253695320097673], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825725320, 0.44482, [0.00032663], [0.00033884], [0.00032821], [0.00033335], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003644389477719007], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825725543, 0.45192, [0.00036015], [0.0003673], [0.00036179], [0.00036564], [29], [10]], "benchmarks.TextSuite.time_render": [[4.710874346626284e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825725768, 0.45526, [4.679e-06], [4.8149e-06], [4.6978e-06], [4.7347e-06], [2312], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.612450305372477e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825726000, 0.4572, [8.5041e-05], [8.7528e-05], [8.5681e-05], [8.696e-05], [125], [10]], "benchmarks.TextSuite.time_split": [[3.528084444160295e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825726230, 0.45145, [3.505e-05], [3.5474e-05], [3.5203e-05], [3.5318e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028329335052419355], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825726461, 0.44836, [0.00027821], [0.00028454], [0.00028279], [0.0002836], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011036250041797757], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825726683, 0.44797, [0.0011008], [0.0011063], [0.0011022], [0.0011051], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013673750072484836], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825726906, 0.45854, [0.0013469], [0.0013933], [0.0013538], [0.0013751], [8], [10]]}, "durations": {"<build>": 1.840602159500122}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/aa4546ac-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "aa4546ac465c36a057c0f77c0c8856497475b3ed", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1646068509000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7371587355135212e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825814888, 0.46866, [1.7087e-07], [1.7623e-07], [1.7291e-07], [1.7426e-07], [63243], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7154973343872054e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825815121, 0.46111, [1.707e-07], [1.7264e-07], [1.7123e-07], [1.7234e-07], [64274], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7257145552266629e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825815349, 0.4582, [1.7135e-07], [1.7497e-07], [1.7183e-07], [1.7284e-07], [63857], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7410511153432232e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825815584, 0.44448, [1.7198e-07], [1.7479e-07], [1.738e-07], [1.744e-07], [58676], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7172891845825317e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825815806, 0.44786, [1.7055e-07], [1.7515e-07], [1.7129e-07], [1.7297e-07], [64818], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.739150714521416e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825816030, 0.44785, [1.7272e-07], [1.7494e-07], [1.7348e-07], [1.7436e-07], [63971], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001136766229238775], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825816253, 0.44618, [0.0011283], [0.0011765], [0.0011342], [0.0011415], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015914792228224023], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825816477, 0.45631, [0.001569], [0.001611], [0.0015872], [0.001599], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014475267713091203], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825816702, 0.44715, [0.0014398], [0.0014934], [0.0014433], [0.0014783], [7], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1617100382147802e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825816922, 0.43924, [1.1446e-07], [1.1705e-07], [1.1521e-07], [1.1678e-07], [87215], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1691834139228886e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825817140, 0.44689, [1.1666e-07], [1.1739e-07], [1.167e-07], [1.1714e-07], [85907], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1701384108198911e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825817368, 0.46728, [1.1656e-07], [1.2e-07], [1.1675e-07], [1.1709e-07], [93889], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008617646002676338], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825817603, 0.52379, [0.0085836], [0.0087758], [0.0086088], [0.0086484], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.00859993725316599], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825817866, 0.52244, [0.0084813], [0.0087782], [0.008506], [0.008661], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.00859251053771004], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825818127, 0.51938, [0.0084267], [0.0087731], [0.0084483], [0.0086762], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019127499933044114], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825818389, 0.459, [0.0018832], [0.0019811], [0.0019016], [0.001955], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001182990717805094], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825818624, 0.45384, [0.0011728], [0.0011924], [0.0011815], [0.0011861], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.000387386156944558], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825818854, 0.46341, [0.0003744], [0.00039286], [0.00037998], [0.00039064], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034716937150205333], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825819087, 0.46776, [0.0003407], [0.00035989], [0.00034234], [0.00034946], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5675214429783236e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825819317, 0.45593, [2.5314e-05], [2.5859e-05], [2.5418e-05], [2.5813e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001868168193172535], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825819548, 0.46115, [0.00018467], [0.00018901], [0.00018484], [0.00018844], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.445995704164026e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825819780, 0.45468, [4.4262e-05], [4.4721e-05], [4.4398e-05], [4.4511e-05], [244], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033312230821578735], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825820010, 0.45072, [0.00033066], [0.00033738], [0.0003311], [0.00033498], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003608656557405303], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825820236, 0.45328, [0.00035888], [0.00036183], [0.00035999], [0.00036128], [29], [10]], "benchmarks.TextSuite.time_render": [[4.7358841497550365e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825820462, 0.44998, [4.6867e-06], [5.1432e-06], [4.7108e-06], [4.9165e-06], [2326], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.592388581660554e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825820689, 0.46078, [8.5387e-05], [8.7331e-05], [8.5818e-05], [8.6382e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.590291594969656e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825820923, 0.45179, [3.5298e-05], [3.595e-05], [3.5382e-05], [3.594e-05], [303], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028301480128184746], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825821153, 0.45853, [0.00027714], [0.00029138], [0.00027879], [0.00028354], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001368145807646215], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825821383, 0.45271, [0.0013581], [0.0014142], [0.0013607], [0.0013808], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014724851519401583], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825821609, 0.44188, [0.0014607], [0.0015051], [0.0014641], [0.001485], [7], [10]]}, "durations": {"<build>": 1.8375229835510254}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/aa7926c1-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "aa7926c1431eebfb2ccaab9f3b63a4ac6cd8dfe6", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1653374399000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.739531024791868e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889293097, 0.46956, [1.7288e-07], [1.7443e-07], [1.7347e-07], [1.7427e-07], [64043], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7376151695555103e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889293330, 0.4569, [1.726e-07], [1.742e-07], [1.7364e-07], [1.7399e-07], [64363], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7442092336538916e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889293563, 0.46232, [1.7143e-07], [1.7506e-07], [1.7366e-07], [1.7471e-07], [63097], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7385762173114025e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889293793, 0.44087, [1.7231e-07], [1.7525e-07], [1.734e-07], [1.7438e-07], [58682], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.741916345546828e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889294012, 0.4501, [1.7072e-07], [1.758e-07], [1.7307e-07], [1.7437e-07], [58389], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7383350176897982e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889294240, 0.44704, [1.7268e-07], [1.7442e-07], [1.7339e-07], [1.7424e-07], [64356], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010684667038731277], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889294464, 0.44983, [0.0010559], [0.0010942], [0.0010591], [0.0010807], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015080237894185952], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889294692, 0.45008, [0.0015032], [0.0015281], [0.0015053], [0.001512], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0011849930613405174], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889294921, 0.45285, [0.0011797], [0.0012016], [0.0011833], [0.0011886], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1631303902945802e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889295151, 0.44029, [1.1608e-07], [1.1767e-07], [1.1623e-07], [1.166e-07], [87473], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1632572812453727e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889295371, 0.46395, [1.1577e-07], [1.17e-07], [1.1616e-07], [1.1668e-07], [94177], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1651837319226454e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889295603, 0.4627, [1.1623e-07], [1.1688e-07], [1.1643e-07], [1.1662e-07], [94211], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007655249966774136], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889295835, 0.51465, [0.0075343], [0.0077945], [0.007548], [0.007728], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.0076590420212596655], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889296093, 0.51788, [0.0075647], [0.007762], [0.0076003], [0.007729], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007674697728361934], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889296351, 0.50038, [0.007556], [0.0077954], [0.0075897], [0.0077738], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017648680174412827], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889296595, 0.45454, [0.0017351], [0.0017811], [0.0017493], [0.0017714], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0010953770950436592], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889296822, 0.44542, [0.0010909], [0.0011135], [0.0010932], [0.0010999], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038245458771208566], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889297044, 0.45498, [0.00037708], [0.00038834], [0.00038019], [0.00038409], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003500673493059973], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889297270, 0.44822, [0.00033981], [0.00035094], [0.0003465], [0.00035064], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5974765328139488e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889297491, 0.44427, [2.5955e-05], [2.6488e-05], [2.5963e-05], [2.6006e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001887737066838248], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889297713, 0.46392, [0.00018765], [0.00018988], [0.0001883], [0.00018952], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.442389579299762e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889297946, 0.45251, [4.4295e-05], [4.4871e-05], [4.4334e-05], [4.4486e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033304435876949177], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889298177, 0.44855, [0.00033009], [0.00033859], [0.00033149], [0.00033483], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036282758308767247], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889298400, 0.45243, [0.0003615], [0.00036667], [0.00036199], [0.00036406], [29], [10]], "benchmarks.TextSuite.time_render": [[4.770512358135582e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889298624, 0.46083, [4.7366e-06], [4.807e-06], [4.748e-06], [4.8026e-06], [2336], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.622216864750953e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889298857, 0.46408, [8.4705e-05], [8.6975e-05], [8.5451e-05], [8.6837e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.553713315057677e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889299089, 0.45494, [3.5054e-05], [3.6024e-05], [3.5169e-05], [3.5905e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028249663237885043], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889299322, 0.44761, [0.00027983], [0.00028546], [0.00028042], [0.00028486], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011215187492780387], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889299546, 0.45379, [0.0011162], [0.001137], [0.0011177], [0.0011285], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013834635028615594], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889299771, 0.46086, [0.0013649], [0.0013943], [0.001379], [0.0013873], [8], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.02684862504247576], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892979836, 0.62657, [0.026771], [0.028332], [0.0268], [0.027412], [1], [10]]}, "durations": {"<build>": 1.8082950115203857}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/aaea99f7-virtualenv-py3.10.json
================================================
{"commit_hash": "aaea99f764bcd48a12fd09e5b53efd2bafd9281d", "env_name": "virtualenv-py3.10", "date": 1613822412000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7035946231118903e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929032498, 0.45811, [1.6948e-07], [1.7147e-07], [1.701e-07], [1.7055e-07], [64698], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7005740944381448e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929032727, 0.45645, [1.6892e-07], [1.712e-07], [1.6964e-07], [1.7091e-07], [64397], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.6961856813956265e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929032955, 0.45848, [1.6895e-07], [1.7124e-07], [1.6924e-07], [1.702e-07], [64697], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7039711889193895e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929033184, 0.45721, [1.6908e-07], [1.707e-07], [1.6999e-07], [1.7052e-07], [64419], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.710571628402691e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929033413, 0.45837, [1.6945e-07], [1.7495e-07], [1.7003e-07], [1.7149e-07], [64054], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.708411568939796e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929033640, 0.43101, [1.7029e-07], [1.7254e-07], [1.7071e-07], [1.7122e-07], [59074], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010266583500197156], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929033856, 0.44167, [0.0010232], [0.0010299], [0.0010262], [0.0010291], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014252031251089647], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929034075, 0.4615, [0.0014176], [0.0014349], [0.0014196], [0.0014259], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014211224388418486], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929034299, 0.44766, [0.0014098], [0.0014256], [0.0014148], [0.0014221], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.138836964717925e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929034524, 0.45651, [1.1352e-07], [1.1451e-07], [1.1381e-07], [1.1396e-07], [96360], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1403014810501425e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929034753, 0.45591, [1.1371e-07], [1.1484e-07], [1.1378e-07], [1.142e-07], [96374], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1407160758650121e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929034982, 0.45675, [1.1373e-07], [1.147e-07], [1.1401e-07], [1.1419e-07], [96589], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929028981, 0.061856], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929029043, 0.061734], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929029105, 0.061513], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0032523646259505767], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929035211, 0.46727, [0.0032449], [0.0032725], [0.0032476], [0.0032594], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.002136987398262136], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929035447, 0.43601, [0.0021279], [0.0021504], [0.002132], [0.0021421], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006721614681737265], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929035663, 0.4419, [0.00065748], [0.00068076], [0.00065921], [0.00067391], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005539429992878516], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929035889, 0.44698, [0.00054715], [0.00055713], [0.0005492], [0.0005551], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.5422931233603327e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929036111, 0.44501, [2.5357e-05], [2.575e-05], [2.5395e-05], [2.5453e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001846386467463915], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929036338, 0.45035, [0.00018376], [0.00018493], [0.00018456], [0.00018488], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3481876030166796e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929036562, 0.43963, [4.3443e-05], [4.3648e-05], [4.346e-05], [4.3548e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.000324092166424221], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929036786, 0.44884, [0.0003231], [0.00032853], [0.00032364], [0.00032525], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003891874819398961], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929037009, 0.44444, [0.00038819], [0.0003903], [0.00038851], [0.00038941], [27], [10]], "benchmarks.TextSuite.time_render": [[4.667558423783678e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929037230, 0.44597, [4.6504e-06], [4.6887e-06], [4.6572e-06], [4.6793e-06], [2336], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.518782431110594e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929037456, 0.45257, [8.4762e-05], [8.5916e-05], [8.5165e-05], [8.5228e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5262270256030014e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929037683, 0.44676, [3.5062e-05], [3.5386e-05], [3.5127e-05], [3.5343e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002739638025798884], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929037911, 0.44074, [0.00027237], [0.00027468], [0.0002733], [0.00027416], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001097691699396819], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929038130, 0.44915, [0.0010951], [0.0011009], [0.0010968], [0.0010992], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014937857132671134], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929038358, 0.43867, [0.0014845], [0.0015002], [0.0014882], [0.0014994], [7], [10]]}, "durations": {"<build>": 1.9741952419281006}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/ac1a33da-virtualenv-py3.10.json
================================================
{"commit_hash": "ac1a33da175972f895e894121df609d0cb1448fe", "env_name": "virtualenv-py3.10", "date": 1636301366000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7055549280694258e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928202672, 0.4663, [1.7013e-07], [1.7073e-07], [1.7032e-07], [1.7064e-07], [64576], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7031432603515683e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928202904, 0.45468, [1.6951e-07], [1.7082e-07], [1.6996e-07], [1.7049e-07], [64659], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7019480119984683e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928203138, 0.45417, [1.6919e-07], [1.7198e-07], [1.6968e-07], [1.7063e-07], [64399], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7046419165111376e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928203370, 0.46493, [1.6904e-07], [1.7262e-07], [1.6947e-07], [1.7156e-07], [64203], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.6996182278878235e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928203602, 0.4653, [1.6973e-07], [1.7054e-07], [1.6985e-07], [1.7013e-07], [64476], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7035111172927143e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928203835, 0.46646, [1.6925e-07], [1.7059e-07], [1.7011e-07], [1.7038e-07], [64545], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010278916495735759], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928204069, 0.45261, [0.0010256], [0.0010317], [0.0010275], [0.0010283], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014257812490541255], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928204294, 0.4625, [0.0014199], [0.0014303], [0.0014227], [0.0014282], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013062031248409767], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928204524, 0.44475, [0.0012951], [0.0013184], [0.0013016], [0.001311], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.140761227710675e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928204750, 0.4639, [1.1362e-07], [1.1469e-07], [1.1396e-07], [1.1454e-07], [96423], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1431385233683782e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928204982, 0.46453, [1.137e-07], [1.155e-07], [1.1399e-07], [1.1478e-07], [96367], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1405374051054004e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928205215, 0.43433, [1.1363e-07], [1.1545e-07], [1.1393e-07], [1.1418e-07], [87764], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928199111, 0.066393], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928199178, 0.065317], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928199243, 0.065764], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021228875033557416], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928205432, 0.45023, [0.0021096], [0.0021335], [0.0021166], [0.0021325], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012783515630871989], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928205660, 0.44969, [0.0012736], [0.0012911], [0.0012762], [0.0012803], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037327826794353314], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928205884, 0.44954, [0.00036982], [0.00037671], [0.00037034], [0.00037575], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003444326503085904], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928206106, 0.44373, [0.00033653], [0.00035535], [0.00033847], [0.00034547], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.525865081146688e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928206325, 0.45105, [2.5184e-05], [2.5635e-05], [2.5192e-05], [2.5311e-05], [431], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018414331887093983], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928206555, 0.4542, [0.0001836], [0.00018511], [0.00018411], [0.00018432], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.462133887249228e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928206782, 0.44513, [4.4237e-05], [4.4688e-05], [4.4356e-05], [4.4651e-05], [239], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032451075845352944], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928207007, 0.43806, [0.00032392], [0.00032553], [0.00032405], [0.00032477], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003554676549011392], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928207225, 0.44502, [0.00035469], [0.00035578], [0.00035515], [0.00035563], [29], [10]], "benchmarks.TextSuite.time_render": [[4.663124727711817e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928207446, 0.45325, [4.652e-06], [4.6689e-06], [4.656e-06], [4.6658e-06], [2341], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.480436326863128e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928207677, 0.45763, [8.4385e-05], [8.5518e-05], [8.449e-05], [8.5311e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.614149831044769e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928207907, 0.44961, [3.6062e-05], [3.6293e-05], [3.612e-05], [3.6185e-05], [298], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002741100384483639], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928208135, 0.45469, [0.00027323], [0.00027512], [0.00027334], [0.00027444], [39], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011020895515684971], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928208362, 0.44548, [0.0011001], [0.0011044], [0.0011011], [0.0011024], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013700364997930592], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928208584, 0.44717, [0.0013585], [0.0013829], [0.0013604], [0.0013801], [8], [10]]}, "durations": {"<build>": 2.0034019947052}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/aca0b60b-virtualenv-py3.10.json
================================================
{"commit_hash": "aca0b60b22fae4c6e16cec7615c2e7c00f73e44d", "env_name": "virtualenv-py3.10", "date": 1610557278000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.6979068882969545e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929261153, 0.45869, [1.692e-07], [1.7053e-07], [1.6942e-07], [1.7042e-07], [64600], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7020309905146757e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929261381, 0.45617, [1.6895e-07], [1.7099e-07], [1.6948e-07], [1.7042e-07], [64407], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.705886511498212e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929261609, 0.45585, [1.6981e-07], [1.7164e-07], [1.7036e-07], [1.7076e-07], [63823], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.703659859609806e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929261836, 0.45617, [1.6927e-07], [1.7076e-07], [1.6999e-07], [1.7067e-07], [64691], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.704958673588024e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929262066, 0.45714, [1.6901e-07], [1.7978e-07], [1.6968e-07], [1.7486e-07], [64363], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6980670332693827e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929262293, 0.45681, [1.689e-07], [1.7111e-07], [1.6963e-07], [1.7049e-07], [64463], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010281833514454775], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929262522, 0.44339, [0.0010218], [0.0010329], [0.0010269], [0.0010292], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014339881433573154], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929262742, 0.43562, [0.0014306], [0.0014466], [0.0014326], [0.0014363], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014138098758849083], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929262958, 0.44435, [0.0014093], [0.0014185], [0.0014117], [0.001417], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1401449880373922e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929263181, 0.45645, [1.1387e-07], [1.1445e-07], [1.1392e-07], [1.1421e-07], [95939], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1443270225171499e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929263411, 0.45604, [1.1387e-07], [1.1499e-07], [1.1415e-07], [1.1463e-07], [95568], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1406076018727822e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929263640, 0.45291, [1.1364e-07], [1.1429e-07], [1.139e-07], [1.1415e-07], [95103], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929257617, 0.063062], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929257680, 0.062193], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929257743, 0.062107], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.003231895749195246], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929263867, 0.47303, [0.0032274], [0.0032412], [0.0032312], [0.0032359], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.00212119999632705], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929264102, 0.4479, [0.0021128], [0.0021326], [0.0021166], [0.0021248], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006615611873712623], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929264332, 0.44166, [0.00066031], [0.0006646], [0.00066088], [0.00066344], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.000546990130954471], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929264556, 0.44545, [0.00054453], [0.00055482], [0.00054522], [0.00054746], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8134737607254584e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929264778, 0.45325, [2.7757e-05], [2.8699e-05], [2.7795e-05], [2.8536e-05], [383], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018772002633277065], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929265006, 0.44781, [0.0001871], [0.00018804], [0.00018724], [0.00018801], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.241892768268335e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929265229, 0.44642, [4.2121e-05], [4.2643e-05], [4.2294e-05], [4.256e-05], [249], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033005645109956424], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929265451, 0.43617, [0.00032916], [0.00033341], [0.00032984], [0.00033081], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003927091350375961], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929265668, 0.4359, [0.00039106], [0.00040295], [0.00039214], [0.00039385], [26], [10]], "benchmarks.TextSuite.time_render": [[4.700245483344387e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929265885, 0.44808, [4.6844e-06], [4.7747e-06], [4.6901e-06], [4.707e-06], [2326], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.508284383879072e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929266114, 0.45134, [8.4051e-05], [8.5437e-05], [8.4758e-05], [8.5298e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.381015594758189e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929266341, 0.44531, [3.3708e-05], [3.3933e-05], [3.3794e-05], [3.39e-05], [311], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002796486349669411], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929266563, 0.43816, [0.00027817], [0.00028029], [0.00027899], [0.00028003], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011550139445009539], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929266781, 0.44439, [0.0011491], [0.0011623], [0.0011497], [0.0011609], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015380804273133564], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929267003, 0.44982, [0.0015263], [0.0016385], [0.0015297], [0.0015829], [7], [10]]}, "durations": {"<build>": 1.9768939018249512}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/ad6e3dea-virtualenv-py3.10.json
================================================
{"commit_hash": "ad6e3dea2dfe549a309ae602164a6dc7540f3c05", "env_name": "virtualenv-py3.10", "date": 1638117333000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7166836254051273e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929353186, 0.46998, [1.7069e-07], [1.7348e-07], [1.7139e-07], [1.7207e-07], [64474], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.707324738468546e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929353422, 0.46564, [1.6994e-07], [1.7235e-07], [1.7037e-07], [1.7184e-07], [64732], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7161118860790375e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929353655, 0.45741, [1.7007e-07], [1.7974e-07], [1.705e-07], [1.7178e-07], [64440], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7128570427507506e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929353880, 0.46379, [1.6983e-07], [1.7205e-07], [1.7045e-07], [1.7161e-07], [64033], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7106433715715202e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929354112, 0.46647, [1.6997e-07], [1.7178e-07], [1.7035e-07], [1.7124e-07], [64916], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7102998742249e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929354346, 0.46544, [1.6975e-07], [1.7176e-07], [1.7055e-07], [1.7154e-07], [64477], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011044375496567227], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929354579, 0.46642, [0.0011009], [0.0011078], [0.0011033], [0.0011057], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001517199428885111], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929354802, 0.45288, [0.0015077], [0.0015347], [0.001514], [0.0015253], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014020651251485106], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929355033, 0.45724, [0.0013925], [0.0014177], [0.0013955], [0.0014041], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1427258234920079e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929355264, 0.46601, [1.1402e-07], [1.1459e-07], [1.142e-07], [1.1434e-07], [96037], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1419825515356431e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929355496, 0.46227, [1.1369e-07], [1.1468e-07], [1.14e-07], [1.1441e-07], [96111], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1511939419719757e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929355729, 0.46656, [1.1397e-07], [1.1595e-07], [1.1405e-07], [1.1567e-07], [95838], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929349589, 0.066147], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929349655, 0.065858], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929349721, 0.065511], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0023498082999140026], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929355962, 0.4605, [0.002325], [0.0023617], [0.0023403], [0.0023549], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014064557490200968], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929356196, 0.45041, [0.0013961], [0.0014107], [0.0013998], [0.0014099], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037908333927459486], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929356422, 0.45708, [0.00037676], [0.00038228], [0.00037721], [0.0003807], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034137632258446707], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929356651, 0.45521, [0.00034074], [0.00034201], [0.00034102], [0.00034167], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5464340687057997e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929356878, 0.46274, [2.5285e-05], [2.5611e-05], [2.5328e-05], [2.5575e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018554943208227534], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929357110, 0.46631, [0.00018464], [0.00019381], [0.00018482], [0.00018943], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.3584937243892056e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929357345, 0.45508, [4.3453e-05], [4.3719e-05], [4.3483e-05], [4.3643e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003247758938937984], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929357580, 0.45681, [0.00032376], [0.00032589], [0.00032453], [0.00032519], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003560352071935054], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929357807, 0.44608, [0.00035437], [0.00035714], [0.00035504], [0.00035665], [29], [10]], "benchmarks.TextSuite.time_render": [[4.681095323915653e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929358029, 0.45275, [4.6634e-06], [4.7022e-06], [4.6711e-06], [4.6989e-06], [2329], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.607275378835766e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929358259, 0.46141, [8.5438e-05], [8.7824e-05], [8.5806e-05], [8.6341e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.522174513527478e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929358492, 0.4514, [3.502e-05], [3.5961e-05], [3.5081e-05], [3.5341e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002766790543368237], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929358722, 0.44555, [0.00027452], [0.00027891], [0.00027538], [0.00027792], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013801171880913898], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929358943, 0.46369, [0.0013621], [0.0013958], [0.0013763], [0.0013877], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014559939985961784], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929359178, 0.45188, [0.0014476], [0.0015803], [0.0014507], [0.0015258], [7], [10]]}, "durations": {"<build>": 2.005476951599121}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/ae5865eb-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "ae5865eb799de4c6ed6bdfa29f696d9104219229", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644412812000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7268147553911142e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826382700, 0.46272, [1.7035e-07], [1.7385e-07], [1.7099e-07], [1.7371e-07], [62741], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7184515084745252e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826382930, 0.46526, [1.7047e-07], [1.7458e-07], [1.7094e-07], [1.7298e-07], [64550], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7100169032285712e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826383163, 0.45976, [1.6938e-07], [1.7503e-07], [1.7059e-07], [1.7126e-07], [64201], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7096017900103042e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826383395, 0.45929, [1.6961e-07], [1.7519e-07], [1.7001e-07], [1.7139e-07], [64385], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.720446966297855e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826383627, 0.4613, [1.7069e-07], [1.7407e-07], [1.7102e-07], [1.7299e-07], [63472], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7079586589818146e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826383857, 0.43836, [1.6867e-07], [1.7292e-07], [1.7022e-07], [1.7151e-07], [58819], [10]], "benchmarks.PrettySuite.time_pretty": [[0.00111685188797613], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826384076, 0.44314, [0.0011096], [0.0011308], [0.0011157], [0.0011208], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015559344984857099], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826384299, 0.45208, [0.0015502], [0.0015699], [0.0015532], [0.0015612], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014082708075875416], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826384524, 0.45522, [0.0014048], [0.0014714], [0.0014071], [0.0014125], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1465155890063052e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826384752, 0.46407, [1.1411e-07], [1.1685e-07], [1.1429e-07], [1.1517e-07], [95121], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1473878154684284e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826384985, 0.46396, [1.1445e-07], [1.1804e-07], [1.1455e-07], [1.1508e-07], [95089], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.145146160920379e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826385218, 0.45987, [1.1399e-07], [1.149e-07], [1.1418e-07], [1.1471e-07], [94443], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.00847322924528271], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826385448, 0.51712, [0.0083966], [0.0085373], [0.0084681], [0.0084795], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.00844434357713908], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826385707, 0.52283, [0.0083999], [0.0094939], [0.008428], [0.0084557], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008540979295503348], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826385966, 0.53617, [0.008468], [0.0094981], [0.0084961], [0.0089457], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001890288161424299], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826386232, 0.46356, [0.0018669], [0.001956], [0.0018797], [0.0019045], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011579791704813638], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826386468, 0.45002, [0.0011521], [0.0011644], [0.0011565], [0.0011604], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003703816951851227], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826386696, 0.45159, [0.0003685], [0.00037715], [0.00036963], [0.00037302], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034395556819314754], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826386920, 0.45254, [0.00034315], [0.00035365], [0.00034364], [0.0003447], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5534285406097942e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826387143, 0.45866, [2.5274e-05], [2.6858e-05], [2.5485e-05], [2.6047e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018669109277684112], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826387375, 0.46141, [0.00018418], [0.00019613], [0.00018546], [0.00018883], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.4117885645539536e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826387607, 0.45431, [4.3531e-05], [4.537e-05], [4.3778e-05], [4.4695e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003280637602350025], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826387836, 0.46213, [0.0003264], [0.0003312], [0.00032677], [0.00032837], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003564159490232324], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826388066, 0.45048, [0.00035445], [0.00035818], [0.00035569], [0.00035678], [29], [10]], "benchmarks.TextSuite.time_render": [[4.681625880150255e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826388289, 0.45566, [4.6673e-06], [4.6897e-06], [4.677e-06], [4.6836e-06], [2323], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.553001519996585e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826388520, 0.46137, [8.515e-05], [8.6562e-05], [8.5401e-05], [8.5721e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.597848505402605e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826388752, 0.46063, [3.5695e-05], [3.7017e-05], [3.5751e-05], [3.6773e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002785761975438187], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826388985, 0.45878, [0.00027554], [0.00028688], [0.00027655], [0.0002803], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001364315059618093], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826389212, 0.45955, [0.0013598], [0.0013726], [0.0013619], [0.0013685], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001455699426255056], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826389444, 0.44865, [0.0014535], [0.0014736], [0.0014544], [0.0014579], [7], [10]]}, "durations": {"<build>": 1.8864719867706299}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/b15bc18c-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "b15bc18c60093b7e0fe9495ac140aad1db99bf1c", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644577771000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7128593176598683e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826256215, 0.46765, [1.7027e-07], [1.7505e-07], [1.7104e-07], [1.725e-07], [64314], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7139666136021296e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826256448, 0.46504, [1.7014e-07], [1.753e-07], [1.7099e-07], [1.7352e-07], [63839], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7147999478465488e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826256681, 0.45934, [1.7047e-07], [1.728e-07], [1.7093e-07], [1.7183e-07], [64465], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7235338941071798e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826256904, 0.45692, [1.7025e-07], [1.7881e-07], [1.706e-07], [1.7312e-07], [64375], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7164097105658407e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826257138, 0.46688, [1.7057e-07], [1.7287e-07], [1.7092e-07], [1.7221e-07], [64297], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7136235284230624e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826257373, 0.47493, [1.7056e-07], [1.7591e-07], [1.7079e-07], [1.7323e-07], [64088], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011412638963924514], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826257612, 0.45192, [0.0011202], [0.0011981], [0.0011351], [0.0011768], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015827737848407456], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826257837, 0.4571, [0.0015579], [0.0016331], [0.0015692], [0.0015916], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001409051998052746], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826258062, 0.45621, [0.0014023], [0.0014218], [0.0014042], [0.0014126], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1487196031253908e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826258289, 0.46497, [1.1465e-07], [1.1565e-07], [1.1472e-07], [1.1509e-07], [94990], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1478581373695314e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826258523, 0.45405, [1.1427e-07], [1.1562e-07], [1.1449e-07], [1.1524e-07], [92702], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1588088140735021e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826258749, 0.46459, [1.1433e-07], [1.1682e-07], [1.149e-07], [1.161e-07], [95107], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008501020958647132], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826258975, 0.52954, [0.0084592], [0.0089749], [0.0084774], [0.0085951], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008477791503537446], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826259240, 0.52213, [0.008436], [0.0087484], [0.0084558], [0.0085446], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008470197732094675], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826259503, 0.52242, [0.0084135], [0.0088202], [0.0084521], [0.0085484], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018908645918903253], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826259768, 0.45982, [0.001872], [0.0020058], [0.0018794], [0.0018995], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011782708396721217], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826259997, 0.4523, [0.0011594], [0.0012163], [0.0011696], [0.001185], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.000387650282521333], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826260226, 0.46244, [0.00038], [0.0003943], [0.00038032], [0.00039376], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003463857574388385], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826260458, 0.45086, [0.00034214], [0.00035645], [0.00034421], [0.00034661], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.563218634992421e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826260687, 0.46909, [2.533e-05], [2.6426e-05], [2.5524e-05], [2.5776e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001848714129100072], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826260920, 0.46582, [0.00018435], [0.00018612], [0.00018482], [0.00018501], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.416613758667925e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826261150, 0.44879, [4.3457e-05], [4.5242e-05], [4.3656e-05], [4.5e-05], [236], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003287789013777529], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826261373, 0.45244, [0.0003261], [0.00034809], [0.00032749], [0.0003372], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035888291413670983], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826261598, 0.4644, [0.00035543], [0.00036994], [0.000356], [0.00036254], [29], [10]], "benchmarks.TextSuite.time_render": [[4.715104715503041e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826261823, 0.45998, [4.6944e-06], [4.7539e-06], [4.7002e-06], [4.7258e-06], [2326], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.560761013691585e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826262055, 0.46235, [8.5138e-05], [8.6436e-05], [8.5461e-05], [8.6079e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5466694478005846e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826262288, 0.46406, [3.5329e-05], [3.7299e-05], [3.5361e-05], [3.5863e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027979560813086256], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826262524, 0.45733, [0.00027805], [0.00029106], [0.00027894], [0.00028507], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013627422013087198], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826262747, 0.46401, [0.0013544], [0.0014037], [0.0013577], [0.0013681], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.00148221427973892], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826262981, 0.44304, [0.0014576], [0.0015304], [0.001462], [0.0014915], [7], [10]]}, "durations": {"<build>": 1.8869431018829346}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/b391635e-virtualenv-py3.10.json
================================================
{"commit_hash": "b391635ee4a325fb96ed531b00e4b55f66909639", "env_name": "virtualenv-py3.10", "date": 1599839230000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7171113977231818e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928896057, 0.4208, [1.6891e-07], [1.7364e-07], [1.6974e-07], [1.733e-07], [59058], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7326176896325207e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928896265, 0.44149, [1.7222e-07], [1.7407e-07], [1.724e-07], [1.7361e-07], [64704], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7326500571829757e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928896481, 0.42514, [1.722e-07], [1.742e-07], [1.7323e-07], [1.7336e-07], [58910], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7424341945248364e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928896692, 0.44518, [1.7185e-07], [1.7549e-07], [1.7362e-07], [1.7535e-07], [62645], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7319663555598585e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928896913, 0.45123, [1.7105e-07], [1.7535e-07], [1.7212e-07], [1.7448e-07], [64322], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7316413064189517e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928897137, 0.44729, [1.7235e-07], [1.7447e-07], [1.7284e-07], [1.7398e-07], [62627], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011370277788955718], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928897358, 0.43163, [0.0011311], [0.0011522], [0.0011326], [0.0011388], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928891817, 0.06109], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0015254762152575754], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928897572, 0.43484, [0.0015008], [0.0015435], [0.0015115], [0.0015373], [7], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1690353489742776e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928897793, 0.441, [1.1616e-07], [1.1735e-07], [1.1657e-07], [1.1727e-07], [92790], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1696400284598351e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928898013, 0.44085, [1.1638e-07], [1.1757e-07], [1.1672e-07], [1.1714e-07], [96244], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.164986364381274e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928898229, 0.43071, [1.1623e-07], [1.1716e-07], [1.1631e-07], [1.1664e-07], [96438], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928892754, 0.057563], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928892811, 0.057408], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928892869, 0.057671], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0030024322513781954], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928898445, 0.45038, [0.0029655], [0.0030357], [0.0029746], [0.0030236], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0019979833014076576], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928898674, 0.44609, [0.0019748], [0.0020109], [0.0019847], [0.0020074], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006732166667158404], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928898886, 0.42553, [0.00067161], [0.00067601], [0.00067253], [0.0006743], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005606853159597928], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928899095, 0.42972, [0.0005544], [0.00056468], [0.00055669], [0.00056445], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8459909917633523e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928899314, 0.44467, [2.7853e-05], [3.1088e-05], [2.8005e-05], [2.8508e-05], [383], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00019092872772537368], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928899536, 0.44513, [0.00019008], [0.00019125], [0.00019078], [0.00019102], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2737418028991665e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928899758, 0.44079, [4.2264e-05], [4.3084e-05], [4.2369e-05], [4.3044e-05], [250], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033374933850756214], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928899978, 0.43169, [0.00033055], [0.00033774], [0.00033095], [0.00033693], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928894692, 0.05768], "benchmarks.TextSuite.time_render": [[4.72765888174202e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928900196, 0.43982, [4.6917e-06], [4.7693e-06], [4.6954e-06], [4.7597e-06], [2335], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.674470639865225e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928900421, 0.44408, [8.6065e-05], [8.7558e-05], [8.6628e-05], [8.7371e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.434052237476142e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928900645, 0.44066, [3.4247e-05], [3.457e-05], [3.4281e-05], [3.4382e-05], [313], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002858738652493402], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928900864, 0.43354, [0.00028464], [0.00028642], [0.00028531], [0.00028597], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011589119999876453], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928901080, 0.43463, [0.0011506], [0.0011699], [0.0011509], [0.0011668], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001540008928194376], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928901297, 0.43582, [0.0015223], [0.0015583], [0.0015242], [0.0015552], [7], [10]]}, "durations": {"<build>": 1.9634599685668945}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/b9e0014a-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "b9e0014add85dcbb3c725289955db2e346c84dfb", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1616751437000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.707496588592308e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889019689, 0.43613, [1.6994e-07], [1.7312e-07], [1.7056e-07], [1.7112e-07], [64286], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.71566158488439e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889019907, 0.44646, [1.6992e-07], [1.729e-07], [1.7054e-07], [1.7241e-07], [64233], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.731865496290171e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889020135, 0.43439, [1.706e-07], [1.7655e-07], [1.7123e-07], [1.753e-07], [58737], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7141955454342225e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889020351, 0.44568, [1.687e-07], [1.7991e-07], [1.7052e-07], [1.7514e-07], [63926], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7016360664183042e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889020579, 0.44661, [1.6919e-07], [1.729e-07], [1.6965e-07], [1.7084e-07], [64759], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.705728408607985e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889020798, 0.45231, [1.6953e-07], [1.7199e-07], [1.7036e-07], [1.7155e-07], [63900], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010098708560690283], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889021023, 0.43651, [0.0010057], [0.0010125], [0.0010076], [0.0010107], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001409088508808054], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889021239, 0.44734, [0.0014024], [0.0014198], [0.0014082], [0.0014136], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014008281286805868], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889021462, 0.44203, [0.0013987], [0.001406], [0.0013989], [0.0014033], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1436440503403422e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889021684, 0.42724, [1.1385e-07], [1.15e-07], [1.1417e-07], [1.146e-07], [87883], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1454309972831989e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889021898, 0.45278, [1.1411e-07], [1.1559e-07], [1.1426e-07], [1.1472e-07], [96055], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1620696503043922e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889022125, 0.45363, [1.1378e-07], [1.1832e-07], [1.1426e-07], [1.1684e-07], [96395], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889016210, 0.060782], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889016271, 0.060882], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889016332, 0.060065], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0020680209156125782], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889022353, 0.44152, [0.0020516], [0.0021201], [0.0020577], [0.0020826], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001253856680705212], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889022573, 0.43178, [0.0012452], [0.0012565], [0.0012488], [0.0012557], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006644765671808273], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889022787, 0.43813, [0.00066095], [0.0006669], [0.0006619], [0.00066514], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005481885991206294], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889023008, 0.44042, [0.00054536], [0.00055554], [0.00054669], [0.00055064], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.5434895058355802e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889023226, 0.44753, [2.5361e-05], [2.5754e-05], [2.5407e-05], [2.5506e-05], [424], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018507930482819415], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889023451, 0.4443, [0.00018318], [0.00018786], [0.00018435], [0.00018632], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.389375001968195e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889023671, 0.44386, [4.3681e-05], [4.4052e-05], [4.3818e-05], [4.3982e-05], [240], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003267436810402256], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889023891, 0.43974, [0.00032422], [0.00033249], [0.00032518], [0.00032849], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003562729789650646], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889024116, 0.43812, [0.00035421], [0.00036896], [0.0003552], [0.0003625], [29], [10]], "benchmarks.TextSuite.time_render": [[4.734280337760975e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889024335, 0.4445, [4.6638e-06], [4.8399e-06], [4.6925e-06], [4.8001e-06], [2310], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.537823631396068e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889024559, 0.43363, [8.4587e-05], [8.6597e-05], [8.4666e-05], [8.6029e-05], [116], [10]], "benchmarks.TextSuite.time_split": [[3.545157522598537e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889024779, 0.43703, [3.5319e-05], [3.5809e-05], [3.5357e-05], [3.5555e-05], [299], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027624662097140744], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889025000, 0.43651, [0.00027307], [0.00027987], [0.00027376], [0.00027875], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011097459006123244], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889025219, 0.44044, [0.0010995], [0.0011218], [0.0011031], [0.0011165], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015075714992625372], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889025437, 0.43902, [0.0014924], [0.0015217], [0.0014959], [0.0015189], [7], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.0299716874724254], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892935189, 0.66616, [0.029783], [0.030891], [0.029917], [0.030093], [1], [10]]}, "durations": {}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/b9e0014a-virtualenv-py3.10.json
================================================
{"commit_hash": "b9e0014add85dcbb3c725289955db2e346c84dfb", "env_name": "virtualenv-py3.10", "date": 1616751437000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.6998178342983942e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928116323, 0.44799, [1.6818e-07], [1.7116e-07], [1.6978e-07], [1.7052e-07], [64666], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.70502177501734e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928116553, 0.42977, [1.7013e-07], [1.7116e-07], [1.7031e-07], [1.7065e-07], [59010], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.708060499454652e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928116767, 0.45767, [1.6922e-07], [1.762e-07], [1.6994e-07], [1.712e-07], [64447], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7004442711291243e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928116994, 0.45538, [1.689e-07], [1.71e-07], [1.6962e-07], [1.704e-07], [64139], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.702947773471493e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928117221, 0.46279, [1.6903e-07], [1.7138e-07], [1.698e-07], [1.709e-07], [65105], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7016582945508121e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928117451, 0.45508, [1.6871e-07], [1.712e-07], [1.697e-07], [1.7088e-07], [64319], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010140812504687347], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928117678, 0.43782, [0.0010096], [0.001016], [0.0010115], [0.0010144], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014073906259000069], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928117895, 0.44708, [0.0014003], [0.0014124], [0.0014051], [0.0014088], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013990103761898354], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928118118, 0.44505, [0.0013951], [0.0014053], [0.0013976], [0.0014011], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1467188923626322e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928118341, 0.45495, [1.1409e-07], [1.1642e-07], [1.1452e-07], [1.1502e-07], [95867], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1468241056827694e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928118569, 0.44641, [1.1419e-07], [1.1647e-07], [1.145e-07], [1.1622e-07], [96195], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1533843505286693e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928118797, 0.45388, [1.1398e-07], [1.1714e-07], [1.1432e-07], [1.166e-07], [95296], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928112783, 0.06405], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928112847, 0.063369], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928112910, 0.063683], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0020583042001817375], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928119023, 0.43674, [0.0020375], [0.0020835], [0.0020558], [0.0020705], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012585462763025942], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928119243, 0.45369, [0.0012464], [0.001273], [0.0012522], [0.0012689], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006639763664376612], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928119468, 0.44393, [0.00065901], [0.00066992], [0.00066003], [0.00066843], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.000550776316422822], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928119690, 0.44585, [0.00054582], [0.00055971], [0.00054866], [0.00055531], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.592313389588474e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928119910, 0.4457, [2.5675e-05], [2.6046e-05], [2.5705e-05], [2.5967e-05], [422], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018688303488919412], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928120137, 0.44773, [0.00018391], [0.00018843], [0.00018498], [0.00018813], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.362060948446285e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928120358, 0.44746, [4.3169e-05], [4.4233e-05], [4.319e-05], [4.4155e-05], [242], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032757661275325286], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928120578, 0.43624, [0.00032508], [0.00033857], [0.00032604], [0.00033228], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035616805010552826], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928120792, 0.44982, [0.0003548], [0.00035831], [0.00035588], [0.00035735], [30], [10]], "benchmarks.TextSuite.time_render": [[4.678165021476379e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928121015, 0.4452, [4.651e-06], [4.6976e-06], [4.6594e-06], [4.6905e-06], [2330], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.535840231616021e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928121242, 0.4644, [8.4407e-05], [8.5812e-05], [8.5252e-05], [8.56e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5228553957388027e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928121467, 0.44109, [3.5154e-05], [3.5396e-05], [3.5201e-05], [3.5298e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027554385527956153], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928121692, 0.43998, [0.0002732], [0.00027617], [0.00027442], [0.00027572], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010960312516544945], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928121910, 0.44672, [0.0010919], [0.0010989], [0.0010943], [0.0010978], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014901487842767633], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928122138, 0.43597, [0.0014879], [0.0014951], [0.0014892], [0.0014913], [7], [10]]}, "durations": {}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/ba5d0c2c-virtualenv-py3.10.json
================================================
{"commit_hash": "ba5d0c2cfc35e929022dbe26c2edb4c210cb11ee", "env_name": "virtualenv-py3.10", "date": 1637405586000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7099719111164134e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929469379, 0.46212, [1.7e-07], [1.7237e-07], [1.7059e-07], [1.7156e-07], [64614], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.6992863450832084e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929469612, 0.46668, [1.6965e-07], [1.706e-07], [1.6968e-07], [1.7036e-07], [64506], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7590241712395733e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929469847, 0.46733, [1.6986e-07], [1.806e-07], [1.7063e-07], [1.788e-07], [62716], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.70707002050929e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929470083, 0.45427, [1.6823e-07], [1.7291e-07], [1.7007e-07], [1.7193e-07], [64939], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.693035584829865e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929470312, 0.46714, [1.6847e-07], [1.7146e-07], [1.6881e-07], [1.6973e-07], [64691], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7005772273243105e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929470548, 0.46326, [1.6928e-07], [1.7169e-07], [1.6995e-07], [1.7037e-07], [64680], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010359979496570304], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929470779, 0.45233, [0.0010316], [0.0010429], [0.0010329], [0.0010386], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001431943430881282], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929471005, 0.44223, [0.0014292], [0.0014394], [0.0014299], [0.001434], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013096198126731906], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929471224, 0.44682, [0.001304], [0.0013227], [0.0013055], [0.001315], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1422716500932673e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929471453, 0.46259, [1.1321e-07], [1.1439e-07], [1.1366e-07], [1.1431e-07], [96135], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1448200174943257e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929471684, 0.46498, [1.1412e-07], [1.2063e-07], [1.1435e-07], [1.1702e-07], [96010], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1426247877882212e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929471919, 0.45399, [1.1407e-07], [1.1621e-07], [1.1417e-07], [1.1485e-07], [96585], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929465787, 0.065325], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929465852, 0.064656], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929465917, 0.064757], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0022018249990651386], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929472142, 0.44804, [0.0021871], [0.0022209], [0.0021976], [0.0022047], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0013314192492543953], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929472364, 0.4441, [0.0013222], [0.0014545], [0.0013259], [0.0013835], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038731405543836043], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929472588, 0.4463, [0.0003837], [0.00038774], [0.00038438], [0.00038755], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034269085482528975], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929472808, 0.45312, [0.00033989], [0.00035148], [0.00034092], [0.00034969], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5358665487215255e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929473033, 0.45872, [2.526e-05], [2.553e-05], [2.5311e-05], [2.5471e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001850423876272418], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929473262, 0.45789, [0.00018349], [0.00018715], [0.00018417], [0.00018611], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.378081666800426e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929473490, 0.45569, [4.3516e-05], [4.4552e-05], [4.3555e-05], [4.426e-05], [240], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032770027445944687], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929473715, 0.44077, [0.00032418], [0.00033175], [0.00032457], [0.00032793], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035871982781200446], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929473933, 0.45091, [0.00035736], [0.00037312], [0.0003578], [0.00036066], [29], [10]], "benchmarks.TextSuite.time_render": [[4.662722945550666e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929474156, 0.45536, [4.6424e-06], [4.6853e-06], [4.6601e-06], [4.6774e-06], [2319], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.52210273478704e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929474384, 0.46074, [8.4844e-05], [8.5595e-05], [8.5096e-05], [8.5269e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.511532793402091e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929474616, 0.44927, [3.5022e-05], [3.5207e-05], [3.5058e-05], [3.5169e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002737938683774126], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929474845, 0.44867, [0.00027329], [0.00027608], [0.00027358], [0.00027495], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010997395496815444], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929475068, 0.45672, [0.0010966], [0.0011037], [0.0010976], [0.0011008], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001370867188597913], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929475301, 0.45793, [0.001363], [0.001396], [0.0013674], [0.001374], [8], [10]]}, "durations": {"<build>": 2.0138518810272217}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/bd34e0a1-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "bd34e0a1ef8f59700f19277ec30cf0cb5ff01a08", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1630249006000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7061180413087733e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889090587, 0.44444, [1.6999e-07], [1.7311e-07], [1.7038e-07], [1.7135e-07], [58965], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7057051766855373e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889090813, 0.46086, [1.6857e-07], [1.7102e-07], [1.7024e-07], [1.7087e-07], [64381], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7065074171139642e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889091043, 0.4615, [1.6863e-07], [1.7288e-07], [1.6929e-07], [1.7234e-07], [64465], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.703211316310789e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889091272, 0.46152, [1.6998e-07], [1.7108e-07], [1.7011e-07], [1.7073e-07], [64436], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7104390968324983e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889091502, 0.45059, [1.7012e-07], [1.7202e-07], [1.7035e-07], [1.7132e-07], [62411], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7070626002220352e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889091727, 0.44957, [1.6935e-07], [1.7125e-07], [1.7002e-07], [1.7103e-07], [64363], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010341228917241096], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889091957, 0.43882, [0.0010302], [0.0010375], [0.0010333], [0.0010354], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001425661423127167], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889092180, 0.45806, [0.0014212], [0.0014308], [0.0014245], [0.0014279], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013168073346605524], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889092407, 0.44102, [0.0012991], [0.001338], [0.0013106], [0.0013244], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1527599090056934e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889092631, 0.45972, [1.1435e-07], [1.1814e-07], [1.1496e-07], [1.1787e-07], [95811], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1537976081640778e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889092861, 0.45862, [1.1394e-07], [1.1753e-07], [1.1461e-07], [1.1702e-07], [96550], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1455414348966426e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889093093, 0.45846, [1.1409e-07], [1.1968e-07], [1.1417e-07], [1.1599e-07], [94922], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889087044, 0.064043], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889087108, 0.063054], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889087171, 0.063772], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021478959126397966], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889093324, 0.43951, [0.0021219], [0.0021663], [0.0021311], [0.0021608], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012922864261781797], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889093542, 0.43827, [0.0012858], [0.0012976], [0.0012915], [0.0012939], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038124229414043603], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889093766, 0.44134, [0.00037591], [0.00038802], [0.00037711], [0.0003863], [27], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003587270179634978], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889093983, 0.4533, [0.00033898], [0.00037686], [0.00033986], [0.00036743], [29], [10]], "benchmarks.TextSuite.time_divide": [[2.5468242350369347e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889094209, 0.4594, [2.5235e-05], [2.6123e-05], [2.543e-05], [2.5556e-05], [431], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018517313131677178], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889094439, 0.45249, [0.00018457], [0.00019044], [0.00018495], [0.00018605], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.362000239543557e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889094665, 0.44368, [4.3487e-05], [4.3951e-05], [4.3554e-05], [4.3744e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003266938164773764], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889094891, 0.45474, [0.00032325], [0.00033865], [0.00032363], [0.00032998], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003563175339187527], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889095120, 0.44364, [0.00035497], [0.00036567], [0.00035564], [0.00035822], [29], [10]], "benchmarks.TextSuite.time_render": [[4.6536366989783634e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889095340, 0.44161, [4.6317e-06], [4.7374e-06], [4.6367e-06], [4.6781e-06], [2272], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.519710172549821e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889095564, 0.4567, [8.5118e-05], [8.6187e-05], [8.5147e-05], [8.5334e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.537438692695467e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889095793, 0.4465, [3.523e-05], [3.5488e-05], [3.5357e-05], [3.54e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002763656697137968], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889096020, 0.44771, [0.0002748], [0.00027816], [0.00027582], [0.00027663], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011115083587355913], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889096244, 0.44707, [0.0010973], [0.0011291], [0.0011038], [0.0011143], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013754296960541978], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889096467, 0.44498, [0.0013698], [0.0014166], [0.0013745], [0.0013906], [8], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.027500437339767814], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892947588, 0.62901, [0.027406], [0.028456], [0.027479], [0.027604], [1], [10]]}, "durations": {"<build>": 1.801527738571167}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/bd34e0a1-virtualenv-py3.10.json
================================================
{"commit_hash": "bd34e0a1ef8f59700f19277ec30cf0cb5ff01a08", "env_name": "virtualenv-py3.10", "date": 1630249006000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.699839021486255e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928448058, 0.46411, [1.6928e-07], [1.7066e-07], [1.6976e-07], [1.7022e-07], [64543], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7065917911440012e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928448289, 0.46101, [1.6959e-07], [1.7176e-07], [1.7032e-07], [1.7143e-07], [63906], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7027047136842674e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928448519, 0.45347, [1.6933e-07], [1.7085e-07], [1.7008e-07], [1.7056e-07], [62197], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.705627804106428e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928448744, 0.44593, [1.6984e-07], [1.7211e-07], [1.7033e-07], [1.7091e-07], [60616], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.704742747131115e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928448965, 0.46111, [1.6981e-07], [1.736e-07], [1.7015e-07], [1.7185e-07], [64022], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7001839810550803e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928449194, 0.46202, [1.6917e-07], [1.7086e-07], [1.6973e-07], [1.7031e-07], [64463], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001030816650018096], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928449424, 0.44965, [0.0010278], [0.001033], [0.0010292], [0.0010322], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014227369993022876], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928449648, 0.46324, [0.0014192], [0.0014278], [0.0014211], [0.0014265], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013010312486585462], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928449875, 0.44209, [0.0012946], [0.0013369], [0.0012984], [0.0013199], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1713555658106811e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928450099, 0.45425, [1.1411e-07], [1.1791e-07], [1.1594e-07], [1.175e-07], [95901], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1427845266258002e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928450322, 0.462, [1.1387e-07], [1.1492e-07], [1.1404e-07], [1.1434e-07], [96212], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1614896881760536e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928450553, 0.44326, [1.1572e-07], [1.1644e-07], [1.16e-07], [1.1632e-07], [96114], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928444497, 0.065574], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928444563, 0.064713], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928444627, 0.064512], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021352125972043724], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928450775, 0.44949, [0.0021156], [0.0021471], [0.0021243], [0.0021448], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012830364375986392], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928451003, 0.44869, [0.0012772], [0.0012901], [0.0012793], [0.0012865], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003747924108340937], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928451226, 0.44902, [0.00037021], [0.00037966], [0.00037076], [0.00037859], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003422741935918889], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928451448, 0.45319, [0.00034156], [0.00035121], [0.000342], [0.0003429], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.532128905682089e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928451673, 0.45978, [2.5261e-05], [2.5411e-05], [2.5301e-05], [2.535e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001846931525012794], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928451903, 0.45977, [0.00018348], [0.00018552], [0.00018419], [0.00018484], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.347222154426229e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928452133, 0.44653, [4.3403e-05], [4.369e-05], [4.3446e-05], [4.3533e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032489785488935244], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928452361, 0.43679, [0.00032404], [0.00032617], [0.00032458], [0.0003256], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036011494852698826], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928452579, 0.44723, [0.00035618], [0.00036365], [0.00035723], [0.00036237], [29], [10]], "benchmarks.TextSuite.time_render": [[4.676347421060345e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928452802, 0.44919, [4.6442e-06], [4.6921e-06], [4.6663e-06], [4.6841e-06], [2307], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.474758152972705e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928453031, 0.45763, [8.4345e-05], [8.5664e-05], [8.4437e-05], [8.541e-05], [129], [10]], "benchmarks.TextSuite.time_split": [[3.527678568566267e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928453262, 0.44942, [3.5132e-05], [3.5366e-05], [3.5193e-05], [3.5317e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.000274004381361393], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928453492, 0.44553, [0.00027321], [0.00027504], [0.00027377], [0.00027419], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010965041496092454], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928453714, 0.45428, [0.0010928], [0.0011023], [0.001094], [0.001101], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013701978750759736], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928453944, 0.45584, [0.0013647], [0.0013789], [0.0013687], [0.0013732], [8], [10]]}, "durations": {"<build>": 1.992645263671875}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/bf728dbc-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "bf728dbc40c462b6bfb5c89f0976c5882e78825b", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1650385634000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.727356060889852e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825672973, 0.46103, [1.6952e-07], [1.8161e-07], [1.707e-07], [1.7698e-07], [62916], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7289253452913867e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825673204, 0.45877, [1.7109e-07], [1.7885e-07], [1.7141e-07], [1.7528e-07], [64044], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7078105563763146e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825673436, 0.45584, [1.6975e-07], [1.7308e-07], [1.7052e-07], [1.7134e-07], [62023], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.764318633126334e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825673663, 0.46201, [1.7023e-07], [1.7785e-07], [1.7424e-07], [1.774e-07], [64246], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7181469069882033e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825673891, 0.45877, [1.7034e-07], [1.7594e-07], [1.7078e-07], [1.7392e-07], [64001], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7203004258143728e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825674125, 0.46738, [1.7016e-07], [1.7769e-07], [1.7161e-07], [1.7329e-07], [63960], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001038683345541358], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825674359, 0.4458, [0.0010339], [0.0010661], [0.0010363], [0.0010407], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014680654775085194], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825674585, 0.4448, [0.0014593], [0.0014991], [0.0014653], [0.0014713], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001142409720665051], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825674811, 0.45222, [0.0011339], [0.0011745], [0.0011362], [0.0011457], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1454411587296324e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825675035, 0.4627, [1.1427e-07], [1.1516e-07], [1.144e-07], [1.1475e-07], [96156], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1459436580812686e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825675269, 0.46409, [1.1401e-07], [1.1538e-07], [1.1432e-07], [1.1521e-07], [95357], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1509783696486311e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825675501, 0.43861, [1.1447e-07], [1.1622e-07], [1.1489e-07], [1.1524e-07], [87645], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007605750055518001], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825675719, 0.5183, [0.0075595], [0.0078018], [0.00758], [0.0077103], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007623312529176474], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825675976, 0.51617, [0.007577], [0.007865], [0.0075919], [0.0076617], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007578396005555987], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825676235, 0.50323, [0.0075555], [0.0076647], [0.0075602], [0.0076005], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001742659757534663], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825676494, 0.45617, [0.0017366], [0.0017498], [0.001741], [0.0017451], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001080404152162373], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825676723, 0.44778, [0.0010732], [0.0011106], [0.0010772], [0.0010837], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037449777093050737], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825676946, 0.45954, [0.00037294], [0.00038067], [0.00037323], [0.00037561], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00035062164533883333], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825677178, 0.4608, [0.00034169], [0.00036182], [0.00034569], [0.00035386], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.582052812843317e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825677406, 0.4678, [2.5581e-05], [2.5981e-05], [2.5592e-05], [2.5867e-05], [423], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018548096554225375], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825677637, 0.46261, [0.00018447], [0.0001873], [0.00018515], [0.00018558], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3832228937167295e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825677867, 0.44993, [4.3689e-05], [4.4112e-05], [4.3723e-05], [4.3959e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032843615964896255], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825678095, 0.44262, [0.0003256], [0.00033082], [0.00032733], [0.00032984], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035845975648483326], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825678315, 0.45113, [0.00035579], [0.00037063], [0.00035706], [0.00036098], [29], [10]], "benchmarks.TextSuite.time_render": [[4.693460153180661e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825678539, 0.45912, [4.6641e-06], [4.7532e-06], [4.6854e-06], [4.7101e-06], [2321], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.551295714702192e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825678774, 0.4606, [8.4593e-05], [8.6492e-05], [8.4756e-05], [8.5935e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.607636772478554e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825679006, 0.45628, [3.5477e-05], [3.844e-05], [3.5661e-05], [3.7271e-05], [302], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027819989387550066], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825679236, 0.44782, [0.00027427], [0.00027992], [0.00027529], [0.00027961], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011034749913960695], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825679458, 0.4491, [0.0011007], [0.0011087], [0.0011018], [0.0011062], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013521146320272237], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825679680, 0.458, [0.0013512], [0.001361], [0.0013516], [0.001356], [8], [10]]}, "durations": {"<build>": 1.8595061302185059}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/c24ab497-virtualenv-py3.10.json
================================================
{"commit_hash": "c24ab497ead3a30758ac1208ce76b925057138ac", "env_name": "virtualenv-py3.10", "date": 1591896878000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [null, [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928511659, 0.058873], "benchmarks.ColorSuite.time_downgrade_to_standard": [null, [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928511718, 0.059166], "benchmarks.ColorSuite.time_downgrade_to_windows": [null, [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928511777, 0.05774], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [null, [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928511835, 0.057941], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [null, [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928511893, 0.058], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [null, [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928511951, 0.057943], "benchmarks.PrettySuite.time_pretty": [null, [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928512009, 0.057429], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928512067, 0.057275], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928512124, 0.059217], "benchmarks.StyleSuite.time_parse_ansi": [null, [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928512183, 0.05876], "benchmarks.StyleSuite.time_parse_hex": [null, [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928512242, 0.060284], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [null, [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928512302, 0.057922], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928512360, 0.057638], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928512418, 0.057971], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928512476, 0.057943], "benchmarks.TableSuite.time_table_heavy_wrapping": [null, [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928512534, 0.05887], "benchmarks.TableSuite.time_table_no_wrapping": [null, [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928512593, 0.060205], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928512653, 0.060177], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928512714, 0.059204], "benchmarks.TextSuite.time_divide": [null, [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928512773, 0.059], "benchmarks.TextSuite.time_divide_unicode_heavy": [null, [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928512832, 0.058709], "benchmarks.TextSuite.time_fit": [null, [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928512891, 0.059158], "benchmarks.TextSuite.time_fit_unicode_heavy": [null, [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928512950, 0.058901], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928513009, 0.058609], "benchmarks.TextSuite.time_render": [null, [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928513068, 0.058868], "benchmarks.TextSuite.time_render_unicode_heavy": [null, [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928513127, 0.058921], "benchmarks.TextSuite.time_split": [null, [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928513186, 0.058957], "benchmarks.TextSuite.time_split_unicode_heavy": [null, [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928513245, 0.058532], "benchmarks.TextSuite.time_wrapping": [null, [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928513303, 0.058786], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [null, [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928513362, 0.058708]}, "durations": {"<build>": 1.952800989151001}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/c3d0e358-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "c3d0e3584202d66703d2bcf2aaf3e7740bef6e2d", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1615044722000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7320465914534196e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889321157, 0.46066, [1.7274e-07], [1.7618e-07], [1.7301e-07], [1.7369e-07], [63080], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7167895987393e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889321385, 0.43997, [1.6996e-07], [1.751e-07], [1.7e-07], [1.7419e-07], [58689], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7406302436565083e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889321608, 0.43325, [1.7285e-07], [1.7608e-07], [1.7351e-07], [1.7496e-07], [58486], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7370600530548675e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889321825, 0.45444, [1.7322e-07], [1.7387e-07], [1.7352e-07], [1.7377e-07], [62423], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7356929284686456e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889322050, 0.45306, [1.7193e-07], [1.7438e-07], [1.7302e-07], [1.7389e-07], [62452], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7386030697790594e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889322275, 0.45269, [1.7235e-07], [1.7439e-07], [1.7352e-07], [1.7398e-07], [62813], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010053730908442626], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889322501, 0.44002, [0.0010019], [0.001014], [0.0010046], [0.0010072], [11], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014068750169826671], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889322720, 0.44441, [0.0013818], [0.0014241], [0.0014036], [0.0014133], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013915156305301934], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889322940, 0.439, [0.001373], [0.0014096], [0.0013783], [0.0014075], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1667064058799472e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889323160, 0.44376, [1.1626e-07], [1.1716e-07], [1.1648e-07], [1.1699e-07], [95423], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.167730195624803e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889323378, 0.4298, [1.1636e-07], [1.1772e-07], [1.1655e-07], [1.1715e-07], [86818], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1648481964095342e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889323592, 0.44773, [1.1617e-07], [1.1788e-07], [1.1637e-07], [1.1672e-07], [95616], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889317659, 0.06218], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889317721, 0.061234], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889317783, 0.060905], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021234833868220447], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889323811, 0.44112, [0.0021087], [0.0021454], [0.0021213], [0.0021246], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012817681854357943], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889324035, 0.44022, [0.0012505], [0.0012864], [0.0012582], [0.0012824], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006751250087593992], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889324253, 0.43444, [0.00065949], [0.00068297], [0.00067146], [0.0006766], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005614282498653564], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889324466, 0.43233, [0.00054717], [0.00057016], [0.00055924], [0.00056425], [18], [10]], "benchmarks.TextSuite.time_divide": [[2.5972482133264144e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889324679, 0.44634, [2.5781e-05], [2.6301e-05], [2.5857e-05], [2.6137e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001882913116975848], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889324907, 0.45151, [0.00018413], [0.00019023], [0.00018544], [0.00018883], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.419317512538254e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889325135, 0.44621, [4.3564e-05], [4.5211e-05], [4.3662e-05], [4.4607e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.000331642466687387], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889325364, 0.43446, [0.00032544], [0.00033825], [0.00032588], [0.00033558], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003588826317961017], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889325582, 0.4507, [0.00035379], [0.00036209], [0.00035502], [0.00036081], [30], [10]], "benchmarks.TextSuite.time_render": [[4.681836923724678e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889325806, 0.45128, [4.6663e-06], [4.7065e-06], [4.6785e-06], [4.6907e-06], [2336], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.628918652585338e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889326033, 0.4474, [8.4978e-05], [8.7058e-05], [8.5407e-05], [8.6962e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.6088129582566964e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889326257, 0.43653, [3.5093e-05], [3.6196e-05], [3.5938e-05], [3.6133e-05], [278], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028376425248815825], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889326478, 0.44661, [0.00027708], [0.00028694], [0.00028033], [0.00028489], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011207893387311036], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889326699, 0.43296, [0.0011157], [0.0011272], [0.0011185], [0.0011221], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015225833381659218], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889326912, 0.4401, [0.001497], [0.0015374], [0.0015205], [0.0015256], [7], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.029734249459579587], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892985001, 0.66539, [0.029682], [0.030542], [0.029725], [0.029856], [1], [10]]}, "durations": {"<build>": 1.8749959468841553}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/c3d0e358-virtualenv-py3.10.json
================================================
{"commit_hash": "c3d0e3584202d66703d2bcf2aaf3e7740bef6e2d", "env_name": "virtualenv-py3.10", "date": 1615044722000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.706721948289093e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929104157, 0.4578, [1.6967e-07], [1.7193e-07], [1.7016e-07], [1.7117e-07], [64125], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7067263036055206e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929104385, 0.43914, [1.701e-07], [1.7114e-07], [1.705e-07], [1.7087e-07], [60337], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7029728942220878e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929104604, 0.45742, [1.6832e-07], [1.7136e-07], [1.6943e-07], [1.7096e-07], [64010], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7058191830740293e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929104833, 0.45027, [1.7007e-07], [1.7242e-07], [1.7031e-07], [1.716e-07], [64784], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.6997921753092606e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929105058, 0.43076, [1.6894e-07], [1.7276e-07], [1.6948e-07], [1.7053e-07], [58848], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7002529336257544e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929105273, 0.45924, [1.6863e-07], [1.7079e-07], [1.6944e-07], [1.7044e-07], [64523], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0009867746372368524], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929105502, 0.44858, [0.00098351], [0.0009905], [0.00098456], [0.0009894], [11], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0013813307486998383], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929105731, 0.4425, [0.0013773], [0.0013982], [0.0013799], [0.0013838], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013766301235591527], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929105952, 0.43972, [0.0013681], [0.0013831], [0.0013721], [0.0013805], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1451074278215668e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929106171, 0.45274, [1.142e-07], [1.1476e-07], [1.1435e-07], [1.1459e-07], [94714], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.144319970689746e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929106398, 0.4575, [1.1395e-07], [1.1581e-07], [1.1416e-07], [1.1507e-07], [95540], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1434822253539605e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929106626, 0.44599, [1.1352e-07], [1.1473e-07], [1.1385e-07], [1.1467e-07], [92774], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929100649, 0.062294], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929100711, 0.062668], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929100774, 0.062616], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0020758249971549957], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929106849, 0.43742, [0.0020646], [0.0020825], [0.0020688], [0.0020801], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001257328125575441], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929107071, 0.43877, [0.0012507], [0.0012633], [0.0012556], [0.0012597], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006604114687434048], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929107290, 0.44145, [0.00065931], [0.00066414], [0.00065988], [0.00066294], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005531458155019209], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929107514, 0.44704, [0.0005459], [0.00055725], [0.00054798], [0.00055356], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.536036300994194e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929107736, 0.45422, [2.5291e-05], [2.5645e-05], [2.5326e-05], [2.5417e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018511529297343102], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929107964, 0.44979, [0.00018419], [0.00018566], [0.00018479], [0.00018534], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.342335775093274e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929108189, 0.44062, [4.3393e-05], [4.3498e-05], [4.3412e-05], [4.3444e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003250845907270118], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929108413, 0.45113, [0.0003243], [0.00032594], [0.00032449], [0.00032538], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035472413834088064], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929108638, 0.43849, [0.00035346], [0.00035631], [0.00035435], [0.00035543], [29], [10]], "benchmarks.TextSuite.time_render": [[4.69378584045557e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929108856, 0.44704, [4.6866e-06], [4.7115e-06], [4.6916e-06], [4.7047e-06], [2330], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.506103517902375e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929109084, 0.45227, [8.4416e-05], [8.5233e-05], [8.4788e-05], [8.5182e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.518062299170191e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929109311, 0.44387, [3.5155e-05], [3.5274e-05], [3.5167e-05], [3.5212e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027354166675836616], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929109537, 0.44793, [0.00027265], [0.00027461], [0.00027282], [0.00027439], [39], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010926770497462711], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929109761, 0.44975, [0.0010917], [0.0010962], [0.0010918], [0.001094], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014860089286230505], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929109989, 0.43598, [0.0014841], [0.001493], [0.0014855], [0.0014868], [7], [10]]}, "durations": {"<build>": 2.0572969913482666}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/c3ee3b05-virtualenv-py3.10.json
================================================
{"commit_hash": "c3ee3b05d6d06be435f199126490bc33fcceb502", "env_name": "virtualenv-py3.10", "date": 1599494837000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7359650694168215e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928869645, 0.42879, [1.7304e-07], [1.7438e-07], [1.7332e-07], [1.7389e-07], [58488], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7321814904444916e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928869859, 0.44494, [1.7037e-07], [1.738e-07], [1.7288e-07], [1.7355e-07], [63672], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7122861978936038e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928870085, 0.42443, [1.692e-07], [1.7393e-07], [1.7003e-07], [1.725e-07], [59039], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.730784538795744e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928870295, 0.42424, [1.6995e-07], [1.7532e-07], [1.7038e-07], [1.7388e-07], [58837], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7222288226416987e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928870505, 0.44042, [1.6955e-07], [1.7508e-07], [1.7015e-07], [1.7413e-07], [63390], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.732525867726762e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928870727, 0.42593, [1.715e-07], [1.7359e-07], [1.7314e-07], [1.7349e-07], [58186], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010950937503366731], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928870939, 0.43273, [0.0010927], [0.0011018], [0.0010941], [0.0010958], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928865417, 0.058607], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014801220718904265], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928871155, 0.4295, [0.0014596], [0.0015119], [0.0014632], [0.0014943], [7], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.150097373401724e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928871372, 0.43168, [1.1363e-07], [1.164e-07], [1.1393e-07], [1.1616e-07], [87652], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1623627455916411e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928871592, 0.45323, [1.1605e-07], [1.1669e-07], [1.1622e-07], [1.1634e-07], [96318], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1681741001228055e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928871818, 0.44773, [1.1421e-07], [1.1779e-07], [1.1633e-07], [1.1735e-07], [94619], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928866355, 0.058379], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928866413, 0.058399], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928866471, 0.058258], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002998671876412118], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928872040, 0.45122, [0.0029648], [0.0030303], [0.0029776], [0.0030186], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001991791585169267], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928872270, 0.43846, [0.0019668], [0.0020335], [0.0019694], [0.0020166], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006747890929545974], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928872490, 0.43672, [0.00067335], [0.00067698], [0.00067447], [0.00067524], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005638497639569994], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928872710, 0.44086, [0.00055526], [0.00056567], [0.00056305], [0.00056422], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.7937122073338986e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928872929, 0.44164, [2.7806e-05], [2.8029e-05], [2.788e-05], [2.7962e-05], [385], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018892068392392902], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928873149, 0.44191, [0.00018595], [0.00019177], [0.0001867], [0.00019095], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.255028314613569e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928873366, 0.42847, [4.2108e-05], [4.2968e-05], [4.2218e-05], [4.2891e-05], [249], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.000330760741734036], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928873582, 0.42684, [0.0003297], [0.0003338], [0.00033013], [0.00033126], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928868285, 0.058934], "benchmarks.TextSuite.time_render": [[4.742500867413157e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928873793, 0.43919, [4.6899e-06], [4.795e-06], [4.6998e-06], [4.7872e-06], [2303], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.594543644918188e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928874015, 0.43372, [8.4961e-05], [8.7627e-05], [8.5185e-05], [8.7142e-05], [126], [10]], "benchmarks.TextSuite.time_split": [[3.414321132192028e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928874235, 0.43689, [3.3703e-05], [3.4457e-05], [3.3733e-05], [3.4407e-05], [310], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028423841649782844], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928874450, 0.42524, [0.00028296], [0.00028481], [0.00028413], [0.00028433], [36], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011712430002969792], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928874660, 0.42689, [0.0011672], [0.0011881], [0.0011683], [0.0011754], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015502083593414034], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928874876, 0.43958, [0.0015291], [0.0015619], [0.0015317], [0.0015579], [7], [10]]}, "durations": {"<build>": 1.986644983291626}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/c57e1f50-virtualenv-py3.10.json
================================================
{"commit_hash": "c57e1f508af1f042d2777e876f816ea157d7a61b", "env_name": "virtualenv-py3.10", "date": 1639307388000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.714491110860278e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928275224, 0.46519, [1.6975e-07], [1.7782e-07], [1.7058e-07], [1.7461e-07], [63727], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7027461841066378e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928275455, 0.45707, [1.6965e-07], [1.7078e-07], [1.7007e-07], [1.7057e-07], [62443], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7047429717748822e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928275680, 0.46068, [1.7004e-07], [1.7291e-07], [1.7032e-07], [1.7098e-07], [64837], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.705617274106604e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928275913, 0.45993, [1.6866e-07], [1.7297e-07], [1.7016e-07], [1.7149e-07], [63189], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7014491459324859e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928276142, 0.46474, [1.6942e-07], [1.7261e-07], [1.7001e-07], [1.7036e-07], [64538], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.705598281303084e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928276374, 0.46213, [1.6889e-07], [1.7162e-07], [1.7008e-07], [1.7119e-07], [64092], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011053917012759486], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928276603, 0.45395, [0.0011023], [0.0011085], [0.0011035], [0.0011061], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015186042146524414], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928276827, 0.44997, [0.001513], [0.0015302], [0.0015157], [0.0015235], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013958828130853362], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928277056, 0.45084, [0.0013943], [0.0014059], [0.0013949], [0.001399], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1401847489424796e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928277281, 0.4627, [1.1363e-07], [1.1512e-07], [1.1394e-07], [1.1464e-07], [96374], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1481137513064852e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928277512, 0.46027, [1.1415e-07], [1.1598e-07], [1.1452e-07], [1.1504e-07], [95059], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.140413100898655e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928277742, 0.45958, [1.136e-07], [1.16e-07], [1.1388e-07], [1.1426e-07], [95957], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928271654, 0.065342], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928271719, 0.066024], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928271785, 0.064959], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0023448374995496124], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928277973, 0.45709, [0.0023331], [0.0023602], [0.0023406], [0.0023541], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0013974921876069857], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928278206, 0.44946, [0.0013936], [0.0014034], [0.0013958], [0.0014017], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003741364825741741], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928278432, 0.46066, [0.000369], [0.00038045], [0.00036943], [0.00037896], [29], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034241532229052315], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928278663, 0.45381, [0.0003407], [0.00035204], [0.00034202], [0.00034336], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5390467207891914e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928278888, 0.45856, [2.5255e-05], [2.568e-05], [2.5282e-05], [2.5539e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018445797455970639], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928279117, 0.46, [0.00018362], [0.00018496], [0.00018435], [0.0001846], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.347264431880757e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928279348, 0.44885, [4.3402e-05], [4.3656e-05], [4.3436e-05], [4.3501e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032379906418012275], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928279576, 0.4351, [0.00032263], [0.00032447], [0.00032352], [0.00032402], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035621048300527036], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928279792, 0.44442, [0.00035502], [0.00035665], [0.00035504], [0.0003566], [29], [10]], "benchmarks.TextSuite.time_render": [[4.671231239570824e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928280013, 0.45329, [4.6533e-06], [4.6965e-06], [4.6678e-06], [4.6748e-06], [2346], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.538590623174969e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928280243, 0.45959, [8.4735e-05], [8.6171e-05], [8.5306e-05], [8.5535e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5272602937671236e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928280476, 0.44679, [3.5083e-05], [3.5344e-05], [3.5106e-05], [3.531e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002739221446589861], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928280703, 0.44555, [0.00027302], [0.00027744], [0.00027323], [0.00027422], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013621380621771095], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928280925, 0.45765, [0.0013549], [0.001371], [0.0013578], [0.0013672], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014483660738083667], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928281159, 0.44349, [0.0014459], [0.0014557], [0.0014471], [0.0014504], [7], [10]]}, "durations": {"<build>": 1.9935321807861328}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/c9afafdd-virtualenv-py3.10.json
================================================
{"commit_hash": "c9afafdd680831a43956906d56c78d9933aaf232", "env_name": "virtualenv-py3.10", "date": 1625495729000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.700951248298525e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928390301, 0.46203, [1.692e-07], [1.7076e-07], [1.6981e-07], [1.7039e-07], [64673], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7103683205663688e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928390531, 0.462, [1.683e-07], [1.7483e-07], [1.6997e-07], [1.7239e-07], [64414], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7375540579457413e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928390762, 0.43928, [1.6874e-07], [1.7934e-07], [1.7107e-07], [1.758e-07], [59196], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7372322871830168e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928390981, 0.43919, [1.7049e-07], [1.7453e-07], [1.7212e-07], [1.7393e-07], [59336], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7035417031611407e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928391200, 0.4613, [1.687e-07], [1.7084e-07], [1.6993e-07], [1.7056e-07], [64469], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.701952531167399e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928391431, 0.46118, [1.6973e-07], [1.7061e-07], [1.7008e-07], [1.7036e-07], [64314], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010273750522173941], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928391661, 0.44843, [0.0010248], [0.001031], [0.0010255], [0.0010299], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014186172502377303], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928391883, 0.4628, [0.001411], [0.0014373], [0.001416], [0.0014213], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001297231812714017], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928392109, 0.45365, [0.0012922], [0.001326], [0.0012951], [0.0013006], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1546282518142483e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928392333, 0.46398, [1.14e-07], [1.1648e-07], [1.1425e-07], [1.1642e-07], [95818], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1437953690125767e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928392568, 0.46205, [1.1409e-07], [1.147e-07], [1.1429e-07], [1.1449e-07], [95992], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1490000416168787e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928392800, 0.46388, [1.143e-07], [1.1556e-07], [1.1441e-07], [1.155e-07], [96149], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928386753, 0.06613], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928386819, 0.064369], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928386884, 0.064504], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002137574899825268], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928393033, 0.45026, [0.0021276], [0.0021517], [0.0021333], [0.0021422], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012787266241502948], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928393262, 0.44791, [0.0012705], [0.0012855], [0.0012753], [0.0012815], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003780699283067536], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928393484, 0.4525, [0.00037484], [0.00038091], [0.00037521], [0.00038024], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034083669344263693], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928393709, 0.45134, [0.0003398], [0.00034938], [0.0003404], [0.00034116], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.531682168668687e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928393933, 0.4475, [2.5219e-05], [2.5365e-05], [2.5284e-05], [2.5325e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018503125014329524], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928394161, 0.45479, [0.00018447], [0.00018654], [0.00018474], [0.00018603], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3872542661800224e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928394389, 0.44692, [4.3791e-05], [4.4066e-05], [4.3839e-05], [4.3886e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003276344031027909], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928394616, 0.43749, [0.00032441], [0.00033087], [0.00032534], [0.00033033], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035691442878617503], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928394835, 0.44344, [0.00035542], [0.00035958], [0.0003557], [0.00035843], [28], [10]], "benchmarks.TextSuite.time_render": [[4.687330839564741e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928395059, 0.45145, [4.6747e-06], [4.6983e-06], [4.6786e-06], [4.6903e-06], [2338], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.5333331981019e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928395289, 0.45674, [8.4427e-05], [8.5609e-05], [8.5265e-05], [8.545e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.517887054552237e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928395519, 0.4495, [3.5094e-05], [3.5259e-05], [3.5129e-05], [3.5212e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002791748813347352], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928395748, 0.44997, [0.00027761], [0.00028055], [0.0002783], [0.00028033], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011034083494450898], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928395973, 0.44412, [0.0010975], [0.0011086], [0.0010995], [0.0011054], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013684375007869676], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928396194, 0.45484, [0.0013634], [0.0013746], [0.0013648], [0.0013725], [8], [10]]}, "durations": {"<build>": 1.994858980178833}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/cefafdc1-virtualenv-py3.10.json
================================================
{"commit_hash": "cefafdc12e0220d139c704522979a0dc9b3f889b", "env_name": "virtualenv-py3.10", "date": 1595773790000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.704546528382287e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928765765, 0.45389, [1.6863e-07], [1.7948e-07], [1.6997e-07], [1.7364e-07], [64326], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7278454081920666e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928765990, 0.43019, [1.6968e-07], [1.7344e-07], [1.7138e-07], [1.7316e-07], [58735], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7354584728929763e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928766205, 0.43256, [1.7096e-07], [1.75e-07], [1.7327e-07], [1.7398e-07], [59055], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7354764783853303e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928766420, 0.42931, [1.7297e-07], [1.7402e-07], [1.7342e-07], [1.7381e-07], [58649], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7511662148215553e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928766633, 0.43929, [1.7234e-07], [1.7811e-07], [1.7353e-07], [1.7605e-07], [62064], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.738140176266751e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928766855, 0.44373, [1.7239e-07], [1.7487e-07], [1.7334e-07], [1.7415e-07], [61194], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0022470708005130294], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928767076, 0.44218, [0.0021923], [0.002369], [0.0022364], [0.0022503], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928761692, 0.059072], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928761752, 0.05875], "benchmarks.StyleSuite.time_parse_ansi": [[1.1584348784741335e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928767295, 0.42598, [1.1424e-07], [1.1626e-07], [1.1515e-07], [1.1588e-07], [87613], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1584836758195661e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928767507, 0.43357, [1.1391e-07], [1.1645e-07], [1.1478e-07], [1.162e-07], [95814], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1609665945508573e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928767725, 0.42709, [1.1548e-07], [1.1703e-07], [1.1575e-07], [1.1634e-07], [87886], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928762454, 0.060686], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928762515, 0.059674], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928762575, 0.059784], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002139574999455362], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928767939, 0.44351, [0.0021099], [0.0021543], [0.0021336], [0.0021481], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0015003720722493847], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928768162, 0.43513, [0.0014939], [0.0015075], [0.0014978], [0.0015047], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006745013660596063], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928768381, 0.43049, [0.00067283], [0.00067888], [0.00067418], [0.00067516], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005579756947958635], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928768593, 0.42798, [0.00054923], [0.00056491], [0.0005558], [0.00055862], [18], [10]], "benchmarks.TextSuite.time_divide": [[2.8091112257214872e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928768803, 0.43339, [2.778e-05], [2.833e-05], [2.786e-05], [2.8305e-05], [383], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001871991844382137], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928769022, 0.44169, [0.00018646], [0.00018784], [0.00018714], [0.00018736], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.206184386837079e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928769242, 0.44227, [4.1933e-05], [4.2324e-05], [4.2018e-05], [4.2199e-05], [253], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033646909709674335], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928769461, 0.43658, [0.00033509], [0.00033761], [0.00033552], [0.00033735], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928764389, 0.06003], "benchmarks.TextSuite.time_render": [[4.717766528633372e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928769678, 0.44127, [4.6823e-06], [4.7261e-06], [4.6856e-06], [4.7187e-06], [2330], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.631900777800183e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928769903, 0.43641, [8.5338e-05], [8.7457e-05], [8.5719e-05], [8.7006e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.408707212097047e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928770118, 0.4406, [3.3545e-05], [3.4724e-05], [3.3566e-05], [3.4635e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028407601387919605], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928770340, 0.43471, [0.0002795], [0.00028527], [0.0002829], [0.00028475], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011582684997443317], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928770558, 0.43952, [0.0011575], [0.0011616], [0.0011578], [0.0011598], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001546357140926245], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928770775, 0.4414, [0.0015254], [0.0015481], [0.0015438], [0.001547], [7], [10]]}, "durations": {"<build>": 2.086954116821289}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/cf606f0a-virtualenv-py3.10.json
================================================
{"commit_hash": "cf606f0a3cab3dbe8f9fdaa2ccc4882c594ce2af", "env_name": "virtualenv-py3.10", "date": 1633525640000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7008481431105879e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928188222, 0.46544, [1.6954e-07], [1.7061e-07], [1.6969e-07], [1.7028e-07], [64594], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.6977103967130265e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928188453, 0.46493, [1.6885e-07], [1.7035e-07], [1.6916e-07], [1.6995e-07], [64640], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7019219427270743e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928188685, 0.44697, [1.6873e-07], [1.7048e-07], [1.6992e-07], [1.7025e-07], [60777], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.6952995534974653e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928188908, 0.45652, [1.6879e-07], [1.7055e-07], [1.6931e-07], [1.7014e-07], [62610], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7031425859421503e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928189136, 0.43789, [1.6929e-07], [1.7098e-07], [1.6983e-07], [1.7054e-07], [59023], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6987605637107828e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928189355, 0.46462, [1.6944e-07], [1.7074e-07], [1.6956e-07], [1.7009e-07], [64388], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010299416491761802], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928189587, 0.45289, [0.0010285], [0.0010327], [0.0010294], [0.0010307], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014262708118621958], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928189812, 0.46211, [0.0014191], [0.0014354], [0.0014247], [0.0014304], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001303890689086984], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928190042, 0.44367, [0.0012991], [0.0013081], [0.0013012], [0.0013058], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1436060985643663e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928190267, 0.45499, [1.1394e-07], [1.1448e-07], [1.1412e-07], [1.1444e-07], [93493], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1419639107421115e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928190495, 0.45868, [1.1401e-07], [1.1455e-07], [1.1413e-07], [1.1433e-07], [96430], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1430237181679641e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928190728, 0.43607, [1.1373e-07], [1.1653e-07], [1.1406e-07], [1.1632e-07], [87905], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928184640, 0.06603], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928184706, 0.065403], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928184771, 0.065643], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002137375099118799], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928190946, 0.45268, [0.0021232], [0.0021537], [0.0021326], [0.0021444], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012819921867048834], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928191175, 0.45076, [0.0012766], [0.0012911], [0.0012804], [0.0012873], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003731116074569789], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928191399, 0.4503, [0.00036905], [0.00037584], [0.00037004], [0.00037552], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003418051126045025], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928191624, 0.45421, [0.00033996], [0.0003531], [0.00034031], [0.0003438], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5420383814757277e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928191851, 0.45966, [2.5403e-05], [2.5511e-05], [2.5412e-05], [2.5462e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001843121525302719], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928192080, 0.45971, [0.0001837], [0.0001845], [0.00018417], [0.00018439], [59], [10]], "benchmarks.TextSuite.time_fit": [[4.359663006749261e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928192310, 0.44846, [4.3466e-05], [4.3834e-05], [4.3497e-05], [4.3732e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003243705758712057], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928192539, 0.45606, [0.00032357], [0.00032569], [0.00032394], [0.00032473], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003578462763408456], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928192766, 0.44675, [0.00035635], [0.00035953], [0.00035684], [0.00035852], [29], [10]], "benchmarks.TextSuite.time_render": [[4.663015471995789e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928192988, 0.45183, [4.657e-06], [4.6789e-06], [4.6602e-06], [4.6676e-06], [2328], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.517106255112594e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928193218, 0.45805, [8.4403e-05], [8.5247e-05], [8.5058e-05], [8.5219e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5236133115106055e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928193448, 0.45048, [3.5006e-05], [3.541e-05], [3.505e-05], [3.5343e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027417105248835137], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928193678, 0.44627, [0.00027297], [0.00027504], [0.00027352], [0.00027446], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001099810349114705], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928193900, 0.44558, [0.0010964], [0.0011023], [0.001098], [0.0011009], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013641328132507624], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928194122, 0.45588, [0.0013606], [0.0013688], [0.0013625], [0.0013656], [8], [10]]}, "durations": {"<build>": 1.987940788269043}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/d06540a2-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "d06540a2b317d6b55323e89f3271b038576d5db9", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644577551000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7069109312112033e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826303575, 0.44478, [1.7045e-07], [1.7237e-07], [1.7062e-07], [1.7123e-07], [58937], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7085402292650682e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826303800, 0.46543, [1.6944e-07], [1.7244e-07], [1.6984e-07], [1.7136e-07], [64465], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.706844813854155e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826304034, 0.45689, [1.6923e-07], [1.7537e-07], [1.7035e-07], [1.7095e-07], [64546], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7058630178311163e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826304267, 0.45667, [1.689e-07], [1.7185e-07], [1.705e-07], [1.7067e-07], [64430], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.701968220653147e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826304500, 0.46638, [1.6929e-07], [1.7221e-07], [1.7002e-07], [1.708e-07], [64315], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.708572670330147e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826304733, 0.46586, [1.705e-07], [1.7584e-07], [1.7072e-07], [1.7137e-07], [64256], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011200138833373785], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826304965, 0.44614, [0.0011123], [0.0011465], [0.0011149], [0.0011212], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.00156078564136156], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826305187, 0.44921, [0.0015572], [0.0015659], [0.0015596], [0.0015635], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001412533878465183], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826305410, 0.45586, [0.0014053], [0.0014273], [0.0014107], [0.0014139], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1533515940749438e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826305638, 0.44586, [1.1433e-07], [1.1559e-07], [1.1445e-07], [1.1544e-07], [86969], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1503996699455317e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826305865, 0.46536, [1.1399e-07], [1.1654e-07], [1.1464e-07], [1.1555e-07], [95467], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1530024057371824e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826306098, 0.44579, [1.1402e-07], [1.1718e-07], [1.142e-07], [1.1579e-07], [87805], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008550323022063822], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826306323, 0.52352, [0.0084239], [0.0087947], [0.0084713], [0.008624], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008443781523965299], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826306583, 0.51696, [0.0083817], [0.008724], [0.0084276], [0.0085084], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008500187483150512], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826306843, 0.52207, [0.0084597], [0.0087427], [0.0084836], [0.0085381], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019030625117011368], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826307102, 0.46731, [0.00188], [0.0019787], [0.001894], [0.0019277], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011808773399227196], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826307334, 0.4625, [0.0011694], [0.0012241], [0.0011757], [0.0012047], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037549551676160524], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826307564, 0.45846, [0.00037126], [0.00038323], [0.00037192], [0.00038029], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003470544357814135], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826307788, 0.44797, [0.00033988], [0.00035326], [0.00034042], [0.00035091], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5432752337046834e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826308014, 0.46337, [2.5309e-05], [2.5894e-05], [2.5358e-05], [2.5595e-05], [430], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018530424306939904], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826308247, 0.4626, [0.00018467], [0.00018655], [0.00018506], [0.00018572], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.395039191042058e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826308479, 0.45244, [4.3469e-05], [4.4294e-05], [4.3657e-05], [4.4121e-05], [244], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003269240673210832], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826308708, 0.44346, [0.00032629], [0.00033195], [0.00032642], [0.00032827], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003564389510850968], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826308928, 0.45099, [0.00035512], [0.00036118], [0.00035583], [0.00035838], [29], [10]], "benchmarks.TextSuite.time_render": [[4.677703582807874e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826309152, 0.46032, [4.662e-06], [4.7561e-06], [4.6701e-06], [4.7008e-06], [2318], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.564386205146398e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826309385, 0.46074, [8.5056e-05], [8.6198e-05], [8.5542e-05], [8.5737e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.52473706489242e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826309615, 0.4527, [3.5141e-05], [3.5326e-05], [3.5209e-05], [3.5259e-05], [309], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027687993439796726], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826309845, 0.45052, [0.00027486], [0.0002819], [0.00027547], [0.00027854], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001370471334666945], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826310070, 0.45727, [0.0013576], [0.001394], [0.0013621], [0.001377], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014635327139071058], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826310301, 0.44618, [0.0014583], [0.0014746], [0.00146], [0.0014684], [7], [10]]}, "durations": {"<build>": 1.8374958038330078}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/d1ea01d0-virtualenv-py3.10.json
================================================
{"commit_hash": "d1ea01d0a35ef1509ab98251227d6bf995b245a4", "env_name": "virtualenv-py3.10", "date": 1593352189000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7275511303374947e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928593878, 0.42685, [1.7156e-07], [1.7375e-07], [1.7224e-07], [1.7341e-07], [58817], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7343822759676602e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928594091, 0.43221, [1.7264e-07], [1.7385e-07], [1.7288e-07], [1.7372e-07], [64430], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7113201561862943e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928594307, 0.42831, [1.6899e-07], [1.7382e-07], [1.706e-07], [1.7237e-07], [64534], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7378755242519641e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928594522, 0.45416, [1.7285e-07], [1.7485e-07], [1.7343e-07], [1.7402e-07], [64350], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7333784869853573e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928594748, 0.45035, [1.722e-07], [1.7422e-07], [1.7318e-07], [1.7352e-07], [64372], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.740670683276435e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928594973, 0.4309, [1.7081e-07], [1.7449e-07], [1.7253e-07], [1.7434e-07], [64166], [10]], "benchmarks.PrettySuite.time_pretty": [[0.002210033303708769], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928595189, 0.43765, [0.0022042], [0.0022327], [0.0022077], [0.0022118], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928590154, 0.058498], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928590213, 0.057913], "benchmarks.StyleSuite.time_parse_ansi": [[1.1428107393122285e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928595404, 0.44495, [1.1373e-07], [1.1449e-07], [1.1404e-07], [1.1433e-07], [95530], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1542248528245094e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928595627, 0.43917, [1.1413e-07], [1.1676e-07], [1.1431e-07], [1.1633e-07], [95943], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1608432618778828e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928595851, 0.44075, [1.1578e-07], [1.1647e-07], [1.1595e-07], [1.1632e-07], [95777], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928590923, 0.057854], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928590981, 0.057866], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928591038, 0.057476], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0020284958998672666], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928596078, 0.42371, [0.0020248], [0.0020344], [0.002027], [0.0020318], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014361726415310322], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928596293, 0.42172, [0.0014307], [0.0014433], [0.0014329], [0.0014408], [7], [10]], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928591514, 0.058258], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928591572, 0.058273], "benchmarks.TextSuite.time_divide": [[2.8322780685372865e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928596506, 0.44533, [2.8226e-05], [2.8376e-05], [2.8307e-05], [2.833e-05], [383], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018953253477280797], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928596729, 0.44308, [0.00018654], [0.00019173], [0.00018753], [0.00019155], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.235208203317598e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928596948, 0.44025, [4.2095e-05], [4.3059e-05], [4.2247e-05], [4.2794e-05], [250], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003361021452057626], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928597168, 0.43071, [0.00033251], [0.00033843], [0.00033487], [0.00033783], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928592516, 0.058444], "benchmarks.TextSuite.time_render": [[4.687418159703545e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928597382, 0.4324, [4.6471e-06], [4.6982e-06], [4.6604e-06], [4.6959e-06], [2291], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.583528904182458e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928597601, 0.44525, [8.5363e-05], [8.6883e-05], [8.5395e-05], [8.6789e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.391068551741961e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928597826, 0.43549, [3.3659e-05], [3.4238e-05], [3.3828e-05], [3.4162e-05], [310], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028314977031629026], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928598042, 0.43206, [0.00027929], [0.00028619], [0.00027984], [0.00028522], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.00116348844474285], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928598257, 0.4364, [0.001144], [0.0011747], [0.0011457], [0.0011729], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015192588554262848], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928598475, 0.434, [0.0015163], [0.0015243], [0.0015173], [0.0015207], [7], [10]]}, "durations": {"<build>": 1.9580459594726562}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/d6e6a762-virtualenv-py3.10.json
================================================
{"commit_hash": "d6e6a7627e41b8177d5824848a33fe78a52defbf", "env_name": "virtualenv-py3.10", "date": 1638115361000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7044148018081613e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929382285, 0.45442, [1.6941e-07], [1.7235e-07], [1.7e-07], [1.7091e-07], [64534], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7100720142793016e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929382517, 0.46749, [1.6983e-07], [1.7229e-07], [1.7064e-07], [1.7127e-07], [64153], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7058500679039374e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929382752, 0.45793, [1.6951e-07], [1.7103e-07], [1.7018e-07], [1.7089e-07], [64648], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.70275577801008e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929382985, 0.46411, [1.6964e-07], [1.7086e-07], [1.6981e-07], [1.7062e-07], [64089], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.700077842064008e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929383217, 0.46804, [1.6932e-07], [1.7854e-07], [1.6988e-07], [1.7042e-07], [64618], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6995302828139584e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929383451, 0.45754, [1.691e-07], [1.7185e-07], [1.6985e-07], [1.7062e-07], [64528], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011057438008720056], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929383685, 0.4556, [0.0011021], [0.0011127], [0.0011046], [0.0011064], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001518651784863323], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929383910, 0.45139, [0.0015132], [0.0015288], [0.0015168], [0.0015217], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013965208745503332], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929384138, 0.45272, [0.0013928], [0.0014081], [0.0013936], [0.0013997], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.14279963534634e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929384364, 0.46515, [1.1383e-07], [1.1513e-07], [1.1425e-07], [1.1466e-07], [96041], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1550767465349522e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929384596, 0.46102, [1.1392e-07], [1.1693e-07], [1.1405e-07], [1.1682e-07], [94076], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1419077714234279e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929384825, 0.46473, [1.1388e-07], [1.1544e-07], [1.1406e-07], [1.1429e-07], [96272], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929378667, 0.06719], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929378734, 0.065859], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929378800, 0.065964], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0023521165974671023], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929385057, 0.46008, [0.0023354], [0.0023596], [0.0023481], [0.002354], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001415294249454746], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929385291, 0.4546, [0.0014002], [0.0015066], [0.0014028], [0.0014178], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037431696390350614], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929385519, 0.46925, [0.00037036], [0.00037745], [0.00037118], [0.00037714], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034069825825656973], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929385742, 0.45394, [0.00033797], [0.00035258], [0.0003388], [0.00034201], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.535485209975864e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929385969, 0.45971, [2.5221e-05], [2.5434e-05], [2.5315e-05], [2.5404e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018451293977579615], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929386198, 0.45778, [0.00018335], [0.00018545], [0.00018437], [0.00018511], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.351439636637934e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929386425, 0.44973, [4.3437e-05], [4.3568e-05], [4.3482e-05], [4.3547e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032582512137719965], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929386653, 0.4586, [0.00032488], [0.00032697], [0.00032528], [0.00032649], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003563821890816927], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929386881, 0.4471, [0.00035563], [0.00036099], [0.00035596], [0.0003567], [29], [10]], "benchmarks.TextSuite.time_render": [[4.675005164754989e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929387104, 0.45307, [4.6596e-06], [4.6868e-06], [4.6692e-06], [4.6829e-06], [2321], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.51159763163117e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929387334, 0.45551, [8.4379e-05], [8.5608e-05], [8.4655e-05], [8.5219e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5167884774424445e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929387563, 0.45005, [3.5061e-05], [3.5247e-05], [3.5088e-05], [3.5228e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027289102600218775], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929387792, 0.45467, [0.00027132], [0.00027378], [0.00027258], [0.00027315], [39], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013594817501143552], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929388018, 0.45641, [0.0013561], [0.0013673], [0.0013586], [0.0013646], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014479047864110076], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929388249, 0.44442, [0.0014435], [0.0014508], [0.0014444], [0.0014503], [7], [10]]}, "durations": {"<build>": 1.9784090518951416}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/d9d59c6e-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "d9d59c6eda6d21f4515e9a8fe9496fa5e68f9500", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1601731540000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7407924057630386e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889307637, 0.42726, [1.7341e-07], [1.7461e-07], [1.7377e-07], [1.7419e-07], [58538], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7395959837702498e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889307850, 0.42694, [1.729e-07], [1.7454e-07], [1.7363e-07], [1.743e-07], [59044], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7377477657638174e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889308064, 0.4481, [1.7238e-07], [1.7444e-07], [1.7279e-07], [1.7408e-07], [63604], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7359929484630137e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889308289, 0.42519, [1.7257e-07], [1.7443e-07], [1.7336e-07], [1.7386e-07], [58774], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7348878188092557e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889308500, 0.42442, [1.7154e-07], [1.7548e-07], [1.7282e-07], [1.7392e-07], [58926], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7348069353084636e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889308711, 0.44841, [1.6881e-07], [1.7401e-07], [1.7314e-07], [1.7372e-07], [64432], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0009419659512456168], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889308934, 0.43548, [0.00092738], [0.00095572], [0.00093114], [0.00094524], [11], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889303434, 0.059256], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001329273436567746], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889309149, 0.43565, [0.0013089], [0.0013461], [0.0013146], [0.0013444], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.163856773500504e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889309373, 0.43305, [1.1607e-07], [1.1677e-07], [1.1626e-07], [1.1647e-07], [90114], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1640385993642372e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889309590, 0.4207, [1.16e-07], [1.174e-07], [1.1637e-07], [1.1656e-07], [86708], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1687012076271203e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889309800, 0.42544, [1.1602e-07], [1.1807e-07], [1.1638e-07], [1.1746e-07], [87732], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889304346, 0.057538], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889304403, 0.05766], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889304461, 0.057519], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0027960625011473894], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889310013, 0.4376, [0.0027245], [0.0028182], [0.0027417], [0.0028108], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001898211776278913], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889310231, 0.44187, [0.0018853], [0.0019275], [0.0018932], [0.0019099], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006731485947966576], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889310450, 0.42707, [0.00067057], [0.00068226], [0.00067188], [0.00067494], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.000557768501393083], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889310661, 0.42407, [0.00055505], [0.00056072], [0.00055608], [0.0005592], [18], [10]], "benchmarks.TextSuite.time_divide": [[2.8548026334886486e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889310870, 0.4361, [2.8169e-05], [2.8659e-05], [2.8341e-05], [2.8629e-05], [380], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018822880494490004], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889311093, 0.44094, [0.00018607], [0.00019176], [0.00018773], [0.0001888], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2883482330990404e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889311313, 0.44497, [4.2656e-05], [4.2987e-05], [4.2803e-05], [4.2918e-05], [253], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033887163285286194], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889311535, 0.43199, [0.0003355], [0.00034054], [0.00033714], [0.00033972], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889306268, 0.058105], "benchmarks.TextSuite.time_render": [[4.762901258465437e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889311751, 0.43012, [4.7312e-06], [4.8358e-06], [4.7522e-06], [4.8013e-06], [2335], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.739133179187775e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889311965, 0.44254, [8.6959e-05], [8.8417e-05], [8.7311e-05], [8.7741e-05], [125], [10]], "benchmarks.TextSuite.time_split": [[3.378175257426654e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889312188, 0.43491, [3.3676e-05], [3.476e-05], [3.3757e-05], [3.3837e-05], [311], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028390709524722516], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889312405, 0.43548, [0.00028139], [0.00028886], [0.00028193], [0.00028525], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011651782163729272], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889312620, 0.4394, [0.0011631], [0.0011664], [0.0011646], [0.0011653], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015424910566902586], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889312838, 0.43874, [0.0015231], [0.001565], [0.0015264], [0.00156], [7], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.030654020491056144], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892982426, 0.68227, [0.030543], [0.031882], [0.030567], [0.030901], [1], [10]]}, "durations": {"<build>": 1.9008300304412842}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/d9d59c6e-virtualenv-py3.10.json
================================================
{"commit_hash": "d9d59c6eda6d21f4515e9a8fe9496fa5e68f9500", "env_name": "virtualenv-py3.10", "date": 1601731540000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7007272862010314e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928948881, 0.44769, [1.691e-07], [1.7067e-07], [1.6979e-07], [1.7041e-07], [64713], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7230254365760394e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928949104, 0.44046, [1.6906e-07], [1.7397e-07], [1.6958e-07], [1.7329e-07], [64394], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.700615323578596e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928949330, 0.44909, [1.6912e-07], [1.7315e-07], [1.6998e-07], [1.7077e-07], [64454], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7185753185443347e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928949554, 0.43388, [1.6937e-07], [1.74e-07], [1.7027e-07], [1.7356e-07], [58729], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.6980957393884359e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928949774, 0.4481, [1.6901e-07], [1.7029e-07], [1.6955e-07], [1.7004e-07], [64550], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7070400929737442e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928949998, 0.45027, [1.6981e-07], [1.7197e-07], [1.7021e-07], [1.7133e-07], [64502], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0009214204540264539], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928950224, 0.43133, [0.00091927], [0.00092614], [0.00092008], [0.00092345], [11], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928944661, 0.057795], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0013074791258986806], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928950440, 0.42931, [0.0013042], [0.0013097], [0.0013051], [0.0013093], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1475910215925814e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928950658, 0.44674, [1.1367e-07], [1.1608e-07], [1.1398e-07], [1.1526e-07], [95416], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1526058413923107e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928950882, 0.45265, [1.1417e-07], [1.1624e-07], [1.1435e-07], [1.1575e-07], [94977], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1425953489652303e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928951111, 0.44765, [1.1396e-07], [1.1495e-07], [1.1408e-07], [1.1436e-07], [96382], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928945601, 0.05744], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928945658, 0.057925], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928945716, 0.057371], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0027217134993406944], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928951335, 0.42588, [0.0027174], [0.0027449], [0.0027199], [0.0027228], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0018379097503687567], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928951549, 0.44105, [0.0018355], [0.0018497], [0.0018371], [0.0018465], [6], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006745612190570682], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928951767, 0.4356, [0.00066229], [0.00067891], [0.00066486], [0.0006778], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005468925527039621], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928951990, 0.43292, [0.00054298], [0.00055628], [0.0005446], [0.00055198], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.7947836365042762e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928952204, 0.44141, [2.7888e-05], [2.8018e-05], [2.7904e-05], [2.7985e-05], [385], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018688398292930476], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928952424, 0.44236, [0.00018663], [0.00018762], [0.00018668], [0.00018727], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.223215535646712e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928952645, 0.43804, [4.2053e-05], [4.2538e-05], [4.2177e-05], [4.225e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032950469364051617], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928952863, 0.427, [0.00032902], [0.00033125], [0.0003292], [0.00032978], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928947520, 0.058016], "benchmarks.TextSuite.time_render": [[4.690418560544151e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928953076, 0.4365, [4.6716e-06], [4.7213e-06], [4.6755e-06], [4.7052e-06], [2327], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.534996516735459e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928953298, 0.4446, [8.4571e-05], [8.5513e-05], [8.5258e-05], [8.5447e-05], [129], [10]], "benchmarks.TextSuite.time_split": [[3.383466821851937e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928953522, 0.43553, [3.3784e-05], [3.3888e-05], [3.3819e-05], [3.3857e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002794617160091277], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928953739, 0.42829, [0.00027875], [0.00028134], [0.00027922], [0.00027985], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011428379447251144], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928953952, 0.43093, [0.0011403], [0.0011446], [0.0011426], [0.0011432], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015310773576077607], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928954165, 0.43585, [0.0015279], [0.0015349], [0.0015302], [0.0015327], [7], [10]]}, "durations": {"<build>": 2.036357879638672}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/dc3f0623-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "dc3f06231fd3aa1b78263114313c258b1c04d8f7", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1651578151000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.711304383824085e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825641457, 0.4623, [1.7041e-07], [1.7209e-07], [1.7061e-07], [1.7175e-07], [63222], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7071214381673314e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825641688, 0.46563, [1.6938e-07], [1.7168e-07], [1.7033e-07], [1.7125e-07], [64331], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7111863076922973e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825641921, 0.46257, [1.6904e-07], [1.7395e-07], [1.7043e-07], [1.7133e-07], [64246], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7210836759618025e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825642153, 0.45847, [1.7008e-07], [1.7355e-07], [1.7144e-07], [1.7224e-07], [64276], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7193258791147163e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825642380, 0.46861, [1.705e-07], [1.7594e-07], [1.7125e-07], [1.7308e-07], [64669], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7254700904582032e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825642619, 0.46071, [1.7017e-07], [1.7704e-07], [1.7095e-07], [1.7348e-07], [62762], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010708291432820261], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825642849, 0.45485, [0.0010603], [0.0011116], [0.0010643], [0.0010856], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014886636386758515], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825643083, 0.44976, [0.0014816], [0.0014906], [0.0014876], [0.0014896], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001161416669169234], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825643312, 0.44945, [0.0011561], [0.0011948], [0.0011589], [0.0011664], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1489012237216108e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825643540, 0.45746, [1.1427e-07], [1.1561e-07], [1.1449e-07], [1.1516e-07], [90792], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1471609614925116e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825643767, 0.4655, [1.142e-07], [1.1856e-07], [1.1438e-07], [1.1589e-07], [95254], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1530108380113519e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825644000, 0.46722, [1.1469e-07], [1.1761e-07], [1.1502e-07], [1.1548e-07], [95814], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007599301927257329], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825644234, 0.5031, [0.0075602], [0.0076796], [0.0075838], [0.0076165], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007580562494695187], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825644480, 0.51381, [0.0075532], [0.0076262], [0.0075701], [0.0075956], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007596687530167401], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825644738, 0.51509, [0.0075384], [0.0076403], [0.0075773], [0.0076129], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017438333209914467], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825644996, 0.45304, [0.0017343], [0.0017561], [0.0017393], [0.0017487], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0010874937521293758], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825645226, 0.45713, [0.001073], [0.0011384], [0.0010757], [0.001105], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037305503584710617], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825645460, 0.45378, [0.00037244], [0.00037374], [0.00037271], [0.00037348], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034326209401291225], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825645685, 0.45906, [0.00033991], [0.0003542], [0.00034097], [0.00034531], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5584427184183017e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825645914, 0.46159, [2.5297e-05], [2.5986e-05], [2.5486e-05], [2.5837e-05], [419], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018721336201796756], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825646144, 0.4578, [0.00018441], [0.00019062], [0.00018606], [0.00018835], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3980396089423056e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825646375, 0.45396, [4.3622e-05], [4.5169e-05], [4.3857e-05], [4.4602e-05], [237], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033099116461182183], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825646600, 0.46507, [0.0003255], [0.00033882], [0.00032865], [0.00033255], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003668879287253166], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825646832, 0.45999, [0.00035597], [0.00039037], [0.00036031], [0.00038645], [29], [10]], "benchmarks.TextSuite.time_render": [[4.700887142918062e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825647065, 0.45687, [4.6733e-06], [4.7421e-06], [4.6822e-06], [4.7252e-06], [2255], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.832890261697957e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825647295, 0.4657, [8.5585e-05], [9.2155e-05], [8.6052e-05], [9.1215e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.553939242125817e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825647527, 0.45104, [3.5332e-05], [3.6502e-05], [3.5405e-05], [3.585e-05], [284], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027725224483858893], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825647746, 0.45051, [0.00027441], [0.00027969], [0.00027642], [0.00027818], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011063437559641898], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825647968, 0.45286, [0.0011011], [0.0011295], [0.0011033], [0.0011095], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013688645558431745], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825648192, 0.46063, [0.0013494], [0.0013944], [0.0013561], [0.0013803], [8], [10]]}, "durations": {"<build>": 1.8259587287902832}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/e0a1fd30-virtualenv-py3.10.json
================================================
{"commit_hash": "e0a1fd3052a54144f54a20eb97bfc3f397658675", "env_name": "virtualenv-py3.10", "date": 1594310534000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7310468765644094e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928664281, 0.42707, [1.7202e-07], [1.7348e-07], [1.7287e-07], [1.7327e-07], [59157], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7140150026302792e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928664493, 0.44259, [1.6964e-07], [1.7335e-07], [1.6999e-07], [1.7295e-07], [64447], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7120258556264482e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928664717, 0.44445, [1.6984e-07], [1.7711e-07], [1.7032e-07], [1.7301e-07], [64274], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.739078501037466e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928664940, 0.42331, [1.7275e-07], [1.75e-07], [1.7376e-07], [1.7434e-07], [58318], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7400155762376018e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928665151, 0.44134, [1.7121e-07], [1.7447e-07], [1.7324e-07], [1.742e-07], [64208], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7380606893906802e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928665377, 0.43557, [1.6943e-07], [1.771e-07], [1.724e-07], [1.7451e-07], [64755], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0022525667038280515], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928665593, 0.44188, [0.0022446], [0.0022692], [0.0022481], [0.0022578], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928660547, 0.058901], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928660606, 0.058328], "benchmarks.StyleSuite.time_parse_ansi": [[1.1611185828598203e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928665811, 0.42395, [1.1578e-07], [1.1775e-07], [1.1595e-07], [1.1639e-07], [87441], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.170790392565746e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928666022, 0.42512, [1.1625e-07], [1.1786e-07], [1.1668e-07], [1.1741e-07], [87450], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1539420545928226e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928666234, 0.43805, [1.138e-07], [1.1688e-07], [1.143e-07], [1.1666e-07], [95936], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928661313, 0.058048], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928661371, 0.05784], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928661429, 0.057652], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021038542006863283], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928666450, 0.43374, [0.0020827], [0.0021521], [0.0020909], [0.0021359], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014810833568584972], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928666668, 0.42867, [0.0014557], [0.0015049], [0.0014606], [0.0014982], [7], [10]], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928661915, 0.058367], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928661974, 0.058171], "benchmarks.TextSuite.time_divide": [[2.8066775329144937e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928666884, 0.44528, [2.7753e-05], [2.8493e-05], [2.7785e-05], [2.838e-05], [385], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00019063486813632934], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928667108, 0.44545, [0.00018949], [0.00019101], [0.00019018], [0.00019082], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.291398792965226e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928667331, 0.44101, [4.2623e-05], [4.3151e-05], [4.2759e-05], [4.3032e-05], [249], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003357896616028982], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928667550, 0.43211, [0.00033434], [0.00033657], [0.00033526], [0.00033627], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928662916, 0.058343], "benchmarks.TextSuite.time_render": [[4.695363762934517e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928667765, 0.44042, [4.6861e-06], [4.7038e-06], [4.6888e-06], [4.6987e-06], [2334], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.681542965405242e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928667990, 0.44792, [8.5205e-05], [8.7409e-05], [8.6381e-05], [8.6843e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.372648716088193e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928668216, 0.43541, [3.3659e-05], [3.3812e-05], [3.3705e-05], [3.3766e-05], [311], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028238456729308675], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928668433, 0.43206, [0.00028014], [0.00028621], [0.00028076], [0.00028362], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011480787199818427], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928668649, 0.43319, [0.0011355], [0.0011605], [0.001136], [0.0011575], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015361339277920447], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928668864, 0.43689, [0.001519], [0.0015511], [0.0015207], [0.0015504], [7], [10]]}, "durations": {"<build>": 1.9530549049377441}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/e21ac11a-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "e21ac11a835bb3dc2e6494f18adad13c76b61c71", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644495093000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7067072851945743e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826335065, 0.46743, [1.6919e-07], [1.7145e-07], [1.6999e-07], [1.7119e-07], [64471], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7038956981004464e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826335299, 0.46481, [1.6906e-07], [1.711e-07], [1.7013e-07], [1.7063e-07], [64158], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7073611797077377e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826335531, 0.45744, [1.6869e-07], [1.749e-07], [1.7021e-07], [1.7249e-07], [64290], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7131238816551177e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826335762, 0.46395, [1.697e-07], [1.7361e-07], [1.7051e-07], [1.7165e-07], [64894], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7051780310050056e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826335996, 0.46347, [1.7005e-07], [1.7143e-07], [1.7043e-07], [1.7075e-07], [63915], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7098828769129732e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826336227, 0.46221, [1.6937e-07], [1.7194e-07], [1.7007e-07], [1.7146e-07], [64159], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011240601565481888], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826336459, 0.44684, [0.0011175], [0.0011933], [0.0011196], [0.0011438], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015731012016268714], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826336680, 0.46226, [0.0015539], [0.0016157], [0.0015571], [0.0015962], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014127499453024939], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826336904, 0.45952, [0.0014072], [0.0014215], [0.0014099], [0.001414], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1473352923473505e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826337132, 0.46614, [1.1398e-07], [1.1667e-07], [1.1427e-07], [1.1544e-07], [95568], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1455881411870227e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826337366, 0.4631, [1.143e-07], [1.1879e-07], [1.144e-07], [1.1471e-07], [95599], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1459155188702342e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826337599, 0.46477, [1.1383e-07], [1.1506e-07], [1.143e-07], [1.1482e-07], [96318], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008445552026387304], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826337834, 0.51534, [0.0083962], [0.0085894], [0.0084285], [0.0084899], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.00878489576280117], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826338092, 0.52595, [0.0084134], [0.0088581], [0.0084666], [0.0088336], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008494979003444314], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826338359, 0.51661, [0.0084089], [0.0087208], [0.0084305], [0.0086098], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018763159944986305], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826338618, 0.44992, [0.001868], [0.0018846], [0.0018711], [0.0018804], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011640555587493712], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826338845, 0.44999, [0.0011539], [0.0011802], [0.0011586], [0.0011707], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003765096771530807], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826339073, 0.45619, [0.00037461], [0.00037995], [0.00037509], [0.00037764], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003391826331305007], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826339300, 0.44474, [0.00033828], [0.00034859], [0.00033904], [0.00034081], [30], [10]], "benchmarks.TextSuite.time_divide": [[2.5391322286689985e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826339521, 0.46715, [2.5313e-05], [2.604e-05], [2.5346e-05], [2.5474e-05], [425], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001849859836511314], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826339750, 0.45878, [0.00018477], [0.00018633], [0.00018482], [0.00018598], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.360120132096051e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826339980, 0.4521, [4.3476e-05], [4.4821e-05], [4.3525e-05], [4.4079e-05], [246], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003274412733982458], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826340211, 0.46274, [0.00032473], [0.00033081], [0.00032501], [0.00032947], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035639798092045657], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826340442, 0.44843, [0.00035505], [0.00035875], [0.00035544], [0.00035747], [29], [10]], "benchmarks.TextSuite.time_render": [[4.687143985229807e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826340663, 0.45729, [4.659e-06], [4.7456e-06], [4.6709e-06], [4.706e-06], [2340], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.570472526503361e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826340895, 0.46055, [8.5135e-05], [8.5798e-05], [8.5575e-05], [8.5727e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.54064540219268e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826341127, 0.45563, [3.5193e-05], [3.5683e-05], [3.5307e-05], [3.5426e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.000279788381273025], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826341361, 0.45496, [0.00027539], [0.00028354], [0.00027812], [0.00028161], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001368119745166041], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826341589, 0.45043, [0.0013555], [0.0013981], [0.0013653], [0.0013689], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014750060093189988], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826341813, 0.44971, [0.0014589], [0.0014909], [0.001466], [0.0014871], [7], [10]]}, "durations": {"<build>": 1.813904047012329}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/e338ab14-virtualenv-py3.10.json
================================================
{"commit_hash": "e338ab145797e57a5db73f37b3883a30592f0643", "env_name": "virtualenv-py3.10", "date": 1596045245000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7237765726891362e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928791445, 0.44188, [1.6968e-07], [1.7551e-07], [1.7051e-07], [1.7508e-07], [64397], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7026478922479047e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928791662, 0.45003, [1.6824e-07], [1.725e-07], [1.685e-07], [1.7062e-07], [64455], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.718668772833788e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928791887, 0.44284, [1.6938e-07], [1.7492e-07], [1.7058e-07], [1.728e-07], [64741], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.741799941720092e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928792113, 0.42647, [1.7288e-07], [1.7543e-07], [1.735e-07], [1.7487e-07], [58313], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7065924860881734e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928792325, 0.45101, [1.6917e-07], [1.7312e-07], [1.6989e-07], [1.7253e-07], [64145], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7367138249440384e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928792551, 0.42737, [1.7333e-07], [1.7426e-07], [1.7359e-07], [1.7383e-07], [58416], [10]], "benchmarks.PrettySuite.time_pretty": [[0.002228712401119992], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928792763, 0.44, [0.0022051], [0.0022493], [0.0022103], [0.0022462], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928787372, 0.05935], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928787431, 0.058882], "benchmarks.StyleSuite.time_parse_ansi": [[1.1642484415812025e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928792979, 0.44304, [1.1595e-07], [1.1701e-07], [1.1626e-07], [1.1688e-07], [96473], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1618160435974029e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928793196, 0.42542, [1.1589e-07], [1.1639e-07], [1.1607e-07], [1.1631e-07], [87575], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1601246714630609e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928793408, 0.43079, [1.1548e-07], [1.1651e-07], [1.1576e-07], [1.1625e-07], [96052], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928788146, 0.064197], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928788210, 0.061157], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928788271, 0.060177], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002149124999414198], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928793624, 0.44144, [0.0021426], [0.0021548], [0.0021465], [0.0021511], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014850386443348335], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928793847, 0.43148, [0.0014663], [0.0015021], [0.0014691], [0.0015009], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006758190311302315], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928794067, 0.43666, [0.00067329], [0.00067763], [0.00067488], [0.00067693], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005571765259925374], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928794287, 0.4416, [0.0005541], [0.00056586], [0.00055588], [0.00056347], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8368723374646302e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928794506, 0.44804, [2.8251e-05], [2.8635e-05], [2.8266e-05], [2.8468e-05], [385], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018895545684339093], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928794731, 0.43705, [0.00018618], [0.00019059], [0.00018704], [0.00019034], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.2167335354075975e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928794953, 0.43757, [4.196e-05], [4.2288e-05], [4.2114e-05], [4.2238e-05], [249], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003304905802642386], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928795171, 0.42855, [0.00032949], [0.00033101], [0.00033005], [0.00033082], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928790076, 0.059104], "benchmarks.TextSuite.time_render": [[4.6839064024984716e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928795384, 0.43598, [4.6644e-06], [4.7044e-06], [4.6657e-06], [4.6875e-06], [2313], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.61083985910227e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928795606, 0.44712, [8.496e-05], [8.687e-05], [8.5796e-05], [8.6759e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.3972478264562766e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928795832, 0.42753, [3.363e-05], [3.4464e-05], [3.3653e-05], [3.4306e-05], [299], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002844459459821165], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928796043, 0.43604, [0.00028389], [0.00028542], [0.00028433], [0.0002849], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011586804984189156], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928796260, 0.43906, [0.0011456], [0.0011665], [0.0011465], [0.001166], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001550122002039903], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928796480, 0.44303, [0.0015462], [0.001553], [0.0015496], [0.001552], [7], [10]]}, "durations": {"<build>": 1.9766087532043457}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/e34eadb3-virtualenv-py3.10.json
================================================
{"commit_hash": "e34eadb3a9354c2469fa2112400ce2690f2663ba", "env_name": "virtualenv-py3.10", "date": 1617443480000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.696712790099806e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928144840, 0.45463, [1.6843e-07], [1.7049e-07], [1.6953e-07], [1.6998e-07], [64103], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7027267398097965e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928145066, 0.45781, [1.6987e-07], [1.7109e-07], [1.6993e-07], [1.706e-07], [64678], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7049283188862985e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928145295, 0.44791, [1.6919e-07], [1.708e-07], [1.6948e-07], [1.7059e-07], [64452], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.705121943921845e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928145524, 0.45681, [1.6982e-07], [1.7131e-07], [1.7027e-07], [1.7101e-07], [64496], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.702775916823948e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928145754, 0.45544, [1.6886e-07], [1.7083e-07], [1.7001e-07], [1.7047e-07], [64186], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6998984571588156e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928145981, 0.45874, [1.6864e-07], [1.7059e-07], [1.6966e-07], [1.7014e-07], [64553], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001011210400611162], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928146210, 0.43803, [0.001009], [0.0010129], [0.0010103], [0.0010116], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014061588135518832], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928146428, 0.44757, [0.0014009], [0.0014131], [0.0014045], [0.0014091], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014056692507438129], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928146651, 0.44633, [0.0014033], [0.0014173], [0.0014049], [0.0014074], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1435738375325794e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928146873, 0.4552, [1.1406e-07], [1.1462e-07], [1.142e-07], [1.1449e-07], [96076], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1418502917649992e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928147101, 0.4558, [1.1393e-07], [1.1441e-07], [1.1408e-07], [1.1423e-07], [95693], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1394088208804275e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928147330, 0.45397, [1.1368e-07], [1.1425e-07], [1.1384e-07], [1.1411e-07], [95986], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928141354, 0.062237], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928141416, 0.061926], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928141478, 0.061969], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002072625001892448], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928147558, 0.43503, [0.0020589], [0.0020926], [0.0020642], [0.0020782], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012561796866066288], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928147779, 0.43518, [0.0012465], [0.0012609], [0.0012487], [0.0012601], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006597473739020643], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928147995, 0.43776, [0.00065713], [0.00066447], [0.00065827], [0.00066178], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005476217101156515], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928148216, 0.43322, [0.00054434], [0.00055494], [0.0005472], [0.00054804], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.5546180958848535e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928148434, 0.44931, [2.5203e-05], [2.5867e-05], [2.5285e-05], [2.5816e-05], [420], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018499138793137308], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928148656, 0.44848, [0.00018347], [0.00018566], [0.00018476], [0.00018512], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.3639797973921715e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928148881, 0.44002, [4.3581e-05], [4.3722e-05], [4.3606e-05], [4.3684e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003260978635146537], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928149104, 0.45085, [0.00032518], [0.00032767], [0.00032528], [0.00032741], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.000359940362174931], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928149329, 0.44151, [0.00035865], [0.00036075], [0.00035891], [0.00036044], [29], [10]], "benchmarks.TextSuite.time_render": [[4.6775250730475595e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928149549, 0.44493, [4.6489e-06], [4.7241e-06], [4.65e-06], [4.7058e-06], [2333], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.522135544808407e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928149775, 0.45028, [8.4664e-05], [8.5461e-05], [8.501e-05], [8.5415e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5257034106542926e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928150002, 0.44363, [3.518e-05], [3.5338e-05], [3.5206e-05], [3.5272e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002739347630842148], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928150228, 0.43988, [0.00027353], [0.0002753], [0.0002737], [0.00027438], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010990895490976982], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928150448, 0.44813, [0.001093], [0.0011074], [0.0010948], [0.0011054], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014903362836256357], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928150676, 0.4363, [0.0014875], [0.0014996], [0.0014885], [0.0014932], [7], [10]]}, "durations": {"<build>": 1.9847049713134766}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/e5246436-virtualenv-py3.10.json
================================================
{"commit_hash": "e5246436cd75de32f3436cc88d6e4fdebe13bd8d", "env_name": "virtualenv-py3.10", "date": 1624045427000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7121876383992076e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928375942, 0.45699, [1.6972e-07], [1.7385e-07], [1.7045e-07], [1.7316e-07], [64549], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7140758442246742e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928376173, 0.45585, [1.6994e-07], [1.7409e-07], [1.7087e-07], [1.7208e-07], [63604], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7555230280790102e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928376400, 0.45414, [1.7091e-07], [1.7958e-07], [1.7178e-07], [1.7913e-07], [64050], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7444178637067224e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928376625, 0.44307, [1.6957e-07], [1.7989e-07], [1.7037e-07], [1.7971e-07], [57684], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7027203980746368e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928376846, 0.43123, [1.692e-07], [1.7118e-07], [1.7021e-07], [1.7061e-07], [59142], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7416664249620003e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928377060, 0.44769, [1.7065e-07], [1.7953e-07], [1.7095e-07], [1.7918e-07], [61578], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010265853998134844], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928377284, 0.44568, [0.0010241], [0.0010299], [0.0010264], [0.0010274], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014202526235749247], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928377506, 0.45577, [0.0014176], [0.001425], [0.0014186], [0.0014223], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0012978619397472357], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928377732, 0.44848, [0.0012918], [0.0013056], [0.0012969], [0.0012993], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1537922092642804e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928377956, 0.45884, [1.1374e-07], [1.1682e-07], [1.141e-07], [1.1658e-07], [95596], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1562117250055742e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928378185, 0.45754, [1.1431e-07], [1.1604e-07], [1.1445e-07], [1.1595e-07], [94939], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1666161339593778e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928378414, 0.44748, [1.1392e-07], [1.1803e-07], [1.1428e-07], [1.177e-07], [96409], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928372422, 0.063342], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928372485, 0.063096], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928372549, 0.062772], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021321667009033263], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928378638, 0.44575, [0.0021211], [0.0021441], [0.0021242], [0.0021377], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0012759244382323232], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928378864, 0.44247, [0.0012695], [0.001283], [0.0012729], [0.0012805], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037540624959677056], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928379084, 0.4371, [0.00037151], [0.00038821], [0.00037181], [0.00038666], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034207595144248297], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928379304, 0.44882, [0.00034136], [0.00035348], [0.00034155], [0.0003426], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.536586947665313e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928379528, 0.45538, [2.5203e-05], [2.5458e-05], [2.5243e-05], [2.5434e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001846677410428348], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928379755, 0.44978, [0.00018411], [0.00018508], [0.00018436], [0.00018488], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.364762043019719e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928379980, 0.44107, [4.3402e-05], [4.3756e-05], [4.3483e-05], [4.3667e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032506787101738155], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928380204, 0.43222, [0.00032414], [0.00032574], [0.00032463], [0.00032542], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003573304651393395], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928380419, 0.4409, [0.00035635], [0.00035834], [0.00035689], [0.00035791], [29], [10]], "benchmarks.TextSuite.time_render": [[4.691495508280876e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928380638, 0.44744, [4.6776e-06], [4.7016e-06], [4.6895e-06], [4.6965e-06], [2336], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.530924219485314e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928380866, 0.45274, [8.4673e-05], [8.5853e-05], [8.5133e-05], [8.567e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5445277587444117e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928381094, 0.44686, [3.5215e-05], [3.5504e-05], [3.5315e-05], [3.5482e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027470559220283146], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928381321, 0.44608, [0.00027409], [0.00027789], [0.00027428], [0.00027512], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0010961708016111516], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928381543, 0.45057, [0.0010949], [0.0011069], [0.0010956], [0.0010981], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001370231688269996], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928381771, 0.44155, [0.0013624], [0.0013824], [0.0013637], [0.0013763], [8], [10]]}, "durations": {"<build>": 1.9848251342773438}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/e7849495-virtualenv-py3.10.json
================================================
{"commit_hash": "e7849495bba31d9320e17c23f24d50f6e3447486", "env_name": "virtualenv-py3.10", "date": 1595520125000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7148217870415353e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928752792, 0.444, [1.6818e-07], [1.7513e-07], [1.7023e-07], [1.7386e-07], [64557], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.717760784730424e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928753009, 0.44202, [1.6824e-07], [1.7425e-07], [1.6944e-07], [1.7385e-07], [64440], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7394742863716818e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928753226, 0.42645, [1.7242e-07], [1.7453e-07], [1.7311e-07], [1.7422e-07], [58682], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.738570892575407e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928753437, 0.42594, [1.7302e-07], [1.7498e-07], [1.7372e-07], [1.7442e-07], [58498], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7395242587634876e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928753649, 0.42775, [1.7351e-07], [1.7469e-07], [1.7381e-07], [1.7399e-07], [58456], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7219868784628356e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928753860, 0.43147, [1.7117e-07], [1.7401e-07], [1.7132e-07], [1.7295e-07], [58602], [10]], "benchmarks.PrettySuite.time_pretty": [[0.002241970898467116], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928754071, 0.44207, [0.0022266], [0.0022534], [0.0022288], [0.0022469], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928748754, 0.058708], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928748813, 0.058418], "benchmarks.StyleSuite.time_parse_ansi": [[1.1589902303258713e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928754290, 0.42601, [1.1557e-07], [1.1612e-07], [1.158e-07], [1.1592e-07], [87921], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1435150056040357e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928754503, 0.44939, [1.1368e-07], [1.1473e-07], [1.1404e-07], [1.1441e-07], [96199], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.151733038312782e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928754728, 0.44075, [1.1392e-07], [1.1708e-07], [1.1418e-07], [1.163e-07], [96703], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928749526, 0.058835], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928749585, 0.058365], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928749643, 0.058179], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002147645902005024], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928754953, 0.44036, [0.0021381], [0.0021603], [0.0021456], [0.0021526], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001480997001635842], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928755177, 0.4327, [0.0014611], [0.0014968], [0.0014654], [0.0014952], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.00067317184402782], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928755396, 0.43643, [0.00067152], [0.00067656], [0.00067246], [0.00067436], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005569835522788038], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928755618, 0.4352, [0.00054821], [0.00055829], [0.00055497], [0.00055743], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.814016095545455e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928755840, 0.44388, [2.7886e-05], [2.8309e-05], [2.7949e-05], [2.8281e-05], [382], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00019082979256296003], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928756060, 0.42581, [0.00018821], [0.00019268], [0.00018988], [0.00019128], [53], [10]], "benchmarks.TextSuite.time_fit": [[4.294921291513316e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928756273, 0.43253, [4.2466e-05], [4.3271e-05], [4.2744e-05], [4.2999e-05], [249], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003302567258229359], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928756493, 0.43148, [0.00032924], [0.00033487], [0.00032959], [0.0003326], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928751425, 0.059965], "benchmarks.TextSuite.time_render": [[4.696148469404577e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928756710, 0.44171, [4.6716e-06], [4.7853e-06], [4.6868e-06], [4.7318e-06], [2327], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.574868889257869e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928756935, 0.44548, [8.4753e-05], [8.8755e-05], [8.5435e-05], [8.6309e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.4033222558314095e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928757160, 0.43487, [3.3872e-05], [3.4551e-05], [3.3902e-05], [3.4423e-05], [301], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002822291756495582], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928757375, 0.43743, [0.00027952], [0.00028869], [0.00027998], [0.00028449], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011652338337929298], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928757595, 0.43324, [0.0011616], [0.0011693], [0.001163], [0.001167], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015330178555034634], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928757816, 0.44158, [0.0015247], [0.001553], [0.0015261], [0.0015458], [7], [10]]}, "durations": {"<build>": 1.9744257926940918}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/e78acae6-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "e78acae68be50421120ae0056d36675380182c7c", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645957708000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7363258867386963e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825972075, 0.47012, [1.7267e-07], [1.7433e-07], [1.7316e-07], [1.7415e-07], [64014], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.741647858091466e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825972310, 0.44047, [1.7307e-07], [1.7511e-07], [1.7376e-07], [1.7468e-07], [58548], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.744704331180001e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825972530, 0.4573, [1.7319e-07], [1.7529e-07], [1.7404e-07], [1.7492e-07], [63842], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.747935078257781e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825972763, 0.44053, [1.7316e-07], [1.7795e-07], [1.7429e-07], [1.7509e-07], [58479], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7412647324049923e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825972981, 0.45624, [1.73e-07], [1.7941e-07], [1.7364e-07], [1.7443e-07], [63951], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7143945724213971e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825973214, 0.44686, [1.7004e-07], [1.7701e-07], [1.7091e-07], [1.734e-07], [64336], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011251967193351851], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825973438, 0.44974, [0.0011199], [0.0011489], [0.0011231], [0.0011377], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015855417087940232], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825973662, 0.45565, [0.0015639], [0.001608], [0.0015697], [0.0015982], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001422862012987025], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825973888, 0.4733, [0.0014106], [0.0015508], [0.0014154], [0.0014377], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1644362947431554e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825974117, 0.47017, [1.1597e-07], [1.21e-07], [1.1622e-07], [1.195e-07], [95443], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1497561575724497e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825974350, 0.44281, [1.1471e-07], [1.17e-07], [1.1491e-07], [1.1568e-07], [87495], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1597968798681223e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825974569, 0.44705, [1.1442e-07], [1.1711e-07], [1.1492e-07], [1.1699e-07], [95509], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008481155964545906], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825974792, 0.51989, [0.0084026], [0.008773], [0.0084642], [0.0085548], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008773635723628104], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825975052, 0.52762, [0.0084462], [0.0090924], [0.0085189], [0.0088066], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008438656223006546], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825975318, 0.51436, [0.0083798], [0.0084986], [0.0084219], [0.0084646], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018714027440485854], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825975575, 0.44862, [0.0018548], [0.001886], [0.0018681], [0.0018762], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011604814531488551], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825975801, 0.44709, [0.0011485], [0.0012062], [0.0011539], [0.0011648], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037753868049808916], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825976026, 0.45798, [0.00037349], [0.00039139], [0.00037496], [0.00038169], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003483138355096021], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825976257, 0.4624, [0.00034242], [0.00035684], [0.00034806], [0.00034897], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5865139814943654e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825976487, 0.45514, [2.5428e-05], [2.6795e-05], [2.5463e-05], [2.6478e-05], [412], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018696667287837373], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825976709, 0.45229, [0.00018589], [0.00019162], [0.00018637], [0.00018763], [55], [10]], "benchmarks.TextSuite.time_fit": [[4.3705729088590786e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825976935, 0.45841, [4.3465e-05], [4.4012e-05], [4.3542e-05], [4.3745e-05], [240], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033663447141986], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825977163, 0.46251, [0.00033415], [0.00035117], [0.00033601], [0.00034385], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036287128542816], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825977397, 0.44464, [0.00035967], [0.00036468], [0.00036086], [0.00036416], [28], [10]], "benchmarks.TextSuite.time_render": [[4.680021991933379e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825977617, 0.45636, [4.6699e-06], [4.7219e-06], [4.6738e-06], [4.6953e-06], [2343], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.574709368747521e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825977848, 0.44938, [8.5027e-05], [8.758e-05], [8.5575e-05], [8.7115e-05], [122], [10]], "benchmarks.TextSuite.time_split": [[3.5908578674456005e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825978072, 0.46405, [3.5156e-05], [3.6113e-05], [3.5838e-05], [3.6e-05], [304], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028082345747143815], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825978302, 0.45495, [0.00027826], [0.00028169], [0.000279], [0.00028139], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013627265725517645], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825978528, 0.45698, [0.0013595], [0.0013806], [0.0013611], [0.0013653], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014850773649024113], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825978760, 0.44927, [0.0014618], [0.0015032], [0.0014692], [0.0014864], [7], [10]]}, "durations": {"<build>": 1.827558994293213}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/e7de32a0-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "e7de32a0e50026695166b2b397114117ec549cd0", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1644751883000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7185123923091753e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826193064, 0.46748, [1.7048e-07], [1.76e-07], [1.7069e-07], [1.7387e-07], [64032], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.709838077572176e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826193297, 0.45598, [1.6913e-07], [1.724e-07], [1.7088e-07], [1.7131e-07], [62165], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7057459438580536e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826193525, 0.45012, [1.6995e-07], [1.7127e-07], [1.7023e-07], [1.7087e-07], [61035], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7051944080549398e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826193749, 0.46552, [1.6969e-07], [1.7355e-07], [1.7016e-07], [1.7087e-07], [63450], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7241351596563782e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826193983, 0.46911, [1.7011e-07], [1.7504e-07], [1.7129e-07], [1.7371e-07], [64394], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.701374370215279e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826194219, 0.46274, [1.6908e-07], [1.7066e-07], [1.6967e-07], [1.7027e-07], [64611], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001119849543708066], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826194452, 0.4511, [0.0011151], [0.0011431], [0.001118], [0.0011241], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015606994441311275], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826194676, 0.45458, [0.0015518], [0.0016301], [0.0015561], [0.0015625], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014089244359638542], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826194902, 0.45439, [0.001406], [0.0014227], [0.0014065], [0.0014113], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1447406983391602e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826195130, 0.46356, [1.1425e-07], [1.1508e-07], [1.143e-07], [1.1472e-07], [95433], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1540865045440861e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826195361, 0.46928, [1.1418e-07], [1.1925e-07], [1.1471e-07], [1.1623e-07], [92868], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1504533999158573e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826195593, 0.47242, [1.144e-07], [1.1873e-07], [1.1459e-07], [1.1708e-07], [96251], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008572812483180314], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826195831, 0.52398, [0.0084859], [0.008655], [0.0085366], [0.0086116], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008459708245936781], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826196096, 0.51566, [0.008391], [0.0085603], [0.0084253], [0.008523], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008607895753812045], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826196354, 0.5231, [0.0084432], [0.0089287], [0.0084766], [0.0086836], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001895854171986381], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826196619, 0.46768, [0.0018618], [0.0019572], [0.0018665], [0.0019224], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011787801049649715], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826196854, 0.45393, [0.0011648], [0.001211], [0.0011719], [0.0011925], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.0003773169633599796], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826197083, 0.45691, [0.00037406], [0.00038057], [0.00037431], [0.00037908], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034931320536496307], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826197310, 0.45004, [0.00034221], [0.00035669], [0.00034355], [0.00035163], [29], [10]], "benchmarks.TextSuite.time_divide": [[2.5467580931176718e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826197527, 0.45347, [2.5328e-05], [2.5785e-05], [2.5423e-05], [2.5652e-05], [419], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018533477599828922], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826197754, 0.45921, [0.00018443], [0.00018981], [0.00018485], [0.00018657], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.387100426746266e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826197982, 0.45234, [4.366e-05], [4.554e-05], [4.3736e-05], [4.4742e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003283615637150022], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826198211, 0.44798, [0.00032558], [0.00033421], [0.00032614], [0.0003292], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035953869727174085], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826198435, 0.44087, [0.00035579], [0.00036498], [0.00035706], [0.00036162], [28], [10]], "benchmarks.TextSuite.time_render": [[4.675471154221767e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826198654, 0.45631, [4.6681e-06], [4.7082e-06], [4.6727e-06], [4.6966e-06], [2326], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.678100324844515e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826198885, 0.46439, [8.5666e-05], [9.0122e-05], [8.5946e-05], [8.7455e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.601770264767238e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826199117, 0.46128, [3.5347e-05], [3.7549e-05], [3.5399e-05], [3.7038e-05], [293], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027734759312711264], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826199341, 0.46108, [0.0002766], [0.00028748], [0.00027685], [0.00028103], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013806328061036766], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826199567, 0.46461, [0.0013691], [0.0014316], [0.0013719], [0.001405], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001479505927168897], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826199803, 0.44569, [0.0014616], [0.001557], [0.0014737], [0.0014904], [7], [10]]}, "durations": {"<build>": 1.8083617687225342}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/e9e72000-virtualenv-py3.10.json
================================================
{"commit_hash": "e9e72000c50f56654c89e119ff882e322e51ecf3", "env_name": "virtualenv-py3.10", "date": 1594757621000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7304169585631847e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928714152, 0.42423, [1.7196e-07], [1.7392e-07], [1.7257e-07], [1.7341e-07], [58699], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7125368267902652e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928714363, 0.43145, [1.6882e-07], [1.735e-07], [1.6998e-07], [1.7302e-07], [58721], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7101817868163705e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928714581, 0.43901, [1.6945e-07], [1.7245e-07], [1.705e-07], [1.7123e-07], [64829], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.732246945458925e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928714805, 0.42978, [1.7229e-07], [1.7422e-07], [1.7291e-07], [1.7373e-07], [57992], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.717644183078106e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928715023, 0.44824, [1.698e-07], [1.7285e-07], [1.7041e-07], [1.7259e-07], [64432], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.721922586441147e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928715249, 0.42244, [1.6925e-07], [1.7376e-07], [1.7043e-07], [1.7344e-07], [59100], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0021911416988587007], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928715461, 0.43276, [0.0021847], [0.0022], [0.002187], [0.0021966], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928710109, 0.058049], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928710168, 0.057828], "benchmarks.StyleSuite.time_parse_ansi": [[1.1611352647949346e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928715675, 0.44343, [1.1562e-07], [1.1813e-07], [1.1588e-07], [1.1706e-07], [93956], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1625654809648257e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928715895, 0.4449, [1.1588e-07], [1.1765e-07], [1.1622e-07], [1.1633e-07], [94647], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1621984081693307e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928716118, 0.4218, [1.1599e-07], [1.1699e-07], [1.1606e-07], [1.1641e-07], [87693], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928710884, 0.057714], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928710941, 0.057198], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928710999, 0.057344], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0021389750036178157], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928716328, 0.43712, [0.0021263], [0.002152], [0.0021338], [0.0021426], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001480624998553789], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928716549, 0.42858, [0.0014654], [0.0015014], [0.0014703], [0.0014919], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006738208331322918], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928716766, 0.4257, [0.00067146], [0.00067512], [0.00067242], [0.00067498], [15], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005575383938297531], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928716976, 0.43998, [0.0005558], [0.00056747], [0.00055683], [0.00055774], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8062498696319954e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928717195, 0.43825, [2.7727e-05], [2.8481e-05], [2.7746e-05], [2.8329e-05], [380], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018722989459587423], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928717415, 0.43764, [0.00018621], [0.00018781], [0.000187], [0.00018742], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.257493278079781e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928717633, 0.44288, [4.193e-05], [4.3198e-05], [4.204e-05], [4.3016e-05], [253], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033001745149733555], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928717855, 0.42619, [0.00032897], [0.00033136], [0.00032948], [0.00033029], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928712796, 0.057893], "benchmarks.TextSuite.time_render": [[4.699889219279239e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928718067, 0.43703, [4.6654e-06], [4.7379e-06], [4.6769e-06], [4.7221e-06], [2329], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.690103879479435e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928718289, 0.42866, [8.6244e-05], [8.7206e-05], [8.6697e-05], [8.7149e-05], [116], [10]], "benchmarks.TextSuite.time_split": [[3.437333175381168e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928718509, 0.44056, [3.4274e-05], [3.4489e-05], [3.4332e-05], [3.4457e-05], [312], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028171171623005256], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928718728, 0.43094, [0.00027874], [0.00028472], [0.00027907], [0.00028437], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011581967232309075], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928718944, 0.43562, [0.0011551], [0.0011627], [0.0011563], [0.0011595], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015381249998297009], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928719160, 0.43655, [0.0015173], [0.0015526], [0.0015184], [0.0015516], [7], [10]]}, "durations": {"<build>": 1.946124792098999}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/ea049ffc-virtualenv-py3.10.json
================================================
{"commit_hash": "ea049ffc148998ad3190faaf66992c9704e7d36a", "env_name": "virtualenv-py3.10", "date": 1609342393000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7059619594426984e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929189851, 0.45742, [1.6965e-07], [1.7127e-07], [1.7041e-07], [1.7097e-07], [64379], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7037798300825593e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929190079, 0.43113, [1.688e-07], [1.7134e-07], [1.6943e-07], [1.7059e-07], [59250], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.708548590689205e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929190293, 0.43051, [1.6998e-07], [1.7131e-07], [1.7059e-07], [1.7108e-07], [58836], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7071138782911116e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929190506, 0.45583, [1.6986e-07], [1.7116e-07], [1.7035e-07], [1.7092e-07], [64235], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7050682667895332e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929190734, 0.45732, [1.6947e-07], [1.7732e-07], [1.6992e-07], [1.7091e-07], [64163], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7009128098477326e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929190961, 0.43117, [1.6962e-07], [1.7049e-07], [1.6989e-07], [1.7027e-07], [59295], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001028991698694881], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929191175, 0.44413, [0.0010263], [0.0010344], [0.0010272], [0.0010305], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014355952132193905], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929191396, 0.43674, [0.0014324], [0.0014414], [0.001434], [0.0014389], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014122656248218846], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929191613, 0.4448, [0.0014101], [0.0014149], [0.0014113], [0.0014134], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1422091261864285e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929191838, 0.45627, [1.1399e-07], [1.146e-07], [1.1416e-07], [1.1437e-07], [95884], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1400060083075363e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929192066, 0.45621, [1.1367e-07], [1.1424e-07], [1.1381e-07], [1.1403e-07], [95706], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1452134145600497e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929192295, 0.45558, [1.1416e-07], [1.1504e-07], [1.1431e-07], [1.1468e-07], [95448], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929186329, 0.062459], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929186391, 0.062113], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929186453, 0.06242], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0032206458745349664], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929192524, 0.46723, [0.003216], [0.0032354], [0.0032187], [0.0032301], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0021276916988426818], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929192758, 0.44464, [0.0021175], [0.0021386], [0.0021259], [0.0021292], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006589817812709953], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929192984, 0.4381, [0.00065813], [0.0006609], [0.00065854], [0.00065946], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005480756578770908], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929193206, 0.44425, [0.00054296], [0.00055451], [0.00054674], [0.00055224], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.8107492053482504e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929193426, 0.44575, [2.7782e-05], [2.8388e-05], [2.7822e-05], [2.8382e-05], [376], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018721856988696873], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929193647, 0.44671, [0.00018603], [0.00018742], [0.00018675], [0.00018735], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2081507958520006e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929193869, 0.44626, [4.1961e-05], [4.2181e-05], [4.2054e-05], [4.2108e-05], [251], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003292923220508401], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929194092, 0.4345, [0.00032839], [0.00033001], [0.00032915], [0.0003295], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003938862114759664], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929194307, 0.43585, [0.00039303], [0.00039502], [0.00039349], [0.00039444], [26], [10]], "benchmarks.TextSuite.time_render": [[4.67366803080411e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929194524, 0.44448, [4.6629e-06], [4.6981e-06], [4.6695e-06], [4.6824e-06], [2324], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.52147363837603e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929194750, 0.44851, [8.4509e-05], [8.5671e-05], [8.4673e-05], [8.5466e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.3982782978399795e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929194976, 0.44814, [3.3718e-05], [3.4366e-05], [3.3793e-05], [3.4176e-05], [311], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028071735121901274], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929195201, 0.43931, [0.00027824], [0.0002819], [0.00027954], [0.00028166], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011520439438754693], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929195420, 0.44244, [0.0011413], [0.0011579], [0.0011428], [0.0011558], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015352291416742706], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929195640, 0.44684, [0.0015279], [0.0015493], [0.0015285], [0.001543], [7], [10]]}, "durations": {"<build>": 1.9785568714141846}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/ea2ed337-virtualenv-py3.10.json
================================================
{"commit_hash": "ea2ed337f20cc629a1754cf9bd5add1cce963aa6", "env_name": "virtualenv-py3.10", "date": 1614508821000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.699270445001639e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929075471, 0.45734, [1.6926e-07], [1.7112e-07], [1.6963e-07], [1.7036e-07], [64416], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.699839773562212e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929075698, 0.43261, [1.6948e-07], [1.7058e-07], [1.698e-07], [1.703e-07], [59354], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7042278704198481e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929075913, 0.443, [1.6889e-07], [1.8068e-07], [1.6978e-07], [1.7055e-07], [58643], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.705763073721423e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929076138, 0.45874, [1.7019e-07], [1.7101e-07], [1.7042e-07], [1.7085e-07], [64568], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.702604839791603e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929076368, 0.45921, [1.7003e-07], [1.7078e-07], [1.7014e-07], [1.7058e-07], [64480], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7072115838546423e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929076598, 0.46008, [1.6907e-07], [1.7113e-07], [1.6997e-07], [1.7103e-07], [64594], [10]], "benchmarks.PrettySuite.time_pretty": [[0.000998844680990177], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929076828, 0.44798, [0.00099627], [0.0010007], [0.00099794], [0.0010004], [11], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014016875647939742], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929077049, 0.4507, [0.0013957], [0.0014115], [0.0013986], [0.0014056], [8], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014096432496444322], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929077275, 0.46141, [0.0013854], [0.0015002], [0.0013882], [0.0014767], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1421153209424056e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929077515, 0.45656, [1.1403e-07], [1.1434e-07], [1.1418e-07], [1.1429e-07], [95482], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1433014258269549e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929077745, 0.45743, [1.1383e-07], [1.1521e-07], [1.141e-07], [1.1513e-07], [95901], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1435027755203576e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929077975, 0.45838, [1.1408e-07], [1.1583e-07], [1.1425e-07], [1.1451e-07], [96188], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929071941, 0.06308], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929072005, 0.062548], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929072067, 0.062575], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002230391599005088], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929078204, 0.44757, [0.0022172], [0.0022376], [0.0022198], [0.0022335], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0013334635004866868], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929078424, 0.44529, [0.0013239], [0.0013418], [0.0013251], [0.0013393], [8], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006635794061367051], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929078652, 0.44234, [0.0006602], [0.0006677], [0.00066226], [0.00066413], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005476820002322232], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929078875, 0.4454, [0.00054475], [0.00055686], [0.00054718], [0.000549], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.5383448699057223e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929079097, 0.4544, [2.5288e-05], [2.5499e-05], [2.5327e-05], [2.5436e-05], [429], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018485990535580264], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929079324, 0.45031, [0.00018401], [0.0001883], [0.00018456], [0.00018533], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.356627158749726e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929079550, 0.44868, [4.3497e-05], [4.3774e-05], [4.3551e-05], [4.3639e-05], [243], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032465213646928805], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929079773, 0.45029, [0.0003232], [0.00032532], [0.000324], [0.00032501], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003899706848810807], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929079997, 0.45063, [0.00038814], [0.00039324], [0.0003887], [0.00039139], [27], [10]], "benchmarks.TextSuite.time_render": [[4.688892462637974e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929080225, 0.44956, [4.6587e-06], [4.7619e-06], [4.6832e-06], [4.6925e-06], [2334], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.54899062687764e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929080454, 0.45461, [8.5025e-05], [8.625e-05], [8.5269e-05], [8.5618e-05], [128], [10]], "benchmarks.TextSuite.time_split": [[3.5189732112815946e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929080683, 0.44465, [3.5029e-05], [3.5386e-05], [3.5073e-05], [3.5325e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002749506709637659], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929080911, 0.44276, [0.00027375], [0.00027818], [0.00027477], [0.00027516], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011060354008805007], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929081133, 0.44245, [0.001102], [0.0011275], [0.0011046], [0.0011078], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.001495095215172374], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929081354, 0.44021, [0.0014861], [0.0015397], [0.0014886], [0.0015306], [7], [10]]}, "durations": {"<build>": 2.011971950531006}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/eab3fe8e-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "eab3fe8efc7db295aa38f17338567c36ed449d19", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1651592233000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7065140446297738e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655825625675, 0.46013, [1.6963e-07], [1.7103e-07], [1.7026e-07], [1.7074e-07], [62112], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.71197086377103e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655825625906, 0.46213, [1.6972e-07], [1.7344e-07], [1.6998e-07], [1.7278e-07], [63630], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.711348579112423e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655825626138, 0.45703, [1.7032e-07], [1.7324e-07], [1.7091e-07], [1.7137e-07], [64078], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.716997868241717e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655825626371, 0.44521, [1.7053e-07], [1.7679e-07], [1.7133e-07], [1.728e-07], [58976], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.712575936345276e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655825626595, 0.46589, [1.6984e-07], [1.741e-07], [1.7033e-07], [1.7237e-07], [63926], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7250874353254657e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655825626828, 0.46949, [1.7011e-07], [1.8787e-07], [1.7164e-07], [1.7881e-07], [64054], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001064097904600203], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655825627061, 0.45979, [0.0010612], [0.0011158], [0.0010627], [0.0010689], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001484928569490356], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655825627293, 0.45302, [0.0014758], [0.0015014], [0.0014838], [0.0014907], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0011632130093251667], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655825627521, 0.4534, [0.0011595], [0.0011879], [0.0011618], [0.0011674], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1461161948494414e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655825627750, 0.46684, [1.1383e-07], [1.1691e-07], [1.1433e-07], [1.1559e-07], [95014], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1507638953753155e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655825627984, 0.4721, [1.1439e-07], [1.1756e-07], [1.1487e-07], [1.1599e-07], [96212], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1465936772956465e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655825628220, 0.46424, [1.1448e-07], [1.1511e-07], [1.1457e-07], [1.149e-07], [95354], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007610926986671984], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655825628453, 0.51454, [0.0075586], [0.007667], [0.0075701], [0.0076274], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.007625645725056529], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655825628711, 0.51737, [0.0075897], [0.0079692], [0.007601], [0.0077761], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.007640395953785628], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655825628968, 0.50688, [0.0075896], [0.0078256], [0.0076238], [0.0076685], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.001743756913735221], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655825629227, 0.44997, [0.0017358], [0.0017568], [0.0017411], [0.0017461], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.001079654146451503], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655825629453, 0.44795, [0.0010758], [0.0011057], [0.0010782], [0.0010801], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037617784359359315], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655825629676, 0.45788, [0.00037318], [0.00038052], [0.00037347], [0.00037893], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.000345246626004096], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655825629904, 0.46044, [0.00034103], [0.00035647], [0.00034307], [0.00035342], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5540359986379094e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655825630130, 0.46004, [2.5426e-05], [2.6199e-05], [2.5455e-05], [2.5667e-05], [414], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018564475788574282], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655825630358, 0.46054, [0.00018416], [0.00019415], [0.00018519], [0.00018618], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.389625926483042e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655825630588, 0.45547, [4.3619e-05], [4.5906e-05], [4.3837e-05], [4.4286e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003293071265122102], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655825630820, 0.44674, [0.00032618], [0.00033058], [0.00032772], [0.00033003], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036630748594500897], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655825631043, 0.46089, [0.00035731], [0.00039261], [0.00035884], [0.00038861], [29], [10]], "benchmarks.TextSuite.time_render": [[4.714848137623871e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655825631275, 0.45865, [4.6829e-06], [4.7804e-06], [4.6931e-06], [4.7444e-06], [2328], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.583973220542191e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655825631510, 0.45924, [8.5441e-05], [8.6169e-05], [8.5752e-05], [8.593e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.5477504737526676e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655825631741, 0.46016, [3.5289e-05], [3.556e-05], [3.5347e-05], [3.5518e-05], [301], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027704987932290683], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655825631972, 0.45726, [0.00027495], [0.00028388], [0.0002755], [0.00027962], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011442062444984914], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655825632201, 0.45661, [0.0011034], [0.001248], [0.001121], [0.0012144], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013587369321612641], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655825632425, 0.46174, [0.0013502], [0.001387], [0.0013546], [0.001364], [8], [10]]}, "durations": {"<build>": 1.8595318794250488}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/ecf3d7f1-virtualenv-py3.10.json
================================================
{"commit_hash": "ecf3d7f1ca2b2a5ea9c36ce2b23ae576e0421b6c", "env_name": "virtualenv-py3.10", "date": 1610210649000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7077999653168063e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646929232564, 0.458, [1.7012e-07], [1.7158e-07], [1.7068e-07], [1.7101e-07], [64374], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.6982937646676327e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646929232792, 0.45662, [1.6942e-07], [1.7084e-07], [1.6969e-07], [1.7026e-07], [64528], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7052654030470147e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646929233021, 0.44838, [1.6924e-07], [1.7441e-07], [1.7033e-07], [1.7123e-07], [64769], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7015041488254633e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646929233250, 0.43117, [1.6926e-07], [1.7139e-07], [1.7011e-07], [1.7062e-07], [59060], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.697587509480688e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646929233463, 0.4559, [1.6815e-07], [1.7107e-07], [1.6936e-07], [1.7015e-07], [64506], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.6991487564124173e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646929233690, 0.45553, [1.6835e-07], [1.7012e-07], [1.6961e-07], [1.7007e-07], [64388], [10]], "benchmarks.PrettySuite.time_pretty": [[0.001027235398942139], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646929233918, 0.44392, [0.0010237], [0.0010528], [0.0010245], [0.0010322], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014370237851315843], [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646929234140, 0.43944, [0.0014294], [0.001443], [0.0014335], [0.0014399], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001413072935974924], [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646929234361, 0.44625, [0.0014102], [0.0014161], [0.0014126], [0.0014138], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1426199489369653e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646929234584, 0.45567, [1.1395e-07], [1.1463e-07], [1.1411e-07], [1.1435e-07], [96082], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1404432550273319e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646929234812, 0.45332, [1.1366e-07], [1.1486e-07], [1.1374e-07], [1.1425e-07], [95430], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1468818071279227e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646929235039, 0.45144, [1.1433e-07], [1.1506e-07], [1.1449e-07], [1.1491e-07], [94481], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646929229043, 0.061706], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646929229105, 0.061324], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646929229166, 0.06131], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.00323098437365843], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646929235266, 0.47115, [0.0032173], [0.0032577], [0.0032226], [0.0032412], [4], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0021215916989604008], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646929235501, 0.44386, [0.0021095], [0.002137], [0.0021168], [0.002129], [5], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006635260624534567], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646929235728, 0.43906, [0.00066063], [0.0006681], [0.00066311], [0.00066378], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005477850783407982], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646929235950, 0.44418, [0.00054434], [0.00055449], [0.00054663], [0.00055233], [19], [10]], "benchmarks.TextSuite.time_divide": [[2.801200657574411e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646929236172, 0.44711, [2.7945e-05], [2.8138e-05], [2.7973e-05], [2.8079e-05], [380], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018690168457269145], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646929236395, 0.44602, [0.00018657], [0.00018746], [0.00018683], [0.00018709], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.236125003080815e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646929236619, 0.44515, [4.1896e-05], [4.2414e-05], [4.2156e-05], [4.2394e-05], [250], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003301585966255516], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646929236841, 0.4353, [0.0003288], [0.00033281], [0.00033], [0.00033109], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00039432613490274747], [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646929237057, 0.43632, [0.00039179], [0.00039679], [0.00039239], [0.00039479], [26], [10]], "benchmarks.TextSuite.time_render": [[4.6828673070957585e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646929237274, 0.44713, [4.661e-06], [4.7966e-06], [4.6677e-06], [4.7109e-06], [2325], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.527165350749884e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646929237500, 0.44899, [8.4478e-05], [8.581e-05], [8.4744e-05], [8.5611e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.387963712861341e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646929237727, 0.4434, [3.3643e-05], [3.4116e-05], [3.3667e-05], [3.4045e-05], [310], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027967287845771154], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646929237947, 0.43841, [0.00027815], [0.00028148], [0.00027903], [0.00028058], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011510138897897883], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646929238165, 0.44243, [0.0011488], [0.0011523], [0.0011499], [0.0011518], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015299910696090332], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646929238384, 0.44516, [0.001525], [0.0015332], [0.0015289], [0.0015324], [7], [10]]}, "durations": {"<build>": 1.9623157978057861}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/edcb6f9e-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "edcb6f9e1a4674b0cd45a854c25c5ac6704b2ddb", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1650986241000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.734467399696907e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655889215010, 0.46908, [1.7287e-07], [1.7399e-07], [1.7313e-07], [1.7374e-07], [63246], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.732597667963078e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655889215243, 0.4605, [1.7188e-07], [1.7383e-07], [1.73e-07], [1.7359e-07], [62300], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.742348781358932e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655889215472, 0.4581, [1.7344e-07], [1.7662e-07], [1.7378e-07], [1.75e-07], [64516], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7357755677191878e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655889215696, 0.4582, [1.6927e-07], [1.773e-07], [1.7181e-07], [1.7476e-07], [62691], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.739624924026804e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655889215924, 0.46708, [1.6825e-07], [1.7689e-07], [1.7326e-07], [1.7444e-07], [64666], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7067130745413344e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655889216157, 0.46578, [1.6947e-07], [1.7565e-07], [1.699e-07], [1.7143e-07], [63900], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0010582812479697167], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655889216391, 0.45712, [0.0010519], [0.0010638], [0.0010561], [0.0010598], [10], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0014903214261201875], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655889216619, 0.44818, [0.0014781], [0.0015218], [0.0014878], [0.0014934], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0011564328904367155], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655889216847, 0.44571, [0.0011525], [0.0011745], [0.0011543], [0.0011604], [9], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1562767915218322e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655889217074, 0.45885, [1.1365e-07], [1.1646e-07], [1.1453e-07], [1.1607e-07], [93629], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1549524686987618e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655889217305, 0.44701, [1.1427e-07], [1.1686e-07], [1.1451e-07], [1.1636e-07], [96226], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1638968718925628e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655889217527, 0.45619, [1.1516e-07], [1.1682e-07], [1.1632e-07], [1.1648e-07], [96367], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.007572396018076688], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655889217750, 0.51257, [0.0075057], [0.0077418], [0.0075258], [0.007655], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.0076805417775176466], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655889218006, 0.51613, [0.0075123], [0.0077366], [0.0075483], [0.0077113], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.0077095102751627564], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655889218265, 0.5036, [0.0075222], [0.0080245], [0.0075328], [0.0078839], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0017383472489503524], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655889218513, 0.45266, [0.0017271], [0.0017813], [0.0017313], [0.0017424], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0010880937566980719], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655889218742, 0.44385, [0.0010749], [0.0011109], [0.0010788], [0.0010977], [10], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038161682563700845], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655889218963, 0.4558, [0.00037763], [0.00039464], [0.00037865], [0.00038586], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034773185653912445], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655889219190, 0.45703, [0.0003459], [0.00036188], [0.0003461], [0.00034977], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.575107656655387e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655889219417, 0.45073, [2.5205e-05], [2.6173e-05], [2.5311e-05], [2.5844e-05], [426], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018468534710399547], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655889219646, 0.45923, [0.00018378], [0.00018498], [0.00018454], [0.00018488], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.353795553131504e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655889219876, 0.45116, [4.3426e-05], [4.379e-05], [4.3439e-05], [4.3616e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00032616034855671], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655889220105, 0.46203, [0.00032379], [0.00033535], [0.00032435], [0.00032794], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00036170625050241747], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655889220337, 0.46073, [0.00036056], [0.00036314], [0.00036075], [0.00036282], [30], [10]], "benchmarks.TextSuite.time_render": [[4.661027723184937e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655889220567, 0.45361, [4.6534e-06], [4.6893e-06], [4.6585e-06], [4.6681e-06], [2346], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.560301952328033e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655889220799, 0.46089, [8.5097e-05], [8.5923e-05], [8.5487e-05], [8.5745e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.529616039599371e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655889221030, 0.44938, [3.5187e-05], [3.5411e-05], [3.5239e-05], [3.5333e-05], [306], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027699672347424845], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655889221259, 0.45052, [0.00027261], [0.00027963], [0.00027449], [0.00027717], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.001120108342729509], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655889221485, 0.45139, [0.0011021], [0.0011345], [0.0011094], [0.0011244], [10], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0013555859914049506], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655889221708, 0.45522, [0.0013502], [0.0013811], [0.0013526], [0.0013703], [8], [10]], "benchmarks.TextHotCacheSuite.time_wrapping_unicode_heavy_warm_cache": [[0.02689685404766351], [], "61a0be6fba20247e1a659912134e0628d062a6711afe7df190007679849f9585", 1655892967583, 0.62217, [0.026738], [0.027642], [0.026875], [0.026959], [1], [10]]}, "durations": {"<build>": 1.8177158832550049}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/ef80460f-virtualenv-py3.10.json
================================================
{"commit_hash": "ef80460f7fe69ae3342acdd04bf1d7c6154905cb", "env_name": "virtualenv-py3.10", "date": 1592140940000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [null, [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928515406, 0.059341], "benchmarks.ColorSuite.time_downgrade_to_standard": [null, [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928515466, 0.059205], "benchmarks.ColorSuite.time_downgrade_to_windows": [null, [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928515525, 0.057818], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [null, [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928515583, 0.058271], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [null, [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928515641, 0.0582], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [null, [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928515699, 0.058722], "benchmarks.PrettySuite.time_pretty": [null, [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928515758, 0.057699], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928515816, 0.05776], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928515874, 0.058446], "benchmarks.StyleSuite.time_parse_ansi": [null, [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928515932, 0.060185], "benchmarks.StyleSuite.time_parse_hex": [null, [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928515993, 0.059158], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [null, [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928516052, 0.060717], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928516113, 0.060003], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928516173, 0.058038], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928516231, 0.058081], "benchmarks.TableSuite.time_table_heavy_wrapping": [null, [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928516289, 0.058367], "benchmarks.TableSuite.time_table_no_wrapping": [null, [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928516347, 0.058493], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928516406, 0.058488], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928516464, 0.058101], "benchmarks.TextSuite.time_divide": [null, [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928516523, 0.057833], "benchmarks.TextSuite.time_divide_unicode_heavy": [null, [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928516581, 0.057799], "benchmarks.TextSuite.time_fit": [null, [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928516638, 0.058149], "benchmarks.TextSuite.time_fit_unicode_heavy": [null, [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928516697, 0.057886], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928516755, 0.05764], "benchmarks.TextSuite.time_render": [null, [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928516812, 0.057862], "benchmarks.TextSuite.time_render_unicode_heavy": [null, [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928516870, 0.058314], "benchmarks.TextSuite.time_split": [null, [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928516929, 0.058227], "benchmarks.TextSuite.time_split_unicode_heavy": [null, [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928516987, 0.057643], "benchmarks.TextSuite.time_wrapping": [null, [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928517045, 0.057652], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [null, [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928517102, 0.058088]}, "durations": {"<build>": 1.9598910808563232}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/f2845e12-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "f2845e12309169a797c248af7822f75864aae96a", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645525697000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.710324289423396e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826098428, 0.46435, [1.7064e-07], [1.7379e-07], [1.7091e-07], [1.7303e-07], [63014], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.709146841381949e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826098661, 0.45801, [1.6976e-07], [1.7385e-07], [1.7062e-07], [1.7221e-07], [64231], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.708677059647082e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826098888, 0.45988, [1.6948e-07], [1.7261e-07], [1.7058e-07], [1.7139e-07], [64364], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.711935400042013e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826099122, 0.45295, [1.6932e-07], [1.7371e-07], [1.7042e-07], [1.719e-07], [64002], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7086592169770903e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826099353, 0.47038, [1.699e-07], [1.7355e-07], [1.7045e-07], [1.7164e-07], [64168], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.715499180648743e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826099589, 0.46738, [1.706e-07], [1.7251e-07], [1.7138e-07], [1.7199e-07], [64455], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011200810032379297], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826099823, 0.44369, [0.0011181], [0.0011239], [0.0011186], [0.0011222], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.001562866066316409], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826100043, 0.44955, [0.0015546], [0.0015685], [0.0015581], [0.0015657], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014137135003693402], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826100266, 0.45366, [0.0014082], [0.0014265], [0.0014097], [0.0014172], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1488088821983173e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826100493, 0.45583, [1.1411e-07], [1.1514e-07], [1.1464e-07], [1.1508e-07], [93085], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1562085814305465e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826100721, 0.46011, [1.1388e-07], [1.1734e-07], [1.1407e-07], [1.1713e-07], [93321], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1494913730823272e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826100948, 0.43756, [1.1428e-07], [1.1664e-07], [1.1467e-07], [1.1509e-07], [87706], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008587687450926751], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826101167, 0.53328, [0.0084468], [0.0088746], [0.0085044], [0.0086286], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.00848345854319632], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826101427, 0.5189, [0.0084143], [0.0088172], [0.008463], [0.0085065], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008466823026537895], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826101686, 0.51908, [0.0084277], [0.0084992], [0.0084396], [0.0084894], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018783610818597176], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826101947, 0.4634, [0.0018713], [0.0019277], [0.0018735], [0.001889], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011582106688163346], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826102175, 0.44777, [0.00115], [0.0012057], [0.0011536], [0.0011734], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00038619123266211573], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826102402, 0.46384, [0.00038117], [0.00039133], [0.00038166], [0.00038997], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034143212777111803], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826102635, 0.45525, [0.00033783], [0.00034743], [0.00033992], [0.00034169], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5753700647143848e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826102860, 0.44617, [2.5461e-05], [2.6073e-05], [2.5573e-05], [2.5868e-05], [394], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018603088743663552], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826103079, 0.46359, [0.00018439], [0.0001921], [0.00018483], [0.00018878], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.367534565972165e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826103308, 0.45721, [4.3603e-05], [4.382e-05], [4.3637e-05], [4.3767e-05], [240], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003324046829771815], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826103534, 0.46623, [0.00032606], [0.00033852], [0.00032842], [0.00033568], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.0003577248626870328], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826103766, 0.44872, [0.0003556], [0.00036132], [0.0003568], [0.00035789], [29], [10]], "benchmarks.TextSuite.time_render": [[4.690064106928903e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826103989, 0.45734, [4.6518e-06], [4.7851e-06], [4.6726e-06], [4.7124e-06], [2332], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.641830352171668e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826104221, 0.45638, [8.544e-05], [8.945e-05], [8.5731e-05], [8.683e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.54439093354454e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826104453, 0.46082, [3.5321e-05], [3.6486e-05], [3.54e-05], [3.5613e-05], [299], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00027834539191405236], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826104678, 0.45577, [0.00027613], [0.00029847], [0.00027638], [0.00028851], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013770051882602274], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826104901, 0.45042, [0.0013591], [0.001398], [0.0013651], [0.0013875], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014615446395639864], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826105125, 0.44292, [0.0014575], [0.0014715], [0.0014595], [0.0014633], [7], [10]]}, "durations": {"<build>": 1.8203561305999756}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/f2af8c9d-virtualenv-py3.10.json
================================================
{"commit_hash": "f2af8c9d54e9ebc14b32fe68ddaefd01b7e5a801", "env_name": "virtualenv-py3.10", "date": 1593189870000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7090032611931194e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928581804, 0.45125, [1.6925e-07], [1.737e-07], [1.7003e-07], [1.7229e-07], [64370], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7179477414374248e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928582031, 0.42397, [1.692e-07], [1.7388e-07], [1.7029e-07], [1.7347e-07], [59074], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7208939259779103e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928582243, 0.44191, [1.7011e-07], [1.7798e-07], [1.7066e-07], [1.7366e-07], [64474], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7239909444505348e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928582459, 0.45005, [1.7032e-07], [1.7427e-07], [1.7127e-07], [1.7388e-07], [64149], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.70657668752433e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928582684, 0.43995, [1.695e-07], [1.7556e-07], [1.7003e-07], [1.7379e-07], [64588], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.734254661392709e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928582908, 0.42643, [1.723e-07], [1.7588e-07], [1.7309e-07], [1.7398e-07], [58470], [10]], "benchmarks.PrettySuite.time_pretty": [[0.002222458299365826], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928583119, 0.43708, [0.0021951], [0.0022573], [0.0021987], [0.0022453], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928578060, 0.058079], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928578118, 0.057923], "benchmarks.StyleSuite.time_parse_ansi": [[1.1513858785141599e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928583333, 0.43617, [1.1404e-07], [1.1633e-07], [1.1435e-07], [1.1599e-07], [95564], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1389109408082052e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928583555, 0.44783, [1.1341e-07], [1.1419e-07], [1.137e-07], [1.1401e-07], [96441], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1519537423832971e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928583779, 0.45007, [1.1382e-07], [1.1617e-07], [1.1453e-07], [1.16e-07], [96177], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928578838, 0.057826], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928578896, 0.057477], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928578954, 0.057369], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0020461542007979006], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928584006, 0.42367, [0.0020262], [0.0020663], [0.0020273], [0.0020609], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0014474494299585266], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928584221, 0.42346, [0.0014278], [0.0014642], [0.0014312], [0.0014614], [7], [10]], "benchmarks.TextSuite.time_align_center": [null, [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928579431, 0.058086], "benchmarks.TextSuite.time_align_center_unicode_heavy": [null, [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928579489, 0.058209], "benchmarks.TextSuite.time_divide": [[2.8270778226057495e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928584434, 0.44278, [2.8239e-05], [2.8318e-05], [2.8254e-05], [2.8294e-05], [381], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00019030226317945083], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928584655, 0.44236, [0.00018943], [0.00019048], [0.00019006], [0.0001904], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.197533399565145e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928584876, 0.43825, [4.1857e-05], [4.2052e-05], [4.1951e-05], [4.202e-05], [250], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003304659242558321], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928585094, 0.44625, [0.00032819], [0.00033206], [0.00032901], [0.0003318], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928580435, 0.058736], "benchmarks.TextSuite.time_render": [[4.689809716245229e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928585317, 0.44093, [4.6839e-06], [4.7022e-06], [4.6889e-06], [4.6939e-06], [2336], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.54896653744238e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928585542, 0.44084, [8.4727e-05], [8.5865e-05], [8.5157e-05], [8.5817e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.415601445179301e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928585763, 0.43741, [3.377e-05], [3.4525e-05], [3.3842e-05], [3.4403e-05], [311], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002846767971720043], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928585980, 0.4332, [0.00027899], [0.00029414], [0.00028309], [0.00028554], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011558448911980828], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928586195, 0.43605, [0.001148], [0.0011654], [0.0011495], [0.0011592], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015459464297496845], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928586412, 0.4395, [0.0015209], [0.001555], [0.0015443], [0.0015473], [7], [10]]}, "durations": {"<build>": 1.9649710655212402}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/f5ed5bde-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "f5ed5bde19cfd9c13c3a9fe5ceefec2c54d66242", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645548467000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7089341030735665e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826050890, 0.46557, [1.7009e-07], [1.7204e-07], [1.706e-07], [1.7175e-07], [64214], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7132925556405833e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826051123, 0.45989, [1.6995e-07], [1.7485e-07], [1.7042e-07], [1.7354e-07], [62854], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7310620400118626e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826051354, 0.448, [1.7096e-07], [1.7515e-07], [1.7187e-07], [1.7412e-07], [64588], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.718236650344588e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826051576, 0.45824, [1.7001e-07], [1.7859e-07], [1.7108e-07], [1.7242e-07], [64540], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.717386766834678e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826051811, 0.46565, [1.7016e-07], [1.7578e-07], [1.7064e-07], [1.7205e-07], [64451], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7115920923999537e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826052045, 0.46555, [1.7e-07], [1.7227e-07], [1.7101e-07], [1.7174e-07], [64315], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011200555600225925], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826052279, 0.44561, [0.001115], [0.0011252], [0.0011173], [0.0011232], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015701041390587178], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826052501, 0.45486, [0.0015626], [0.001582], [0.0015639], [0.0015743], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.0014125078014330938], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826052726, 0.46185, [0.0014042], [0.0014915], [0.0014098], [0.001419], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.1676853242756582e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826052956, 0.4672, [1.1499e-07], [1.1848e-07], [1.1582e-07], [1.1712e-07], [94609], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1503445792982772e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826053189, 0.46544, [1.1457e-07], [1.1548e-07], [1.1475e-07], [1.1543e-07], [95364], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1548965205600605e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826053422, 0.46439, [1.1473e-07], [1.1688e-07], [1.1497e-07], [1.1631e-07], [95475], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.008442427206318825], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826053654, 0.51534, [0.0083799], [0.0084878], [0.0084305], [0.0084716], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.008438854245468974], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826053912, 0.51586, [0.0083873], [0.0084896], [0.0084215], [0.0084666], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008476708258967847], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826054170, 0.51586, [0.0084331], [0.0085135], [0.008451], [0.0085038], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0018852291783938804], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826054427, 0.44943, [0.0018744], [0.0018988], [0.0018777], [0.0018886], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011653333333217436], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826054654, 0.44963, [0.00116], [0.0011761], [0.0011635], [0.0011695], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037948810911205195], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826054881, 0.44542, [0.00037177], [0.00038293], [0.00037524], [0.00038243], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.00034224463161081076], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826055107, 0.45793, [0.00033865], [0.00035575], [0.0003402], [0.00034886], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5562302298134282e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826055334, 0.46663, [2.5419e-05], [2.6762e-05], [2.5527e-05], [2.5808e-05], [420], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018579507331279192], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826055563, 0.45159, [0.00018434], [0.00018825], [0.00018515], [0.0001871], [55], [10]], "benchmarks.TextSuite.time_fit": [[4.50633509008556e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826055785, 0.45949, [4.3546e-05], [4.7327e-05], [4.3807e-05], [4.7001e-05], [245], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00034169220711074527], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826056016, 0.45714, [0.00032659], [0.00036217], [0.00032996], [0.00035477], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035806034354428796], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826056244, 0.45897, [0.00035649], [0.00036456], [0.00035679], [0.00035921], [29], [10]], "benchmarks.TextSuite.time_render": [[4.715400211314701e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826056475, 0.45919, [4.6822e-06], [4.8657e-06], [4.6959e-06], [4.7933e-06], [2329], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.549661436156044e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826056709, 0.45499, [8.4887e-05], [8.6083e-05], [8.5296e-05], [8.5629e-05], [123], [10]], "benchmarks.TextSuite.time_split": [[3.55997698853252e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826056935, 0.46071, [3.5478e-05], [3.6803e-05], [3.5496e-05], [3.6534e-05], [308], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002810523650181052], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826057168, 0.45287, [0.00027956], [0.00028218], [0.00028044], [0.00028159], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0013688983744941652], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826057392, 0.45781, [0.0013654], [0.0013742], [0.0013668], [0.0013707], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014619612733700446], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826057624, 0.44055, [0.0014581], [0.0014744], [0.0014598], [0.0014658], [7], [10]]}, "durations": {"<build>": 1.8513050079345703}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/f82a4ccf-virtualenv-py3.10-setuptools59.2.0.json
================================================
{"commit_hash": "f82a4ccf21bdcd57ad222dcd6b269208684a2049", "env_name": "virtualenv-py3.10-setuptools59.2.0", "date": 1645902515000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10", "setuptools": "59.2.0"}, "python": "3.10", "requirements": {"setuptools": "59.2.0"}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.705394468633298e-07], [], "9da5ad0b5cfed4def0fe21fbea49ad4605f84bae78c584d9178a6b21be58d506", 1655826019309, 0.45606, [1.7011e-07], [1.7155e-07], [1.7043e-07], [1.7063e-07], [61858], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.721885632068918e-07], [], "431bf40cae6650c65cdc6da70528f559c2e902abe9370cb73780dac5b5ef6826", 1655826019536, 0.46616, [1.7034e-07], [1.7469e-07], [1.7092e-07], [1.7313e-07], [64331], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.7098430092475314e-07], [], "fef8d3fdb69ece95d49b5637f9d69760e29819d2d6e65e53e62356fec2e11b91", 1655826019769, 0.46816, [1.6911e-07], [1.7623e-07], [1.7075e-07], [1.7163e-07], [64334], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7114390621588688e-07], [], "5fdae4522a081f8212ac2d43d69bbc86b73876c4222f6ea36a80970afe663579", 1655826020001, 0.45738, [1.7035e-07], [1.7431e-07], [1.71e-07], [1.7351e-07], [64344], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7140046876601596e-07], [], "3806eb6f32fcfc22ff57b23b1d09e25fc82c35a97183e285d257fb2e2b464f8f", 1655826020234, 0.45404, [1.7064e-07], [1.7259e-07], [1.712e-07], [1.72e-07], [64175], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.7231912964562187e-07], [], "2844899e3d81f71bd0b997401e1d300394b3ca130a056eb6b9aaca15ef07f39d", 1655826020465, 0.46088, [1.7043e-07], [1.7461e-07], [1.7139e-07], [1.7352e-07], [64441], [10]], "benchmarks.PrettySuite.time_pretty": [[0.0011226412219305835], [], "12ef039b78ab19f0024f810fc30791bfe497731139b30a8c8ea7aef36ef9fed2", 1655826020697, 0.44523, [0.0011113], [0.001129], [0.0011213], [0.0011263], [9], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [[0.0015615089962791118], [], "27d39951a834104a09759cd0c9b1efe8570946400d606a04baad7b0e2355a259", 1655826020917, 0.45244, [0.0015565], [0.0016003], [0.0015583], [0.0015806], [7], [10]], "benchmarks.PrettySuite.time_pretty_justify_center": [[0.001418565123458393], [], "51fe6d435fa7bcd605b26131da960edffb88929baa7aca98c9b3f7b23364cb6f", 1655826021142, 0.46488, [0.0014023], [0.0014641], [0.0014077], [0.0014496], [8], [10]], "benchmarks.StyleSuite.time_parse_ansi": [[1.167841869714271e-07], [], "30751ae63d82770f620ab5f807faf7437a5a7f2309db0c6403adb23ce9571ee5", 1655826021368, 0.44075, [1.1575e-07], [1.1724e-07], [1.1606e-07], [1.1709e-07], [87149], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.1511092345671037e-07], [], "4d64f24e35306bc59f161cfd8e9542f1f76521ac58951af3841fba1722a9917b", 1655826021588, 0.43906, [1.1406e-07], [1.1776e-07], [1.1462e-07], [1.1709e-07], [87466], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.1474855533800838e-07], [], "9a9eff6e02c4c05312809b98da8d740a48c93f8718ff7ba74cfec9e3f956dbd8", 1655826021806, 0.43956, [1.1407e-07], [1.1754e-07], [1.1426e-07], [1.1661e-07], [87447], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [[0.00844155199592933], [], "bcf6771787d6f643c3a02ed76b9045b8c773101dd7d307f989596e535a1dc8fa", 1655826022026, 0.51711, [0.0083834], [0.0085817], [0.0084167], [0.0084963], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [[0.00858687498839572], [], "df349deebd0cb3fe2602808efb2cc95270bdd3ff3734e07c13348039c5385ff9", 1655826022284, 0.5274, [0.0084354], [0.0087544], [0.0085084], [0.0086737], [2], [10]], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [[0.008590708253905177], [], "0af0a4fdbcad1978765c9980b246270adec7d7917b7fb7ce9f544a55892503c2", 1655826022550, 0.52601, [0.0083981], [0.0087164], [0.0085299], [0.0086287], [2], [10]], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.0019219722404765585], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1655826022815, 0.45434, [0.0018751], [0.0020375], [0.0018872], [0.0019403], [6], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0011719907245909176], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1655826023044, 0.45419, [0.0011597], [0.0012112], [0.0011679], [0.001175], [9], [10]], "benchmarks.TextSuite.time_align_center": [[0.00037920685800989825], [], "f51eebb0dd72719da589ba30bbd85be25adf556231f15da3b8694499bb5b124f", 1655826023274, 0.45963, [0.00037276], [0.00038046], [0.00037431], [0.00037971], [28], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0003454375020678966], [], "6f157a0bd86b9db1c709c8fa9716458f797106b55ecd35afab408bd281b27e40", 1655826023503, 0.45939, [0.00034112], [0.00035943], [0.00034179], [0.00034905], [31], [10]], "benchmarks.TextSuite.time_divide": [[2.5353093731895403e-05], [], "64851da7a4fff5f7eedf5d6f18883aeb59a43decf556c31e627b6973bd1cc34e", 1655826023733, 0.46031, [2.5311e-05], [2.5528e-05], [2.5334e-05], [2.5443e-05], [427], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.0001860172407508924], [], "703b70a87fe0aa1599bb2e397e436f2387baf8cf7dcf349952df217899b97097", 1655826023963, 0.46249, [0.00018469], [0.0001886], [0.00018552], [0.00018761], [58], [10]], "benchmarks.TextSuite.time_fit": [[4.4097505570923696e-05], [], "8eab5a31717088de197d2d9f60d4e1658dbf3941e1afc4a378134fc8683c8bef", 1655826024191, 0.45398, [4.3621e-05], [4.5358e-05], [4.3884e-05], [4.46e-05], [244], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.00033030492098381126], [], "7154022579acd99d94691787cdf31162b15e38998dbc46d85250baacfdb339ef", 1655826024421, 0.46429, [0.00032813], [0.00033264], [0.00032919], [0.00033235], [33], [10]], "benchmarks.TextSuite.time_indent_guides": [[0.00035921334497759054], [], "5a3722c26c96d1ef013e493ae4d2f99aa04f989ae6a8229123afd9d80f38a384", 1655826024653, 0.45228, [0.00035566], [0.00036329], [0.00035621], [0.00036254], [29], [10]], "benchmarks.TextSuite.time_render": [[4.694283803830749e-06], [], "28f30de133a59a0ae0c7e34075766a5a7e492acb6401c8ceb24b6d0c4002db53", 1655826024878, 0.45731, [4.6765e-06], [4.7276e-06], [4.6859e-06], [4.7155e-06], [2334], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.551722418106213e-05], [], "71f96ca5c6fe650b498a68a82f7268a1cd3d4b003a01d620fa0456b0827311e2", 1655826025110, 0.45995, [8.5309e-05], [8.5848e-05], [8.5471e-05], [8.5737e-05], [127], [10]], "benchmarks.TextSuite.time_split": [[3.600580480377205e-05], [], "8ced6624e81ea79c121959a499bd08a83578f32be271fce55bad42196ba221b7", 1655826025341, 0.46723, [3.5199e-05], [3.6341e-05], [3.5454e-05], [3.6102e-05], [305], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.0002803700810641443], [], "edcdec63428ba276875d287976df2ef6ea68e66a44dfe252a80eecd7705aa47d", 1655826025573, 0.46614, [0.00027759], [0.00034018], [0.00027867], [0.00028391], [38], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0014282213087426499], [], "7ee504db351412170e9e040a3c5f76a06ceb92b020dfd04c3d0ce3f2b7f5bc58", 1655826025802, 0.47512, [0.001385], [0.0015233], [0.0014021], [0.0014735], [8], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0014619970793968865], [], "4db4b38f51b05f4dc11b5a2908c118fe556a7d36b9e1d85fd18e28885a384db0", 1655826026037, 0.44445, [0.0014515], [0.0015033], [0.0014574], [0.001484], [7], [10]]}, "durations": {"<build>": 1.8400018215179443}, "version": 2}


================================================
FILE: benchmarks/results/darrenburns-2022-mbp/f84d5dee-virtualenv-py3.10.json
================================================
{"commit_hash": "f84d5dee6ad9bc57a8c67ded51c1ecd03677e65f", "env_name": "virtualenv-py3.10", "date": 1594567562000, "params": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "darrenburns-2022-mbp", "num_cpu": "10", "os": "Darwin 21.2.0", "ram": "17179869184", "python": "3.10"}, "python": "3.10", "requirements": {}, "env_vars": {}, "result_columns": ["result", "params", "version", "started_at", "duration", "stats_ci_99_a", "stats_ci_99_b", "stats_q_25", "stats_q_75", "stats_number", "stats_repeat", "samples", "profile"], "results": {"benchmarks.ColorSuite.time_downgrade_to_eight_bit": [[1.7308245811986438e-07], [], "019b972f782c6291df9a6a4dea9bb3c6268a69b177e71383d6e19a608e84920d", 1646928688709, 0.42495, [1.7163e-07], [1.7365e-07], [1.7253e-07], [1.736e-07], [58836], [10]], "benchmarks.ColorSuite.time_downgrade_to_standard": [[1.7283182735333509e-07], [], "f5e8556491c977450fff6ebfd9fff4fc8f12d74829aa5b8570bd27ea7a1c9d28", 1646928688920, 0.42508, [1.7195e-07], [1.7396e-07], [1.7243e-07], [1.736e-07], [58984], [10]], "benchmarks.ColorSuite.time_downgrade_to_windows": [[1.736048608512918e-07], [], "373eb97dd7ce2823e080972249235f528e8b3a47210911981cf432ecf0eef5fb", 1646928689131, 0.4312, [1.7268e-07], [1.745e-07], [1.7343e-07], [1.7372e-07], [64495], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_eight_bit": [[1.7323692227504577e-07], [], "716ff06a471a5d90af3730f6d4470eba3577432d781e0210dff1fd156b8c549c", 1646928689346, 0.42883, [1.7185e-07], [1.7397e-07], [1.7286e-07], [1.7349e-07], [59222], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_standard": [[1.7355385467604052e-07], [], "3a752a7884e99e095c31b2a28cfefdf916cb2033c06afae1ea146a72f3ba650c", 1646928689560, 0.42434, [1.7258e-07], [1.7408e-07], [1.7319e-07], [1.7371e-07], [58463], [10]], "benchmarks.ColorSuiteCached.time_downgrade_to_windows": [[1.715436641188842e-07], [], "1732bbd18ada49eb7b054fc18b40d6acfb533023463366f37203dab6fbb0cc20", 1646928689771, 0.43156, [1.6853e-07], [1.7437e-07], [1.6926e-07], [1.7389e-07], [58160], [10]], "benchmarks.PrettySuite.time_pretty": [[0.002244716600398533], [], "9bb0e6d8a29aad21b3d1b550a160fa5f1e9030c69d16bad500c0dcc77bff6d01", 1646928689989, 0.44204, [0.0022307], [0.0022562], [0.002235], [0.0022495], [5], [10]], "benchmarks.PrettySuite.time_pretty_indent_guides": [null, [], "8d71bf19dfe999b0fba95d009986bfd6911c53c7a0c455466725f553005c3bc7", 1646928684657, 0.058707], "benchmarks.PrettySuite.time_pretty_justify_center": [null, [], "54cbf71bacab14ccbe1d063847c0b89198ed1bbe06edc89c14d2e3c7b1986c41", 1646928684715, 0.058484], "benchmarks.StyleSuite.time_parse_ansi": [[1.1733243976283779e-07], [], "a003aaa8017585efeb1cd9c43351282df4df6249bf28a4c447b1304d984aa753", 1646928690208, 0.42793, [1.1623e-07], [1.1849e-07], [1.1628e-07], [1.1839e-07], [87661], [10]], "benchmarks.StyleSuite.time_parse_hex": [[1.156367285738817e-07], [], "cf5a3f0def435d3da5bc3a6e7549c44c0a02e9cce6c00ecde8dd7f527556f8ca", 1646928690423, 0.42339, [1.1408e-07], [1.1679e-07], [1.1448e-07], [1.158e-07], [87703], [10]], "benchmarks.StyleSuite.time_parse_mixed_complex_style": [[1.140869263406167e-07], [], "01c9e12ae829b1984e55a5aeef1a9ae6f1461577adaf5ae59f06358c8b52802f", 1646928690636, 0.44843, [1.1369e-07], [1.1458e-07], [1.1383e-07], [1.1421e-07], [96087], [10]], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_heavy_wrapping": [null, [], "1ed4d74ea424990cfb40c96f07635f9bcf7b8bacc7ade5204aaf96363e1622ee", 1646928685422, 0.05832], "benchmarks.SyntaxWrappingSuite.time_text_thin_terminal_medium_wrapping": [null, [], "0880e162a4907ee025cef8ac3380502554fde27fd0c90a4c15cebc9c27f3e333", 1646928685480, 0.057904], "benchmarks.SyntaxWrappingSuite.time_text_wide_terminal_no_wrapping": [null, [], "feb11e94ae6a75de2dee899fb93db098b55cde232710660d7d66f9e2b288d9c0", 1646928685538, 0.058164], "benchmarks.TableSuite.time_table_heavy_wrapping": [[0.002110837498912588], [], "ca515a9739c1e0f8eb922420f9f9caf27321fb13c8bd0bc49b207a0588b370de", 1646928690861, 0.43483, [0.0020988], [0.0021232], [0.0021039], [0.0021191], [5], [10]], "benchmarks.TableSuite.time_table_no_wrapping": [[0.0015061160707513668], [], "8842a5f141d8208ba2bab66e4973e978cb5d0615f326af5d70385ff8fa44b3b9", 1646928691080, 0.4351, [0.0014983], [0.0015589], [0.0015026], [0.001546], [7], [10]], "benchmarks.TextSuite.time_align_center": [[0.0006713476559525589], [], "1ceeeef2de43fcb3d0dfec409972d8f0eb791e9615fa9f9c959e0423725b089b", 1646928691301, 0.43813, [0.00066814], [0.00067522], [0.00067029], [0.00067237], [16], [10]], "benchmarks.TextSuite.time_align_center_unicode_heavy": [[0.0005598946946621356], [], "a83ff79614dd2ae17e8b68f45981fcaa0d9833c59a7a14f171b896cf970f54ce", 1646928691524, 0.427, [0.00055817], [0.00056303], [0.0005592], [0.00056025], [18], [10]], "benchmarks.TextSuite.time_divide": [[2.8021105220420404e-05], [], "dcc120b921cb2ec77632f8fe2f6f4150d479cb49ef2608f8e86b569a937756e9", 1646928691735, 0.44378, [2.7666e-05], [2.8357e-05], [2.7709e-05], [2.8332e-05], [385], [10]], "benchmarks.TextSuite.time_divide_unicode_heavy": [[0.00018865752632304895], [], "ea53e662c0553324f90ac3336dcee77f733bb33638888e1f84bf71945a2f3f8e", 1646928691958, 0.44155, [0.00018633], [0.0001911], [0.00018676], [0.00019085], [57], [10]], "benchmarks.TextSuite.time_fit": [[4.2210779327669215e-05], [], "ec77b412db357b1e1c1e7bc620b941dddfc36dc76d2a66a0417feae4f21fe1d3", 1646928692180, 0.43567, [4.2056e-05], [4.247e-05], [4.211e-05], [4.2259e-05], [247], [10]], "benchmarks.TextSuite.time_fit_unicode_heavy": [[0.0003338414028422126], [], "d1574b4af2ef8b80b95b4dbeeb13e5de67b66783f76f9968834776239dd0dc66", 1646928692397, 0.43078, [0.00032913], [0.00033781], [0.00033063], [0.00033694], [31], [10]], "benchmarks.TextSuite.time_indent_guides": [null, [], "18da036dcfc15ec5e3c11e72be7c8f0c22fba695a5f19c95836be36952376cf2", 1646928687337, 0.058208], "benchmarks.TextSuite.time_render": [[4.675831319804382e-06], [], "907d30581cfdc7bb2c4d302b7e3cb474aaefd8b84821365fe105af7d82be3b09", 1646928692609, 0.44535, [4.6576e-06], [4.6958e-06], [4.671e-06], [4.6811e-06], [2321], [10]], "benchmarks.TextSuite.time_render_unicode_heavy": [[8.689120084019456e-05], [], "b3f1c09dfd06f412a20dacfe378c3b446727c7d4f9a975336eab3daa8543e1cb", 1646928692832, 0.42073, [8.621e-05], [8.7267e-05], [8.6719e-05], [8.6998e-05], [117], [10]], "benchmarks.TextSuite.time_split": [[3.4412112531710386e-05], [], "9c165854130cb95fea5491ffcd8b580a5bd373149da2ef8aace0e9480f649854", 1646928693042, 0.44146, [3.4288e-05], [3.4483e-05], [3.4334e-05], [3.4456e-05], [311], [10]], "benchmarks.TextSuite.time_split_unicode_heavy": [[0.00028140595964646926], [], "d55b02f6d06f478d70635bac3409f3a9899137d9cee87a70a293b8ccf5a6afa4", 1646928693261, 0.4316, [0.00027816], [0.00028493], [0.00027863], [0.00028367], [37], [10]], "benchmarks.TextSuite.time_wrapping": [[0.0011629745551747167], [], "8c821eba13d043f228fd902d8f678c397741855db05d02abe9b82f3d65cdf03d", 1646928693475, 0.43828, [0.0011575], [0.0011677], [0.0011586], [0.001166], [9], [10]], "benchmarks.TextSuite.time_wrapping_unicode_heavy": [[0.0015502648581917], [], "ec6e2ef08b6cdee182fef4e26c0043f8c365984f9a31be07dbd792e1aed862d8", 1646928693693, 0.44103, [0.0015466], [0.0015531], [0.0015491], [0.0015513], [7], [10]]}, "durations": {"<build>": 1.960265874862671}, "version": 2}



================================================
FILE: benchmarks/results/darrenburns-2022-mbp/machine.json
================================================
{
    "arch": "arm64",
    "cpu": "Apple M1 Pro",
    "machine": "darrenburns-2022-mbp",
    "num_cpu": "10",
    "os": "Darwin 21.2.0",
    "ram": "17179869184",
    "version": 1
}


================================================
FILE: docs/make.bat
================================================
@ECHO OFF

pushd %~dp0

REM Command file for Sphinx documentation

if "%SPHINXBUILD%" == "" (
	set SPHINXBUILD=sphinx-build
)
set SOURCEDIR=source
set BUILDDIR=build

if "%1" == "" goto help

%SPHINXBUILD% >NUL 2>NUL
if errorlevel 9009 (
	echo.
	echo.The 'sphinx-build' command was not found. Make sure you have Sphinx
	echo.installed, then set the SPHINXBUILD environment variable to point
	echo.to the full path of the 'sphinx-build' executable. Alternatively you
	echo.may add the Sphinx directory to PATH.
	echo.
	echo.If you don't have Sphinx installed, grab it from
	echo.http://sphinx-doc.org/
	exit /b 1
)

%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%
goto end

:help
%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%

:end
popd



================================================
FILE: docs/Makefile
================================================
# Minimal makefile for Sphinx documentation
#

# You can set these variables from the command line, and also
# from the environment for the first two.
SPHINXOPTS    ?=
SPHINXBUILD   ?= sphinx-build
SOURCEDIR     = source
BUILDDIR      = build

# Put it first so that "make" without argument is like "make help".
help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

.PHONY: help Makefile

# Catch-all target: route all unknown targets to Sphinx using the new
# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
%: Makefile
	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)



================================================
FILE: docs/requirements.txt
================================================
alabaster==1.0.0
Sphinx==8.2.3
sphinx-rtd-theme==3.0.2
sphinx-copybutton==0.5.2



================================================
FILE: docs/source/appendix.rst
================================================
Appendix
=========

.. toctree::
   :maxdepth: 3

   appendix/box.rst
   appendix/colors.rst
   


================================================
FILE: docs/source/columns.rst
================================================
Columns
=======

Rich can render text or other Rich renderables in neat columns with the :class:`~rich.columns.Columns` class. To use, construct a Columns instance with an iterable of renderables and print it to the Console.

The following example is a very basic clone of the ``ls`` command in OSX / Linux to list directory contents::

    import os
    import sys

    from rich import print
    from rich.columns import Columns

    if len(sys.argv) < 2:
        print("Usage: python columns.py DIRECTORY")
    else:
        directory = os.listdir(sys.argv[1])
        columns = Columns(directory, equal=True, expand=True)
        print(columns)


See `columns.py <https://github.com/willmcgugan/rich/blob/master/examples/columns.py>`_ for an example which outputs columns containing more than just text. 




================================================
FILE: docs/source/conf.py
================================================
# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


# -- Project information -----------------------------------------------------

import sphinx_rtd_theme
from importlib.metadata import Distribution

html_theme = "sphinx_rtd_theme"

html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

project = "Rich"
copyright = "Will McGugan"
author = "Will McGugan"

# The full version, including alpha/beta/rc tags
release = Distribution.from_name("rich").version


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "sphinx.ext.intersphinx",
    "sphinx.ext.autosectionlabel",
    "sphinx_copybutton",
    "sphinx_rtd_theme",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = "alabaster"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

intersphinx_mapping = {"python": ("http://docs.python.org/3", None)}

autodoc_typehints = "description"

html_css_files = [
    "https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/fira_code.min.css"
]



================================================
FILE: docs/source/console.rst
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x80 in position 5484: illegal multibyte sequence


================================================
FILE: docs/source/group.rst
================================================
Render Groups
=============

The :class:`~rich.console.Group` class allows you to group several renderables together so they may be rendered in a context where only a single renderable may be supplied. For instance, you might want to display several renderables within a :class:`~rich.panel.Panel`.

To render two panels within a third panel, you would construct a Group with the *child* renderables as positional arguments then wrap the result in another Panel::

    from rich import print
    from rich.console import Group
    from rich.panel import Panel

    panel_group = Group(
        Panel("Hello", style="on blue"),
        Panel("World", style="on red"),
    )
    print(Panel(panel_group))


This pattern is nice when you know in advance what renderables will be in a group, but can get awkward if you have a larger number of renderables, especially if they are dynamic. Rich provides a :func:`~rich.console.group` decorator to help with these situations. The decorator builds a group from an iterator of renderables. The following is the equivalent of the previous example using the decorator::

    from rich import print
    from rich.console import group
    from rich.panel import Panel

    @group()
    def get_panels():
        yield Panel("Hello", style="on blue")
        yield Panel("World", style="on red")

    print(Panel(get_panels()))



================================================
FILE: docs/source/highlighting.rst
================================================
.. _highlighting:

Highlighting
============

Rich will automatically highlight patterns in text, such as numbers, strings, collections, booleans, None, and a few more exotic patterns such as file paths, URLs and UUIDs.

You can disable highlighting either by setting ``highlight=False`` on :meth:`~rich.console.Console.print` or :meth:`~rich.console.Console.log`, or by setting ``highlight=False`` on the :class:`~rich.console.Console` constructor which disables it everywhere. If you disable highlighting on the constructor, you can still selectively *enable* highlighting with ``highlight=True`` on print / log.

Custom Highlighters
-------------------

If the default highlighting doesn't fit your needs, you can define a custom highlighter. The easiest way to do this is to extend the :class:`~rich.highlighter.RegexHighlighter` class which applies a style to any text matching a list of regular expressions.

Here's an example which highlights text that looks like an email address::

    from rich.console import Console
    from rich.highlighter import RegexHighlighter
    from rich.theme import Theme

    class EmailHighlighter(RegexHighlighter):
        """Apply style to anything that looks like an email."""

        base_style = "example."
        highlights = [r"(?P<email>[\w-]+@([\w-]+\.)+[\w-]+)"]


    theme = Theme({"example.email": "bold magenta"})
    console = Console(highlighter=EmailHighlighter(), theme=theme)
    console.print("Send funds to money@example.org")


The ``highlights`` class variable should contain a list of regular expressions. The group names of any matching expressions are prefixed with the ``base_style`` attribute and used as styles for matching text. In the example above, any email addresses will have the style "example.email" applied, which we've defined in a custom :ref:`Theme <themes>`.

Setting the highlighter on the Console will apply highlighting to all text you print (if enabled). You can also use a highlighter on a more granular level by using the instance as a callable and printing the result. For example, we could use the email highlighter class like this::


    console = Console(theme=theme)
    highlight_emails = EmailHighlighter()
    console.print(highlight_emails("Send funds to money@example.org"))


While :class:`~rich.highlighter.RegexHighlighter` is quite powerful, you can also extend its base class :class:`~rich.highlighter.Highlighter` to implement a custom scheme for highlighting. It contains a single method :class:`~rich.highlighter.Highlighter.highlight` which is passed the :class:`~rich.text.Text` to highlight.

Here's a silly example that highlights every character with a different color::

    from random import randint

    from rich import print
    from rich.highlighter import Highlighter


    class RainbowHighlighter(Highlighter):
        def highlight(self, text):
            for index in range(len(text)):
                text.stylize(f"color({randint(16, 255)})", index, index + 1)


    rainbow = RainbowHighlighter()
    print(rainbow("I must not fear. Fear is the mind-killer."))

Builtin Highlighters
--------------------

The following builtin highlighters are available.

* :class:`~rich.highlighter.ISO8601Highlighter` Highlights ISO8601 date time strings.
* :class:`~rich.highlighter.JSONHighlighter` Highlights JSON formatted strings.



================================================
FILE: docs/source/index.rst
================================================
.. Rich documentation master file, created by
   sphinx-quickstart on Thu Dec 26 17:03:20 2019.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to Rich's documentation!
================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:

   introduction.rst
   console.rst
   style.rst
   markup.rst
   text.rst
   highlighting.rst
   pretty.rst
   logging.rst
   traceback.rst
   prompt.rst

   columns.rst
   group.rst   
   markdown.rst
   padding.rst
   panel.rst
   progress.rst
   syntax.rst
   tables.rst
   tree.rst
   live.rst
   layout.rst

   protocol.rst

   reference.rst
   appendix.rst

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`



================================================
FILE: docs/source/introduction.rst
================================================
Introduction
============

Rich is a Python library for writing *rich* text (with color and style) to the terminal, and for displaying advanced content such as tables, markdown, and syntax highlighted code.

Use Rich to make your command line applications visually appealing and present data in a more readable way. Rich can also be a useful debugging aid by pretty printing and syntax highlighting data structures.

Requirements
------------

Rich works with macOS, Linux and Windows.

On Windows both the (ancient) cmd.exe terminal is supported and the new `Windows Terminal <https://github.com/microsoft/terminal/releases>`_. The latter has much improved support for color and style.

Rich requires Python 3.8.0 and above.

.. note::
    PyCharm users will need to enable "emulate terminal" in output console option in run/debug configuration to see styled output.

Installation
------------

You can install Rich from PyPI with `pip` or your favorite package manager::

    pip install rich

Add the ``-U`` switch to update to the current version, if Rich is already installed.

If you intend to use Rich with Jupyter then there are some additional dependencies which you can install with the following command::

    pip install "rich[jupyter]"

Demo
----

To check if Rich was installed correctly, and to see a little of what Rich can do, run the following from the command line::

    python -m rich

Quick Start
-----------

The quickest way to get up and running with Rich is to import the alternative ``print`` function which takes the same arguments as the built-in ``print`` and may be used as a drop-in replacement. Here's how you would do that::

    from rich import print

You can then print strings or objects to the terminal in the usual way. Rich will do some basic syntax :ref:`highlighting<highlighting>` and format data structures to make them easier to read.

Strings may contain :ref:`console_markup` which can be used to insert color and styles in to the output.

The following demonstrates both console markup and pretty formatting of Python objects::

    >>> print("[italic red]Hello[/italic red] World!", locals())

This writes the following output to the terminal (including all the colors and styles):

.. raw:: html

    <pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800000; font-style: italic">Hello</span> World!
    <span style="font-weight: bold">{</span>
        <span style="color: #008000">'__annotations__'</span>: <span style="font-weight: bold">{}</span>,
        <span style="color: #008000">'__builtins__'</span>: <span style="font-weight: bold"><</span><span style="color: #ff00ff">module</span><span style="color: #000000"> </span><span style="color: #008000">'builtins'</span><span style="color: #000000"> </span><span style="color: #000000; font-weight: bold">(</span><span style="color: #000000">built-in</span><span style="color: #000000; font-weight: bold">)</span><span style="font-weight: bold">></span>,
        <span style="color: #008000">'__doc__'</span>: <span style="color: #800080; font-style: italic">None</span>,
        <span style="color: #008000">'__loader__'</span>: <span style="font-weight: bold"><</span><span style="color: #ff00ff">class</span><span style="color: #000000"> </span><span style="color: #008000">'_frozen_importlib.BuiltinImporter'</span><span style="font-weight: bold">></span>,
        <span style="color: #008000">'__name__'</span>: <span style="color: #008000">'__main__'</span>,
        <span style="color: #008000">'__package__'</span>: <span style="color: #800080; font-style: italic">None</span>,
        <span style="color: #008000">'__spec__'</span>: <span style="color: #800080; font-style: italic">None</span>,
        <span style="color: #008000">'print'</span>: <span style="font-weight: bold"><</span><span style="color: #ff00ff">function</span><span style="color: #000000"> print at </span><span style="color: #000080; font-weight: bold">0x1027fd4c0</span><span style="font-weight: bold">></span>,
    <span style="font-weight: bold">}</span> </pre>


If you would rather not shadow Python's built-in print, you can import ``rich.print`` as ``rprint`` (for example)::

    from rich import print as rprint

Continue reading to learn about the more advanced features of Rich.

Rich in the REPL
----------------

Rich may be installed in the REPL so that Python data structures are automatically pretty printed with syntax highlighting. Here's how::

    >>> from rich import pretty
    >>> pretty.install()
    >>> ["Rich and pretty", True]

You can also use this feature to try out Rich *renderables*. Here's an example::

    >>> from rich.panel import Panel
    >>> Panel.fit("[bold yellow]Hi, I'm a Panel", border_style="red")

Read on to learn more about Rich renderables.

IPython Extension
~~~~~~~~~~~~~~~~~

Rich also includes an IPython extension that will do this same pretty install + pretty tracebacks. Here's how to load it::

    In [1]: %load_ext rich

You can also have it load by default by adding `"rich"` to the ``c.InteractiveShellApp.extension`` variable in
`IPython Configuration <https://ipython.readthedocs.io/en/stable/config/intro.html>`_.

Rich Inspect
------------

Rich has an :meth:`~rich.inspect` function which can generate a report on any Python object. It is a fantastic debug aid, and a good example of the output that Rich can generate. Here is a simple example::

    >>> from rich import inspect
    >>> from rich.color import Color
    >>> color = Color.parse("red")
    >>> inspect(color, methods=True)



================================================
FILE: docs/source/layout.rst
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xad in position 1786: illegal multibyte sequence


================================================
FILE: docs/source/live.rst
================================================
.. _live:

Live Display
============

Progress bars and status indicators use a *live* display to animate parts of the terminal. You can build custom live displays with the :class:`~rich.live.Live` class.

For a demonstration of a live display, run the following command::

    python -m rich.live

.. note::

    If you see ellipsis "...", this indicates that the terminal is not tall enough to show the full table.

Basic usage
~~~~~~~~~~~

To create a live display, construct a :class:`~rich.live.Live` object with a renderable and use it as a context manager. The live display will persist for the duration of the context. You can update the renderable to update the display::


    import time

    from rich.live import Live
    from rich.table import Table

    table = Table()
    table.add_column("Row ID")
    table.add_column("Description")
    table.add_column("Level")

    with Live(table, refresh_per_second=4):  # update 4 times a second to feel fluid
        for row in range(12):
            time.sleep(0.4)  # arbitrary delay
            # update the renderable internally
            table.add_row(f"{row}", f"description {row}", "[red]ERROR")


Updating the renderable
~~~~~~~~~~~~~~~~~~~~~~~

You can also change the renderable on-the-fly by calling the :meth:`~rich.live.Live.update` method. This may be useful if the information you wish to display is too dynamic to generate by updating a single renderable. Here is an example::

    import random
    import time

    from rich.live import Live
    from rich.table import Table


    def generate_table() -> Table:
        """Make a new table."""
        table = Table()
        table.add_column("ID")
        table.add_column("Value")
        table.add_column("Status")

        for row in range(random.randint(2, 6)):
            value = random.random() * 100
            table.add_row(
                f"{row}", f"{value:3.2f}", "[red]ERROR" if value < 50 else "[green]SUCCESS"
            )
        return table


    with Live(generate_table(), refresh_per_second=4) as live:
        for _ in range(40):
            time.sleep(0.4)
            live.update(generate_table())


Alternate screen
~~~~~~~~~~~~~~~~

You can opt to show a Live display in the "alternate screen" by setting ``screen=True`` on the constructor. This will allow your live display to go full screen and restore the command prompt on exit.

You can use this feature in combination with :ref:`Layout` to display sophisticated terminal "applications".

Transient display
~~~~~~~~~~~~~~~~~

Normally when you exit live context manager (or call :meth:`~rich.live.Live.stop`) the last refreshed item remains in the terminal with the cursor on the following line.
You can also make the live display disappear on exit by setting ``transient=True`` on the Live constructor.

Auto refresh
~~~~~~~~~~~~

By default, the live display will refresh 4 times a second. You can set the refresh rate with the ``refresh_per_second`` argument on the :class:`~rich.live.Live` constructor.
You should set this to something lower than 4 if you know your updates will not be that frequent or higher for a smoother feeling.

You might want to disable auto-refresh entirely if your updates are not very frequent, which you can do by setting ``auto_refresh=False`` on the constructor.
If you disable auto-refresh you will need to call :meth:`~rich.live.Live.refresh` manually or :meth:`~rich.live.Live.update` with ``refresh=True``.

Vertical overflow
~~~~~~~~~~~~~~~~~

By default, the live display will display ellipsis if the renderable is too large for the terminal. You can adjust this by setting the
``vertical_overflow`` argument on the :class:`~rich.live.Live` constructor.

- "crop" Show renderable up to the terminal height. The rest is hidden.
- "ellipsis" Similar to crop except last line of the terminal is replaced with "...". This is the default behavior.
- "visible" Will allow the whole renderable to be shown. Note that the display cannot be properly cleared in this mode.

.. note::

    Once the live display stops on a non-transient renderable, the last frame will render as **visible** since it doesn't have to be cleared.


Print / log
~~~~~~~~~~~

The Live class will create an internal Console object which you can access via ``live.console``. If you print or log to this console, the output will be displayed *above* the live display. Here's an example::

    import time

    from rich.live import Live
    from rich.table import Table

    table = Table()
    table.add_column("Row ID")
    table.add_column("Description")
    table.add_column("Level")

    with Live(table, refresh_per_second=4) as live:  # update 4 times a second to feel fluid
        for row in range(12):
            live.console.print(f"Working on row #{row}")
            time.sleep(0.4)
            table.add_row(f"{row}", f"description {row}", "[red]ERROR")


If you have another Console object you want to use, pass it in to the :class:`~rich.live.Live` constructor. Here's an example::

    from my_project import my_console

    with Live(console=my_console) as live:
        my_console.print("[bold blue]Starting work!")
        ...

.. note::

    If you are passing in a file console, the live display only show the last item once the live context is left.

Redirecting stdout / stderr
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To avoid breaking the live display visuals, Rich will redirect ``stdout`` and ``stderr`` so that you can use the builtin ``print`` statement.
This feature is enabled by default, but you can disable by setting ``redirect_stdout`` or ``redirect_stderr`` to ``False``.

Nesting Lives
-------------

If you create a Live instance within the context of an existing Live instance, then the content of the inner Live will be displayed below the outer Live.

Prior to version 14.0.0 this would have resulted in a :class:`~rich.errors.LiveError` exception.


Examples
--------

See `table_movie.py <https://github.com/willmcgugan/rich/blob/master/examples/table_movie.py>`_ and
`top_lite_simulator.py <https://github.com/willmcgugan/rich/blob/master/examples/top_lite_simulator.py>`_
for deeper examples of live displaying.



================================================
FILE: docs/source/logging.rst
================================================
Logging Handler
===============

Rich supplies a :ref:`logging handler<logging>` which will format and colorize text written by Python's logging module.

Here's an example of how to set up a rich logger::

    import logging
    from rich.logging import RichHandler

    FORMAT = "%(message)s"
    logging.basicConfig(
        level="NOTSET", format=FORMAT, datefmt="[%X]", handlers=[RichHandler()]
    )

    log = logging.getLogger("rich")
    log.info("Hello, World!")

Rich logs won't render :ref:`console_markup` in logging by default as most libraries won't be aware of the need to escape literal square brackets, but you can enable it by setting ``markup=True`` on the handler. Alternatively you can enable it per log message by supplying the ``extra`` argument as follows::

    log.error("[bold red blink]Server is shutting down![/]", extra={"markup": True})

Similarly, the highlighter may be overridden per log message::

    log.error("123 will not be highlighted", extra={"highlighter": None})


Handle exceptions
-------------------

The :class:`~rich.logging.RichHandler` class may be configured to use Rich's :class:`~rich.traceback.Traceback` class to format exceptions, which provides more context than a built-in exception. To get beautiful exceptions in your logs set ``rich_tracebacks=True`` on the handler constructor::


    import logging
    from rich.logging import RichHandler

    logging.basicConfig(
        level="NOTSET",
        format="%(message)s",
        datefmt="[%X]",
        handlers=[RichHandler(rich_tracebacks=True)]
    )

    log = logging.getLogger("rich")
    try:
        print(1 / 0)
    except Exception:
        log.exception("unable print!")


There are a number of other options you can use to configure logging output, see the :class:`~rich.logging.RichHandler` reference for details.

Suppressing Frames
------------------

If you are working with a framework (click, django etc), you may only be interested in seeing the code from your own application within the traceback. You can exclude framework code by setting the `suppress` argument on `Traceback`, `install`, and `Console.print_exception`, which should be a list of modules or str paths.

Here's how you would exclude `click <https://click.palletsprojects.com/en/8.0.x/>`_ from Rich exceptions:: 

    import click
    import logging
    from rich.logging import RichHandler

    logging.basicConfig(
        level="NOTSET",
        format="%(message)s",
        datefmt="[%X]",
        handlers=[RichHandler(rich_tracebacks=True, tracebacks_suppress=[click])]
    )

Suppressed frames will show the line and file only, without any code.


================================================
FILE: docs/source/markdown.rst
================================================
Markdown
========

Rich can render Markdown to the console. To render markdown, construct a :class:`~rich.markdown.Markdown` object then print it to the console. Markdown is a great way of adding rich content to your command line applications. Here's an example of use::

    MARKDOWN = """
    # This is an h1

    Rich can do a pretty *decent* job of rendering markdown.

    1. This is a list item
    2. This is another list item
    """
    from rich.console import Console
    from rich.markdown import Markdown

    console = Console()
    md = Markdown(MARKDOWN)
    console.print(md)

Note that code blocks are rendered with full syntax highlighting!

You can also use the Markdown class from the command line. The following example displays a readme in the terminal::

    python -m rich.markdown README.md

Run the following to see the full list of arguments for the markdown command::

    python -m rich.markdown -h


================================================
FILE: docs/source/markup.rst
================================================
.. _console_markup:

Console Markup
==============

Rich supports a simple markup which you can use to insert color and styles virtually everywhere Rich would accept a string (e.g. :meth:`~rich.console.Console.print` and :meth:`~rich.console.Console.log`).

Run the following command to see some examples::

    python -m rich.markup

Syntax
------

Console markup uses a syntax inspired by `bbcode <https://en.wikipedia.org/wiki/BBCode>`_. If you write the style (see :ref:`styles`) in square brackets, e.g. ``[bold red]``, that style will apply until it is *closed* with a corresponding ``[/bold red]``.

Here's a simple example::

    from rich import print
    print("[bold red]alert![/bold red] Something happened")

If you don't close a style, it will apply until the end of the string. Which is sometimes convenient if you want to style a single line. For example::

    print("[bold italic yellow on red blink]This text is impossible to read")

There is a shorthand for closing a style. If you omit the style name from the closing tag, Rich will close the last style. For example::

    print("[bold red]Bold and red[/] not bold or red")

These markup tags may be use in combination with each other and don't need to be strictly nested. The following example demonstrates overlapping of markup tags:: 

    print("[bold]Bold[italic] bold and italic [/bold]italic[/italic]")

Errors
~~~~~~

Rich will raise :class:`~rich.errors.MarkupError` if the markup contains one of the following errors:

- Mismatched tags, e.g. ``"[bold]Hello[/red]"``
- No matching tag for implicit close, e.g. ``"no tags[/]"``


Links
~~~~~

Console markup can output hyperlinks with the following syntax: ``[link=URL]text[/link]``. Here's an example::

    print("Visit my [link=https://www.willmcgugan.com]blog[/link]!")

If your terminal software supports hyperlinks, you will be able to click the word "blog" which will typically open a browser. If your terminal doesn't support hyperlinks, you will see the text but it won't be clickable.


Escaping
~~~~~~~~

Occasionally you may want to print something that Rich would interpret as markup. You can *escape* a tag by preceding it with a backslash. Here's an example::

    >>> from rich import print
    >>> print(r"foo\[bar]")
    foo[bar]

Without the backslash, Rich will assume that ``[bar]`` is a tag and remove it from the output if there is no "bar" style.

.. note::
    If you want to prevent the backslash from escaping the tag and output a literal backslash before a tag you can enter two backslashes.

The function :func:`~rich.markup.escape` will handle escaping of text for you.

Escaping is important if you construct console markup dynamically, with ``str.format`` or f strings (for example). Without escaping it may be possible to inject tags where you don't want them. Consider the following function::

    def greet(name):
        console.print(f"Hello {name}!")

Calling ``greet("Will")`` will print a greeting, but if you were to call ``greet("[blink]Gotcha![/blink]")`` then you will also get blinking text, which may not be desirable. The solution is to escape the arguments::

    from rich.markup import escape
    def greet(name):
        console.print(f"Hello {escape(name)}!")

Emoji
~~~~~

If you add an *emoji code* to markup it will be replaced with the equivalent unicode character. An emoji code consists of the name of the emoji surrounded be colons (:). Here's an example::

    >>> from rich import print
    >>> print(":warning:")
    鈿狅笍

Some emojis have two variants, the "emoji" variant displays in full color, and the "text" variant displays in monochrome (whatever your default colors are set to). You can specify the variant you want by adding either `"-emoji"` or `"-text"` to the emoji code. Here's an example:

    >>> from rich import print
    >>> print(":red_heart-emoji:")
    >>> print(":red_heart-text:")

To see a list of all the emojis available, run the following command::

    python -m rich.emoji


Rendering Markup
----------------

By default, Rich will render console markup when you explicitly pass a string to :meth:`~rich.console.Print.print` or implicitly when you embed a string in another renderable object such as :class:`~rich.table.Table` or :class:`~rich.panel.Panel`.

Console markup is convenient, but you may wish to disable it if the syntax clashes with the string you want to print. You can do this by setting ``markup=False`` on the :meth:`~rich.console.Print.print` method or on the :class:`~rich.console.Console` constructor.


Markup API
----------

You can convert a string to styled text by calling :meth:`~rich.text.Text.from_markup`, which returns a :class:`~rich.text.Text` instance you can print or add more styles to.



================================================
FILE: docs/source/padding.rst
================================================
Padding
=======

The :class:`~rich.padding.Padding` class may be used to add whitespace around text or other renderable. The following example will print the word "Hello" with a padding of 1 character, so there will be a blank line above and below, and a space on the left and right edges::

    from rich import print
    from rich.padding import Padding
    test = Padding("Hello", 1)
    print(test)

You can specify the padding on a more granular level by using a tuple of values rather than a single value. A tuple of 2 values sets the top/bottom and left/right padding, whereas a tuple of 4 values sets the padding for top, right, bottom, and left sides. You may recognize this scheme if you are familiar with CSS.

For example, the following displays 2 blank lines above and below the text, and a padding of 4 spaces on the left and right sides::

    from rich import print
    from rich.padding import Padding
    test = Padding("Hello", (2, 4))
    print(test)

The Padding class can also accept a ``style`` argument which applies a style to the padding and contents, and an ``expand`` switch which can be set to False to prevent the padding from extending to the full width of the terminal. Here's an example which demonstrates both these arguments::

    from rich import print
    from rich.padding import Padding
    test = Padding("Hello", (2, 4), style="on blue", expand=False)
    print(test)

Note that, as with all Rich renderables, you can use Padding in any context. For instance, if you want to emphasize an item in a :class:`~rich.table.Table` you could add a Padding object to a row with a padding of 1 and a style of "on red".



================================================
FILE: docs/source/panel.rst
================================================
Panel
=====

To draw a border around text or other renderable, construct a :class:`~rich.panel.Panel` with the renderable as the first positional argument. Here's an example::

    from rich import print
    from rich.panel import Panel
    print(Panel("Hello, [red]World!"))

You can change the style of the panel by setting the ``box`` argument to the Panel constructor. See :ref:`appendix_box` for a list of available box styles.

Panels will extend to the full width of the terminal. You can make panel *fit* the content by setting ``expand=False`` on the constructor, or by creating the Panel with :meth:`~rich.panel.Panel.fit`. For example::

    from rich import print
    from rich.panel import Panel
    print(Panel.fit("Hello, [red]World!"))

The Panel constructor accepts a ``title`` argument which will draw a title on the top of the panel, as well as a ``subtitle`` argument which will draw a subtitle on the bottom of the panel::

    from rich import print
    from rich.panel import Panel
    print(Panel("Hello, [red]World!", title="Welcome", subtitle="Thank you"))

See :class:`~rich.panel.Panel` for details how to customize Panels.



================================================
FILE: docs/source/pretty.rst
================================================
Pretty Printing
===============

In addition to syntax highlighting, Rich will format (i.e. *pretty print*) containers such as lists, dicts, and sets.

Run the following command to see an example of pretty printed output::

    python -m rich.pretty

Note how the output will change to fit within the terminal width.

pprint method
-------------

The :func:`~rich.pretty.pprint` method offers a few more arguments you can use to tweak how objects are pretty printed. Here's how you would import it::

    >>> from rich.pretty import pprint
    >>> pprint(locals())

Indent guides
~~~~~~~~~~~~~

Rich can draw *indent guides* to highlight the indent level of a data structure. These can make it easier to read more deeply nested output. The pprint method enables indent guides by default. You can set ``indent_guides=False`` to disable this feature.

Expand all
~~~~~~~~~~

Rich is quite conservative about expanding data structures and will try to fit as much in each line as it can. If you prefer, you can tell Rich to fully expand all data structures by setting ``expand_all=True``. Here's an example::

    >>> pprint(["eggs", "ham"], expand_all=True)

Truncating pretty output
~~~~~~~~~~~~~~~~~~~~~~~~

Very long data structures can be difficult to read and you may find yourself scrolling through multiple pages in the terminal to find the data you are interested in. Rich can truncate containers and long strings to give you an overview without swamping your terminal.


If you set the ``max_length`` argument to an integer, Rich will truncate containers with more than the given number of elements. If data is truncated, Rich will display an ellipsis ``...`` and the number of elements not shown.

Here's an example::

    >>> pprint(locals(), max_length=2)

If you set the ``max_string`` argument to an integer, Rich will truncate strings over that length. Truncated string will be appended with the number of characters that have not been shown. Here's an example::

    >>> pprint("Where there is a Will, there is a Way", max_string=21)

Pretty renderable
-----------------

Rich offers a :class:`~rich.pretty.Pretty` class which you can use to insert pretty printed data in to another renderable.

The following example displays pretty printed data within a simple panel::

    from rich import print
    from rich.pretty import Pretty
    from rich.panel import Panel

    pretty = Pretty(locals())
    panel = Panel(pretty)
    print(panel)

There are a large number of options to tweak the pretty formatting, See the :class:`~rich.pretty.Pretty` reference for details.

Rich Repr Protocol
------------------

Rich is able to syntax highlight any output, but the formatting is restricted to built-in containers, dataclasses, and other objects Rich knows about, such as objects generated by the `attrs <https://www.attrs.org/en/stable/>`_ library. To add Rich formatting capabilities to custom objects, you can implement the *rich repr protocol*.

Run the following command to see an example of what the Rich repr protocol can generate::

    python -m rich.repr

First, let's look at a class that might benefit from a Rich repr::

    class Bird:
        def __init__(self, name, eats=None, fly=True, extinct=False):
            self.name = name
            self.eats = list(eats) if eats else []
            self.fly = fly
            self.extinct = extinct

        def __repr__(self):
            return f"Bird({self.name!r}, eats={self.eats!r}, fly={self.fly!r}, extinct={self.extinct!r})"

    BIRDS = {
        "gull": Bird("gull", eats=["fish", "chips", "ice cream", "sausage rolls"]),
        "penguin": Bird("penguin", eats=["fish"], fly=False),
        "dodo": Bird("dodo", eats=["fruit"], fly=False, extinct=True)
    }
    print(BIRDS)

The result of this script would be::

    {'gull': Bird('gull', eats=['fish', 'chips', 'ice cream', 'sausage rolls'], fly=True, extinct=False), 'penguin': Bird('penguin', eats=['fish'], fly=False, extinct=False), 'dodo': Bird('dodo', eats=['fruit'], fly=False, extinct=True)}

The output is long enough to wrap on to the next line, which can make it hard to read. The repr strings are informative but a little verbose since they include default arguments. If we print this with Rich, things are improved somewhat::

    {
        'gull': Bird('gull', eats=['fish', 'chips', 'ice cream', 'sausage rolls'],
    fly=True, extinct=False),
        'penguin': Bird('penguin', eats=['fish'], fly=False, extinct=False),
        'dodo': Bird('dodo', eats=['fruit'], fly=False, extinct=True)
    }

Rich knows how to format the container dict, but the repr strings are still verbose, and there is some wrapping of the output (assumes an 80 character terminal).

We can solve both these issues by adding the following ``__rich_repr__`` method::

    def __rich_repr__(self):
        yield self.name
        yield "eats", self.eats
        yield "fly", self.fly, True
        yield "extinct", self.extinct, False

Now if we print the same object with Rich we would see the following::

    {
        'gull': Bird(
            'gull',
            eats=['fish', 'chips', 'ice cream', 'sausage rolls']
        ),
        'penguin': Bird('penguin', eats=['fish'], fly=False),
        'dodo': Bird('dodo', eats=['fruit'], fly=False, extinct=True)
    }

The default arguments have been omitted, and the output has been formatted nicely. The output remains readable even if we have less room in the terminal, or our objects are part of a deeply nested data structure::

    {
        'gull': Bird(
            'gull',
            eats=[
                'fish',
                'chips',
                'ice cream',
                'sausage rolls'
            ]
        ),
        'penguin': Bird(
            'penguin',
            eats=['fish'],
            fly=False
        ),
        'dodo': Bird(
            'dodo',
            eats=['fruit'],
            fly=False,
            extinct=True
        )
    }

You can add a ``__rich_repr__`` method to any class to enable the Rich formatting. This method should return an iterable of tuples. You could return a list of tuples, but it's easier to express with the ``yield`` keywords, making it a *generator*.

Each tuple specifies an element in the output.

- ``yield value`` will generate a positional argument.
- ``yield name, value`` will generate a keyword argument.
- ``yield name, value, default`` will generate a keyword argument *if* ``value`` is not equal to ``default``.

If you use ``None`` as the ``name``, then it will be treated as a positional argument as well, in order to support having ``tuple`` positional arguments.

You can also tell Rich to generate the *angular bracket* style of repr, which tend to be used where there is no easy way to recreate the object's constructor. To do this set the function attribute ``"angular"`` to ``True`` immediately after your ``__rich_repr__`` method. For example::

    __rich_repr__.angular = True

This will change the output of the Rich repr example to the following::

    {
        'gull': <Bird 'gull' eats=['fish', 'chips', 'ice cream', 'sausage rolls']>,
        'penguin': <Bird 'penguin' eats=['fish'] fly=False>,
        'dodo': <Bird 'dodo' eats=['fruit'] fly=False extinct=True>
    }


Note that you can add ``__rich_repr__`` methods to third-party libraries *without* including Rich as a dependency. If Rich is not installed, then nothing will break. Hopefully more third-party libraries will adopt Rich repr methods in the future.

Typing
~~~~~~

If you want to type the Rich repr method you can import and return ``rich.repr.Result``, which will help catch logical errors::


    import rich.repr


    class Bird:
        def __init__(self, name, eats=None, fly=True, extinct=False):
            self.name = name
            self.eats = list(eats) if eats else []
            self.fly = fly
            self.extinct = extinct

        def __rich_repr__(self) -> rich.repr.Result:
            yield self.name
            yield "eats", self.eats
            yield "fly", self.fly, True
            yield "extinct", self.extinct, False


Automatic Rich Repr
~~~~~~~~~~~~~~~~~~~

Rich can generate a rich repr automatically if the parameters are named the same as your attributes.

To automatically build a rich repr, use the :meth:`~rich.repr.auto` class decorator. The Bird example above follows the above rule, so we don't strictly need to implement our own ``__rich_repr__``. The following code would generate the same repr::

    import rich.repr

    @rich.repr.auto
    class Bird:
        def __init__(self, name, eats=None, fly=True, extinct=False):
            self.name = name
            self.eats = list(eats) if eats else []
            self.fly = fly
            self.extinct = extinct


    BIRDS = {
        "gull": Bird("gull", eats=["fish", "chips", "ice cream", "sausage rolls"]),
        "penguin": Bird("penguin", eats=["fish"], fly=False),
        "dodo": Bird("dodo", eats=["fruit"], fly=False, extinct=True)
    }
    from rich import print
    print(BIRDS)

Note that the decorator will also create a `__repr__`, so you will get an auto-generated repr even if you don't print with Rich.

If you want to auto-generate the angular type of repr, then set ``angular=True`` on the decorator::

    @rich.repr.auto(angular=True)
    class Bird:
        def __init__(self, name, eats=None, fly=True, extinct=False):
            self.name = name
            self.eats = list(eats) if eats else []
            self.fly = fly
            self.extinct = extinct


Example
-------

See `repr.py <https://github.com/willmcgugan/rich/blob/master/examples/repr.py>`_ for the example code used in this page.



================================================
FILE: docs/source/progress.rst
================================================
.. _progress:

Progress Display
================

Rich can display continuously updated information regarding the progress of long running tasks / file copies etc. The information displayed is configurable, the default will display a description of the 'task', a progress bar, percentage complete, and estimated time remaining.

Rich progress display supports multiple tasks, each with a bar and progress information. You can use this to track concurrent tasks where the work is happening in threads or processes.

To see how the progress display looks, try this from the command line::

    python -m rich.progress


.. note::

    Progress works with Jupyter notebooks, with the caveat that auto-refresh is disabled. You will need to explicitly call :meth:`~rich.progress.Progress.refresh` or set ``refresh=True`` when calling :meth:`~rich.progress.Progress.update`. Or use the :func:`~rich.progress.track` function which does a refresh automatically on each loop.

Basic Usage
-----------

For basic usage call the :func:`~rich.progress.track` function, which accepts a sequence (such as a list or range object) and an optional description of the job you are working on. The track function will yield values from the sequence and update the progress information on each iteration. Here's an example::

    import time
    from rich.progress import track

    for i in track(range(20), description="Processing..."):
        time.sleep(1)  # Simulate work being done

Advanced usage
--------------

If you require multiple tasks in the display, or wish to configure the columns in the progress display, you can work directly with the :class:`~rich.progress.Progress` class. Once you have constructed a Progress object, add task(s) with (:meth:`~rich.progress.Progress.add_task`) and update progress with :meth:`~rich.progress.Progress.update`.

The Progress class is designed to be used as a *context manager* which will start and stop the progress display automatically.

Here's a simple example::

    import time

    from rich.progress import Progress

    with Progress() as progress:

        task1 = progress.add_task("[red]Downloading...", total=1000)
        task2 = progress.add_task("[green]Processing...", total=1000)
        task3 = progress.add_task("[cyan]Cooking...", total=1000)

        while not progress.finished:
            progress.update(task1, advance=0.5)
            progress.update(task2, advance=0.3)
            progress.update(task3, advance=0.9)
            time.sleep(0.02)

The ``total`` value associated with a task is the number of steps that must be completed for the progress to reach 100%. A *step* in this context is whatever makes sense for your application; it could be number of bytes of a file read, or number of images processed, etc.


Starting and stopping
~~~~~~~~~~~~~~~~~~~~~

The context manager is recommended if you can use it. If you don't use the context manager, be sure to call :meth:`~rich.progress.Progress.start` to start the progress display, and :meth:`~rich.progress.Progress.stop` to stop it.

Here's an example that doesn't use the context manager::

    import time

    from rich.progress import Progress

    progress = Progress()
    progress.start()
    try:
        task1 = progress.add_task("[red]Downloading...", total=1000)
        task2 = progress.add_task("[green]Processing...", total=1000)
        task3 = progress.add_task("[cyan]Cooking...", total=1000)

        while not progress.finished:
            progress.update(task1, advance=0.5)
            progress.update(task2, advance=0.3)
            progress.update(task3, advance=0.9)
            time.sleep(0.02)
    finally:
        progress.stop()

Note the use of the try / finally, to ensure that ``stop()`` is called.

Updating tasks
~~~~~~~~~~~~~~

When you call :meth:`~rich.progress.Progress.add_task` you get back a `Task ID`. Use this ID to call :meth:`~rich.progress.Progress.update` whenever you have completed some work, or any information has changed. Typically you will need to update ``completed`` every time you have completed a step. You can do this by setting ``completed`` directly or by setting ``advance`` which will add to the current ``completed`` value.

The :meth:`~rich.progress.Progress.update` method collects keyword arguments which are also associated with the task. Use this to supply any additional information you would like to render in the progress display. The additional arguments are stored in ``task.fields`` and may be referenced in :ref:`Column classes<Columns>`.

Hiding tasks
~~~~~~~~~~~~

You can show or hide tasks by updating the tasks ``visible`` value. Tasks are visible by default, but you can also add an invisible task by calling :meth:`~rich.progress.Progress.add_task` with ``visible=False``.


Transient progress
~~~~~~~~~~~~~~~~~~

Normally when you exit the progress context manager (or call :meth:`~rich.progress.Progress.stop`) the last refreshed display remains in the terminal with the cursor on the following line. You can also make the progress display disappear on exit by setting ``transient=True`` on the Progress constructor. Here's an example::

    with Progress(transient=True) as progress:
        task = progress.add_task("Working", total=100)
        do_work(task)

Transient progress displays are useful if you want more minimal output in the terminal when tasks are complete.

Indeterminate progress
~~~~~~~~~~~~~~~~~~~~~~

When you add a task it is automatically *started*, which means it will show a progress bar at 0% and the time remaining will be calculated from the current time. This may not work well if there is a long delay before you can start updating progress; you may need to wait for a response from a server or count files in a directory (for example). In these cases you can call :meth:`~rich.progress.Progress.add_task` with ``start=False`` or ``total=None`` which will display a pulsing animation that lets the user know something is working. This is known as an *indeterminate* progress bar. When you have the number of steps you can call :meth:`~rich.progress.Progress.start_task` which will display the progress bar at 0%, then :meth:`~rich.progress.Progress.update` as normal.

Auto refresh
~~~~~~~~~~~~

By default, the progress information will refresh 10 times a second. You can set the refresh rate with the ``refresh_per_second`` argument on the :class:`~rich.progress.Progress` constructor. You should set this to something lower than 10 if you know your updates will not be that frequent.

You might want to disable auto-refresh entirely if your updates are not very frequent, which you can do by setting ``auto_refresh=False`` on the constructor. If you disable auto-refresh you will need to call :meth:`~rich.progress.Progress.refresh` manually after updating your task(s).


Expand
~~~~~~

The progress bar(s) will use only as much of the width of the terminal as required to show the task information. If you set the ``expand`` argument on the Progress constructor, then Rich will stretch the progress display to the full available width.


Columns
~~~~~~~

You may customize the columns in the progress display with the positional arguments to the :class:`~rich.progress.Progress` constructor. The columns are specified as either a `format string <https://docs.python.org/3/library/string.html#formatspec>`_ or a :class:`~rich.progress.ProgressColumn` object.

Format strings will be rendered with a single value `"task"` which will be a :class:`~rich.progress.Task` instance. For example ``"{task.description}"`` would display the task description in the column, and ``"{task.completed} of {task.total}"`` would display how many of the total steps have been completed. Additional fields passed via keyword arguments to `~rich.progress.Progress.update` are stored in ``task.fields``. You can add them to a format string with the following syntax: ``"extra info: {task.fields[extra]}"``.

The default columns are equivalent to the following::

    progress = Progress(
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        TaskProgressColumn(),
        TimeRemainingColumn(),
    )

To create a Progress with your own columns in addition to the defaults, use :meth:`~rich.progress.Progress.get_default_columns`::

    progress = Progress(
        SpinnerColumn(),
        *Progress.get_default_columns(),
        TimeElapsedColumn(),
    )

The following column objects are available:

- :class:`~rich.progress.BarColumn` Displays the bar.
- :class:`~rich.progress.TextColumn` Displays text.
- :class:`~rich.progress.TimeElapsedColumn` Displays the time elapsed.
- :class:`~rich.progress.TimeRemainingColumn` Displays the estimated time remaining.
- :class:`~rich.progress.MofNCompleteColumn` Displays completion progress as ``"{task.completed}/{task.total}"`` (works best if completed and total are ints).
- :class:`~rich.progress.FileSizeColumn` Displays progress as file size (assumes the steps are bytes).
- :class:`~rich.progress.TotalFileSizeColumn` Displays total file size (assumes the steps are bytes).
- :class:`~rich.progress.DownloadColumn` Displays download progress (assumes the steps are bytes).
- :class:`~rich.progress.TransferSpeedColumn` Displays transfer speed (assumes the steps are bytes).
- :class:`~rich.progress.SpinnerColumn` Displays a "spinner" animation.
- :class:`~rich.progress.RenderableColumn` Displays an arbitrary Rich renderable in the column.

To implement your own columns, extend the :class:`~rich.progress.ProgressColumn` class and use it as you would the other columns.


Table Columns
~~~~~~~~~~~~~

Rich builds a :class:`~rich.table.Table` for the tasks in the Progress instance. You can customize how the columns of this *tasks table* are created by specifying the ``table_column`` argument in the Column constructor, which should be a :class:`~rich.table.Column` instance.

The following example demonstrates a progress bar where the description takes one third of the width of the terminal, and the bar takes up the remaining two thirds::

    from time import sleep

    from rich.table import Column
    from rich.progress import Progress, BarColumn, TextColumn

    text_column = TextColumn("{task.description}", table_column=Column(ratio=1))
    bar_column = BarColumn(bar_width=None, table_column=Column(ratio=2))
    progress = Progress(text_column, bar_column, expand=True)

    with progress:
        for n in progress.track(range(100)):
            progress.print(n)
            sleep(0.1)


Print / log
~~~~~~~~~~~

The Progress class will create an internal Console object which you can access via ``progress.console``. If you print or log to this console, the output will be displayed *above* the progress display. Here's an example::

    with Progress() as progress:
        task = progress.add_task("twiddling thumbs", total=10)
        for job in range(10):
            progress.console.print(f"Working on job #{job}")
            run_job(job)
            progress.advance(task)

If you have another Console object you want to use, pass it in to the :class:`~rich.progress.Progress` constructor. Here's an example::

    from my_project import my_console

    with Progress(console=my_console) as progress:
        my_console.print("[bold blue]Starting work!")
        do_work(progress)


Redirecting stdout / stderr
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To avoid breaking the progress display visuals, Rich will redirect ``stdout`` and ``stderr`` so that you can use the built-in ``print`` statement. This feature is enabled by default, but you can disable by setting ``redirect_stdout`` or ``redirect_stderr`` to ``False``


Customizing
~~~~~~~~~~~

If the :class:`~rich.progress.Progress` class doesn't offer exactly what you need in terms of a progress display, you can override the :class:`~rich.progress.Progress.get_renderables` method. For example, the following class will render a :class:`~rich.panel.Panel` around the progress display::

    from rich.panel import Panel
    from rich.progress import Progress

    class MyProgress(Progress):
        def get_renderables(self):
            yield Panel(self.make_tasks_table(self.tasks))

Reading from a file
~~~~~~~~~~~~~~~~~~~

Rich provides an easy way to generate a progress bar while reading a file. If you call :func:`~rich.progress.open` it will return a context manager which displays a progress bar while you read. This is particularly useful when you can't easily modify the code that does the reading.

The following example demonstrates how we might show progress when reading a JSON file::

    import json
    import rich.progress

    with rich.progress.open("data.json", "rb") as file:
        data = json.load(file)
    print(data)

If you already have a file object, you can call :func:`~rich.progress.wrap_file` which returns a context manager that wraps your file so that it displays a progress bar. If you use this function you will need to set the number of bytes or characters you expect to read.

Here's an example that reads a url from the internet::

    from time import sleep
    from urllib.request import urlopen

    from rich.progress import wrap_file

    response = urlopen("https://www.textualize.io")
    size = int(response.headers["Content-Length"])

    with wrap_file(response, size) as file:
        for line in file:
            print(line.decode("utf-8"), end="")
            sleep(0.1)


If you expect to be reading from multiple files, you can use :meth:`~rich.progress.Progress.open` or :meth:`~rich.progress.Progress.wrap_file` to add a file progress to an existing Progress instance.

See `cp_progress.py <https://github.com/willmcgugan/rich/blob/master/examples/cp_progress.py>`_ for a minimal clone of the ``cp`` command which shows a progress bar as the file is copied.


Nesting Progress bars
---------------------

If you create a new progress bar within the context of an existing progress bar (with the context manager or `track` function), then Rich will display the inner progress bar(s) under the initial bar.

Here's an example that nests progress bars::

    from rich.progress import track
    from time import sleep


    for count in track(range(10)):
        for letter in track("ABCDEF", transient=True):
            print(f"Stage {count}{letter}")
            sleep(0.1)
        sleep(0.1)

The inner loop creates a new progress bar below the first, but both can update.

Note that if you nest progress bars like this, then the nested bars will updating according to the `refresh_per_second` attribute of the outer bar.


Multiple Progress
-----------------

You can't have different columns per task with a single Progress instance. However, you can have as many Progress instances as you like in a :ref:`live`. See `live_progress.py <https://github.com/willmcgugan/rich/blob/master/examples/live_progress.py>`_ and `dynamic_progress.py <https://github.com/willmcgugan/rich/blob/master/examples/dynamic_progress.py>`_ for examples of using multiple Progress instances.

Example
-------

See `downloader.py <https://github.com/willmcgugan/rich/blob/master/examples/downloader.py>`_ for a realistic application of a progress display. This script can download multiple concurrent files with a progress bar, transfer speed and file size.



================================================
FILE: docs/source/prompt.rst
================================================
Prompt
======

Rich has a number of :class:`~rich.prompt.Prompt` classes which ask a user for input and loop until a valid response is received (they all use the :ref:`Console API<Input>` internally). Here's a simple example::

    >>> from rich.prompt import Prompt
    >>> name = Prompt.ask("Enter your name")

The prompt may be given as a string (which may contain :ref:`console_markup` and emoji code) or as a :class:`~rich.text.Text` instance.

You can set a default value which will be returned if the user presses return without entering any text::

    >>> from rich.prompt import Prompt
    >>> name = Prompt.ask("Enter your name", default="Paul Atreides")

If you supply a list of choices, the prompt will loop until the user enters one of the choices::

    >>> from rich.prompt import Prompt
    >>> name = Prompt.ask("Enter your name", choices=["Paul", "Jessica", "Duncan"], default="Paul")

By default this is case sensitive, but you can set `case_sensitive=False` to make it case insensitive::

    >>> from rich.prompt import Prompt
    >>> name = Prompt.ask("Enter your name", choices=["Paul", "Jessica", "Duncan"], default="Paul", case_sensitive=False)

Now, it would accept "paul" or "Paul" as valid responses.

In addition to :class:`~rich.prompt.Prompt` which returns strings, you can also use :class:`~rich.prompt.IntPrompt` which asks the user for an integer, and :class:`~rich.prompt.FloatPrompt` for floats.

The :class:`~rich.prompt.Confirm` class is a specialized prompt which may be used to ask the user a simple yes / no question. Here's an example::

    >>> from rich.prompt import Confirm
    >>> is_rich_great = Confirm.ask("Do you like rich?")
    >>> assert is_rich_great

The Prompt class was designed to be customizable via inheritance. See `prompt.py <https://github.com/willmcgugan/rich/blob/master/rich/prompt.py>`_ for examples.

To see some of the prompts in action, run the following command from the command line::

    python -m rich.prompt



================================================
FILE: docs/source/protocol.rst
================================================

.. _protocol:

Console Protocol
================

Rich supports a simple protocol to add rich formatting capabilities to custom objects, so you can :meth:`~rich.console.Console.print` your object with color, styles and formatting.

Use this for presentation or to display additional debugging information that might be hard to parse from a typical ``__repr__`` string.


Console Customization
---------------------

The easiest way to customize console output for your object is to implement a ``__rich__`` method. This method accepts no arguments, and should return an object that Rich knows how to render, such as a :class:`~rich.text.Text` or :class:`~rich.table.Table`. If you return a plain string it will be rendered as :ref:`console_markup`. Here's an example::

    class MyObject:
        def __rich__(self) -> str:
            return "[bold cyan]MyObject()"

If you were to print or log an instance of ``MyObject`` it would render as ``MyObject()`` in bold cyan. Naturally, you would want to put this to better use, perhaps by adding specialized syntax highlighting.


Console Render
--------------

The ``__rich__`` method is limited to a single renderable object. For more advanced rendering, add a ``__rich_console__`` method to your class.

The ``__rich_console__`` method should accept a :class:`~rich.console.Console` and a :class:`~rich.console.ConsoleOptions` instance. It should return an iterable of other renderable objects. Although that means it *could* return a container such as a list, it generally easier implemented by using the ``yield`` statement (making the method a generator).

Here's an example of a ``__rich_console__`` method::

    from dataclasses import dataclass
    from rich.console import Console, ConsoleOptions, RenderResult
    from rich.table import Table

    @dataclass
    class Student:
        id: int
        name: str
        age: int
        def __rich_console__(self, console: Console, options: ConsoleOptions) -> RenderResult:
            yield f"[b]Student:[/b] #{self.id}"
            my_table = Table("Attribute", "Value")
            my_table.add_row("name", self.name)
            my_table.add_row("age", str(self.age))
            yield my_table

If you were to print a ``Student`` instance, it would render a simple table to the terminal.


Low Level Render
~~~~~~~~~~~~~~~~

For complete control over how a custom object is rendered to the terminal, you can yield :class:`~rich.segment.Segment` objects. A Segment consists of a piece of text and an optional Style. The following example writes multi-colored text when rendering a ``MyObject`` instance::

    class MyObject:
        def __rich_console__(self, console: Console, options: ConsoleOptions) -> RenderResult:
            yield Segment("My", Style(color="magenta"))
            yield Segment("Object", Style(color="green"))
            yield Segment("()", Style(color="cyan"))


Measuring Renderables
~~~~~~~~~~~~~~~~~~~~~

Sometimes Rich needs to know how many characters an object will take up when rendering. The :class:`~rich.table.Table` class, for instance, will use this information to calculate the optimal dimensions for the columns. If you aren't using one of the renderable objects in the Rich module, you will need to supply a ``__rich_measure__`` method which accepts a :class:`~rich.console.Console` and :class:`~rich.console.ConsoleOptions` and returns a :class:`~rich.measure.Measurement` object. The Measurement object should contain the *minimum* and *maximum* number of characters required to render.

For example, if we are rendering a chess board, it would require a minimum of 8 characters to render. The maximum can be left as the maximum available width (assuming a centered board)::

    class ChessBoard:
        def __rich_measure__(self, console: Console, options: ConsoleOptions) -> Measurement:
            return Measurement(8, options.max_width)



================================================
FILE: docs/source/reference.rst
================================================
Reference
=========

.. toctree::
   :maxdepth: 3

   reference/align.rst
   reference/bar.rst
   reference/color.rst
   reference/columns.rst
   reference/console.rst
   reference/emoji.rst
   reference/highlighter.rst
   reference/init.rst
   reference/json.rst
   reference/layout.rst
   reference/live.rst
   reference/logging.rst
   reference/markdown.rst
   reference/markup.rst
   reference/measure.rst
   reference/padding.rst
   reference/panel.rst
   reference/pretty.rst
   reference/progress_bar.rst
   reference/progress.rst
   reference/prompt.rst
   reference/protocol.rst
   reference/rule.rst
   reference/segment.rst
   reference/spinner.rst
   reference/status.rst
   reference/style.rst
   reference/styled.rst
   reference/syntax.rst
   reference/table.rst
   reference/text.rst
   reference/theme.rst
   reference/traceback.rst
   reference/tree.rst
   reference/abc.rst



================================================
FILE: docs/source/style.rst
================================================
.. _styles:


Styles
======

In various places in the Rich API you can set a "style" which defines the color of the text and various attributes such as bold, italic etc. A style may be given as a string containing a *style definition* or as an instance of a :class:`~rich.style.Style` class.


Defining Styles
---------------

A style definition is a string containing one or more words to set colors and attributes.

To specify a foreground color use one of the 256 :ref:`appendix-colors`. For example, to print "Hello" in magenta::

    console.print("Hello", style="magenta")

You may also use the color's number (an integer between 0 and 255) with the syntax ``"color(<number>)"``. The following will give the equivalent output::

    console.print("Hello", style="color(5)")

Alternatively you can use a CSS-like syntax to specify a color with a "#" followed by three pairs of hex characters, or in RGB form with three decimal integers. The following two lines both print "Hello" in the same color (purple)::

    console.print("Hello", style="#af00ff")
    console.print("Hello", style="rgb(175,0,255)")

The hex and rgb forms allow you to select from the full *truecolor* set of 16.7 million colors.

.. note::
    Some terminals only support 256 colors. Rich will attempt to pick the closest color it can if your color isn't available.

By itself, a color will change the *foreground* color. To specify a *background* color, precede the color with the word "on". For example, the following prints text in red on a white background::

    console.print("DANGER!", style="red on white")

You can also set a color with the word ``"default"`` which will reset the color to a default managed by your terminal software. This works for backgrounds as well, so the style of ``"default on default"`` is what your terminal starts with.

You can set a style attribute by adding one or more of the following words:

* ``"bold"`` or ``"b"`` for bold text.
* ``"blink"`` for text that flashes (use this one sparingly).
* ``"blink2"`` for text that flashes rapidly (not supported by most terminals).
* ``"conceal"`` for *concealed* text (not supported by most terminals).
* ``"italic"`` or ``"i"`` for italic text (not supported on Windows).
* ``"reverse"`` or ``"r"`` for text with foreground and background colors reversed.
* ``"strike"`` or ``"s"`` for text with a line through it.
* ``"underline"`` or ``"u"`` for underlined text.

Rich also supports the following styles, which are not well supported and may not display in your terminal:

* ``"underline2"`` or ``"uu"`` for doubly underlined text.
* ``"frame"`` for framed text.
* ``"encircle"`` for encircled text.
* ``"overline"`` or ``"o"`` for overlined text.

Style attributes and colors may be used in combination with each other. For example::

    console.print("Danger, Will Robinson!", style="blink bold red underline on white")

Styles may be negated by prefixing the attribute with the word "not". This can be used to turn off styles if they overlap. For example::

    console.print("foo [not bold]bar[/not bold] baz", style="bold")

This will print "foo" and "baz" in bold, but "bar" will be in normal text.

Styles may also have a ``"link"`` attribute, which will turn any styled text in to a *hyperlink* (if supported by your terminal software).

To add a link to a style, the definition should contain the word ``"link"`` followed by a URL. The following example will make a clickable link::

    console.print("Google", style="link https://google.com")

.. note::
    If you are familiar with HTML you may find applying links in this way a little odd, but the terminal considers a link to be another attribute just like bold, italic etc. 
    


Style Class
-----------

Ultimately the style definition is parsed and an instance of a :class:`~rich.style.Style` class is created. If you prefer, you can use the Style class in place of the style definition. Here's an example::

    from rich.style import Style
    danger_style = Style(color="red", blink=True, bold=True)
    console.print("Danger, Will Robinson!", style=danger_style)

It is slightly quicker to construct a Style class like this, since a style definition takes a little time to parse -- but only on the first call, as Rich will cache parsed style definitions.

Styles may be combined by adding them together, which is useful if you want to modify attributes of an existing style. Here's an example::

    from rich.console import Console
    from rich.style import Style
    console = Console()

    base_style = Style.parse("cyan")
    console.print("Hello, World", style = base_style + Style(underline=True))

You can parse a style definition explicitly with the :meth:`~rich.style.Style.parse` method, which accepts the style definition and returns a Style instance. For example, the following two lines are equivalent::
    
    style = Style(color="magenta", bgcolor="yellow", italic=True)
    style = Style.parse("italic magenta on yellow")

.. _themes:


Style Themes
------------

If you reuse styles it can be a maintenance headache if you ever want to modify an attribute or color -- you would have to change every line where the style is used. Rich provides a :class:`~rich.theme.Theme` class which you can use to define custom styles that you can refer to by name. That way you only need to update your styles in one place.

Style themes can make your code more semantic, for instance a style called ``"warning"`` better expresses intent than ``"italic magenta underline"``.

To use a style theme, construct a :class:`~rich.theme.Theme` instance and pass it to the :class:`~rich.console.Console` constructor. Here's an example::

    from rich.console import Console
    from rich.theme import Theme
    custom_theme = Theme({
        "info": "dim cyan",
        "warning": "magenta",
        "danger": "bold red"
    })
    console = Console(theme=custom_theme)
    console.print("This is information", style="info")
    console.print("[warning]The pod bay doors are locked[/warning]")
    console.print("Something terrible happened!", style="danger")


.. note::
    style names must be lower case, start with a letter, and only contain letters or the characters ``"."``, ``"-"``, ``"_"``.


Customizing Defaults
~~~~~~~~~~~~~~~~~~~~

The Theme class will inherit the default styles built-in to Rich. If your custom theme contains the name of an existing style, it will replace it. This allows you to customize the defaults as easily as you can create your own styles. For instance, here's how you can change how Rich highlights numbers::

    from rich.console import Console
    from rich.theme import Theme
    console = Console(theme=Theme({"repr.number": "bold green blink"}))
    console.print("The total is 128")

You can disable inheriting the default theme by setting ``inherit=False`` on the :class:`rich.theme.Theme` constructor.

To see the default theme, run the following commands::

    python -m rich.theme
    python -m rich.default_styles


Loading Themes
~~~~~~~~~~~~~~

If you prefer, you can write your styles in an external config file rather than in Python. Here's an example of the format::

    [styles]
    info = dim cyan
    warning = magenta
    danger = bold red

You can read these files with the :meth:`~rich.theme.Theme.read` method.



================================================
FILE: docs/source/syntax.rst
================================================
Syntax
======

Rich can syntax highlight various programming languages with line numbers.

To syntax highlight code, construct a :class:`~rich.syntax.Syntax` object and print it to the console. Here's an example::

    from rich.console import Console
    from rich.syntax import Syntax

    console = Console()
    with open("syntax.py", "rt") as code_file:
        syntax = Syntax(code_file.read(), "python")
    console.print(syntax)

You may also use the :meth:`~rich.syntax.Syntax.from_path` alternative constructor which will load the code from disk and auto-detect the file type. The example above could be re-written as follows::


    from rich.console import Console
    from rich.syntax import Syntax

    console = Console()
    syntax = Syntax.from_path("syntax.py")
    console.print(syntax)


Line numbers
------------

If you set ``line_numbers=True``, Rich will render a column for line numbers::

    syntax = Syntax.from_path("syntax.py", line_numbers=True)


Theme
-----

The Syntax constructor (and :meth:`~rich.syntax.Syntax.from_path`) accept a ``theme`` attribute which should be the name of a `Pygments theme <https://pygments.org/demo/>`_. It may also be one of the special case theme names "ansi_dark" or "ansi_light" which will use the color theme configured by the terminal.


Background color
----------------

You can override the background color from the theme by supplying a ``background_color`` argument to the constructor. This should be a string in the same format a style definition accepts, e.g. "red", "#ff0000", "rgb(255,0,0)" etc. You may also set the special value "default" which will use the default background color set in the terminal.


Syntax CLI
----------

You can use this class from the command line. Here's how you would syntax highlight a file called "syntax.py"::

    python -m rich.syntax syntax.py

For the full list of arguments, run the following::

    python -m rich.syntax -h
    



================================================
FILE: docs/source/tables.rst
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x93 in position 1532: illegal multibyte sequence


================================================
FILE: docs/source/text.rst
================================================
.. _rich_text:

Rich Text
=========

Rich has a :class:`~rich.text.Text` class you can use to mark up strings with color and style attributes. You can use a Text instance anywhere a string is accepted, which gives you a lot of control over presentation.

You can consider this class to be like a string with marked up regions of text. Unlike a built-in ``str``, a Text instance is mutable, and most methods operate in-place rather than returning a new instance. 

One way to add a style to Text is the :meth:`~rich.text.Text.stylize` method which applies a style to a start and end offset. Here is an example::

    from rich.console import Console
    from rich.text import Text

    console = Console()
    text = Text("Hello, World!")
    text.stylize("bold magenta", 0, 6)
    console.print(text)

This will print "Hello, World!" to the terminal, with the first word in bold magenta.

Alternatively, you can construct styled text by calling :meth:`~rich.text.Text.append` to add a string and style to the end of the Text. Here's an example::

    text = Text()
    text.append("Hello", style="bold magenta")
    text.append(" World!")
    console.print(text)

If you would like to use text that is already formatted with ANSI codes, call :meth:`~rich.text.Text.from_ansi` to convert it to a ``Text`` object::

    text = Text.from_ansi("\033[1;35mHello\033[0m, World!")
    console.print(text.spans)

Since building Text instances from parts is a common requirement, Rich offers :meth:`~rich.text.Text.assemble` which will combine strings or pairs of string and Style, and return a Text instance. The following example is equivalent to the ANSI example above::

    text = Text.assemble(("Hello", "bold magenta"), ", World!")
    console.print(text)

You can apply a style to given words in the text with :meth:`~rich.text.Text.highlight_words` or for ultimate control call :meth:`~rich.text.Text.highlight_regex` to highlight text matching a *regular expression*. 


Text attributes
~~~~~~~~~~~~~~~

The Text class has a number of parameters you can set on the constructor to modify how the text is displayed.

- ``justify`` should be "left", "center", "right", or "full", and will override default justify behavior.
- ``overflow`` should be "fold", "crop", or "ellipsis", and will override default overflow.
- ``no_wrap`` prevents wrapping if the text is longer then the available width.
- ``tab_size`` Sets the number of characters in a tab.

A Text instance may be used in place of a plain string virtually everywhere in the Rich API, which gives you a lot of control in how text renders within other Rich renderables. For instance, the following example right aligns text within a :class:`~rich.panel.Panel`::

    from rich import print
    from rich.panel import Panel
    from rich.text import Text
    panel = Panel(Text("Hello", justify="right"))
    print(panel)





================================================
FILE: docs/source/traceback.rst
================================================
Traceback
=========

Rich can render Python tracebacks with syntax highlighting and formatting. Rich tracebacks are easier to read and show more code than standard Python tracebacks.

To see an example of a Rich traceback, running the following command::

    python -m rich.traceback


Printing tracebacks
-------------------

The :meth:`~rich.console.Console.print_exception` method will print a traceback for the current exception being handled. Here's an example::

    from rich.console import Console
    console = Console()

    try:
        do_something()
    except Exception:
        console.print_exception(show_locals=True)

The ``show_locals=True`` parameter causes Rich to display the value of local variables for each frame of the traceback.
 
See `exception.py <https://github.com/willmcgugan/rich/blob/master/examples/exception.py>`_ for a larger example.


Traceback Handler
-----------------

Rich can be installed as the default traceback handler so that all uncaught exceptions will be rendered with highlighting. Here's how::

    from rich.traceback import install
    install(show_locals=True)

There are a few options to configure the traceback handler, see :func:`~rich.traceback.install` for details.

Automatic Traceback Handler
^^^^^^^^^^^^^^^^^^^^^^^^^^^

In some cases you may want to have the traceback handler installed automatically without having to worry about importing the code in your module. You can do that by modifying the `sitecustomize.py` in your virtual environment. Typically it would be located in your virtual environment path, underneath the `site-packages` folder, something like this::

    ./.venv/lib/python3.9/site-packages/sitecustomize.py

In most cases this file will not exist. If it doesn't exist, you can create it by::

    $ touch .venv/lib/python3.9/site-packages/sitecustomize.py

Add the following code to the file::

    from rich.traceback import install
    install(show_locals=True)

At this point, the traceback will be installed for any code that is run within the virtual environment.

.. note::
    If you plan on sharing your code, it is probably best to include the traceback install in your main entry point module.


Suppressing Frames
------------------

If you are working with a framework (click, django etc), you may only be interested in seeing the code from your own application within the traceback. You can exclude framework code by setting the `suppress` argument on `Traceback`, `install`, `Console.print_exception`, and `RichHandler`, which should be a list of modules or str paths.

Here's how you would exclude `click <https://click.palletsprojects.com/en/8.0.x/>`_ from Rich exceptions:: 

    import click
    from rich.traceback import install
    install(suppress=[click])

Suppressed frames will show the line and file only, without any code.

Max Frames
----------

A recursion error can generate very large tracebacks that take a while to render and contain a lot of repetitive frames. Rich guards against this with a `max_frames` argument, which defaults to 100. If a traceback contains more than 100 frames then only the first 50, and last 50 will be shown. You can disable this feature by setting `max_frames` to 0.

Here's an example of printing a recursive error::

    from rich.console import Console


    def foo(n):
        return bar(n)


    def bar(n):
        return foo(n)


    console = Console()

    try:
        foo(1)
    except Exception:
        console.print_exception(max_frames=20)




================================================
FILE: docs/source/tree.rst
================================================
Tree
====

Rich has a :class:`~rich.tree.Tree` class which can generate a tree view in the terminal. A tree view is a great way of presenting the contents of a filesystem or any other hierarchical data. Each branch of the tree can have a label which may be text or any other Rich renderable.

Run the following command to see a demonstration of a Rich tree::

    python -m rich.tree

The following code creates and prints a tree with a simple text label::

    from rich.tree import Tree
    from rich import print

    tree = Tree("Rich Tree")
    print(tree)

With only a single ``Tree`` instance this will output nothing more than the text "Rich Tree". Things get more interesting when we call :meth:`~rich.tree.Tree.add` to add more branches to the Tree. The following code adds two more branches::

    tree.add("foo")
    tree.add("bar")
    print(tree)

The tree will now have two branches connected to the original tree with guide lines.

When you call :meth:`~rich.tree.Tree.add` a new Tree instance is returned. You can use this instance to add more branches to, and build up a more complex tree. Let's add a few more levels to the tree::

    baz_tree = tree.add("baz")
    baz_tree.add("[red]Red").add("[green]Green").add("[blue]Blue")
    print(tree)


Tree Styles
~~~~~~~~~~~

The Tree constructor and :meth:`~rich.tree.Tree.add` method allows you to specify a ``style`` argument which sets a style for the entire branch, and ``guide_style`` which sets the style for the guide lines. These styles are inherited by the branches and will apply to any sub-trees as well.

If you set ``guide_style`` to bold, Rich will select the thicker variations of unicode line characters. Similarly, if you select the "underline2" style you will get double line style of unicode characters.


Examples
~~~~~~~~

For a more practical demonstration, see `tree.py <https://github.com/willmcgugan/rich/blob/master/examples/tree.py>`_ which can generate a tree view of a directory in your hard drive.




================================================
FILE: docs/source/appendix/box.rst
================================================
.. _appendix_box:

Box
===

Rich has a number of constants that set the box characters used to draw tables and panels. To select a box style import one of the constants below from ``rich.box``. For example::

    from rich import box
    table = Table(box=box.SQUARE)


.. note::
    Some of the box drawing characters will not display correctly on Windows legacy terminal (cmd.exe) with *raster* fonts, and are disabled by default. If you want the full range of box options on Windows legacy terminal, use a *truetype* font and set the ``safe_box`` parameter on the Table class to ``False``.


The following table is generated with this command::

    python -m rich.box

.. image:: ../../images/box.svg



================================================
FILE: docs/source/appendix/colors.rst
================================================
[Binary file]


================================================
FILE: docs/source/reference/abc.rst
================================================
rich.abc
========

.. automodule:: rich.abc
    :members:





================================================
FILE: docs/source/reference/align.rst
================================================
rich.align
==========

.. automodule:: rich.align
    :members:





================================================
FILE: docs/source/reference/bar.rst
================================================
rich.bar
========

.. automodule:: rich.bar
    :members:





================================================
FILE: docs/source/reference/color.rst
================================================
rich.color
==========

.. automodule:: rich.color
    :members:





================================================
FILE: docs/source/reference/columns.rst
================================================
rich.columns
============

.. automodule:: rich.columns
    :members:





================================================
FILE: docs/source/reference/console.rst
================================================
rich.console
============

.. automodule:: rich.console
    :members:



================================================
FILE: docs/source/reference/control.rst
================================================
rich.control
============

.. automodule:: rich.control
    :members:



================================================
FILE: docs/source/reference/emoji.rst
================================================
rich.emoji
==========

.. automodule:: rich.emoji
    :members: Emoji




================================================
FILE: docs/source/reference/highlighter.rst
================================================
rich.highlighter
================

.. automodule:: rich.highlighter
    :members:
    :special-members: __call__




================================================
FILE: docs/source/reference/init.rst
================================================
rich
====

.. automodule:: rich
    :members:
    




================================================
FILE: docs/source/reference/json.rst
================================================
rich.json
=========

.. automodule:: rich.json
    :members:





================================================
FILE: docs/source/reference/layout.rst
================================================
rich.layout
===========

.. automodule:: rich.layout
    :members:





================================================
FILE: docs/source/reference/live.rst
================================================
rich.live
=========

.. automodule:: rich.live
    :members:


================================================
FILE: docs/source/reference/logging.rst
================================================
.. _logging:

rich.logging
============

.. automodule:: rich.logging
    :members: RichHandler




================================================
FILE: docs/source/reference/markdown.rst
================================================
rich.markdown
=============

.. automodule:: rich.markdown
    :members:





================================================
FILE: docs/source/reference/markup.rst
================================================
rich.markup
===========

.. automodule:: rich.markup
    :members:



================================================
FILE: docs/source/reference/measure.rst
================================================
rich.measure
============

.. automodule:: rich.measure
    :members:



================================================
FILE: docs/source/reference/padding.rst
================================================
rich.padding
============

.. automodule:: rich.padding
    :members:



================================================
FILE: docs/source/reference/panel.rst
================================================
rich.panel
==========

.. automodule:: rich.panel
    :members: Panel




================================================
FILE: docs/source/reference/pretty.rst
================================================
rich.pretty
===========

.. automodule:: rich.pretty
    :members: 




================================================
FILE: docs/source/reference/progress.rst
================================================
rich.progress
=============

.. automodule:: rich.progress
    :members:



================================================
FILE: docs/source/reference/progress_bar.rst
================================================
rich.progress_bar
=================

.. automodule:: rich.progress_bar
    :members:





================================================
FILE: docs/source/reference/prompt.rst
================================================
rich.prompt
===========

.. automodule:: rich.prompt
    :members:



================================================
FILE: docs/source/reference/protocol.rst
================================================
rich.protocol
=============

.. automodule:: rich.protocol
    :members:



================================================
FILE: docs/source/reference/rule.rst
================================================
rich.rule
=========

.. automodule:: rich.rule
    :members:



================================================
FILE: docs/source/reference/segment.rst
================================================
rich.segment
============

.. automodule:: rich.segment
    :members:



================================================
FILE: docs/source/reference/spinner.rst
================================================
rich.spinner
============

.. automodule:: rich.spinner
    :members:



================================================
FILE: docs/source/reference/status.rst
================================================
rich.status
============

.. automodule:: rich.status
    :members:



================================================
FILE: docs/source/reference/style.rst
================================================
rich.style
==========

.. automodule:: rich.style
    :members:
    :special-members: __call__




================================================
FILE: docs/source/reference/styled.rst
================================================
rich.styled
===========

.. automodule:: rich.styled
    :members:





================================================
FILE: docs/source/reference/syntax.rst
================================================
rich.syntax
===========

.. automodule:: rich.syntax
    :members: Syntax



================================================
FILE: docs/source/reference/table.rst
================================================
rich.table
==========

.. automodule:: rich.table
    :members:



================================================
FILE: docs/source/reference/text.rst
================================================
rich.text
=========

.. automodule:: rich.text
    :members: Text, TextType




================================================
FILE: docs/source/reference/theme.rst
================================================
rich.theme
==========

.. automodule:: rich.theme
    :members: Theme




================================================
FILE: docs/source/reference/traceback.rst
================================================
rich.traceback
==============

.. automodule:: rich.traceback
    :members: Traceback, install




================================================
FILE: docs/source/reference/tree.rst
================================================
rich.tree
=========

.. automodule:: rich.tree
    :members: 



================================================
FILE: examples/README.md
================================================
# Examples

This directory contains various demonstrations various Rich features. To run them, make sure Rich is installed, then run the example you want with `python example.py` on the command line. For example, `python justify.py`.

Be sure to check the source!



================================================
FILE: examples/attrs.py
================================================
from typing import List

try:
    import attr
except ImportError:
    print("This example requires attrs library")
    print("pip install attrs")
    raise SystemExit()


@attr.define
class Point3D:
    x: float
    y: float
    z: float = 0


@attr.define
class Triangle:
    point1: Point3D
    point2: Point3D
    point3: Point3D


@attr.define
class Model:
    name: str
    triangles: List[Triangle] = attr.Factory(list)


if __name__ == "__main__":
    model = Model(
        name="Alien#1",
        triangles=[
            Triangle(
                Point3D(x=20, y=50),
                Point3D(x=50, y=15, z=-45.34),
                Point3D(3.1426, 83.2323, -16),
            )
        ],
    )

    from rich.console import Console
    from rich.pretty import Pretty
    from rich.table import Column, Table
    from rich.text import Text

    console = Console()

    table = Table("attrs *with* Rich", Column(Text.from_markup("attrs *without* Rich")))

    table.add_row(Pretty(model), repr(model))
    console.print(table)



================================================
FILE: examples/bars.py
================================================
"""

Use Bar to renderer a sort-of circle.

"""
import math

from rich.align import Align
from rich.bar import Bar
from rich.color import Color
from rich import print


SIZE = 40

for row in range(SIZE):
    y = (row / (SIZE - 1)) * 2 - 1
    x = math.sqrt(1 - y * y)
    color = Color.from_rgb((1 + y) * 127.5, 0, 0)
    bar = Bar(2, width=SIZE * 2, begin=1 - x, end=1 + x, color=color)
    print(Align.center(bar))



================================================
FILE: examples/columns.py
================================================
"""
This example shows how to display content in columns.

The data is pulled from https://randomuser.me
"""

import json
from urllib.request import urlopen

from rich.console import Console
from rich.columns import Columns
from rich.panel import Panel


def get_content(user):
    """Extract text from user dict."""
    country = user["location"]["country"]
    name = f"{user['name']['first']} {user['name']['last']}"
    return f"[b]{name}[/b]\n[yellow]{country}"


console = Console()


users = json.loads(urlopen("https://randomuser.me/api/?results=30").read())["results"]
console.print(users, overflow="ignore", crop=False)
user_renderables = [Panel(get_content(user), expand=True) for user in users]
console.print(Columns(user_renderables))



================================================
FILE: examples/cp_progress.py
================================================
"""
A very minimal `cp` clone that displays a progress bar.
"""
import os
import shutil
import sys

from rich.progress import Progress

if __name__ == "__main__":
    if len(sys.argv) == 3:
        with Progress() as progress:
            desc = os.path.basename(sys.argv[1])
            with progress.open(sys.argv[1], "rb", description=desc) as src:
                with open(sys.argv[2], "wb") as dst:
                    shutil.copyfileobj(src, dst)
    else:
        print("Copy a file with a progress bar.")
        print("Usage:\n\tpython cp_progress.py SRC DST")



================================================
FILE: examples/downloader.py
================================================
"""
A rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.
"""

import os.path
import sys
from concurrent.futures import ThreadPoolExecutor
import signal
from functools import partial
from threading import Event
from typing import Iterable
from urllib.request import urlopen

from rich.progress import (
    BarColumn,
    DownloadColumn,
    Progress,
    TaskID,
    TextColumn,
    TimeRemainingColumn,
    TransferSpeedColumn,
)

progress = Progress(
    TextColumn("[bold blue]{task.fields[filename]}", justify="right"),
    BarColumn(bar_width=None),
    "[progress.percentage]{task.percentage:>3.1f}%",
    "•",
    DownloadColumn(),
    "•",
    TransferSpeedColumn(),
    "•",
    TimeRemainingColumn(),
)


done_event = Event()


def handle_sigint(signum, frame):
    done_event.set()


signal.signal(signal.SIGINT, handle_sigint)


def copy_url(task_id: TaskID, url: str, path: str) -> None:
    """Copy data from a url to a local file."""
    progress.console.log(f"Requesting {url}")
    response = urlopen(url)
    # This will break if the response doesn't contain content length
    progress.update(task_id, total=int(response.info()["Content-length"]))
    with open(path, "wb") as dest_file:
        progress.start_task(task_id)
        for data in iter(partial(response.read, 32768), b""):
            dest_file.write(data)
            progress.update(task_id, advance=len(data))
            if done_event.is_set():
                return
    progress.console.log(f"Downloaded {path}")


def download(urls: Iterable[str], dest_dir: str):
    """Download multiple files to the given directory."""

    with progress:
        with ThreadPoolExecutor(max_workers=4) as pool:
            for url in urls:
                filename = url.split("/")[-1]
                dest_path = os.path.join(dest_dir, filename)
                task_id = progress.add_task("download", filename=filename, start=False)
                pool.submit(copy_url, task_id, url, dest_path)


if __name__ == "__main__":
    # Try with https://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso
    # and https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso
    if sys.argv[1:]:
        download(sys.argv[1:], "./")
    else:
        print("Usage:\n\tpython downloader.py URL1 URL2 URL3 (etc)")



================================================
FILE: examples/dynamic_progress.py
================================================
"""

Demonstrates how to create a dynamic group of progress bars,
showing multi-level progress for multiple tasks (installing apps in the example),
each of which consisting of multiple steps.

"""

import time

from rich.console import Group
from rich.panel import Panel
from rich.live import Live
from rich.progress import (
    BarColumn,
    Progress,
    SpinnerColumn,
    TextColumn,
    TimeElapsedColumn,
)


def run_steps(name, step_times, app_steps_task_id):
    """Run steps for a single app, and update corresponding progress bars."""

    for idx, step_time in enumerate(step_times):
        # add progress bar for this step (time elapsed + spinner)
        action = step_actions[idx]
        step_task_id = step_progress.add_task("", action=action, name=name)

        # run steps, update progress
        for _ in range(step_time):
            time.sleep(0.5)
            step_progress.update(step_task_id, advance=1)

        # stop and hide progress bar for this step when done
        step_progress.stop_task(step_task_id)
        step_progress.update(step_task_id, visible=False)

        # also update progress bar for current app when step is done
        app_steps_progress.update(app_steps_task_id, advance=1)


# progress bar for current app showing only elapsed time,
# which will stay visible when app is installed
current_app_progress = Progress(
    TimeElapsedColumn(),
    TextColumn("{task.description}"),
)

# progress bars for single app steps (will be hidden when step is done)
step_progress = Progress(
    TextColumn("  "),
    TimeElapsedColumn(),
    TextColumn("[bold purple]{task.fields[action]}"),
    SpinnerColumn("simpleDots"),
)
# progress bar for current app (progress in steps)
app_steps_progress = Progress(
    TextColumn(
        "[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%"
    ),
    BarColumn(),
    TextColumn("({task.completed} of {task.total} steps done)"),
)
# overall progress bar
overall_progress = Progress(
    TimeElapsedColumn(), BarColumn(), TextColumn("{task.description}")
)
# group of progress bars;
# some are always visible, others will disappear when progress is complete
progress_group = Group(
    Panel(Group(current_app_progress, step_progress, app_steps_progress)),
    overall_progress,
)

# tuple specifies how long each step takes for that app
step_actions = ("downloading", "configuring", "building", "installing")
apps = [
    ("one", (2, 1, 4, 2)),
    ("two", (1, 3, 8, 4)),
    ("three", (2, 1, 3, 2)),
]

# create overall progress bar
overall_task_id = overall_progress.add_task("", total=len(apps))

# use own live instance as context manager with group of progress bars,
# which allows for running multiple different progress bars in parallel,
# and dynamically showing/hiding them
with Live(progress_group):
    for idx, (name, step_times) in enumerate(apps):
        # update message on overall progress bar
        top_descr = "[bold #AAAAAA](%d out of %d apps installed)" % (idx, len(apps))
        overall_progress.update(overall_task_id, description=top_descr)

        # add progress bar for steps of this app, and run the steps
        current_task_id = current_app_progress.add_task("Installing app %s" % name)
        app_steps_task_id = app_steps_progress.add_task(
            "", total=len(step_times), name=name
        )
        run_steps(name, step_times, app_steps_task_id)

        # stop and hide steps progress bar for this specific app
        app_steps_progress.update(app_steps_task_id, visible=False)
        current_app_progress.stop_task(current_task_id)
        current_app_progress.update(
            current_task_id, description="[bold green]App %s installed!" % name
        )

        # increase overall progress now this task is done
        overall_progress.update(overall_task_id, advance=1)

    # final update for message on overall progress bar
    overall_progress.update(
        overall_task_id, description="[bold green]%s apps installed, done!" % len(apps)
    )



================================================
FILE: examples/exception.py
================================================
"""
Basic example to show how to print an traceback of an exception
"""
from typing import List, Tuple

from rich.console import Console

console = Console()


def divide_by(number: float, divisor: float) -> float:
    """Divide any number by zero."""
    # Will throw a ZeroDivisionError if divisor is 0
    result = number / divisor
    return result


def divide_all(divides: List[Tuple[float, float]]) -> None:
    """Do something impossible every day."""

    for number, divisor in divides:
        console.print(f"dividing {number} by {divisor}")
        try:
            result = divide_by(number, divisor)
        except Exception:
            console.print_exception(extra_lines=8, show_locals=True)
        else:
            console.print(f" = {result}")


DIVIDES = [
    (1000, 200),
    (10000, 500),
    (1, 0),
    (0, 1000000),
    (3.1427, 2),
    (888, 0),
    (2**32, 2**16),
]

divide_all(DIVIDES)



================================================
FILE: examples/export.py
================================================
"""
Demonstrates export console output
"""

from rich.console import Console
from rich.table import Table

console = Console(record=True)


def print_table():
    table = Table(title="Star Wars Movies")

    table.add_column("Released", style="cyan", no_wrap=True)
    table.add_column("Title", style="magenta")
    table.add_column("Box Office", justify="right", style="green")

    table.add_row("Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$952,110,690")
    table.add_row("May 25, 2018", "Solo: A Star Wars Story", "$393,151,347")
    table.add_row("Dec 15, 2017", "Star Wars Ep. V111: The Last Jedi", "$1,332,539,889")
    table.add_row("Dec 16, 2016", "Rogue One: A Star Wars Story", "$1,332,439,889")

    console.print(table)


# Prints table
print_table()

# Get console output as text
file1 = "table_export_plaintext.txt"
text = console.export_text()
with open(file1, "w") as file:
    file.write(text)
print(f"Exported console output as plain text to {file1}")

# Calling print_table again because console output buffer
# is flushed once export function is called
print_table()

# Get console output as html
# use clear=False so output is not flushed after export
file2 = "table_export_html.html"
html = console.export_html(clear=False)
with open(file2, "w") as file:
    file.write(html)
print(f"Exported console output as html to {file2}")

# Export text output to table_export.txt
file3 = "table_export_plaintext2.txt"
console.save_text(file3, clear=False)
print(f"Exported console output as plain text to {file3}")

# Export html output to table_export.html
file4 = "table_export_html2.html"
console.save_html(file4)
print(f"Exported console output as html to {file4}")



================================================
FILE: examples/file_progress.py
================================================
from time import sleep
from urllib.request import urlopen

from rich.progress import wrap_file

# Read a URL with urlopen
response = urlopen("https://www.textualize.io")
# Get the size from the headers
size = int(response.headers["Content-Length"])

# Wrap the response so that it update progress

with wrap_file(response, size) as file:
    for line in file:
        print(line.decode("utf-8"), end="")
        sleep(0.1)



================================================
FILE: examples/fullscreen.py
================================================
"""
Demonstrates a Rich "application" using the Layout and Live classes.

"""

from datetime import datetime

from rich import box
from rich.align import Align
from rich.console import Console, Group
from rich.layout import Layout
from rich.panel import Panel
from rich.progress import BarColumn, Progress, SpinnerColumn, TextColumn
from rich.syntax import Syntax
from rich.table import Table

console = Console()


def make_layout() -> Layout:
    """Define the layout."""
    layout = Layout(name="root")

    layout.split(
        Layout(name="header", size=3),
        Layout(name="main", ratio=1),
        Layout(name="footer", size=7),
    )
    layout["main"].split_row(
        Layout(name="side"),
        Layout(name="body", ratio=2, minimum_size=60),
    )
    layout["side"].split(Layout(name="box1"), Layout(name="box2"))
    return layout


def make_sponsor_message() -> Panel:
    """Some example content."""
    sponsor_message = Table.grid(padding=1)
    sponsor_message.add_column(style="green", justify="right")
    sponsor_message.add_column(no_wrap=True)
    sponsor_message.add_row(
        "Twitter",
        "[u blue link=https://twitter.com/textualize]https://twitter.com/textualize",
    )
    sponsor_message.add_row(
        "CEO",
        "[u blue link=https://twitter.com/willmcgugan]https://twitter.com/willmcgugan",
    )
    sponsor_message.add_row(
        "Textualize", "[u blue link=https://www.textualize.io]https://www.textualize.io"
    )

    message = Table.grid(padding=1)
    message.add_column()
    message.add_column(no_wrap=True)
    message.add_row(sponsor_message)

    message_panel = Panel(
        Align.center(
            Group("\n", Align.center(sponsor_message)),
            vertical="middle",
        ),
        box=box.ROUNDED,
        padding=(1, 2),
        title="[b red]Thanks for trying out Rich!",
        border_style="bright_blue",
    )
    return message_panel


class Header:
    """Display header with clock."""

    def __rich__(self) -> Panel:
        grid = Table.grid(expand=True)
        grid.add_column(justify="center", ratio=1)
        grid.add_column(justify="right")
        grid.add_row(
            "[b]Rich[/b] Layout application",
            datetime.now().ctime().replace(":", "[blink]:[/]"),
        )
        return Panel(grid, style="white on blue")


def make_syntax() -> Syntax:
    code = """\
def ratio_resolve(total: int, edges: List[Edge]) -> List[int]:
    sizes = [(edge.size or None) for edge in edges]

    # While any edges haven't been calculated
    while any(size is None for size in sizes):
        # Get flexible edges and index to map these back on to sizes list
        flexible_edges = [
            (index, edge)
            for index, (size, edge) in enumerate(zip(sizes, edges))
            if size is None
        ]
        # Remaining space in total
        remaining = total - sum(size or 0 for size in sizes)
        if remaining <= 0:
            # No room for flexible edges
            sizes[:] = [(size or 0) for size in sizes]
            break
        # Calculate number of characters in a ratio portion
        portion = remaining / sum((edge.ratio or 1) for _, edge in flexible_edges)

        # If any edges will be less than their minimum, replace size with the minimum
        for index, edge in flexible_edges:
            if portion * edge.ratio <= edge.minimum_size:
                sizes[index] = edge.minimum_size
                break
        else:
            # Distribute flexible space and compensate for rounding error
            # Since edge sizes can only be integers we need to add the remainder
            # to the following line
            _modf = modf
            remainder = 0.0
            for index, edge in flexible_edges:
                remainder, size = _modf(portion * edge.ratio + remainder)
                sizes[index] = int(size)
            break
    # Sizes now contains integers only
    return cast(List[int], sizes)
    """
    syntax = Syntax(code, "python", line_numbers=True)
    return syntax


job_progress = Progress(
    "{task.description}",
    SpinnerColumn(),
    BarColumn(),
    TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
)
job_progress.add_task("[green]Cooking")
job_progress.add_task("[magenta]Baking", total=200)
job_progress.add_task("[cyan]Mixing", total=400)

total = sum(task.total for task in job_progress.tasks)
overall_progress = Progress()
overall_task = overall_progress.add_task("All Jobs", total=int(total))

progress_table = Table.grid(expand=True)
progress_table.add_row(
    Panel(
        overall_progress,
        title="Overall Progress",
        border_style="green",
        padding=(2, 2),
    ),
    Panel(job_progress, title="[b]Jobs", border_style="red", padding=(1, 2)),
)


layout = make_layout()
layout["header"].update(Header())
layout["body"].update(make_sponsor_message())
layout["box2"].update(Panel(make_syntax(), border_style="green"))
layout["box1"].update(Panel(layout.tree, border_style="red"))
layout["footer"].update(progress_table)


from time import sleep

from rich.live import Live

with Live(layout, refresh_per_second=10, screen=True):
    while not overall_progress.finished:
        sleep(0.1)
        for job in job_progress.tasks:
            if not job.finished:
                job_progress.advance(job.id)

        completed = sum(task.completed for task in job_progress.tasks)
        overall_progress.update(overall_task, completed=completed)



================================================
FILE: examples/group.py
================================================
from rich import print
from rich.console import Group
from rich.panel import Panel

panel_group = Group(
    Panel("Hello", style="on blue"),
    Panel("World", style="on red"),
)
print(Panel(panel_group))



================================================
FILE: examples/group2.py
================================================
from rich import print
from rich.console import group
from rich.panel import Panel


@group()
def get_panels():
    yield Panel("Hello", style="on blue")
    yield Panel("World", style="on red")


print(Panel(get_panels()))



================================================
FILE: examples/highlighter.py
================================================
"""
This example demonstrates a simple text highlighter.
"""

from rich.console import Console
from rich.highlighter import RegexHighlighter
from rich.theme import Theme


class EmailHighlighter(RegexHighlighter):
    """Apply style to anything that looks like an email."""

    base_style = "example."
    highlights = [r"(?P<email>[\w-]+@([\w-]+\.)+[\w-]+)"]


theme = Theme({"example.email": "bold magenta"})
console = Console(highlighter=EmailHighlighter(), theme=theme)

console.print("Send funds to money@example.org")



================================================
FILE: examples/jobs.py
================================================
from time import sleep
from rich.panel import Panel
from rich.progress import Progress


JOBS = [100, 150, 25, 70, 110, 90]

progress = Progress(auto_refresh=False)
master_task = progress.add_task("overall", total=sum(JOBS))
jobs_task = progress.add_task("jobs")

progress.console.print(
    Panel(
        "[bold blue]A demonstration of progress with a current task and overall progress.",
        padding=1,
    )
)

with progress:
    for job_no, job in enumerate(JOBS):
        progress.log(f"Starting job #{job_no}")
        sleep(0.2)
        progress.reset(jobs_task, total=job, description=f"job [bold yellow]#{job_no}")
        progress.start_task(jobs_task)
        for wait in progress.track(range(job), task_id=jobs_task):
            sleep(0.01)
        progress.advance(master_task, job)
        progress.log(f"Job #{job_no} is complete")
    progress.log(
        Panel(":sparkle: All done! :sparkle:", border_style="green", padding=1)
    )



================================================
FILE: examples/justify.py
================================================
"""
This example demonstrates the justify argument to print.
"""

from rich.console import Console

console = Console(width=20)

style = "bold white on blue"
console.print("Rich", style=style)
console.print("Rich", style=style, justify="left")
console.print("Rich", style=style, justify="center")
console.print("Rich", style=style, justify="right")



================================================
FILE: examples/justify2.py
================================================
"""
This example demonstrates the justify argument to print.
"""

from rich.console import Console
from rich.panel import Panel

console = Console(width=20)

style = "bold white on blue"
panel = Panel("Rich", style="on red", expand=False)
console.print(panel, style=style)
console.print(panel, style=style, justify="left")
console.print(panel, style=style, justify="center")
console.print(panel, style=style, justify="right")



================================================
FILE: examples/layout.py
================================================
"""

Demonstrates a dynamic Layout

"""

from datetime import datetime

from time import sleep

from rich.align import Align
from rich.console import Console
from rich.layout import Layout
from rich.live import Live
from rich.text import Text

console = Console()
layout = Layout()

layout.split(
    Layout(name="header", size=1),
    Layout(ratio=1, name="main"),
    Layout(size=10, name="footer"),
)

layout["main"].split_row(Layout(name="side"), Layout(name="body", ratio=2))

layout["side"].split(Layout(), Layout())

layout["body"].update(
    Align.center(
        Text(
            """This is a demonstration of rich.Layout\n\nHit Ctrl+C to exit""",
            justify="center",
        ),
        vertical="middle",
    )
)


class Clock:
    """Renders the time in the center of the screen."""

    def __rich__(self) -> Text:
        return Text(datetime.now().ctime(), style="bold magenta", justify="center")


layout["header"].update(Clock())

with Live(layout, screen=True, redirect_stderr=False) as live:
    try:
        while True:
            sleep(1)
    except KeyboardInterrupt:
        pass



================================================
FILE: examples/link.py
================================================
from rich import print

print("If your terminal supports links, the following text should be clickable:")
print("[link=https://www.willmcgugan.com][i]Visit [red]my[/red][/i] [yellow]Blog[/]")



================================================
FILE: examples/listdir.py
================================================
"""
A very simple `ls` clone.

If your terminal supports hyperlinks you should be able to launch files by clicking the filename
(usually with cmd / ctrl).

"""

import os
import sys

from rich import print
from rich.columns import Columns
from rich.text import Text

try:
    root_path = sys.argv[1]
except IndexError:
    print("Usage: python listdir.py DIRECTORY")
else:

    def make_filename_text(filename):
        path = os.path.abspath(os.path.join(root_path, filename))
        text = Text(filename, style="bold blue" if os.path.isdir(path) else "default")
        text.stylize(f"link file://{path}")
        text.highlight_regex(r"\..*?$", "bold")
        return text

    filenames = [
        filename for filename in os.listdir(root_path) if not filename.startswith(".")
    ]
    filenames.sort(key=lambda filename: filename.lower())
    filename_text = [make_filename_text(filename) for filename in filenames]
    columns = Columns(filename_text, equal=True, column_first=True)
    print(columns)



================================================
FILE: examples/live_progress.py
================================================
"""

Demonstrates the use of multiple Progress instances in a single Live display.    

"""

from time import sleep

from rich.live import Live
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, BarColumn, TextColumn
from rich.table import Table


job_progress = Progress(
    "{task.description}",
    SpinnerColumn(),
    BarColumn(),
    TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
)
job1 = job_progress.add_task("[green]Cooking")
job2 = job_progress.add_task("[magenta]Baking", total=200)
job3 = job_progress.add_task("[cyan]Mixing", total=400)

total = sum(task.total for task in job_progress.tasks)
overall_progress = Progress()
overall_task = overall_progress.add_task("All Jobs", total=int(total))

progress_table = Table.grid()
progress_table.add_row(
    Panel.fit(
        overall_progress, title="Overall Progress", border_style="green", padding=(2, 2)
    ),
    Panel.fit(job_progress, title="[b]Jobs", border_style="red", padding=(1, 2)),
)

with Live(progress_table, refresh_per_second=10):
    while not overall_progress.finished:
        sleep(0.1)
        for job in job_progress.tasks:
            if not job.finished:
                job_progress.advance(job.id)

        completed = sum(task.completed for task in job_progress.tasks)
        overall_progress.update(overall_task, completed=completed)



================================================
FILE: examples/log.py
================================================
"""
A simulation of Rich console logging.
"""

import time
from rich.console import Console
from rich.style import Style
from rich.theme import Theme
from rich.highlighter import RegexHighlighter


class RequestHighlighter(RegexHighlighter):
    base_style = "req."
    highlights = [
        r"^(?P<protocol>\w+) (?P<method>\w+) (?P<path>\S+) (?P<result>\w+) (?P<stats>\[.+\])$",
        r"\/(?P<filename>\w+\..{3,4})",
    ]


theme = Theme(
    {
        "req.protocol": Style.parse("dim bold green"),
        "req.method": Style.parse("bold cyan"),
        "req.path": Style.parse("magenta"),
        "req.filename": Style.parse("bright_magenta"),
        "req.result": Style.parse("yellow"),
        "req.stats": Style.parse("dim"),
    }
)
console = Console(theme=theme)

console.log("Server starting...")
console.log("Serving on http://127.0.0.1:8000")

time.sleep(1)

request_highlighter = RequestHighlighter()

console.log(
    request_highlighter("HTTP GET /foo/bar/baz/egg.html 200 [0.57, 127.0.0.1:59076]"),
)

console.log(
    request_highlighter(
        "HTTP GET /foo/bar/baz/background.jpg 200 [0.57, 127.0.0.1:59076]"
    ),
)


time.sleep(1)


def test_locals():
    foo = (1, 2, 3)
    movies = ["Deadpool", "Rise of the Skywalker"]
    console = Console()

    console.log(
        "[b]JSON[/b] RPC [i]batch[/i]",
        [
            {"jsonrpc": "2.0", "method": "sum", "params": [1, 2, 4], "id": "1"},
            {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]},
            {"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": "2"},
            {"foo": "boo"},
            {
                "jsonrpc": "2.0",
                "method": "foo.get",
                "params": {"name": "myself", "enable": False, "grommits": None},
                "id": "5",
            },
            {"jsonrpc": "2.0", "method": "get_data", "id": "9"},
        ],
        log_locals=True,
    )


test_locals()



================================================
FILE: examples/overflow.py
================================================
from typing import List
from rich.console import Console, OverflowMethod

console = Console(width=14)
supercali = "supercalifragilisticexpialidocious"

overflow_methods: List[OverflowMethod] = ["fold", "crop", "ellipsis"]
for overflow in overflow_methods:
    console.rule(overflow)
    console.print(supercali, overflow=overflow, style="bold blue")
    console.print()



================================================
FILE: examples/padding.py
================================================
from rich import print
from rich.padding import Padding

test = Padding("Hello", (2, 4), style="on blue", expand=False)
print(test)



================================================
FILE: examples/print_calendar.py
================================================
"""
Builds calendar layout using Columns and Tables.
Usage:
python print_calendar.py [YEAR]
Example:
python print_calendar.py 2021
"""
import argparse
import calendar
from datetime import datetime

from rich.align import Align
from rich import box
from rich.columns import Columns
from rich.console import Console
from rich.table import Table
from rich.text import Text


def print_calendar(year):
    """Print a calendar for a given year."""

    today = datetime.today()
    year = int(year)
    cal = calendar.Calendar()
    today_tuple = today.day, today.month, today.year

    tables = []

    for month in range(1, 13):
        table = Table(
            title=f"{calendar.month_name[month]} {year}",
            style="green",
            box=box.SIMPLE_HEAVY,
            padding=0,
        )

        for week_day in cal.iterweekdays():
            table.add_column(
                "{:.3}".format(calendar.day_name[week_day]), justify="right"
            )

        month_days = cal.monthdayscalendar(year, month)
        for weekdays in month_days:
            days = []
            for index, day in enumerate(weekdays):
                day_label = Text(str(day or ""), style="magenta")
                if index in (5, 6):
                    day_label.stylize("blue")
                if day and (day, month, year) == today_tuple:
                    day_label.stylize("white on dark_red")
                days.append(day_label)
            table.add_row(*days)

        tables.append(Align.center(table))

    console = Console()
    columns = Columns(tables, padding=1, expand=True)
    console.rule(str(year))
    console.print()
    console.print(columns)
    console.rule(str(year))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Rich calendar")
    parser.add_argument("year", metavar="year", type=int)
    args = parser.parse_args()

    print_calendar(args.year)



================================================
FILE: examples/rainbow.py
================================================
"""

This example demonstrates how to write a custom highlighter.

"""

from random import randint

from rich import print
from rich.highlighter import Highlighter


class RainbowHighlighter(Highlighter):
    def highlight(self, text):
        for index in range(len(text)):
            text.stylize(f"color({randint(16, 255)})", index, index + 1)


rainbow = RainbowHighlighter()
print(rainbow("I must not fear. Fear is the mind-killer."))



================================================
FILE: examples/recursive_error.py
================================================
"""

Demonstrates Rich tracebacks for recursion errors.

Rich can exclude frames in the middle to avoid huge tracebacks.

"""

from rich.console import Console


def foo(n):
    return bar(n)


def bar(n):
    return foo(n)


console = Console()

try:
    foo(1)
except Exception:
    console.print_exception(max_frames=20)



================================================
FILE: examples/repr.py
================================================
import rich.repr


@rich.repr.auto
class Bird:
    def __init__(self, name, eats=None, fly=True, extinct=False):
        self.name = name
        self.eats = list(eats) if eats else []
        self.fly = fly
        self.extinct = extinct


# Note that the repr is still generated without Rich
# Try commenting out the following line

from rich import print

BIRDS = {
    "gull": Bird("gull", eats=["fish", "chips", "ice cream", "sausage rolls"]),
    "penguin": Bird("penguin", eats=["fish"], fly=False),
    "dodo": Bird("dodo", eats=["fruit"], fly=False, extinct=True),
}
print(BIRDS)



================================================
FILE: examples/save_table_svg.py
================================================
"""
Demonstrates how to export a SVG
"""

from rich.console import Console
from rich.table import Table

table = Table(title="Star Wars Movies")

table.add_column("Released", style="cyan", no_wrap=True)
table.add_column("Title", style="magenta")
table.add_column("Box Office", justify="right", style="green")

table.add_row("Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$952,110,690")
table.add_row("May 25, 2018", "Solo: A Star Wars Story", "$393,151,347")
table.add_row("Dec 15, 2017", "Star Wars Ep. V111: The Last Jedi", "$1,332,539,889")
table.add_row("Dec 16, 2016", "Rogue One: A Star Wars Story", "$1,332,439,889")

console = Console(record=True)
console.print(table, justify="center")
console.save_svg("table.svg", title="save_table_svg.py")

import os
import webbrowser

webbrowser.open(f"file://{os.path.abspath('table.svg')}")



================================================
FILE: examples/screen.py
================================================
"""
Demonstration of Console.screen() 
"""

from time import sleep

from rich.align import Align
from rich.console import Console
from rich.panel import Panel

console = Console()

with console.screen(style="bold white on red") as screen:
    text = Align.center("[blink]Don't Panic![/blink]", vertical="middle")
    screen.update(Panel(text))
    sleep(5)



================================================
FILE: examples/spinners.py
================================================
from time import sleep

from rich.columns import Columns
from rich.panel import Panel
from rich.live import Live
from rich.text import Text
from rich.spinner import Spinner, SPINNERS

all_spinners = Columns(
    [
        Spinner(spinner_name, text=Text(repr(spinner_name), style="green"))
        for spinner_name in sorted(SPINNERS)
    ],
    column_first=True,
    expand=True,
)

with Live(
    Panel(all_spinners, title="Spinners", border_style="blue"),
    refresh_per_second=20,
) as live:
    while True:
        sleep(0.1)



================================================
FILE: examples/status.py
================================================
from time import sleep
from rich.console import Console

console = Console()
console.print()

tasks = [f"task {n}" for n in range(1, 11)]

with console.status("[bold green]Working on tasks...") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f"{task} complete")



================================================
FILE: examples/suppress.py
================================================
try:
    import click
except ImportError:
    print("Please install click for this example")
    print("    pip install click")
    exit()

from rich.traceback import install

install(suppress=[click])


@click.command()
@click.option("--count", default=1, help="Number of greetings.")
def hello(count):
    """Simple program that greets NAME for a total of COUNT times."""
    1 / 0
    for x in range(count):
        click.echo(f"Hello {name}!")


if __name__ == "__main__":
    hello()



================================================
FILE: examples/table.py
================================================
"""
Demonstrates how to render a table.
"""

from rich.console import Console
from rich.table import Table

table = Table(title="Star Wars Movies")

table.add_column("Released", style="cyan", no_wrap=True)
table.add_column("Title", style="magenta")
table.add_column("Box Office", justify="right", style="green")

table.add_row("Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$952,110,690")
table.add_row("May 25, 2018", "Solo: A Star Wars Story", "$393,151,347")
table.add_row("Dec 15, 2017", "Star Wars Ep. V111: The Last Jedi", "$1,332,539,889")
table.add_row("Dec 16, 2016", "Rogue One: A Star Wars Story", "$1,332,439,889")

console = Console()
console.print(table, justify="center")



================================================
FILE: examples/table_movie.py
================================================
"""Same as the table_movie.py but uses Live to update"""
import time
from contextlib import contextmanager

from rich import box
from rich.align import Align
from rich.console import Console
from rich.live import Live
from rich.table import Table
from rich.text import Text

TABLE_DATA = [
    [
        "May 25, 1977",
        "Star Wars Ep. [b]IV[/]: [i]A New Hope",
        "$11,000,000",
        "$1,554,475",
        "$775,398,007",
    ],
    [
        "May 21, 1980",
        "Star Wars Ep. [b]V[/]: [i]The Empire Strikes Back",
        "$23,000,000",
        "$4,910,483",
        "$547,969,004",
    ],
    [
        "May 25, 1983",
        "Star Wars Ep. [b]VI[/b]: [i]Return of the Jedi",
        "$32,500,000",
        "$23,019,618",
        "$475,106,177",
    ],
    [
        "May 19, 1999",
        "Star Wars Ep. [b]I[/b]: [i]The phantom Menace",
        "$115,000,000",
        "$64,810,870",
        "$1,027,044,677",
    ],
    [
        "May 16, 2002",
        "Star Wars Ep. [b]II[/b]: [i]Attack of the Clones",
        "$115,000,000",
        "$80,027,814",
        "$656,695,615",
    ],
    [
        "May 19, 2005",
        "Star Wars Ep. [b]III[/b]: [i]Revenge of the Sith",
        "$115,500,000",
        "$380,270,577",
        "$848,998,877",
    ],
]

console = Console()

BEAT_TIME = 0.04


@contextmanager
def beat(length: int = 1) -> None:
    yield
    time.sleep(length * BEAT_TIME)


table = Table(show_footer=False)
table_centered = Align.center(table)

console.clear()

with Live(table_centered, console=console, screen=False, refresh_per_second=20):
    with beat(10):
        table.add_column("Release Date", no_wrap=True)

    with beat(10):
        table.add_column("Title", Text.from_markup("[b]Total", justify="right"))

    with beat(10):
        table.add_column("Budget", "[u]$412,000,000", no_wrap=True)

    with beat(10):
        table.add_column("Opening Weekend", "[u]$577,703,455", no_wrap=True)

    with beat(10):
        table.add_column("Box Office", "[u]$4,331,212,357", no_wrap=True)

    with beat(10):
        table.title = "Star Wars Box Office"

    with beat(10):
        table.title = (
            "[not italic]:popcorn:[/] Star Wars Box Office [not italic]:popcorn:[/]"
        )

    with beat(10):
        table.caption = "Made with Rich"

    with beat(10):
        table.caption = "Made with [b]Rich[/b]"

    with beat(10):
        table.caption = "Made with [b magenta not dim]Rich[/]"

    for row in TABLE_DATA:
        with beat(10):
            table.add_row(*row)

    with beat(10):
        table.show_footer = True

    table_width = console.measure(table).maximum

    with beat(10):
        table.columns[2].justify = "right"

    with beat(10):
        table.columns[3].justify = "right"

    with beat(10):
        table.columns[4].justify = "right"

    with beat(10):
        table.columns[2].header_style = "bold red"

    with beat(10):
        table.columns[3].header_style = "bold green"

    with beat(10):
        table.columns[4].header_style = "bold blue"

    with beat(10):
        table.columns[2].style = "red"

    with beat(10):
        table.columns[3].style = "green"

    with beat(10):
        table.columns[4].style = "blue"

    with beat(10):
        table.columns[0].style = "cyan"
        table.columns[0].header_style = "bold cyan"

    with beat(10):
        table.columns[1].style = "magenta"
        table.columns[1].header_style = "bold magenta"

    with beat(10):
        table.columns[2].footer_style = "bright_red"

    with beat(10):
        table.columns[3].footer_style = "bright_green"

    with beat(10):
        table.columns[4].footer_style = "bright_blue"

    with beat(10):
        table.row_styles = ["none", "dim"]

    with beat(10):
        table.border_style = "bright_yellow"

    for box_style in [
        box.SQUARE,
        box.MINIMAL,
        box.SIMPLE,
        box.SIMPLE_HEAD,
    ]:
        with beat(10):
            table.box = box_style

    with beat(10):
        table.pad_edge = False

    original_width = console.measure(table).maximum

    for width in range(original_width, console.width, 2):
        with beat(1):
            table.width = width

    for width in range(console.width, original_width, -2):
        with beat(1):
            table.width = width

    for width in range(original_width, 90, -2):
        with beat(1):
            table.width = width

    for width in range(90, original_width + 1, 2):
        with beat(1):
            table.width = width

    with beat(2):
        table.width = None



================================================
FILE: examples/top_lite_simulator.py
================================================
"""Lite simulation of the top linux command."""
import datetime
import random
import time
from dataclasses import dataclass

from rich import box
from rich.console import Console
from rich.live import Live
from rich.table import Table
from typing import Literal


@dataclass
class Process:
    pid: int
    command: str
    cpu_percent: float
    memory: int
    start_time: datetime.datetime
    thread_count: int
    state: Literal["running", "sleeping"]

    @property
    def memory_str(self) -> str:
        if self.memory > 1e6:
            return f"{int(self.memory/1e6)}M"
        if self.memory > 1e3:
            return f"{int(self.memory/1e3)}K"
        return str(self.memory)

    @property
    def time_str(self) -> str:
        return str(datetime.datetime.now() - self.start_time)


def generate_process(pid: int) -> Process:
    return Process(
        pid=pid,
        command=f"Process {pid}",
        cpu_percent=random.random() * 20,
        memory=random.randint(10, 200) ** 3,
        start_time=datetime.datetime.now()
        - datetime.timedelta(seconds=random.randint(0, 500) ** 2),
        thread_count=random.randint(1, 32),
        state="running" if random.randint(0, 10) < 8 else "sleeping",
    )


def create_process_table(height: int) -> Table:
    processes = sorted(
        [generate_process(pid) for pid in range(height)],
        key=lambda p: p.cpu_percent,
        reverse=True,
    )
    table = Table(
        "PID", "Command", "CPU %", "Memory", "Time", "Thread #", "State", box=box.SIMPLE
    )

    for process in processes:
        table.add_row(
            str(process.pid),
            process.command,
            f"{process.cpu_percent:.1f}",
            process.memory_str,
            process.time_str,
            str(process.thread_count),
            process.state,
        )

    return table


console = Console()

with Live(console=console, screen=True, auto_refresh=False) as live:
    while True:
        live.update(create_process_table(console.size.height - 4), refresh=True)
        time.sleep(1)



================================================
FILE: examples/tree.py
================================================
"""
Demonstrates how to display a tree of files / directories with the Tree renderable.
"""

import os
import pathlib
import sys

from rich import print
from rich.filesize import decimal
from rich.markup import escape
from rich.text import Text
from rich.tree import Tree


def walk_directory(directory: pathlib.Path, tree: Tree) -> None:
    """Recursively build a Tree with directory contents."""
    # Sort dirs first then by filename
    paths = sorted(
        pathlib.Path(directory).iterdir(),
        key=lambda path: (path.is_file(), path.name.lower()),
    )
    for path in paths:
        # Remove hidden files
        if path.name.startswith("."):
            continue
        if path.is_dir():
            style = "dim" if path.name.startswith("__") else ""
            branch = tree.add(
                f"[bold magenta]:open_file_folder: [link file://{path}]{escape(path.name)}",
                style=style,
                guide_style=style,
            )
            walk_directory(path, branch)
        else:
            text_filename = Text(path.name, "green")
            text_filename.highlight_regex(r"\..*$", "bold red")
            text_filename.stylize(f"link file://{path}")
            file_size = path.stat().st_size
            text_filename.append(f" ({decimal(file_size)})", "blue")
            icon = "馃悕 " if path.suffix == ".py" else "馃搫 "
            tree.add(Text(icon) + text_filename)


try:
    directory = os.path.abspath(sys.argv[1])
except IndexError:
    print("[b]Usage:[/] python tree.py <DIRECTORY>")
else:
    tree = Tree(
        f":open_file_folder: [link file://{directory}]{directory}",
        guide_style="bold bright_blue",
    )
    walk_directory(pathlib.Path(directory), tree)
    print(tree)



================================================
FILE: questions/README.md
================================================

# Questions

Your questions should go in this directory.

Question files should be named with the extension ".question.md".



================================================
FILE: questions/ansi_escapes.question.md
================================================
---
title: "Natively inserted ANSI escape sequence characters break alignment of Panel."
alt_titles:
  - "Escape codes break alignment."
---

If you print ansi escape sequences for color and style you may find the output breaks your output.
You may find that border characters in Panel and Table are in the wrong place, for example.

As a general rule, you should allow Rich to generate all ansi escape sequences, so it can correctly account for these invisible characters.
If you can't avoid a string with escape codes, you can convert it to an equivalent `Text` instance with `Text.from_ansi`.



================================================
FILE: questions/emoji_broken.question.md
================================================
---
title: "Why does emoji break alignment in a Table or Panel?"
---

Certain emoji take up double space within the terminal. Unfortunately, terminals don't always agree how wide a given character should be.

Rich has no way of knowing how wide a character will be on any given terminal. This can break alignment in containers like Table and Panel, where Rich needs to know the width of the content.

There are also *multiple codepoints* characters, such as country flags, and emoji modifiers, which produce wildly different results across terminal emulators. 

Fortunately, most characters will work just fine. But you may have to avoid using the emojis that break alignment. You will get good results if you stick to emoji released on or before version 9 of the Unicode database, 



================================================
FILE: questions/highlighting_unexpected.question.md
================================================
---
title: "Strange colors in console output."
alt_titles:
  - "Why are numbers in cyan?"
  - "Rich print seems to make decimals cyan"
  - "Numbers get printed differently"
---

Rich will highlight certain patterns in your output such as numbers, strings, and other objects like IP addresses.

Occasionally this may also highlight parts of your output you didn't intend. See the [docs on highlighting](https://rich.readthedocs.io/en/latest/highlighting.html) for how to disable highlighting.



================================================
FILE: questions/log_renderables.question.md
================================================
---
title: "How do I log a renderable?"
alt_titles:
  - "Cannot log Tree() output to file"
  - "Log a Panel or Table to a RichHandler"
---

Python's logging module is designed to work with strings. Consequently you won't be able to log Rich renderables (Table, Tree, etc) by calling `logger.debug` or other similar method.

You could use the [capture](https://rich.readthedocs.io/en/latest/console.html#capturing-output) API to convert the renderable to a string and log that. However I would advise against it.

Logging supports configurable back-ends, which means that a log message could go somewhere other than the terminal -- which may not correctly render the formatting and style produced by Rich.

If you are only logging with a file-handler to stdout, then you probably don't need to use the logging module at all. Consider using [Console.log](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.log) which will render anything that you can print with Rich, with a timestamp.



================================================
FILE: questions/logging_color.question.md
================================================
---
title: "How do I render console markup in RichHandler?"
alt_titles:
    - "Color is not applied during logging."
    - "Style tags don't work with logging handler"

---

Console markup won't work anywhere else, other than `RichHandler` -- which is why they are disabled by default.

See the docs if you want to [enable console markup](https://rich.readthedocs.io/en/latest/logging.html#logging-handler) in the logging handler.



================================================
FILE: questions/rich_spinner.question.md
================================================
---
title: "python -m rich.spinner shows extra lines."
---

The spinner example is know to break on some terminals (Windows in particular).

Some terminals don't display emoji with the correct width, which means Rich can't always align them accurately inside a panel.



================================================
FILE: questions/square_brackets.question.md
================================================
---
title: "Why does content in square brackets disappear?"
alt_titles:
    - "Can not print a [string]"
---

Rich will treat text within square brackets as *markup tags*, for instance `"[bold]This is bold[/bold]"`.

If you are printing strings with literally square brackets you can either disable markup, or escape your strings.
See the docs on [console markup](https://rich.readthedocs.io/en/latest/markup.html) for how to do this.



================================================
FILE: questions/tracebacks_installed.question.md
================================================
---
title: "Rich is automatically installing traceback handler."
alt_titles:
  - "Can you stop overriding traceback message formatting by default?"
---

Rich will never install the traceback handler automatically.

If you are getting Rich tracebacks and you don't want them, then some other piece of software is calling `rich.traceback.install()`.



================================================
FILE: rich/__init__.py
================================================
"""Rich text and beautiful formatting in the terminal."""

import os
from typing import IO, TYPE_CHECKING, Any, Callable, Optional, Union

from ._extension import load_ipython_extension  # noqa: F401

__all__ = ["get_console", "reconfigure", "print", "inspect", "print_json"]

if TYPE_CHECKING:
    from .console import Console

# Global console used by alternative print
_console: Optional["Console"] = None

try:
    _IMPORT_CWD = os.path.abspath(os.getcwd())
except FileNotFoundError:
    # Can happen if the cwd has been deleted
    _IMPORT_CWD = ""


def get_console() -> "Console":
    """Get a global :class:`~rich.console.Console` instance. This function is used when Rich requires a Console,
    and hasn't been explicitly given one.

    Returns:
        Console: A console instance.
    """
    global _console
    if _console is None:
        from .console import Console

        _console = Console()

    return _console


def reconfigure(*args: Any, **kwargs: Any) -> None:
    """Reconfigures the global console by replacing it with another.

    Args:
        *args (Any): Positional arguments for the replacement :class:`~rich.console.Console`.
        **kwargs (Any): Keyword arguments for the replacement :class:`~rich.console.Console`.
    """
    from rich.console import Console

    new_console = Console(*args, **kwargs)
    _console = get_console()
    _console.__dict__ = new_console.__dict__


def print(
    *objects: Any,
    sep: str = " ",
    end: str = "\n",
    file: Optional[IO[str]] = None,
    flush: bool = False,
) -> None:
    r"""Print object(s) supplied via positional arguments.
    This function has an identical signature to the built-in print.
    For more advanced features, see the :class:`~rich.console.Console` class.

    Args:
        sep (str, optional): Separator between printed objects. Defaults to " ".
        end (str, optional): Character to write at end of output. Defaults to "\\n".
        file (IO[str], optional): File to write to, or None for stdout. Defaults to None.
        flush (bool, optional): Has no effect as Rich always flushes output. Defaults to False.

    """
    from .console import Console

    write_console = get_console() if file is None else Console(file=file)
    return write_console.print(*objects, sep=sep, end=end)


def print_json(
    json: Optional[str] = None,
    *,
    data: Any = None,
    indent: Union[None, int, str] = 2,
    highlight: bool = True,
    skip_keys: bool = False,
    ensure_ascii: bool = False,
    check_circular: bool = True,
    allow_nan: bool = True,
    default: Optional[Callable[[Any], Any]] = None,
    sort_keys: bool = False,
) -> None:
    """Pretty prints JSON. Output will be valid JSON.

    Args:
        json (str): A string containing JSON.
        data (Any): If json is not supplied, then encode this data.
        indent (int, optional): Number of spaces to indent. Defaults to 2.
        highlight (bool, optional): Enable highlighting of output: Defaults to True.
        skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.
        ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.
        check_circular (bool, optional): Check for circular references. Defaults to True.
        allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.
        default (Callable, optional): A callable that converts values that can not be encoded
            in to something that can be JSON encoded. Defaults to None.
        sort_keys (bool, optional): Sort dictionary keys. Defaults to False.
    """

    get_console().print_json(
        json,
        data=data,
        indent=indent,
        highlight=highlight,
        skip_keys=skip_keys,
        ensure_ascii=ensure_ascii,
        check_circular=check_circular,
        allow_nan=allow_nan,
        default=default,
        sort_keys=sort_keys,
    )


def inspect(
    obj: Any,
    *,
    console: Optional["Console"] = None,
    title: Optional[str] = None,
    help: bool = False,
    methods: bool = False,
    docs: bool = True,
    private: bool = False,
    dunder: bool = False,
    sort: bool = True,
    all: bool = False,
    value: bool = True,
) -> None:
    """Inspect any Python object.

    * inspect(<OBJECT>) to see summarized info.
    * inspect(<OBJECT>, methods=True) to see methods.
    * inspect(<OBJECT>, help=True) to see full (non-abbreviated) help.
    * inspect(<OBJECT>, private=True) to see private attributes (single underscore).
    * inspect(<OBJECT>, dunder=True) to see attributes beginning with double underscore.
    * inspect(<OBJECT>, all=True) to see all attributes.

    Args:
        obj (Any): An object to inspect.
        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.
        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.
        methods (bool, optional): Enable inspection of callables. Defaults to False.
        docs (bool, optional): Also render doc strings. Defaults to True.
        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.
        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.
        sort (bool, optional): Sort attributes alphabetically. Defaults to True.
        all (bool, optional): Show all attributes. Defaults to False.
        value (bool, optional): Pretty print value. Defaults to True.
    """
    _console = console or get_console()
    from rich._inspect import Inspect

    # Special case for inspect(inspect)
    is_inspect = obj is inspect

    _inspect = Inspect(
        obj,
        title=title,
        help=is_inspect or help,
        methods=is_inspect or methods,
        docs=is_inspect or docs,
        private=private,
        dunder=dunder,
        sort=sort,
        all=all,
        value=value,
    )
    _console.print(_inspect)


if __name__ == "__main__":  # pragma: no cover
    print("Hello, **World**")



================================================
FILE: rich/__main__.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x84 in position 1062: illegal multibyte sequence


================================================
FILE: rich/_cell_widths.py
================================================
# Auto generated by make_terminal_widths.py

CELL_WIDTHS = [
    (0, 0, 0),
    (1, 31, -1),
    (127, 159, -1),
    (173, 173, 0),
    (768, 879, 0),
    (1155, 1161, 0),
    (1425, 1469, 0),
    (1471, 1471, 0),
    (1473, 1474, 0),
    (1476, 1477, 0),
    (1479, 1479, 0),
    (1536, 1541, 0),
    (1552, 1562, 0),
    (1564, 1564, 0),
    (1611, 1631, 0),
    (1648, 1648, 0),
    (1750, 1757, 0),
    (1759, 1764, 0),
    (1767, 1768, 0),
    (1770, 1773, 0),
    (1807, 1807, 0),
    (1809, 1809, 0),
    (1840, 1866, 0),
    (1958, 1968, 0),
    (2027, 2035, 0),
    (2045, 2045, 0),
    (2070, 2073, 0),
    (2075, 2083, 0),
    (2085, 2087, 0),
    (2089, 2093, 0),
    (2137, 2139, 0),
    (2192, 2193, 0),
    (2200, 2207, 0),
    (2250, 2307, 0),
    (2362, 2364, 0),
    (2366, 2383, 0),
    (2385, 2391, 0),
    (2402, 2403, 0),
    (2433, 2435, 0),
    (2492, 2492, 0),
    (2494, 2500, 0),
    (2503, 2504, 0),
    (2507, 2509, 0),
    (2519, 2519, 0),
    (2530, 2531, 0),
    (2558, 2558, 0),
    (2561, 2563, 0),
    (2620, 2620, 0),
    (2622, 2626, 0),
    (2631, 2632, 0),
    (2635, 2637, 0),
    (2641, 2641, 0),
    (2672, 2673, 0),
    (2677, 2677, 0),
    (2689, 2691, 0),
    (2748, 2748, 0),
    (2750, 2757, 0),
    (2759, 2761, 0),
    (2763, 2765, 0),
    (2786, 2787, 0),
    (2810, 2815, 0),
    (2817, 2819, 0),
    (2876, 2876, 0),
    (2878, 2884, 0),
    (2887, 2888, 0),
    (2891, 2893, 0),
    (2901, 2903, 0),
    (2914, 2915, 0),
    (2946, 2946, 0),
    (3006, 3010, 0),
    (3014, 3016, 0),
    (3018, 3021, 0),
    (3031, 3031, 0),
    (3072, 3076, 0),
    (3132, 3132, 0),
    (3134, 3140, 0),
    (3142, 3144, 0),
    (3146, 3149, 0),
    (3157, 3158, 0),
    (3170, 3171, 0),
    (3201, 3203, 0),
    (3260, 3260, 0),
    (3262, 3268, 0),
    (3270, 3272, 0),
    (3274, 3277, 0),
    (3285, 3286, 0),
    (3298, 3299, 0),
    (3315, 3315, 0),
    (3328, 3331, 0),
    (3387, 3388, 0),
    (3390, 3396, 0),
    (3398, 3400, 0),
    (3402, 3405, 0),
    (3415, 3415, 0),
    (3426, 3427, 0),
    (3457, 3459, 0),
    (3530, 3530, 0),
    (3535, 3540, 0),
    (3542, 3542, 0),
    (3544, 3551, 0),
    (3570, 3571, 0),
    (3633, 3633, 0),
    (3636, 3642, 0),
    (3655, 3662, 0),
    (3761, 3761, 0),
    (3764, 3772, 0),
    (3784, 3790, 0),
    (3864, 3865, 0),
    (3893, 3893, 0),
    (3895, 3895, 0),
    (3897, 3897, 0),
    (3902, 3903, 0),
    (3953, 3972, 0),
    (3974, 3975, 0),
    (3981, 3991, 0),
    (3993, 4028, 0),
    (4038, 4038, 0),
    (4139, 4158, 0),
    (4182, 4185, 0),
    (4190, 4192, 0),
    (4194, 4196, 0),
    (4199, 4205, 0),
    (4209, 4212, 0),
    (4226, 4237, 0),
    (4239, 4239, 0),
    (4250, 4253, 0),
    (4352, 4447, 2),
    (4448, 4607, 0),
    (4957, 4959, 0),
    (5906, 5909, 0),
    (5938, 5940, 0),
    (5970, 5971, 0),
    (6002, 6003, 0),
    (6068, 6099, 0),
    (6109, 6109, 0),
    (6155, 6159, 0),
    (6277, 6278, 0),
    (6313, 6313, 0),
    (6432, 6443, 0),
    (6448, 6459, 0),
    (6679, 6683, 0),
    (6741, 6750, 0),
    (6752, 6780, 0),
    (6783, 6783, 0),
    (6832, 6862, 0),
    (6912, 6916, 0),
    (6964, 6980, 0),
    (7019, 7027, 0),
    (7040, 7042, 0),
    (7073, 7085, 0),
    (7142, 7155, 0),
    (7204, 7223, 0),
    (7376, 7378, 0),
    (7380, 7400, 0),
    (7405, 7405, 0),
    (7412, 7412, 0),
    (7415, 7417, 0),
    (7616, 7679, 0),
    (8203, 8207, 0),
    (8232, 8238, 0),
    (8288, 8292, 0),
    (8294, 8303, 0),
    (8400, 8432, 0),
    (8986, 8987, 2),
    (9001, 9002, 2),
    (9193, 9196, 2),
    (9200, 9200, 2),
    (9203, 9203, 2),
    (9725, 9726, 2),
    (9748, 9749, 2),
    (9800, 9811, 2),
    (9855, 9855, 2),
    (9875, 9875, 2),
    (9889, 9889, 2),
    (9898, 9899, 2),
    (9917, 9918, 2),
    (9924, 9925, 2),
    (9934, 9934, 2),
    (9940, 9940, 2),
    (9962, 9962, 2),
    (9970, 9971, 2),
    (9973, 9973, 2),
    (9978, 9978, 2),
    (9981, 9981, 2),
    (9989, 9989, 2),
    (9994, 9995, 2),
    (10024, 10024, 2),
    (10060, 10060, 2),
    (10062, 10062, 2),
    (10067, 10069, 2),
    (10071, 10071, 2),
    (10133, 10135, 2),
    (10160, 10160, 2),
    (10175, 10175, 2),
    (11035, 11036, 2),
    (11088, 11088, 2),
    (11093, 11093, 2),
    (11503, 11505, 0),
    (11647, 11647, 0),
    (11744, 11775, 0),
    (11904, 11929, 2),
    (11931, 12019, 2),
    (12032, 12245, 2),
    (12272, 12329, 2),
    (12330, 12335, 0),
    (12336, 12350, 2),
    (12353, 12438, 2),
    (12441, 12442, 0),
    (12443, 12543, 2),
    (12549, 12591, 2),
    (12593, 12686, 2),
    (12688, 12771, 2),
    (12783, 12830, 2),
    (12832, 12871, 2),
    (12880, 19903, 2),
    (19968, 42124, 2),
    (42128, 42182, 2),
    (42607, 42610, 0),
    (42612, 42621, 0),
    (42654, 42655, 0),
    (42736, 42737, 0),
    (43010, 43010, 0),
    (43014, 43014, 0),
    (43019, 43019, 0),
    (43043, 43047, 0),
    (43052, 43052, 0),
    (43136, 43137, 0),
    (43188, 43205, 0),
    (43232, 43249, 0),
    (43263, 43263, 0),
    (43302, 43309, 0),
    (43335, 43347, 0),
    (43360, 43388, 2),
    (43392, 43395, 0),
    (43443, 43456, 0),
    (43493, 43493, 0),
    (43561, 43574, 0),
    (43587, 43587, 0),
    (43596, 43597, 0),
    (43643, 43645, 0),
    (43696, 43696, 0),
    (43698, 43700, 0),
    (43703, 43704, 0),
    (43710, 43711, 0),
    (43713, 43713, 0),
    (43755, 43759, 0),
    (43765, 43766, 0),
    (44003, 44010, 0),
    (44012, 44013, 0),
    (44032, 55203, 2),
    (55216, 55295, 0),
    (63744, 64255, 2),
    (64286, 64286, 0),
    (65024, 65039, 0),
    (65040, 65049, 2),
    (65056, 65071, 0),
    (65072, 65106, 2),
    (65108, 65126, 2),
    (65128, 65131, 2),
    (65279, 65279, 0),
    (65281, 65376, 2),
    (65504, 65510, 2),
    (65529, 65531, 0),
    (66045, 66045, 0),
    (66272, 66272, 0),
    (66422, 66426, 0),
    (68097, 68099, 0),
    (68101, 68102, 0),
    (68108, 68111, 0),
    (68152, 68154, 0),
    (68159, 68159, 0),
    (68325, 68326, 0),
    (68900, 68903, 0),
    (69291, 69292, 0),
    (69373, 69375, 0),
    (69446, 69456, 0),
    (69506, 69509, 0),
    (69632, 69634, 0),
    (69688, 69702, 0),
    (69744, 69744, 0),
    (69747, 69748, 0),
    (69759, 69762, 0),
    (69808, 69818, 0),
    (69821, 69821, 0),
    (69826, 69826, 0),
    (69837, 69837, 0),
    (69888, 69890, 0),
    (69927, 69940, 0),
    (69957, 69958, 0),
    (70003, 70003, 0),
    (70016, 70018, 0),
    (70067, 70080, 0),
    (70089, 70092, 0),
    (70094, 70095, 0),
    (70188, 70199, 0),
    (70206, 70206, 0),
    (70209, 70209, 0),
    (70367, 70378, 0),
    (70400, 70403, 0),
    (70459, 70460, 0),
    (70462, 70468, 0),
    (70471, 70472, 0),
    (70475, 70477, 0),
    (70487, 70487, 0),
    (70498, 70499, 0),
    (70502, 70508, 0),
    (70512, 70516, 0),
    (70709, 70726, 0),
    (70750, 70750, 0),
    (70832, 70851, 0),
    (71087, 71093, 0),
    (71096, 71104, 0),
    (71132, 71133, 0),
    (71216, 71232, 0),
    (71339, 71351, 0),
    (71453, 71467, 0),
    (71724, 71738, 0),
    (71984, 71989, 0),
    (71991, 71992, 0),
    (71995, 71998, 0),
    (72000, 72000, 0),
    (72002, 72003, 0),
    (72145, 72151, 0),
    (72154, 72160, 0),
    (72164, 72164, 0),
    (72193, 72202, 0),
    (72243, 72249, 0),
    (72251, 72254, 0),
    (72263, 72263, 0),
    (72273, 72283, 0),
    (72330, 72345, 0),
    (72751, 72758, 0),
    (72760, 72767, 0),
    (72850, 72871, 0),
    (72873, 72886, 0),
    (73009, 73014, 0),
    (73018, 73018, 0),
    (73020, 73021, 0),
    (73023, 73029, 0),
    (73031, 73031, 0),
    (73098, 73102, 0),
    (73104, 73105, 0),
    (73107, 73111, 0),
    (73459, 73462, 0),
    (73472, 73473, 0),
    (73475, 73475, 0),
    (73524, 73530, 0),
    (73534, 73538, 0),
    (78896, 78912, 0),
    (78919, 78933, 0),
    (92912, 92916, 0),
    (92976, 92982, 0),
    (94031, 94031, 0),
    (94033, 94087, 0),
    (94095, 94098, 0),
    (94176, 94179, 2),
    (94180, 94180, 0),
    (94192, 94193, 0),
    (94208, 100343, 2),
    (100352, 101589, 2),
    (101632, 101640, 2),
    (110576, 110579, 2),
    (110581, 110587, 2),
    (110589, 110590, 2),
    (110592, 110882, 2),
    (110898, 110898, 2),
    (110928, 110930, 2),
    (110933, 110933, 2),
    (110948, 110951, 2),
    (110960, 111355, 2),
    (113821, 113822, 0),
    (113824, 113827, 0),
    (118528, 118573, 0),
    (118576, 118598, 0),
    (119141, 119145, 0),
    (119149, 119170, 0),
    (119173, 119179, 0),
    (119210, 119213, 0),
    (119362, 119364, 0),
    (121344, 121398, 0),
    (121403, 121452, 0),
    (121461, 121461, 0),
    (121476, 121476, 0),
    (121499, 121503, 0),
    (121505, 121519, 0),
    (122880, 122886, 0),
    (122888, 122904, 0),
    (122907, 122913, 0),
    (122915, 122916, 0),
    (122918, 122922, 0),
    (123023, 123023, 0),
    (123184, 123190, 0),
    (123566, 123566, 0),
    (123628, 123631, 0),
    (124140, 124143, 0),
    (125136, 125142, 0),
    (125252, 125258, 0),
    (126980, 126980, 2),
    (127183, 127183, 2),
    (127374, 127374, 2),
    (127377, 127386, 2),
    (127488, 127490, 2),
    (127504, 127547, 2),
    (127552, 127560, 2),
    (127568, 127569, 2),
    (127584, 127589, 2),
    (127744, 127776, 2),
    (127789, 127797, 2),
    (127799, 127868, 2),
    (127870, 127891, 2),
    (127904, 127946, 2),
    (127951, 127955, 2),
    (127968, 127984, 2),
    (127988, 127988, 2),
    (127992, 127994, 2),
    (127995, 127999, 0),
    (128000, 128062, 2),
    (128064, 128064, 2),
    (128066, 128252, 2),
    (128255, 128317, 2),
    (128331, 128334, 2),
    (128336, 128359, 2),
    (128378, 128378, 2),
    (128405, 128406, 2),
    (128420, 128420, 2),
    (128507, 128591, 2),
    (128640, 128709, 2),
    (128716, 128716, 2),
    (128720, 128722, 2),
    (128725, 128727, 2),
    (128732, 128735, 2),
    (128747, 128748, 2),
    (128756, 128764, 2),
    (128992, 129003, 2),
    (129008, 129008, 2),
    (129292, 129338, 2),
    (129340, 129349, 2),
    (129351, 129535, 2),
    (129648, 129660, 2),
    (129664, 129672, 2),
    (129680, 129725, 2),
    (129727, 129733, 2),
    (129742, 129755, 2),
    (129760, 129768, 2),
    (129776, 129784, 2),
    (131072, 196605, 2),
    (196608, 262141, 2),
    (917505, 917505, 0),
    (917536, 917631, 0),
    (917760, 917999, 0),
]



================================================
FILE: rich/_emoji_codes.py
================================================
[Binary file]


================================================
FILE: rich/_emoji_replace.py
================================================
from typing import Callable, Match, Optional
import re

from ._emoji_codes import EMOJI


_ReStringMatch = Match[str]  # regex match object
_ReSubCallable = Callable[[_ReStringMatch], str]  # Callable invoked by re.sub
_EmojiSubMethod = Callable[[_ReSubCallable, str], str]  # Sub method of a compiled re


def _emoji_replace(
    text: str,
    default_variant: Optional[str] = None,
    _emoji_sub: _EmojiSubMethod = re.compile(r"(:(\S*?)(?:(?:\-)(emoji|text))?:)").sub,
) -> str:
    """Replace emoji code in text."""
    get_emoji = EMOJI.__getitem__
    variants = {"text": "\uFE0E", "emoji": "\uFE0F"}
    get_variant = variants.get
    default_variant_code = variants.get(default_variant, "") if default_variant else ""

    def do_replace(match: Match[str]) -> str:
        emoji_code, emoji_name, variant = match.groups()
        try:
            return get_emoji(emoji_name.lower()) + get_variant(
                variant, default_variant_code
            )
        except KeyError:
            return emoji_code

    return _emoji_sub(do_replace, text)



================================================
FILE: rich/_export_format.py
================================================
CONSOLE_HTML_FORMAT = """\
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<style>
{stylesheet}
body {{
    color: {foreground};
    background-color: {background};
}}
</style>
</head>
<body>
    <pre style="font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><code style="font-family:inherit">{code}</code></pre>
</body>
</html>
"""

CONSOLE_SVG_FORMAT = """\
<svg class="rich-terminal" viewBox="0 0 {width} {height}" xmlns="http://www.w3.org/2000/svg">
    <!-- Generated with Rich https://www.textualize.io -->
    <style>

    @font-face {{
        font-family: "Fira Code";
        src: local("FiraCode-Regular"),
                url("https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2") format("woff2"),
                url("https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff") format("woff");
        font-style: normal;
        font-weight: 400;
    }}
    @font-face {{
        font-family: "Fira Code";
        src: local("FiraCode-Bold"),
                url("https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2") format("woff2"),
                url("https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff") format("woff");
        font-style: bold;
        font-weight: 700;
    }}

    .{unique_id}-matrix {{
        font-family: Fira Code, monospace;
        font-size: {char_height}px;
        line-height: {line_height}px;
        font-variant-east-asian: full-width;
    }}

    .{unique_id}-title {{
        font-size: 18px;
        font-weight: bold;
        font-family: arial;
    }}

    {styles}
    </style>

    <defs>
    <clipPath id="{unique_id}-clip-terminal">
      <rect x="0" y="0" width="{terminal_width}" height="{terminal_height}" />
    </clipPath>
    {lines}
    </defs>

    {chrome}
    <g transform="translate({terminal_x}, {terminal_y})" clip-path="url(#{unique_id}-clip-terminal)">
    {backgrounds}
    <g class="{unique_id}-matrix">
    {matrix}
    </g>
    </g>
</svg>
"""

_SVG_FONT_FAMILY = "Rich Fira Code"
_SVG_CLASSES_PREFIX = "rich-svg"



================================================
FILE: rich/_extension.py
================================================
from typing import Any


def load_ipython_extension(ip: Any) -> None:  # pragma: no cover
    # prevent circular import
    from rich.pretty import install
    from rich.traceback import install as tr_install

    install()
    tr_install()



================================================
FILE: rich/_fileno.py
================================================
from __future__ import annotations

from typing import IO, Callable


def get_fileno(file_like: IO[str]) -> int | None:
    """Get fileno() from a file, accounting for poorly implemented file-like objects.

    Args:
        file_like (IO): A file-like object.

    Returns:
        int | None: The result of fileno if available, or None if operation failed.
    """
    fileno: Callable[[], int] | None = getattr(file_like, "fileno", None)
    if fileno is not None:
        try:
            return fileno()
        except Exception:
            # `fileno` is documented as potentially raising a OSError
            # Alas, from the issues, there are so many poorly implemented file-like objects,
            # that `fileno()` can raise just about anything.
            return None
    return None



================================================
FILE: rich/_inspect.py
================================================
import inspect
from inspect import cleandoc, getdoc, getfile, isclass, ismodule, signature
from typing import Any, Collection, Iterable, Optional, Tuple, Type, Union

from .console import Group, RenderableType
from .control import escape_control_codes
from .highlighter import ReprHighlighter
from .jupyter import JupyterMixin
from .panel import Panel
from .pretty import Pretty
from .table import Table
from .text import Text, TextType


def _first_paragraph(doc: str) -> str:
    """Get the first paragraph from a docstring."""
    paragraph, _, _ = doc.partition("\n\n")
    return paragraph


class Inspect(JupyterMixin):
    """A renderable to inspect any Python Object.

    Args:
        obj (Any): An object to inspect.
        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.
        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.
        methods (bool, optional): Enable inspection of callables. Defaults to False.
        docs (bool, optional): Also render doc strings. Defaults to True.
        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.
        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.
        sort (bool, optional): Sort attributes alphabetically. Defaults to True.
        all (bool, optional): Show all attributes. Defaults to False.
        value (bool, optional): Pretty print value of object. Defaults to True.
    """

    def __init__(
        self,
        obj: Any,
        *,
        title: Optional[TextType] = None,
        help: bool = False,
        methods: bool = False,
        docs: bool = True,
        private: bool = False,
        dunder: bool = False,
        sort: bool = True,
        all: bool = True,
        value: bool = True,
    ) -> None:
        self.highlighter = ReprHighlighter()
        self.obj = obj
        self.title = title or self._make_title(obj)
        if all:
            methods = private = dunder = True
        self.help = help
        self.methods = methods
        self.docs = docs or help
        self.private = private or dunder
        self.dunder = dunder
        self.sort = sort
        self.value = value

    def _make_title(self, obj: Any) -> Text:
        """Make a default title."""
        title_str = (
            str(obj)
            if (isclass(obj) or callable(obj) or ismodule(obj))
            else str(type(obj))
        )
        title_text = self.highlighter(title_str)
        return title_text

    def __rich__(self) -> Panel:
        return Panel.fit(
            Group(*self._render()),
            title=self.title,
            border_style="scope.border",
            padding=(0, 1),
        )

    def _get_signature(self, name: str, obj: Any) -> Optional[Text]:
        """Get a signature for a callable."""
        try:
            _signature = str(signature(obj)) + ":"
        except ValueError:
            _signature = "(...)"
        except TypeError:
            return None

        source_filename: Optional[str] = None
        try:
            source_filename = getfile(obj)
        except (OSError, TypeError):
            # OSError is raised if obj has no source file, e.g. when defined in REPL.
            pass

        callable_name = Text(name, style="inspect.callable")
        if source_filename:
            callable_name.stylize(f"link file://{source_filename}")
        signature_text = self.highlighter(_signature)

        qualname = name or getattr(obj, "__qualname__", name)

        # If obj is a module, there may be classes (which are callable) to display
        if inspect.isclass(obj):
            prefix = "class"
        elif inspect.iscoroutinefunction(obj):
            prefix = "async def"
        else:
            prefix = "def"

        qual_signature = Text.assemble(
            (f"{prefix} ", f"inspect.{prefix.replace(' ', '_')}"),
            (qualname, "inspect.callable"),
            signature_text,
        )

        return qual_signature

    def _render(self) -> Iterable[RenderableType]:
        """Render object."""

        def sort_items(item: Tuple[str, Any]) -> Tuple[bool, str]:
            key, (_error, value) = item
            return (callable(value), key.strip("_").lower())

        def safe_getattr(attr_name: str) -> Tuple[Any, Any]:
            """Get attribute or any exception."""
            try:
                return (None, getattr(obj, attr_name))
            except Exception as error:
                return (error, None)

        obj = self.obj
        keys = dir(obj)
        total_items = len(keys)
        if not self.dunder:
            keys = [key for key in keys if not key.startswith("__")]
        if not self.private:
            keys = [key for key in keys if not key.startswith("_")]
        not_shown_count = total_items - len(keys)
        items = [(key, safe_getattr(key)) for key in keys]
        if self.sort:
            items.sort(key=sort_items)

        items_table = Table.grid(padding=(0, 1), expand=False)
        items_table.add_column(justify="right")
        add_row = items_table.add_row
        highlighter = self.highlighter

        if callable(obj):
            signature = self._get_signature("", obj)
            if signature is not None:
                yield signature
                yield ""

        if self.docs:
            _doc = self._get_formatted_doc(obj)
            if _doc is not None:
                doc_text = Text(_doc, style="inspect.help")
                doc_text = highlighter(doc_text)
                yield doc_text
                yield ""

        if self.value and not (isclass(obj) or callable(obj) or ismodule(obj)):
            yield Panel(
                Pretty(obj, indent_guides=True, max_length=10, max_string=60),
                border_style="inspect.value.border",
            )
            yield ""

        for key, (error, value) in items:
            key_text = Text.assemble(
                (
                    key,
                    "inspect.attr.dunder" if key.startswith("__") else "inspect.attr",
                ),
                (" =", "inspect.equals"),
            )
            if error is not None:
                warning = key_text.copy()
                warning.stylize("inspect.error")
                add_row(warning, highlighter(repr(error)))
                continue

            if callable(value):
                if not self.methods:
                    continue

                _signature_text = self._get_signature(key, value)
                if _signature_text is None:
                    add_row(key_text, Pretty(value, highlighter=highlighter))
                else:
                    if self.docs:
                        docs = self._get_formatted_doc(value)
                        if docs is not None:
                            _signature_text.append("\n" if "\n" in docs else " ")
                            doc = highlighter(docs)
                            doc.stylize("inspect.doc")
                            _signature_text.append(doc)

                    add_row(key_text, _signature_text)
            else:
                add_row(key_text, Pretty(value, highlighter=highlighter))
        if items_table.row_count:
            yield items_table
        elif not_shown_count:
            yield Text.from_markup(
                f"[b cyan]{not_shown_count}[/][i] attribute(s) not shown.[/i] "
                f"Run [b][magenta]inspect[/]([not b]inspect[/])[/b] for options."
            )

    def _get_formatted_doc(self, object_: Any) -> Optional[str]:
        """
        Extract the docstring of an object, process it and returns it.
        The processing consists in cleaning up the docstring's indentation,
        taking only its 1st paragraph if `self.help` is not True,
        and escape its control codes.

        Args:
            object_ (Any): the object to get the docstring from.

        Returns:
            Optional[str]: the processed docstring, or None if no docstring was found.
        """
        docs = getdoc(object_)
        if docs is None:
            return None
        docs = cleandoc(docs).strip()
        if not self.help:
            docs = _first_paragraph(docs)
        return escape_control_codes(docs)


def get_object_types_mro(obj: Union[object, Type[Any]]) -> Tuple[type, ...]:
    """Returns the MRO of an object's class, or of the object itself if it's a class."""
    if not hasattr(obj, "__mro__"):
        # N.B. we cannot use `if type(obj) is type` here because it doesn't work with
        # some types of classes, such as the ones that use abc.ABCMeta.
        obj = type(obj)
    return getattr(obj, "__mro__", ())


def get_object_types_mro_as_strings(obj: object) -> Collection[str]:
    """
    Returns the MRO of an object's class as full qualified names, or of the object itself if it's a class.

    Examples:
        `object_types_mro_as_strings(JSONDecoder)` will return `['json.decoder.JSONDecoder', 'builtins.object']`
    """
    return [
        f'{getattr(type_, "__module__", "")}.{getattr(type_, "__qualname__", "")}'
        for type_ in get_object_types_mro(obj)
    ]


def is_object_one_of_types(
    obj: object, fully_qualified_types_names: Collection[str]
) -> bool:
    """
    Returns `True` if the given object's class (or the object itself, if it's a class) has one of the
    fully qualified names in its MRO.
    """
    for type_name in get_object_types_mro_as_strings(obj):
        if type_name in fully_qualified_types_names:
            return True
    return False



================================================
FILE: rich/_log_render.py
================================================
from datetime import datetime
from typing import Iterable, List, Optional, TYPE_CHECKING, Union, Callable


from .text import Text, TextType

if TYPE_CHECKING:
    from .console import Console, ConsoleRenderable, RenderableType
    from .table import Table

FormatTimeCallable = Callable[[datetime], Text]


class LogRender:
    def __init__(
        self,
        show_time: bool = True,
        show_level: bool = False,
        show_path: bool = True,
        time_format: Union[str, FormatTimeCallable] = "[%x %X]",
        omit_repeated_times: bool = True,
        level_width: Optional[int] = 8,
    ) -> None:
        self.show_time = show_time
        self.show_level = show_level
        self.show_path = show_path
        self.time_format = time_format
        self.omit_repeated_times = omit_repeated_times
        self.level_width = level_width
        self._last_time: Optional[Text] = None

    def __call__(
        self,
        console: "Console",
        renderables: Iterable["ConsoleRenderable"],
        log_time: Optional[datetime] = None,
        time_format: Optional[Union[str, FormatTimeCallable]] = None,
        level: TextType = "",
        path: Optional[str] = None,
        line_no: Optional[int] = None,
        link_path: Optional[str] = None,
    ) -> "Table":
        from .containers import Renderables
        from .table import Table

        output = Table.grid(padding=(0, 1))
        output.expand = True
        if self.show_time:
            output.add_column(style="log.time")
        if self.show_level:
            output.add_column(style="log.level", width=self.level_width)
        output.add_column(ratio=1, style="log.message", overflow="fold")
        if self.show_path and path:
            output.add_column(style="log.path")
        row: List["RenderableType"] = []
        if self.show_time:
            log_time = log_time or console.get_datetime()
            time_format = time_format or self.time_format
            if callable(time_format):
                log_time_display = time_format(log_time)
            else:
                log_time_display = Text(log_time.strftime(time_format))
            if log_time_display == self._last_time and self.omit_repeated_times:
                row.append(Text(" " * len(log_time_display)))
            else:
                row.append(log_time_display)
                self._last_time = log_time_display
        if self.show_level:
            row.append(level)

        row.append(Renderables(renderables))
        if self.show_path and path:
            path_text = Text()
            path_text.append(
                path, style=f"link file://{link_path}" if link_path else ""
            )
            if line_no:
                path_text.append(":")
                path_text.append(
                    f"{line_no}",
                    style=f"link file://{link_path}#{line_no}" if link_path else "",
                )
            row.append(path_text)

        output.add_row(*row)
        return output


if __name__ == "__main__":  # pragma: no cover
    from rich.console import Console

    c = Console()
    c.print("[on blue]Hello", justify="right")
    c.log("[on blue]hello", justify="right")



================================================
FILE: rich/_loop.py
================================================
from typing import Iterable, Tuple, TypeVar

T = TypeVar("T")


def loop_first(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:
    """Iterate and generate a tuple with a flag for first value."""
    iter_values = iter(values)
    try:
        value = next(iter_values)
    except StopIteration:
        return
    yield True, value
    for value in iter_values:
        yield False, value


def loop_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:
    """Iterate and generate a tuple with a flag for last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    for value in iter_values:
        yield False, previous_value
        previous_value = value
    yield True, previous_value


def loop_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """Iterate and generate a tuple with a flag for first and last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value



================================================
FILE: rich/_null_file.py
================================================
from types import TracebackType
from typing import IO, Iterable, Iterator, List, Optional, Type


class NullFile(IO[str]):
    def close(self) -> None:
        pass

    def isatty(self) -> bool:
        return False

    def read(self, __n: int = 1) -> str:
        return ""

    def readable(self) -> bool:
        return False

    def readline(self, __limit: int = 1) -> str:
        return ""

    def readlines(self, __hint: int = 1) -> List[str]:
        return []

    def seek(self, __offset: int, __whence: int = 1) -> int:
        return 0

    def seekable(self) -> bool:
        return False

    def tell(self) -> int:
        return 0

    def truncate(self, __size: Optional[int] = 1) -> int:
        return 0

    def writable(self) -> bool:
        return False

    def writelines(self, __lines: Iterable[str]) -> None:
        pass

    def __next__(self) -> str:
        return ""

    def __iter__(self) -> Iterator[str]:
        return iter([""])

    def __enter__(self) -> IO[str]:
        return self

    def __exit__(
        self,
        __t: Optional[Type[BaseException]],
        __value: Optional[BaseException],
        __traceback: Optional[TracebackType],
    ) -> None:
        pass

    def write(self, text: str) -> int:
        return 0

    def flush(self) -> None:
        pass

    def fileno(self) -> int:
        return -1


NULL_FILE = NullFile()



================================================
FILE: rich/_palettes.py
================================================
from .palette import Palette


# Taken from https://en.wikipedia.org/wiki/ANSI_escape_code (Windows 10 column)
WINDOWS_PALETTE = Palette(
    [
        (12, 12, 12),
        (197, 15, 31),
        (19, 161, 14),
        (193, 156, 0),
        (0, 55, 218),
        (136, 23, 152),
        (58, 150, 221),
        (204, 204, 204),
        (118, 118, 118),
        (231, 72, 86),
        (22, 198, 12),
        (249, 241, 165),
        (59, 120, 255),
        (180, 0, 158),
        (97, 214, 214),
        (242, 242, 242),
    ]
)

# # The standard ansi colors (including bright variants)
STANDARD_PALETTE = Palette(
    [
        (0, 0, 0),
        (170, 0, 0),
        (0, 170, 0),
        (170, 85, 0),
        (0, 0, 170),
        (170, 0, 170),
        (0, 170, 170),
        (170, 170, 170),
        (85, 85, 85),
        (255, 85, 85),
        (85, 255, 85),
        (255, 255, 85),
        (85, 85, 255),
        (255, 85, 255),
        (85, 255, 255),
        (255, 255, 255),
    ]
)


# The 256 color palette
EIGHT_BIT_PALETTE = Palette(
    [
        (0, 0, 0),
        (128, 0, 0),
        (0, 128, 0),
        (128, 128, 0),
        (0, 0, 128),
        (128, 0, 128),
        (0, 128, 128),
        (192, 192, 192),
        (128, 128, 128),
        (255, 0, 0),
        (0, 255, 0),
        (255, 255, 0),
        (0, 0, 255),
        (255, 0, 255),
        (0, 255, 255),
        (255, 255, 255),
        (0, 0, 0),
        (0, 0, 95),
        (0, 0, 135),
        (0, 0, 175),
        (0, 0, 215),
        (0, 0, 255),
        (0, 95, 0),
        (0, 95, 95),
        (0, 95, 135),
        (0, 95, 175),
        (0, 95, 215),
        (0, 95, 255),
        (0, 135, 0),
        (0, 135, 95),
        (0, 135, 135),
        (0, 135, 175),
        (0, 135, 215),
        (0, 135, 255),
        (0, 175, 0),
        (0, 175, 95),
        (0, 175, 135),
        (0, 175, 175),
        (0, 175, 215),
        (0, 175, 255),
        (0, 215, 0),
        (0, 215, 95),
        (0, 215, 135),
        (0, 215, 175),
        (0, 215, 215),
        (0, 215, 255),
        (0, 255, 0),
        (0, 255, 95),
        (0, 255, 135),
        (0, 255, 175),
        (0, 255, 215),
        (0, 255, 255),
        (95, 0, 0),
        (95, 0, 95),
        (95, 0, 135),
        (95, 0, 175),
        (95, 0, 215),
        (95, 0, 255),
        (95, 95, 0),
        (95, 95, 95),
        (95, 95, 135),
        (95, 95, 175),
        (95, 95, 215),
        (95, 95, 255),
        (95, 135, 0),
        (95, 135, 95),
        (95, 135, 135),
        (95, 135, 175),
        (95, 135, 215),
        (95, 135, 255),
        (95, 175, 0),
        (95, 175, 95),
        (95, 175, 135),
        (95, 175, 175),
        (95, 175, 215),
        (95, 175, 255),
        (95, 215, 0),
        (95, 215, 95),
        (95, 215, 135),
        (95, 215, 175),
        (95, 215, 215),
        (95, 215, 255),
        (95, 255, 0),
        (95, 255, 95),
        (95, 255, 135),
        (95, 255, 175),
        (95, 255, 215),
        (95, 255, 255),
        (135, 0, 0),
        (135, 0, 95),
        (135, 0, 135),
        (135, 0, 175),
        (135, 0, 215),
        (135, 0, 255),
        (135, 95, 0),
        (135, 95, 95),
        (135, 95, 135),
        (135, 95, 175),
        (135, 95, 215),
        (135, 95, 255),
        (135, 135, 0),
        (135, 135, 95),
        (135, 135, 135),
        (135, 135, 175),
        (135, 135, 215),
        (135, 135, 255),
        (135, 175, 0),
        (135, 175, 95),
        (135, 175, 135),
        (135, 175, 175),
        (135, 175, 215),
        (135, 175, 255),
        (135, 215, 0),
        (135, 215, 95),
        (135, 215, 135),
        (135, 215, 175),
        (135, 215, 215),
        (135, 215, 255),
        (135, 255, 0),
        (135, 255, 95),
        (135, 255, 135),
        (135, 255, 175),
        (135, 255, 215),
        (135, 255, 255),
        (175, 0, 0),
        (175, 0, 95),
        (175, 0, 135),
        (175, 0, 175),
        (175, 0, 215),
        (175, 0, 255),
        (175, 95, 0),
        (175, 95, 95),
        (175, 95, 135),
        (175, 95, 175),
        (175, 95, 215),
        (175, 95, 255),
        (175, 135, 0),
        (175, 135, 95),
        (175, 135, 135),
        (175, 135, 175),
        (175, 135, 215),
        (175, 135, 255),
        (175, 175, 0),
        (175, 175, 95),
        (175, 175, 135),
        (175, 175, 175),
        (175, 175, 215),
        (175, 175, 255),
        (175, 215, 0),
        (175, 215, 95),
        (175, 215, 135),
        (175, 215, 175),
        (175, 215, 215),
        (175, 215, 255),
        (175, 255, 0),
        (175, 255, 95),
        (175, 255, 135),
        (175, 255, 175),
        (175, 255, 215),
        (175, 255, 255),
        (215, 0, 0),
        (215, 0, 95),
        (215, 0, 135),
        (215, 0, 175),
        (215, 0, 215),
        (215, 0, 255),
        (215, 95, 0),
        (215, 95, 95),
        (215, 95, 135),
        (215, 95, 175),
        (215, 95, 215),
        (215, 95, 255),
        (215, 135, 0),
        (215, 135, 95),
        (215, 135, 135),
        (215, 135, 175),
        (215, 135, 215),
        (215, 135, 255),
        (215, 175, 0),
        (215, 175, 95),
        (215, 175, 135),
        (215, 175, 175),
        (215, 175, 215),
        (215, 175, 255),
        (215, 215, 0),
        (215, 215, 95),
        (215, 215, 135),
        (215, 215, 175),
        (215, 215, 215),
        (215, 215, 255),
        (215, 255, 0),
        (215, 255, 95),
        (215, 255, 135),
        (215, 255, 175),
        (215, 255, 215),
        (215, 255, 255),
        (255, 0, 0),
        (255, 0, 95),
        (255, 0, 135),
        (255, 0, 175),
        (255, 0, 215),
        (255, 0, 255),
        (255, 95, 0),
        (255, 95, 95),
        (255, 95, 135),
        (255, 95, 175),
        (255, 95, 215),
        (255, 95, 255),
        (255, 135, 0),
        (255, 135, 95),
        (255, 135, 135),
        (255, 135, 175),
        (255, 135, 215),
        (255, 135, 255),
        (255, 175, 0),
        (255, 175, 95),
        (255, 175, 135),
        (255, 175, 175),
        (255, 175, 215),
        (255, 175, 255),
        (255, 215, 0),
        (255, 215, 95),
        (255, 215, 135),
        (255, 215, 175),
        (255, 215, 215),
        (255, 215, 255),
        (255, 255, 0),
        (255, 255, 95),
        (255, 255, 135),
        (255, 255, 175),
        (255, 255, 215),
        (255, 255, 255),
        (8, 8, 8),
        (18, 18, 18),
        (28, 28, 28),
        (38, 38, 38),
        (48, 48, 48),
        (58, 58, 58),
        (68, 68, 68),
        (78, 78, 78),
        (88, 88, 88),
        (98, 98, 98),
        (108, 108, 108),
        (118, 118, 118),
        (128, 128, 128),
        (138, 138, 138),
        (148, 148, 148),
        (158, 158, 158),
        (168, 168, 168),
        (178, 178, 178),
        (188, 188, 188),
        (198, 198, 198),
        (208, 208, 208),
        (218, 218, 218),
        (228, 228, 228),
        (238, 238, 238),
    ]
)



================================================
FILE: rich/_pick.py
================================================
from typing import Optional


def pick_bool(*values: Optional[bool]) -> bool:
    """Pick the first non-none bool or return the last value.

    Args:
        *values (bool): Any number of boolean or None values.

    Returns:
        bool: First non-none boolean.
    """
    assert values, "1 or more values required"
    for value in values:
        if value is not None:
            return value
    return bool(value)



================================================
FILE: rich/_ratio.py
================================================
from fractions import Fraction
from math import ceil
from typing import cast, List, Optional, Sequence, Protocol


class Edge(Protocol):
    """Any object that defines an edge (such as Layout)."""

    size: Optional[int] = None
    ratio: int = 1
    minimum_size: int = 1


def ratio_resolve(total: int, edges: Sequence[Edge]) -> List[int]:
    """Divide total space to satisfy size, ratio, and minimum_size, constraints.

    The returned list of integers should add up to total in most cases, unless it is
    impossible to satisfy all the constraints. For instance, if there are two edges
    with a minimum size of 20 each and `total` is 30 then the returned list will be
    greater than total. In practice, this would mean that a Layout object would
    clip the rows that would overflow the screen height.

    Args:
        total (int): Total number of characters.
        edges (List[Edge]): Edges within total space.

    Returns:
        List[int]: Number of characters for each edge.
    """
    # Size of edge or None for yet to be determined
    sizes = [(edge.size or None) for edge in edges]

    _Fraction = Fraction

    # While any edges haven't been calculated
    while None in sizes:
        # Get flexible edges and index to map these back on to sizes list
        flexible_edges = [
            (index, edge)
            for index, (size, edge) in enumerate(zip(sizes, edges))
            if size is None
        ]
        # Remaining space in total
        remaining = total - sum(size or 0 for size in sizes)
        if remaining <= 0:
            # No room for flexible edges
            return [
                ((edge.minimum_size or 1) if size is None else size)
                for size, edge in zip(sizes, edges)
            ]
        # Calculate number of characters in a ratio portion
        portion = _Fraction(
            remaining, sum((edge.ratio or 1) for _, edge in flexible_edges)
        )

        # If any edges will be less than their minimum, replace size with the minimum
        for index, edge in flexible_edges:
            if portion * edge.ratio <= edge.minimum_size:
                sizes[index] = edge.minimum_size
                # New fixed size will invalidate calculations, so we need to repeat the process
                break
        else:
            # Distribute flexible space and compensate for rounding error
            # Since edge sizes can only be integers we need to add the remainder
            # to the following line
            remainder = _Fraction(0)
            for index, edge in flexible_edges:
                size, remainder = divmod(portion * edge.ratio + remainder, 1)
                sizes[index] = size
            break
    # Sizes now contains integers only
    return cast(List[int], sizes)


def ratio_reduce(
    total: int, ratios: List[int], maximums: List[int], values: List[int]
) -> List[int]:
    """Divide an integer total in to parts based on ratios.

    Args:
        total (int): The total to divide.
        ratios (List[int]): A list of integer ratios.
        maximums (List[int]): List of maximums values for each slot.
        values (List[int]): List of values

    Returns:
        List[int]: A list of integers guaranteed to sum to total.
    """
    ratios = [ratio if _max else 0 for ratio, _max in zip(ratios, maximums)]
    total_ratio = sum(ratios)
    if not total_ratio:
        return values[:]
    total_remaining = total
    result: List[int] = []
    append = result.append
    for ratio, maximum, value in zip(ratios, maximums, values):
        if ratio and total_ratio > 0:
            distributed = min(maximum, round(ratio * total_remaining / total_ratio))
            append(value - distributed)
            total_remaining -= distributed
            total_ratio -= ratio
        else:
            append(value)
    return result


def ratio_distribute(
    total: int, ratios: List[int], minimums: Optional[List[int]] = None
) -> List[int]:
    """Distribute an integer total in to parts based on ratios.

    Args:
        total (int): The total to divide.
        ratios (List[int]): A list of integer ratios.
        minimums (List[int]): List of minimum values for each slot.

    Returns:
        List[int]: A list of integers guaranteed to sum to total.
    """
    if minimums:
        ratios = [ratio if _min else 0 for ratio, _min in zip(ratios, minimums)]
    total_ratio = sum(ratios)
    assert total_ratio > 0, "Sum of ratios must be > 0"

    total_remaining = total
    distributed_total: List[int] = []
    append = distributed_total.append
    if minimums is None:
        _minimums = [0] * len(ratios)
    else:
        _minimums = minimums
    for ratio, minimum in zip(ratios, _minimums):
        if total_ratio > 0:
            distributed = max(minimum, ceil(ratio * total_remaining / total_ratio))
        else:
            distributed = total_remaining
        append(distributed)
        total_ratio -= ratio
        total_remaining -= distributed
    return distributed_total


if __name__ == "__main__":
    from dataclasses import dataclass

    @dataclass
    class E:
        size: Optional[int] = None
        ratio: int = 1
        minimum_size: int = 1

    resolved = ratio_resolve(110, [E(None, 1, 1), E(None, 1, 1), E(None, 1, 1)])
    print(sum(resolved))



================================================
FILE: rich/_spinners.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xa3 in position 1406: illegal multibyte sequence


================================================
FILE: rich/_stack.py
================================================
from typing import List, TypeVar

T = TypeVar("T")


class Stack(List[T]):
    """A small shim over builtin list."""

    @property
    def top(self) -> T:
        """Get top of stack."""
        return self[-1]

    def push(self, item: T) -> None:
        """Push an item on to the stack (append in stack nomenclature)."""
        self.append(item)



================================================
FILE: rich/_timer.py
================================================
"""
Timer context manager, only used in debug.

"""

from time import time

import contextlib
from typing import Generator


@contextlib.contextmanager
def timer(subject: str = "time") -> Generator[None, None, None]:
    """print the elapsed time. (only used in debugging)"""
    start = time()
    yield
    elapsed = time() - start
    elapsed_ms = elapsed * 1000
    print(f"{subject} elapsed {elapsed_ms:.1f}ms")



================================================
FILE: rich/_win32_console.py
================================================
"""Light wrapper around the Win32 Console API - this module should only be imported on Windows

The API that this module wraps is documented at https://docs.microsoft.com/en-us/windows/console/console-functions
"""

import ctypes
import sys
from typing import Any

windll: Any = None
if sys.platform == "win32":
    windll = ctypes.LibraryLoader(ctypes.WinDLL)
else:
    raise ImportError(f"{__name__} can only be imported on Windows")

import time
from ctypes import Structure, byref, wintypes
from typing import IO, NamedTuple, Type, cast

from rich.color import ColorSystem
from rich.style import Style

STDOUT = -11
ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4

COORD = wintypes._COORD


class LegacyWindowsError(Exception):
    pass


class WindowsCoordinates(NamedTuple):
    """Coordinates in the Windows Console API are (y, x), not (x, y).
    This class is intended to prevent that confusion.
    Rows and columns are indexed from 0.
    This class can be used in place of wintypes._COORD in arguments and argtypes.
    """

    row: int
    col: int

    @classmethod
    def from_param(cls, value: "WindowsCoordinates") -> COORD:
        """Converts a WindowsCoordinates into a wintypes _COORD structure.
        This classmethod is internally called by ctypes to perform the conversion.

        Args:
            value (WindowsCoordinates): The input coordinates to convert.

        Returns:
            wintypes._COORD: The converted coordinates struct.
        """
        return COORD(value.col, value.row)


class CONSOLE_SCREEN_BUFFER_INFO(Structure):
    _fields_ = [
        ("dwSize", COORD),
        ("dwCursorPosition", COORD),
        ("wAttributes", wintypes.WORD),
        ("srWindow", wintypes.SMALL_RECT),
        ("dwMaximumWindowSize", COORD),
    ]


class CONSOLE_CURSOR_INFO(ctypes.Structure):
    _fields_ = [("dwSize", wintypes.DWORD), ("bVisible", wintypes.BOOL)]


_GetStdHandle = windll.kernel32.GetStdHandle
_GetStdHandle.argtypes = [
    wintypes.DWORD,
]
_GetStdHandle.restype = wintypes.HANDLE


def GetStdHandle(handle: int = STDOUT) -> wintypes.HANDLE:
    """Retrieves a handle to the specified standard device (standard input, standard output, or standard error).

    Args:
        handle (int): Integer identifier for the handle. Defaults to -11 (stdout).

    Returns:
        wintypes.HANDLE: The handle
    """
    return cast(wintypes.HANDLE, _GetStdHandle(handle))


_GetConsoleMode = windll.kernel32.GetConsoleMode
_GetConsoleMode.argtypes = [wintypes.HANDLE, wintypes.LPDWORD]
_GetConsoleMode.restype = wintypes.BOOL


def GetConsoleMode(std_handle: wintypes.HANDLE) -> int:
    """Retrieves the current input mode of a console's input buffer
    or the current output mode of a console screen buffer.

    Args:
        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.

    Raises:
        LegacyWindowsError: If any error occurs while calling the Windows console API.

    Returns:
        int: Value representing the current console mode as documented at
            https://docs.microsoft.com/en-us/windows/console/getconsolemode#parameters
    """

    console_mode = wintypes.DWORD()
    success = bool(_GetConsoleMode(std_handle, console_mode))
    if not success:
        raise LegacyWindowsError("Unable to get legacy Windows Console Mode")
    return console_mode.value


_FillConsoleOutputCharacterW = windll.kernel32.FillConsoleOutputCharacterW
_FillConsoleOutputCharacterW.argtypes = [
    wintypes.HANDLE,
    ctypes.c_char,
    wintypes.DWORD,
    cast(Type[COORD], WindowsCoordinates),
    ctypes.POINTER(wintypes.DWORD),
]
_FillConsoleOutputCharacterW.restype = wintypes.BOOL


def FillConsoleOutputCharacter(
    std_handle: wintypes.HANDLE,
    char: str,
    length: int,
    start: WindowsCoordinates,
) -> int:
    """Writes a character to the console screen buffer a specified number of times, beginning at the specified coordinates.

    Args:
        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
        char (str): The character to write. Must be a string of length 1.
        length (int): The number of times to write the character.
        start (WindowsCoordinates): The coordinates to start writing at.

    Returns:
        int: The number of characters written.
    """
    character = ctypes.c_char(char.encode())
    num_characters = wintypes.DWORD(length)
    num_written = wintypes.DWORD(0)
    _FillConsoleOutputCharacterW(
        std_handle,
        character,
        num_characters,
        start,
        byref(num_written),
    )
    return num_written.value


_FillConsoleOutputAttribute = windll.kernel32.FillConsoleOutputAttribute
_FillConsoleOutputAttribute.argtypes = [
    wintypes.HANDLE,
    wintypes.WORD,
    wintypes.DWORD,
    cast(Type[COORD], WindowsCoordinates),
    ctypes.POINTER(wintypes.DWORD),
]
_FillConsoleOutputAttribute.restype = wintypes.BOOL


def FillConsoleOutputAttribute(
    std_handle: wintypes.HANDLE,
    attributes: int,
    length: int,
    start: WindowsCoordinates,
) -> int:
    """Sets the character attributes for a specified number of character cells,
    beginning at the specified coordinates in a screen buffer.

    Args:
        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
        attributes (int): Integer value representing the foreground and background colours of the cells.
        length (int): The number of cells to set the output attribute of.
        start (WindowsCoordinates): The coordinates of the first cell whose attributes are to be set.

    Returns:
        int: The number of cells whose attributes were actually set.
    """
    num_cells = wintypes.DWORD(length)
    style_attrs = wintypes.WORD(attributes)
    num_written = wintypes.DWORD(0)
    _FillConsoleOutputAttribute(
        std_handle, style_attrs, num_cells, start, byref(num_written)
    )
    return num_written.value


_SetConsoleTextAttribute = windll.kernel32.SetConsoleTextAttribute
_SetConsoleTextAttribute.argtypes = [
    wintypes.HANDLE,
    wintypes.WORD,
]
_SetConsoleTextAttribute.restype = wintypes.BOOL


def SetConsoleTextAttribute(
    std_handle: wintypes.HANDLE, attributes: wintypes.WORD
) -> bool:
    """Set the colour attributes for all text written after this function is called.

    Args:
        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
        attributes (int): Integer value representing the foreground and background colours.


    Returns:
        bool: True if the attribute was set successfully, otherwise False.
    """
    return bool(_SetConsoleTextAttribute(std_handle, attributes))


_GetConsoleScreenBufferInfo = windll.kernel32.GetConsoleScreenBufferInfo
_GetConsoleScreenBufferInfo.argtypes = [
    wintypes.HANDLE,
    ctypes.POINTER(CONSOLE_SCREEN_BUFFER_INFO),
]
_GetConsoleScreenBufferInfo.restype = wintypes.BOOL


def GetConsoleScreenBufferInfo(
    std_handle: wintypes.HANDLE,
) -> CONSOLE_SCREEN_BUFFER_INFO:
    """Retrieves information about the specified console screen buffer.

    Args:
        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.

    Returns:
        CONSOLE_SCREEN_BUFFER_INFO: A CONSOLE_SCREEN_BUFFER_INFO ctype struct contain information about
            screen size, cursor position, colour attributes, and more."""
    console_screen_buffer_info = CONSOLE_SCREEN_BUFFER_INFO()
    _GetConsoleScreenBufferInfo(std_handle, byref(console_screen_buffer_info))
    return console_screen_buffer_info


_SetConsoleCursorPosition = windll.kernel32.SetConsoleCursorPosition
_SetConsoleCursorPosition.argtypes = [
    wintypes.HANDLE,
    cast(Type[COORD], WindowsCoordinates),
]
_SetConsoleCursorPosition.restype = wintypes.BOOL


def SetConsoleCursorPosition(
    std_handle: wintypes.HANDLE, coords: WindowsCoordinates
) -> bool:
    """Set the position of the cursor in the console screen

    Args:
        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
        coords (WindowsCoordinates): The coordinates to move the cursor to.

    Returns:
        bool: True if the function succeeds, otherwise False.
    """
    return bool(_SetConsoleCursorPosition(std_handle, coords))


_GetConsoleCursorInfo = windll.kernel32.GetConsoleCursorInfo
_GetConsoleCursorInfo.argtypes = [
    wintypes.HANDLE,
    ctypes.POINTER(CONSOLE_CURSOR_INFO),
]
_GetConsoleCursorInfo.restype = wintypes.BOOL


def GetConsoleCursorInfo(
    std_handle: wintypes.HANDLE, cursor_info: CONSOLE_CURSOR_INFO
) -> bool:
    """Get the cursor info - used to get cursor visibility and width

    Args:
        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
        cursor_info (CONSOLE_CURSOR_INFO): CONSOLE_CURSOR_INFO ctype struct that receives information
            about the console's cursor.

    Returns:
          bool: True if the function succeeds, otherwise False.
    """
    return bool(_GetConsoleCursorInfo(std_handle, byref(cursor_info)))


_SetConsoleCursorInfo = windll.kernel32.SetConsoleCursorInfo
_SetConsoleCursorInfo.argtypes = [
    wintypes.HANDLE,
    ctypes.POINTER(CONSOLE_CURSOR_INFO),
]
_SetConsoleCursorInfo.restype = wintypes.BOOL


def SetConsoleCursorInfo(
    std_handle: wintypes.HANDLE, cursor_info: CONSOLE_CURSOR_INFO
) -> bool:
    """Set the cursor info - used for adjusting cursor visibility and width

    Args:
        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
        cursor_info (CONSOLE_CURSOR_INFO): CONSOLE_CURSOR_INFO ctype struct containing the new cursor info.

    Returns:
          bool: True if the function succeeds, otherwise False.
    """
    return bool(_SetConsoleCursorInfo(std_handle, byref(cursor_info)))


_SetConsoleTitle = windll.kernel32.SetConsoleTitleW
_SetConsoleTitle.argtypes = [wintypes.LPCWSTR]
_SetConsoleTitle.restype = wintypes.BOOL


def SetConsoleTitle(title: str) -> bool:
    """Sets the title of the current console window

    Args:
        title (str): The new title of the console window.

    Returns:
        bool: True if the function succeeds, otherwise False.
    """
    return bool(_SetConsoleTitle(title))


class LegacyWindowsTerm:
    """This class allows interaction with the legacy Windows Console API. It should only be used in the context
    of environments where virtual terminal processing is not available. However, if it is used in a Windows environment,
    the entire API should work.

    Args:
        file (IO[str]): The file which the Windows Console API HANDLE is retrieved from, defaults to sys.stdout.
    """

    BRIGHT_BIT = 8

    # Indices are ANSI color numbers, values are the corresponding Windows Console API color numbers
    ANSI_TO_WINDOWS = [
        0,  # black                      The Windows colours are defined in wincon.h as follows:
        4,  # red                         define FOREGROUND_BLUE            0x0001 -- 0000 0001
        2,  # green                       define FOREGROUND_GREEN           0x0002 -- 0000 0010
        6,  # yellow                      define FOREGROUND_RED             0x0004 -- 0000 0100
        1,  # blue                        define FOREGROUND_INTENSITY       0x0008 -- 0000 1000
        5,  # magenta                     define BACKGROUND_BLUE            0x0010 -- 0001 0000
        3,  # cyan                        define BACKGROUND_GREEN           0x0020 -- 0010 0000
        7,  # white                       define BACKGROUND_RED             0x0040 -- 0100 0000
        8,  # bright black (grey)         define BACKGROUND_INTENSITY       0x0080 -- 1000 0000
        12,  # bright red
        10,  # bright green
        14,  # bright yellow
        9,  # bright blue
        13,  # bright magenta
        11,  # bright cyan
        15,  # bright white
    ]

    def __init__(self, file: "IO[str]") -> None:
        handle = GetStdHandle(STDOUT)
        self._handle = handle
        default_text = GetConsoleScreenBufferInfo(handle).wAttributes
        self._default_text = default_text

        self._default_fore = default_text & 7
        self._default_back = (default_text >> 4) & 7
        self._default_attrs = self._default_fore | (self._default_back << 4)

        self._file = file
        self.write = file.write
        self.flush = file.flush

    @property
    def cursor_position(self) -> WindowsCoordinates:
        """Returns the current position of the cursor (0-based)

        Returns:
            WindowsCoordinates: The current cursor position.
        """
        coord: COORD = GetConsoleScreenBufferInfo(self._handle).dwCursorPosition
        return WindowsCoordinates(row=coord.Y, col=coord.X)

    @property
    def screen_size(self) -> WindowsCoordinates:
        """Returns the current size of the console screen buffer, in character columns and rows

        Returns:
            WindowsCoordinates: The width and height of the screen as WindowsCoordinates.
        """
        screen_size: COORD = GetConsoleScreenBufferInfo(self._handle).dwSize
        return WindowsCoordinates(row=screen_size.Y, col=screen_size.X)

    def write_text(self, text: str) -> None:
        """Write text directly to the terminal without any modification of styles

        Args:
            text (str): The text to write to the console
        """
        self.write(text)
        self.flush()

    def write_styled(self, text: str, style: Style) -> None:
        """Write styled text to the terminal.

        Args:
            text (str): The text to write
            style (Style): The style of the text
        """
        color = style.color
        bgcolor = style.bgcolor
        if style.reverse:
            color, bgcolor = bgcolor, color

        if color:
            fore = color.downgrade(ColorSystem.WINDOWS).number
            fore = fore if fore is not None else 7  # Default to ANSI 7: White
            if style.bold:
                fore = fore | self.BRIGHT_BIT
            if style.dim:
                fore = fore & ~self.BRIGHT_BIT
            fore = self.ANSI_TO_WINDOWS[fore]
        else:
            fore = self._default_fore

        if bgcolor:
            back = bgcolor.downgrade(ColorSystem.WINDOWS).number
            back = back if back is not None else 0  # Default to ANSI 0: Black
            back = self.ANSI_TO_WINDOWS[back]
        else:
            back = self._default_back

        assert fore is not None
        assert back is not None

        SetConsoleTextAttribute(
            self._handle, attributes=ctypes.c_ushort(fore | (back << 4))
        )
        self.write_text(text)
        SetConsoleTextAttribute(self._handle, attributes=self._default_text)

    def move_cursor_to(self, new_position: WindowsCoordinates) -> None:
        """Set the position of the cursor

        Args:
            new_position (WindowsCoordinates): The WindowsCoordinates representing the new position of the cursor.
        """
        if new_position.col < 0 or new_position.row < 0:
            return
        SetConsoleCursorPosition(self._handle, coords=new_position)

    def erase_line(self) -> None:
        """Erase all content on the line the cursor is currently located at"""
        screen_size = self.screen_size
        cursor_position = self.cursor_position
        cells_to_erase = screen_size.col
        start_coordinates = WindowsCoordinates(row=cursor_position.row, col=0)
        FillConsoleOutputCharacter(
            self._handle, " ", length=cells_to_erase, start=start_coordinates
        )
        FillConsoleOutputAttribute(
            self._handle,
            self._default_attrs,
            length=cells_to_erase,
            start=start_coordinates,
        )

    def erase_end_of_line(self) -> None:
        """Erase all content from the cursor position to the end of that line"""
        cursor_position = self.cursor_position
        cells_to_erase = self.screen_size.col - cursor_position.col
        FillConsoleOutputCharacter(
            self._handle, " ", length=cells_to_erase, start=cursor_position
        )
        FillConsoleOutputAttribute(
            self._handle,
            self._default_attrs,
            length=cells_to_erase,
            start=cursor_position,
        )

    def erase_start_of_line(self) -> None:
        """Erase all content from the cursor position to the start of that line"""
        row, col = self.cursor_position
        start = WindowsCoordinates(row, 0)
        FillConsoleOutputCharacter(self._handle, " ", length=col, start=start)
        FillConsoleOutputAttribute(
            self._handle, self._default_attrs, length=col, start=start
        )

    def move_cursor_up(self) -> None:
        """Move the cursor up a single cell"""
        cursor_position = self.cursor_position
        SetConsoleCursorPosition(
            self._handle,
            coords=WindowsCoordinates(
                row=cursor_position.row - 1, col=cursor_position.col
            ),
        )

    def move_cursor_down(self) -> None:
        """Move the cursor down a single cell"""
        cursor_position = self.cursor_position
        SetConsoleCursorPosition(
            self._handle,
            coords=WindowsCoordinates(
                row=cursor_position.row + 1,
                col=cursor_position.col,
            ),
        )

    def move_cursor_forward(self) -> None:
        """Move the cursor forward a single cell. Wrap to the next line if required."""
        row, col = self.cursor_position
        if col == self.screen_size.col - 1:
            row += 1
            col = 0
        else:
            col += 1
        SetConsoleCursorPosition(
            self._handle, coords=WindowsCoordinates(row=row, col=col)
        )

    def move_cursor_to_column(self, column: int) -> None:
        """Move cursor to the column specified by the zero-based column index, staying on the same row

        Args:
            column (int): The zero-based column index to move the cursor to.
        """
        row, _ = self.cursor_position
        SetConsoleCursorPosition(self._handle, coords=WindowsCoordinates(row, column))

    def move_cursor_backward(self) -> None:
        """Move the cursor backward a single cell. Wrap to the previous line if required."""
        row, col = self.cursor_position
        if col == 0:
            row -= 1
            col = self.screen_size.col - 1
        else:
            col -= 1
        SetConsoleCursorPosition(
            self._handle, coords=WindowsCoordinates(row=row, col=col)
        )

    def hide_cursor(self) -> None:
        """Hide the cursor"""
        current_cursor_size = self._get_cursor_size()
        invisible_cursor = CONSOLE_CURSOR_INFO(dwSize=current_cursor_size, bVisible=0)
        SetConsoleCursorInfo(self._handle, cursor_info=invisible_cursor)

    def show_cursor(self) -> None:
        """Show the cursor"""
        current_cursor_size = self._get_cursor_size()
        visible_cursor = CONSOLE_CURSOR_INFO(dwSize=current_cursor_size, bVisible=1)
        SetConsoleCursorInfo(self._handle, cursor_info=visible_cursor)

    def set_title(self, title: str) -> None:
        """Set the title of the terminal window

        Args:
            title (str): The new title of the console window
        """
        assert len(title) < 255, "Console title must be less than 255 characters"
        SetConsoleTitle(title)

    def _get_cursor_size(self) -> int:
        """Get the percentage of the character cell that is filled by the cursor"""
        cursor_info = CONSOLE_CURSOR_INFO()
        GetConsoleCursorInfo(self._handle, cursor_info=cursor_info)
        return int(cursor_info.dwSize)


if __name__ == "__main__":
    handle = GetStdHandle()

    from rich.console import Console

    console = Console()

    term = LegacyWindowsTerm(sys.stdout)
    term.set_title("Win32 Console Examples")

    style = Style(color="black", bgcolor="red")

    heading = Style.parse("black on green")

    # Check colour output
    console.rule("Checking colour output")
    console.print("[on red]on red!")
    console.print("[blue]blue!")
    console.print("[yellow]yellow!")
    console.print("[bold yellow]bold yellow!")
    console.print("[bright_yellow]bright_yellow!")
    console.print("[dim bright_yellow]dim bright_yellow!")
    console.print("[italic cyan]italic cyan!")
    console.print("[bold white on blue]bold white on blue!")
    console.print("[reverse bold white on blue]reverse bold white on blue!")
    console.print("[bold black on cyan]bold black on cyan!")
    console.print("[black on green]black on green!")
    console.print("[blue on green]blue on green!")
    console.print("[white on black]white on black!")
    console.print("[black on white]black on white!")
    console.print("[#1BB152 on #DA812D]#1BB152 on #DA812D!")

    # Check cursor movement
    console.rule("Checking cursor movement")
    console.print()
    term.move_cursor_backward()
    term.move_cursor_backward()
    term.write_text("went back and wrapped to prev line")
    time.sleep(1)
    term.move_cursor_up()
    term.write_text("we go up")
    time.sleep(1)
    term.move_cursor_down()
    term.write_text("and down")
    time.sleep(1)
    term.move_cursor_up()
    term.move_cursor_backward()
    term.move_cursor_backward()
    term.write_text("we went up and back 2")
    time.sleep(1)
    term.move_cursor_down()
    term.move_cursor_backward()
    term.move_cursor_backward()
    term.write_text("we went down and back 2")
    time.sleep(1)

    # Check erasing of lines
    term.hide_cursor()
    console.print()
    console.rule("Checking line erasing")
    console.print("\n...Deleting to the start of the line...")
    term.write_text("The red arrow shows the cursor location, and direction of erase")
    time.sleep(1)
    term.move_cursor_to_column(16)
    term.write_styled("<", Style.parse("black on red"))
    term.move_cursor_backward()
    time.sleep(1)
    term.erase_start_of_line()
    time.sleep(1)

    console.print("\n\n...And to the end of the line...")
    term.write_text("The red arrow shows the cursor location, and direction of erase")
    time.sleep(1)

    term.move_cursor_to_column(16)
    term.write_styled(">", Style.parse("black on red"))
    time.sleep(1)
    term.erase_end_of_line()
    time.sleep(1)

    console.print("\n\n...Now the whole line will be erased...")
    term.write_styled("I'm going to disappear!", style=Style.parse("black on cyan"))
    time.sleep(1)
    term.erase_line()

    term.show_cursor()
    print("\n")



================================================
FILE: rich/_windows.py
================================================
import sys
from dataclasses import dataclass


@dataclass
class WindowsConsoleFeatures:
    """Windows features available."""

    vt: bool = False
    """The console supports VT codes."""
    truecolor: bool = False
    """The console supports truecolor."""


try:
    import ctypes
    from ctypes import LibraryLoader

    if sys.platform == "win32":
        windll = LibraryLoader(ctypes.WinDLL)
    else:
        windll = None
        raise ImportError("Not windows")

    from rich._win32_console import (
        ENABLE_VIRTUAL_TERMINAL_PROCESSING,
        GetConsoleMode,
        GetStdHandle,
        LegacyWindowsError,
    )

except (AttributeError, ImportError, ValueError):
    # Fallback if we can't load the Windows DLL
    def get_windows_console_features() -> WindowsConsoleFeatures:
        features = WindowsConsoleFeatures()
        return features

else:

    def get_windows_console_features() -> WindowsConsoleFeatures:
        """Get windows console features.

        Returns:
            WindowsConsoleFeatures: An instance of WindowsConsoleFeatures.
        """
        handle = GetStdHandle()
        try:
            console_mode = GetConsoleMode(handle)
            success = True
        except LegacyWindowsError:
            console_mode = 0
            success = False
        vt = bool(success and console_mode & ENABLE_VIRTUAL_TERMINAL_PROCESSING)
        truecolor = False
        if vt:
            win_version = sys.getwindowsversion()
            truecolor = win_version.major > 10 or (
                win_version.major == 10 and win_version.build >= 15063
            )
        features = WindowsConsoleFeatures(vt=vt, truecolor=truecolor)
        return features


if __name__ == "__main__":
    import platform

    features = get_windows_console_features()
    from rich import print

    print(f'platform="{platform.system()}"')
    print(repr(features))



================================================
FILE: rich/_windows_renderer.py
================================================
from typing import Iterable, Sequence, Tuple, cast

from rich._win32_console import LegacyWindowsTerm, WindowsCoordinates
from rich.segment import ControlCode, ControlType, Segment


def legacy_windows_render(buffer: Iterable[Segment], term: LegacyWindowsTerm) -> None:
    """Makes appropriate Windows Console API calls based on the segments in the buffer.

    Args:
        buffer (Iterable[Segment]): Iterable of Segments to convert to Win32 API calls.
        term (LegacyWindowsTerm): Used to call the Windows Console API.
    """
    for text, style, control in buffer:
        if not control:
            if style:
                term.write_styled(text, style)
            else:
                term.write_text(text)
        else:
            control_codes: Sequence[ControlCode] = control
            for control_code in control_codes:
                control_type = control_code[0]
                if control_type == ControlType.CURSOR_MOVE_TO:
                    _, x, y = cast(Tuple[ControlType, int, int], control_code)
                    term.move_cursor_to(WindowsCoordinates(row=y - 1, col=x - 1))
                elif control_type == ControlType.CARRIAGE_RETURN:
                    term.write_text("\r")
                elif control_type == ControlType.HOME:
                    term.move_cursor_to(WindowsCoordinates(0, 0))
                elif control_type == ControlType.CURSOR_UP:
                    term.move_cursor_up()
                elif control_type == ControlType.CURSOR_DOWN:
                    term.move_cursor_down()
                elif control_type == ControlType.CURSOR_FORWARD:
                    term.move_cursor_forward()
                elif control_type == ControlType.CURSOR_BACKWARD:
                    term.move_cursor_backward()
                elif control_type == ControlType.CURSOR_MOVE_TO_COLUMN:
                    _, column = cast(Tuple[ControlType, int], control_code)
                    term.move_cursor_to_column(column - 1)
                elif control_type == ControlType.HIDE_CURSOR:
                    term.hide_cursor()
                elif control_type == ControlType.SHOW_CURSOR:
                    term.show_cursor()
                elif control_type == ControlType.ERASE_IN_LINE:
                    _, mode = cast(Tuple[ControlType, int], control_code)
                    if mode == 0:
                        term.erase_end_of_line()
                    elif mode == 1:
                        term.erase_start_of_line()
                    elif mode == 2:
                        term.erase_line()
                elif control_type == ControlType.SET_WINDOW_TITLE:
                    _, title = cast(Tuple[ControlType, str], control_code)
                    term.set_title(title)



================================================
FILE: rich/_wrap.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xae in position 3332: illegal multibyte sequence


================================================
FILE: rich/abc.py
================================================
from abc import ABC


class RichRenderable(ABC):
    """An abstract base class for Rich renderables.

    Note that there is no need to extend this class, the intended use is to check if an
    object supports the Rich renderable protocol. For example::

        if isinstance(my_object, RichRenderable):
            console.print(my_object)

    """

    @classmethod
    def __subclasshook__(cls, other: type) -> bool:
        """Check if this class supports the rich render protocol."""
        return hasattr(other, "__rich_console__") or hasattr(other, "__rich__")


if __name__ == "__main__":  # pragma: no cover
    from rich.text import Text

    t = Text()
    print(isinstance(Text, RichRenderable))
    print(isinstance(t, RichRenderable))

    class Foo:
        pass

    f = Foo()
    print(isinstance(f, RichRenderable))
    print(isinstance("", RichRenderable))



================================================
FILE: rich/align.py
================================================
from itertools import chain
from typing import TYPE_CHECKING, Iterable, Optional, Literal

from .constrain import Constrain
from .jupyter import JupyterMixin
from .measure import Measurement
from .segment import Segment
from .style import StyleType

if TYPE_CHECKING:
    from .console import Console, ConsoleOptions, RenderableType, RenderResult

AlignMethod = Literal["left", "center", "right"]
VerticalAlignMethod = Literal["top", "middle", "bottom"]


class Align(JupyterMixin):
    """Align a renderable by adding spaces if necessary.

    Args:
        renderable (RenderableType): A console renderable.
        align (AlignMethod): One of "left", "center", or "right""
        style (StyleType, optional): An optional style to apply to the background.
        vertical (Optional[VerticalAlignMethod], optional): Optional vertical align, one of "top", "middle", or "bottom". Defaults to None.
        pad (bool, optional): Pad the right with spaces. Defaults to True.
        width (int, optional): Restrict contents to given width, or None to use default width. Defaults to None.
        height (int, optional): Set height of align renderable, or None to fit to contents. Defaults to None.

    Raises:
        ValueError: if ``align`` is not one of the expected values.
    """

    def __init__(
        self,
        renderable: "RenderableType",
        align: AlignMethod = "left",
        style: Optional[StyleType] = None,
        *,
        vertical: Optional[VerticalAlignMethod] = None,
        pad: bool = True,
        width: Optional[int] = None,
        height: Optional[int] = None,
    ) -> None:
        if align not in ("left", "center", "right"):
            raise ValueError(
                f'invalid value for align, expected "left", "center", or "right" (not {align!r})'
            )
        if vertical is not None and vertical not in ("top", "middle", "bottom"):
            raise ValueError(
                f'invalid value for vertical, expected "top", "middle", or "bottom" (not {vertical!r})'
            )
        self.renderable = renderable
        self.align = align
        self.style = style
        self.vertical = vertical
        self.pad = pad
        self.width = width
        self.height = height

    def __repr__(self) -> str:
        return f"Align({self.renderable!r}, {self.align!r})"

    @classmethod
    def left(
        cls,
        renderable: "RenderableType",
        style: Optional[StyleType] = None,
        *,
        vertical: Optional[VerticalAlignMethod] = None,
        pad: bool = True,
        width: Optional[int] = None,
        height: Optional[int] = None,
    ) -> "Align":
        """Align a renderable to the left."""
        return cls(
            renderable,
            "left",
            style=style,
            vertical=vertical,
            pad=pad,
            width=width,
            height=height,
        )

    @classmethod
    def center(
        cls,
        renderable: "RenderableType",
        style: Optional[StyleType] = None,
        *,
        vertical: Optional[VerticalAlignMethod] = None,
        pad: bool = True,
        width: Optional[int] = None,
        height: Optional[int] = None,
    ) -> "Align":
        """Align a renderable to the center."""
        return cls(
            renderable,
            "center",
            style=style,
            vertical=vertical,
            pad=pad,
            width=width,
            height=height,
        )

    @classmethod
    def right(
        cls,
        renderable: "RenderableType",
        style: Optional[StyleType] = None,
        *,
        vertical: Optional[VerticalAlignMethod] = None,
        pad: bool = True,
        width: Optional[int] = None,
        height: Optional[int] = None,
    ) -> "Align":
        """Align a renderable to the right."""
        return cls(
            renderable,
            "right",
            style=style,
            vertical=vertical,
            pad=pad,
            width=width,
            height=height,
        )

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        align = self.align
        width = console.measure(self.renderable, options=options).maximum
        rendered = console.render(
            Constrain(
                self.renderable, width if self.width is None else min(width, self.width)
            ),
            options.update(height=None),
        )
        lines = list(Segment.split_lines(rendered))
        width, height = Segment.get_shape(lines)
        lines = Segment.set_shape(lines, width, height)
        new_line = Segment.line()
        excess_space = options.max_width - width
        style = console.get_style(self.style) if self.style is not None else None

        def generate_segments() -> Iterable[Segment]:
            if excess_space <= 0:
                # Exact fit
                for line in lines:
                    yield from line
                    yield new_line

            elif align == "left":
                # Pad on the right
                pad = Segment(" " * excess_space, style) if self.pad else None
                for line in lines:
                    yield from line
                    if pad:
                        yield pad
                    yield new_line

            elif align == "center":
                # Pad left and right
                left = excess_space // 2
                pad = Segment(" " * left, style)
                pad_right = (
                    Segment(" " * (excess_space - left), style) if self.pad else None
                )
                for line in lines:
                    if left:
                        yield pad
                    yield from line
                    if pad_right:
                        yield pad_right
                    yield new_line

            elif align == "right":
                # Padding on left
                pad = Segment(" " * excess_space, style)
                for line in lines:
                    yield pad
                    yield from line
                    yield new_line

        blank_line = (
            Segment(f"{' ' * (self.width or options.max_width)}\n", style)
            if self.pad
            else Segment("\n")
        )

        def blank_lines(count: int) -> Iterable[Segment]:
            if count > 0:
                for _ in range(count):
                    yield blank_line

        vertical_height = self.height or options.height
        iter_segments: Iterable[Segment]
        if self.vertical and vertical_height is not None:
            if self.vertical == "top":
                bottom_space = vertical_height - height
                iter_segments = chain(generate_segments(), blank_lines(bottom_space))
            elif self.vertical == "middle":
                top_space = (vertical_height - height) // 2
                bottom_space = vertical_height - top_space - height
                iter_segments = chain(
                    blank_lines(top_space),
                    generate_segments(),
                    blank_lines(bottom_space),
                )
            else:  #  self.vertical == "bottom":
                top_space = vertical_height - height
                iter_segments = chain(blank_lines(top_space), generate_segments())
        else:
            iter_segments = generate_segments()
        if self.style:
            style = console.get_style(self.style)
            iter_segments = Segment.apply_style(iter_segments, style)
        yield from iter_segments

    def __rich_measure__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> Measurement:
        measurement = Measurement.get(console, options, self.renderable)
        return measurement


class VerticalCenter(JupyterMixin):
    """Vertically aligns a renderable.

    Warn:
        This class is deprecated and may be removed in a future version. Use Align class with
        `vertical="middle"`.

    Args:
        renderable (RenderableType): A renderable object.
        style (StyleType, optional): An optional style to apply to the background. Defaults to None.
    """

    def __init__(
        self,
        renderable: "RenderableType",
        style: Optional[StyleType] = None,
    ) -> None:
        self.renderable = renderable
        self.style = style

    def __repr__(self) -> str:
        return f"VerticalCenter({self.renderable!r})"

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        style = console.get_style(self.style) if self.style is not None else None
        lines = console.render_lines(
            self.renderable, options.update(height=None), pad=False
        )
        width, _height = Segment.get_shape(lines)
        new_line = Segment.line()
        height = options.height or options.size.height
        top_space = (height - len(lines)) // 2
        bottom_space = height - top_space - len(lines)
        blank_line = Segment(f"{' ' * width}", style)

        def blank_lines(count: int) -> Iterable[Segment]:
            for _ in range(count):
                yield blank_line
                yield new_line

        if top_space > 0:
            yield from blank_lines(top_space)
        for line in lines:
            yield from line
            yield new_line
        if bottom_space > 0:
            yield from blank_lines(bottom_space)

    def __rich_measure__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> Measurement:
        measurement = Measurement.get(console, options, self.renderable)
        return measurement


if __name__ == "__main__":  # pragma: no cover
    from rich.console import Console, Group
    from rich.highlighter import ReprHighlighter
    from rich.panel import Panel

    highlighter = ReprHighlighter()
    console = Console()

    panel = Panel(
        Group(
            Align.left(highlighter("align='left'")),
            Align.center(highlighter("align='center'")),
            Align.right(highlighter("align='right'")),
        ),
        width=60,
        style="on dark_blue",
        title="Align",
    )

    console.print(
        Align.center(panel, vertical="middle", style="on red", height=console.height)
    )



================================================
FILE: rich/ansi.py
================================================
import re
import sys
from contextlib import suppress
from typing import Iterable, NamedTuple, Optional

from .color import Color
from .style import Style
from .text import Text

re_ansi = re.compile(
    r"""
(?:\x1b[0-?])|
(?:\x1b\](.*?)\x1b\\)|
(?:\x1b([(@-Z\\-_]|\[[0-?]*[ -/]*[@-~]))
""",
    re.VERBOSE,
)


class _AnsiToken(NamedTuple):
    """Result of ansi tokenized string."""

    plain: str = ""
    sgr: Optional[str] = ""
    osc: Optional[str] = ""


def _ansi_tokenize(ansi_text: str) -> Iterable[_AnsiToken]:
    """Tokenize a string in to plain text and ANSI codes.

    Args:
        ansi_text (str): A String containing ANSI codes.

    Yields:
        AnsiToken: A named tuple of (plain, sgr, osc)
    """

    position = 0
    sgr: Optional[str]
    osc: Optional[str]
    for match in re_ansi.finditer(ansi_text):
        start, end = match.span(0)
        osc, sgr = match.groups()
        if start > position:
            yield _AnsiToken(ansi_text[position:start])
        if sgr:
            if sgr == "(":
                position = end + 1
                continue
            if sgr.endswith("m"):
                yield _AnsiToken("", sgr[1:-1], osc)
        else:
            yield _AnsiToken("", sgr, osc)
        position = end
    if position < len(ansi_text):
        yield _AnsiToken(ansi_text[position:])


SGR_STYLE_MAP = {
    1: "bold",
    2: "dim",
    3: "italic",
    4: "underline",
    5: "blink",
    6: "blink2",
    7: "reverse",
    8: "conceal",
    9: "strike",
    21: "underline2",
    22: "not dim not bold",
    23: "not italic",
    24: "not underline",
    25: "not blink",
    26: "not blink2",
    27: "not reverse",
    28: "not conceal",
    29: "not strike",
    30: "color(0)",
    31: "color(1)",
    32: "color(2)",
    33: "color(3)",
    34: "color(4)",
    35: "color(5)",
    36: "color(6)",
    37: "color(7)",
    39: "default",
    40: "on color(0)",
    41: "on color(1)",
    42: "on color(2)",
    43: "on color(3)",
    44: "on color(4)",
    45: "on color(5)",
    46: "on color(6)",
    47: "on color(7)",
    49: "on default",
    51: "frame",
    52: "encircle",
    53: "overline",
    54: "not frame not encircle",
    55: "not overline",
    90: "color(8)",
    91: "color(9)",
    92: "color(10)",
    93: "color(11)",
    94: "color(12)",
    95: "color(13)",
    96: "color(14)",
    97: "color(15)",
    100: "on color(8)",
    101: "on color(9)",
    102: "on color(10)",
    103: "on color(11)",
    104: "on color(12)",
    105: "on color(13)",
    106: "on color(14)",
    107: "on color(15)",
}


class AnsiDecoder:
    """Translate ANSI code in to styled Text."""

    def __init__(self) -> None:
        self.style = Style.null()

    def decode(self, terminal_text: str) -> Iterable[Text]:
        """Decode ANSI codes in an iterable of lines.

        Args:
            lines (Iterable[str]): An iterable of lines of terminal output.

        Yields:
            Text: Marked up Text.
        """
        for line in terminal_text.splitlines():
            yield self.decode_line(line)

    def decode_line(self, line: str) -> Text:
        """Decode a line containing ansi codes.

        Args:
            line (str): A line of terminal output.

        Returns:
            Text: A Text instance marked up according to ansi codes.
        """
        from_ansi = Color.from_ansi
        from_rgb = Color.from_rgb
        _Style = Style
        text = Text()
        append = text.append
        line = line.rsplit("\r", 1)[-1]
        for plain_text, sgr, osc in _ansi_tokenize(line):
            if plain_text:
                append(plain_text, self.style or None)
            elif osc is not None:
                if osc.startswith("8;"):
                    _params, semicolon, link = osc[2:].partition(";")
                    if semicolon:
                        self.style = self.style.update_link(link or None)
            elif sgr is not None:
                # Translate in to semi-colon separated codes
                # Ignore invalid codes, because we want to be lenient
                codes = [
                    min(255, int(_code) if _code else 0)
                    for _code in sgr.split(";")
                    if _code.isdigit() or _code == ""
                ]
                iter_codes = iter(codes)
                for code in iter_codes:
                    if code == 0:
                        # reset
                        self.style = _Style.null()
                    elif code in SGR_STYLE_MAP:
                        # styles
                        self.style += _Style.parse(SGR_STYLE_MAP[code])
                    elif code == 38:
                        # 聽Foreground
                        with suppress(StopIteration):
                            color_type = next(iter_codes)
                            if color_type == 5:
                                self.style += _Style.from_color(
                                    from_ansi(next(iter_codes))
                                )
                            elif color_type == 2:
                                self.style += _Style.from_color(
                                    from_rgb(
                                        next(iter_codes),
                                        next(iter_codes),
                                        next(iter_codes),
                                    )
                                )
                    elif code == 48:
                        # Background
                        with suppress(StopIteration):
                            color_type = next(iter_codes)
                            if color_type == 5:
                                self.style += _Style.from_color(
                                    None, from_ansi(next(iter_codes))
                                )
                            elif color_type == 2:
                                self.style += _Style.from_color(
                                    None,
                                    from_rgb(
                                        next(iter_codes),
                                        next(iter_codes),
                                        next(iter_codes),
                                    ),
                                )

        return text


if sys.platform != "win32" and __name__ == "__main__":  # pragma: no cover
    import io
    import os
    import pty
    import sys

    decoder = AnsiDecoder()

    stdout = io.BytesIO()

    def read(fd: int) -> bytes:
        data = os.read(fd, 1024)
        stdout.write(data)
        return data

    pty.spawn(sys.argv[1:], read)

    from .console import Console

    console = Console(record=True)

    stdout_result = stdout.getvalue().decode("utf-8")
    print(stdout_result)

    for line in decoder.decode(stdout_result):
        console.print(line)

    console.save_html("stdout.html")



================================================
FILE: rich/bar.py
================================================
from typing import Optional, Union

from .color import Color
from .console import Console, ConsoleOptions, RenderResult
from .jupyter import JupyterMixin
from .measure import Measurement
from .segment import Segment
from .style import Style

# There are left-aligned characters for 1/8 to 7/8, but
# the right-aligned characters exist only for 1/8 and 4/8.
BEGIN_BLOCK_ELEMENTS = ["█", "█", "█", "▐", "▐", "▐", "▕", "▕"]
END_BLOCK_ELEMENTS = [" ", "▏", "▎", "▍", "▌", "▋", "▊", "▉"]
FULL_BLOCK = "█"


class Bar(JupyterMixin):
    """Renders a solid block bar.

    Args:
        size (float): Value for the end of the bar.
        begin (float): Begin point (between 0 and size, inclusive).
        end (float): End point (between 0 and size, inclusive).
        width (int, optional): Width of the bar, or ``None`` for maximum width. Defaults to None.
        color (Union[Color, str], optional): Color of the bar. Defaults to "default".
        bgcolor (Union[Color, str], optional): Color of bar background. Defaults to "default".
    """

    def __init__(
        self,
        size: float,
        begin: float,
        end: float,
        *,
        width: Optional[int] = None,
        color: Union[Color, str] = "default",
        bgcolor: Union[Color, str] = "default",
    ):
        self.size = size
        self.begin = max(begin, 0)
        self.end = min(end, size)
        self.width = width
        self.style = Style(color=color, bgcolor=bgcolor)

    def __repr__(self) -> str:
        return f"Bar({self.size}, {self.begin}, {self.end})"

    def __rich_console__(
        self, console: Console, options: ConsoleOptions
    ) -> RenderResult:
        width = min(
            self.width if self.width is not None else options.max_width,
            options.max_width,
        )

        if self.begin >= self.end:
            yield Segment(" " * width, self.style)
            yield Segment.line()
            return

        prefix_complete_eights = int(width * 8 * self.begin / self.size)
        prefix_bar_count = prefix_complete_eights // 8
        prefix_eights_count = prefix_complete_eights % 8

        body_complete_eights = int(width * 8 * self.end / self.size)
        body_bar_count = body_complete_eights // 8
        body_eights_count = body_complete_eights % 8

        # When start and end fall into the same cell, we ideally should render
        # a symbol that's "center-aligned", but there is no good symbol in Unicode.
        # In this case, we fall back to right-aligned block symbol for simplicity.

        prefix = " " * prefix_bar_count
        if prefix_eights_count:
            prefix += BEGIN_BLOCK_ELEMENTS[prefix_eights_count]

        body = FULL_BLOCK * body_bar_count
        if body_eights_count:
            body += END_BLOCK_ELEMENTS[body_eights_count]

        suffix = " " * (width - len(body))

        yield Segment(prefix + body[len(prefix) :] + suffix, self.style)
        yield Segment.line()

    def __rich_measure__(
        self, console: Console, options: ConsoleOptions
    ) -> Measurement:
        return (
            Measurement(self.width, self.width)
            if self.width is not None
            else Measurement(4, options.max_width)
        )



================================================
FILE: rich/box.py
================================================
from typing import TYPE_CHECKING, Iterable, List, Literal


from ._loop import loop_last

if TYPE_CHECKING:
    from rich.console import ConsoleOptions


class Box:
    """Defines characters to render boxes.

    ┌─┬┐ top
    │ ││ head
    ├─┼┤ head_row
    │ ││ mid
    ├─┼┤ row
    ├─┼┤ foot_row
    │ ││ foot
    └─┴┘ bottom

    Args:
        box (str): Characters making up box.
        ascii (bool, optional): True if this box uses ascii characters only. Default is False.
    """

    def __init__(self, box: str, *, ascii: bool = False) -> None:
        self._box = box
        self.ascii = ascii
        line1, line2, line3, line4, line5, line6, line7, line8 = box.splitlines()
        # top
        self.top_left, self.top, self.top_divider, self.top_right = iter(line1)
        # head
        self.head_left, _, self.head_vertical, self.head_right = iter(line2)
        # head_row
        (
            self.head_row_left,
            self.head_row_horizontal,
            self.head_row_cross,
            self.head_row_right,
        ) = iter(line3)

        # mid
        self.mid_left, _, self.mid_vertical, self.mid_right = iter(line4)
        # row
        self.row_left, self.row_horizontal, self.row_cross, self.row_right = iter(line5)
        # foot_row
        (
            self.foot_row_left,
            self.foot_row_horizontal,
            self.foot_row_cross,
            self.foot_row_right,
        ) = iter(line6)
        # foot
        self.foot_left, _, self.foot_vertical, self.foot_right = iter(line7)
        # bottom
        self.bottom_left, self.bottom, self.bottom_divider, self.bottom_right = iter(
            line8
        )

    def __repr__(self) -> str:
        return "Box(...)"

    def __str__(self) -> str:
        return self._box

    def substitute(self, options: "ConsoleOptions", safe: bool = True) -> "Box":
        """Substitute this box for another if it won't render due to platform issues.

        Args:
            options (ConsoleOptions): Console options used in rendering.
            safe (bool, optional): Substitute this for another Box if there are known problems
                displaying on the platform (currently only relevant on Windows). Default is True.

        Returns:
            Box: A different Box or the same Box.
        """
        box = self
        if options.legacy_windows and safe:
            box = LEGACY_WINDOWS_SUBSTITUTIONS.get(box, box)
        if options.ascii_only and not box.ascii:
            box = ASCII
        return box

    def get_plain_headed_box(self) -> "Box":
        """If this box uses special characters for the borders of the header, then
        return the equivalent box that does not.

        Returns:
            Box: The most similar Box that doesn't use header-specific box characters.
                If the current Box already satisfies this criterion, then it's returned.
        """
        return PLAIN_HEADED_SUBSTITUTIONS.get(self, self)

    def get_top(self, widths: Iterable[int]) -> str:
        """Get the top of a simple box.

        Args:
            widths (List[int]): Widths of columns.

        Returns:
            str: A string of box characters.
        """

        parts: List[str] = []
        append = parts.append
        append(self.top_left)
        for last, width in loop_last(widths):
            append(self.top * width)
            if not last:
                append(self.top_divider)
        append(self.top_right)
        return "".join(parts)

    def get_row(
        self,
        widths: Iterable[int],
        level: Literal["head", "row", "foot", "mid"] = "row",
        edge: bool = True,
    ) -> str:
        """Get the top of a simple box.

        Args:
            width (List[int]): Widths of columns.

        Returns:
            str: A string of box characters.
        """
        if level == "head":
            left = self.head_row_left
            horizontal = self.head_row_horizontal
            cross = self.head_row_cross
            right = self.head_row_right
        elif level == "row":
            left = self.row_left
            horizontal = self.row_horizontal
            cross = self.row_cross
            right = self.row_right
        elif level == "mid":
            left = self.mid_left
            horizontal = " "
            cross = self.mid_vertical
            right = self.mid_right
        elif level == "foot":
            left = self.foot_row_left
            horizontal = self.foot_row_horizontal
            cross = self.foot_row_cross
            right = self.foot_row_right
        else:
            raise ValueError("level must be 'head', 'row' or 'foot'")

        parts: List[str] = []
        append = parts.append
        if edge:
            append(left)
        for last, width in loop_last(widths):
            append(horizontal * width)
            if not last:
                append(cross)
        if edge:
            append(right)
        return "".join(parts)

    def get_bottom(self, widths: Iterable[int]) -> str:
        """Get the bottom of a simple box.

        Args:
            widths (List[int]): Widths of columns.

        Returns:
            str: A string of box characters.
        """

        parts: List[str] = []
        append = parts.append
        append(self.bottom_left)
        for last, width in loop_last(widths):
            append(self.bottom * width)
            if not last:
                append(self.bottom_divider)
        append(self.bottom_right)
        return "".join(parts)


# fmt: off
ASCII: Box = Box(
    "+--+\n"
    "| ||\n"
    "|-+|\n"
    "| ||\n"
    "|-+|\n"
    "|-+|\n"
    "| ||\n"
    "+--+\n",
    ascii=True,
)

ASCII2: Box = Box(
    "+-++\n"
    "| ||\n"
    "+-++\n"
    "| ||\n"
    "+-++\n"
    "+-++\n"
    "| ||\n"
    "+-++\n",
    ascii=True,
)

ASCII_DOUBLE_HEAD: Box = Box(
    "+-++\n"
    "| ||\n"
    "+=++\n"
    "| ||\n"
    "+-++\n"
    "+-++\n"
    "| ||\n"
    "+-++\n",
    ascii=True,
)

SQUARE: Box = Box(
    "┌─┬┐\n"
    "│ ││\n"
    "├─┼┤\n"
    "│ ││\n"
    "├─┼┤\n"
    "├─┼┤\n"
    "│ ││\n"
    "└─┴┘\n"
)

SQUARE_DOUBLE_HEAD: Box = Box(
    "┌─┬┐\n"
    "│ ││\n"
    "╞═╪╡\n"
    "│ ││\n"
    "├─┼┤\n"
    "├─┼┤\n"
    "│ ││\n"
    "└─┴┘\n"
)

MINIMAL: Box = Box(
    "  ╷ \n"
    "  │ \n"
    "╶─┼╴\n"
    "  │ \n"
    "╶─┼╴\n"
    "╶─┼╴\n"
    "  │ \n"
    "  ╵ \n"
)


MINIMAL_HEAVY_HEAD: Box = Box(
    "  ╷ \n"
    "  │ \n"
    "╺━┿╸\n"
    "  │ \n"
    "╶─┼╴\n"
    "╶─┼╴\n"
    "  │ \n"
    "  ╵ \n"
)

MINIMAL_DOUBLE_HEAD: Box = Box(
    "  ╷ \n"
    "  │ \n"
    " ═╪ \n"
    "  │ \n"
    " ─┼ \n"
    " ─┼ \n"
    "  │ \n"
    "  ╵ \n"
)


SIMPLE: Box = Box(
    "    \n"
    "    \n"
    " ── \n"
    "    \n"
    "    \n"
    " ── \n"
    "    \n"
    "    \n"
)

SIMPLE_HEAD: Box = Box(
    "    \n"
    "    \n"
    " ── \n"
    "    \n"
    "    \n"
    "    \n"
    "    \n"
    "    \n"
)


SIMPLE_HEAVY: Box = Box(
    "    \n"
    "    \n"
    " ━━ \n"
    "    \n"
    "    \n"
    " ━━ \n"
    "    \n"
    "    \n"
)


HORIZONTALS: Box = Box(
    " ── \n"
    "    \n"
    " ── \n"
    "    \n"
    " ── \n"
    " ── \n"
    "    \n"
    " ── \n"
)

ROUNDED: Box = Box(
    "╭─┬╮\n"
    "│ ││\n"
    "├─┼┤\n"
    "│ ││\n"
    "├─┼┤\n"
    "├─┼┤\n"
    "│ ││\n"
    "╰─┴╯\n"
)

HEAVY: Box = Box(
    "┏━┳┓\n"
    "┃ ┃┃\n"
    "┣━╋┫\n"
    "┃ ┃┃\n"
    "┣━╋┫\n"
    "┣━╋┫\n"
    "┃ ┃┃\n"
    "┗━┻┛\n"
)

HEAVY_EDGE: Box = Box(
    "┏━┯┓\n"
    "┃ │┃\n"
    "┠─┼┨\n"
    "┃ │┃\n"
    "┠─┼┨\n"
    "┠─┼┨\n"
    "┃ │┃\n"
    "┗━┷┛\n"
)

HEAVY_HEAD: Box = Box(
    "┏━┳┓\n"
    "┃ ┃┃\n"
    "┡━╇┩\n"
    "│ ││\n"
    "├─┼┤\n"
    "├─┼┤\n"
    "│ ││\n"
    "└─┴┘\n"
)

DOUBLE: Box = Box(
    "╔═╦╗\n"
    "║ ║║\n"
    "╠═╬╣\n"
    "║ ║║\n"
    "╠═╬╣\n"
    "╠═╬╣\n"
    "║ ║║\n"
    "╚═╩╝\n"
)

DOUBLE_EDGE: Box = Box(
    "╔═╤╗\n"
    "║ │║\n"
    "╟─┼╢\n"
    "║ │║\n"
    "╟─┼╢\n"
    "╟─┼╢\n"
    "║ │║\n"
    "╚═╧╝\n"
)

MARKDOWN: Box = Box(
    "    \n"
    "| ||\n"
    "|-||\n"
    "| ||\n"
    "|-||\n"
    "|-||\n"
    "| ||\n"
    "    \n",
    ascii=True,
)
# fmt: on

# Map Boxes that don't render with raster fonts on to equivalent that do
LEGACY_WINDOWS_SUBSTITUTIONS = {
    ROUNDED: SQUARE,
    MINIMAL_HEAVY_HEAD: MINIMAL,
    SIMPLE_HEAVY: SIMPLE,
    HEAVY: SQUARE,
    HEAVY_EDGE: SQUARE,
    HEAVY_HEAD: SQUARE,
}

# Map headed boxes to their headerless equivalents
PLAIN_HEADED_SUBSTITUTIONS = {
    HEAVY_HEAD: SQUARE,
    SQUARE_DOUBLE_HEAD: SQUARE,
    MINIMAL_DOUBLE_HEAD: MINIMAL,
    MINIMAL_HEAVY_HEAD: MINIMAL,
    ASCII_DOUBLE_HEAD: ASCII2,
}


if __name__ == "__main__":  # pragma: no cover
    from rich.columns import Columns
    from rich.panel import Panel

    from . import box as box
    from .console import Console
    from .table import Table
    from .text import Text

    console = Console(record=True)

    BOXES = [
        "ASCII",
        "ASCII2",
        "ASCII_DOUBLE_HEAD",
        "SQUARE",
        "SQUARE_DOUBLE_HEAD",
        "MINIMAL",
        "MINIMAL_HEAVY_HEAD",
        "MINIMAL_DOUBLE_HEAD",
        "SIMPLE",
        "SIMPLE_HEAD",
        "SIMPLE_HEAVY",
        "HORIZONTALS",
        "ROUNDED",
        "HEAVY",
        "HEAVY_EDGE",
        "HEAVY_HEAD",
        "DOUBLE",
        "DOUBLE_EDGE",
        "MARKDOWN",
    ]

    console.print(Panel("[bold green]Box Constants", style="green"), justify="center")
    console.print()

    columns = Columns(expand=True, padding=2)
    for box_name in sorted(BOXES):
        table = Table(
            show_footer=True, style="dim", border_style="not dim", expand=True
        )
        table.add_column("Header 1", "Footer 1")
        table.add_column("Header 2", "Footer 2")
        table.add_row("Cell", "Cell")
        table.add_row("Cell", "Cell")
        table.box = getattr(box, box_name)
        table.title = Text(f"box.{box_name}", style="magenta")
        columns.add_renderable(table)
    console.print(columns)

    # console.save_svg("box.svg")



================================================
FILE: rich/cells.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xaf in position 5000: illegal multibyte sequence


================================================
FILE: rich/color.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xa4 in position 7416: illegal multibyte sequence


================================================
FILE: rich/color_triplet.py
================================================
from typing import NamedTuple, Tuple


class ColorTriplet(NamedTuple):
    """The red, green, and blue components of a color."""

    red: int
    """Red component in 0 to 255 range."""
    green: int
    """Green component in 0 to 255 range."""
    blue: int
    """Blue component in 0 to 255 range."""

    @property
    def hex(self) -> str:
        """get the color triplet in CSS style."""
        red, green, blue = self
        return f"#{red:02x}{green:02x}{blue:02x}"

    @property
    def rgb(self) -> str:
        """The color in RGB format.

        Returns:
            str: An rgb color, e.g. ``"rgb(100,23,255)"``.
        """
        red, green, blue = self
        return f"rgb({red},{green},{blue})"

    @property
    def normalized(self) -> Tuple[float, float, float]:
        """Convert components into floats between 0 and 1.

        Returns:
            Tuple[float, float, float]: A tuple of three normalized colour components.
        """
        red, green, blue = self
        return red / 255.0, green / 255.0, blue / 255.0



================================================
FILE: rich/columns.py
================================================
from collections import defaultdict
from itertools import chain
from operator import itemgetter
from typing import Dict, Iterable, List, Optional, Tuple

from .align import Align, AlignMethod
from .console import Console, ConsoleOptions, RenderableType, RenderResult
from .constrain import Constrain
from .measure import Measurement
from .padding import Padding, PaddingDimensions
from .table import Table
from .text import TextType
from .jupyter import JupyterMixin


class Columns(JupyterMixin):
    """Display renderables in neat columns.

    Args:
        renderables (Iterable[RenderableType]): Any number of Rich renderables (including str).
        width (int, optional): The desired width of the columns, or None to auto detect. Defaults to None.
        padding (PaddingDimensions, optional): Optional padding around cells. Defaults to (0, 1).
        expand (bool, optional): Expand columns to full width. Defaults to False.
        equal (bool, optional): Arrange in to equal sized columns. Defaults to False.
        column_first (bool, optional): Align items from top to bottom (rather than left to right). Defaults to False.
        right_to_left (bool, optional): Start column from right hand side. Defaults to False.
        align (str, optional): Align value ("left", "right", or "center") or None for default. Defaults to None.
        title (TextType, optional): Optional title for Columns.
    """

    def __init__(
        self,
        renderables: Optional[Iterable[RenderableType]] = None,
        padding: PaddingDimensions = (0, 1),
        *,
        width: Optional[int] = None,
        expand: bool = False,
        equal: bool = False,
        column_first: bool = False,
        right_to_left: bool = False,
        align: Optional[AlignMethod] = None,
        title: Optional[TextType] = None,
    ) -> None:
        self.renderables = list(renderables or [])
        self.width = width
        self.padding = padding
        self.expand = expand
        self.equal = equal
        self.column_first = column_first
        self.right_to_left = right_to_left
        self.align: Optional[AlignMethod] = align
        self.title = title

    def add_renderable(self, renderable: RenderableType) -> None:
        """Add a renderable to the columns.

        Args:
            renderable (RenderableType): Any renderable object.
        """
        self.renderables.append(renderable)

    def __rich_console__(
        self, console: Console, options: ConsoleOptions
    ) -> RenderResult:
        render_str = console.render_str
        renderables = [
            render_str(renderable) if isinstance(renderable, str) else renderable
            for renderable in self.renderables
        ]
        if not renderables:
            return
        _top, right, _bottom, left = Padding.unpack(self.padding)
        width_padding = max(left, right)
        max_width = options.max_width
        widths: Dict[int, int] = defaultdict(int)
        column_count = len(renderables)

        get_measurement = Measurement.get
        renderable_widths = [
            get_measurement(console, options, renderable).maximum
            for renderable in renderables
        ]
        if self.equal:
            renderable_widths = [max(renderable_widths)] * len(renderable_widths)

        def iter_renderables(
            column_count: int,
        ) -> Iterable[Tuple[int, Optional[RenderableType]]]:
            item_count = len(renderables)
            if self.column_first:
                width_renderables = list(zip(renderable_widths, renderables))

                column_lengths: List[int] = [item_count // column_count] * column_count
                for col_no in range(item_count % column_count):
                    column_lengths[col_no] += 1

                row_count = (item_count + column_count - 1) // column_count
                cells = [[-1] * column_count for _ in range(row_count)]
                row = col = 0
                for index in range(item_count):
                    cells[row][col] = index
                    column_lengths[col] -= 1
                    if column_lengths[col]:
                        row += 1
                    else:
                        col += 1
                        row = 0
                for index in chain.from_iterable(cells):
                    if index == -1:
                        break
                    yield width_renderables[index]
            else:
                yield from zip(renderable_widths, renderables)
            # Pad odd elements with spaces
            if item_count % column_count:
                for _ in range(column_count - (item_count % column_count)):
                    yield 0, None

        table = Table.grid(padding=self.padding, collapse_padding=True, pad_edge=False)
        table.expand = self.expand
        table.title = self.title

        if self.width is not None:
            column_count = (max_width) // (self.width + width_padding)
            for _ in range(column_count):
                table.add_column(width=self.width)
        else:
            while column_count > 1:
                widths.clear()
                column_no = 0
                for renderable_width, _ in iter_renderables(column_count):
                    widths[column_no] = max(widths[column_no], renderable_width)
                    total_width = sum(widths.values()) + width_padding * (
                        len(widths) - 1
                    )
                    if total_width > max_width:
                        column_count = len(widths) - 1
                        break
                    else:
                        column_no = (column_no + 1) % column_count
                else:
                    break

        get_renderable = itemgetter(1)
        _renderables = [
            get_renderable(_renderable)
            for _renderable in iter_renderables(column_count)
        ]
        if self.equal:
            _renderables = [
                None
                if renderable is None
                else Constrain(renderable, renderable_widths[0])
                for renderable in _renderables
            ]
        if self.align:
            align = self.align
            _Align = Align
            _renderables = [
                None if renderable is None else _Align(renderable, align)
                for renderable in _renderables
            ]

        right_to_left = self.right_to_left
        add_row = table.add_row
        for start in range(0, len(_renderables), column_count):
            row = _renderables[start : start + column_count]
            if right_to_left:
                row = row[::-1]
            add_row(*row)
        yield table


if __name__ == "__main__":  # pragma: no cover
    import os

    console = Console()

    files = [f"{i} {s}" for i, s in enumerate(sorted(os.listdir()))]
    columns = Columns(files, padding=(0, 1), expand=False, equal=False)
    console.print(columns)
    console.rule()
    columns.column_first = True
    console.print(columns)
    columns.right_to_left = True
    console.rule()
    console.print(columns)



================================================
FILE: rich/console.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x80 in position 57512: illegal multibyte sequence


================================================
FILE: rich/constrain.py
================================================
from typing import Optional, TYPE_CHECKING

from .jupyter import JupyterMixin
from .measure import Measurement

if TYPE_CHECKING:
    from .console import Console, ConsoleOptions, RenderableType, RenderResult


class Constrain(JupyterMixin):
    """Constrain the width of a renderable to a given number of characters.

    Args:
        renderable (RenderableType): A renderable object.
        width (int, optional): The maximum width (in characters) to render. Defaults to 80.
    """

    def __init__(self, renderable: "RenderableType", width: Optional[int] = 80) -> None:
        self.renderable = renderable
        self.width = width

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        if self.width is None:
            yield self.renderable
        else:
            child_options = options.update_width(min(self.width, options.max_width))
            yield from console.render(self.renderable, child_options)

    def __rich_measure__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "Measurement":
        if self.width is not None:
            options = options.update_width(self.width)
        measurement = Measurement.get(console, options, self.renderable)
        return measurement



================================================
FILE: rich/containers.py
================================================
from itertools import zip_longest
from typing import (
    TYPE_CHECKING,
    Iterable,
    Iterator,
    List,
    Optional,
    TypeVar,
    Union,
    overload,
)

if TYPE_CHECKING:
    from .console import (
        Console,
        ConsoleOptions,
        JustifyMethod,
        OverflowMethod,
        RenderResult,
        RenderableType,
    )
    from .text import Text

from .cells import cell_len
from .measure import Measurement

T = TypeVar("T")


class Renderables:
    """A list subclass which renders its contents to the console."""

    def __init__(
        self, renderables: Optional[Iterable["RenderableType"]] = None
    ) -> None:
        self._renderables: List["RenderableType"] = (
            list(renderables) if renderables is not None else []
        )

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        """Console render method to insert line-breaks."""
        yield from self._renderables

    def __rich_measure__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "Measurement":
        dimensions = [
            Measurement.get(console, options, renderable)
            for renderable in self._renderables
        ]
        if not dimensions:
            return Measurement(1, 1)
        _min = max(dimension.minimum for dimension in dimensions)
        _max = max(dimension.maximum for dimension in dimensions)
        return Measurement(_min, _max)

    def append(self, renderable: "RenderableType") -> None:
        self._renderables.append(renderable)

    def __iter__(self) -> Iterable["RenderableType"]:
        return iter(self._renderables)


class Lines:
    """A list subclass which can render to the console."""

    def __init__(self, lines: Iterable["Text"] = ()) -> None:
        self._lines: List["Text"] = list(lines)

    def __repr__(self) -> str:
        return f"Lines({self._lines!r})"

    def __iter__(self) -> Iterator["Text"]:
        return iter(self._lines)

    @overload
    def __getitem__(self, index: int) -> "Text":
        ...

    @overload
    def __getitem__(self, index: slice) -> List["Text"]:
        ...

    def __getitem__(self, index: Union[slice, int]) -> Union["Text", List["Text"]]:
        return self._lines[index]

    def __setitem__(self, index: int, value: "Text") -> "Lines":
        self._lines[index] = value
        return self

    def __len__(self) -> int:
        return self._lines.__len__()

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        """Console render method to insert line-breaks."""
        yield from self._lines

    def append(self, line: "Text") -> None:
        self._lines.append(line)

    def extend(self, lines: Iterable["Text"]) -> None:
        self._lines.extend(lines)

    def pop(self, index: int = -1) -> "Text":
        return self._lines.pop(index)

    def justify(
        self,
        console: "Console",
        width: int,
        justify: "JustifyMethod" = "left",
        overflow: "OverflowMethod" = "fold",
    ) -> None:
        """Justify and overflow text to a given width.

        Args:
            console (Console): Console instance.
            width (int): Number of cells available per line.
            justify (str, optional): Default justify method for text: "left", "center", "full" or "right". Defaults to "left".
            overflow (str, optional): Default overflow for text: "crop", "fold", or "ellipsis". Defaults to "fold".

        """
        from .text import Text

        if justify == "left":
            for line in self._lines:
                line.truncate(width, overflow=overflow, pad=True)
        elif justify == "center":
            for line in self._lines:
                line.rstrip()
                line.truncate(width, overflow=overflow)
                line.pad_left((width - cell_len(line.plain)) // 2)
                line.pad_right(width - cell_len(line.plain))
        elif justify == "right":
            for line in self._lines:
                line.rstrip()
                line.truncate(width, overflow=overflow)
                line.pad_left(width - cell_len(line.plain))
        elif justify == "full":
            for line_index, line in enumerate(self._lines):
                if line_index == len(self._lines) - 1:
                    break
                words = line.split(" ")
                words_size = sum(cell_len(word.plain) for word in words)
                num_spaces = len(words) - 1
                spaces = [1 for _ in range(num_spaces)]
                index = 0
                if spaces:
                    while words_size + num_spaces < width:
                        spaces[len(spaces) - index - 1] += 1
                        num_spaces += 1
                        index = (index + 1) % len(spaces)
                tokens: List[Text] = []
                for index, (word, next_word) in enumerate(
                    zip_longest(words, words[1:])
                ):
                    tokens.append(word)
                    if index < len(spaces):
                        style = word.get_style_at_offset(console, -1)
                        next_style = next_word.get_style_at_offset(console, 0)
                        space_style = style if style == next_style else line.style
                        tokens.append(Text(" " * spaces[index], style=space_style))
                self[line_index] = Text("").join(tokens)



================================================
FILE: rich/control.py
================================================
import time
from typing import TYPE_CHECKING, Callable, Dict, Iterable, List, Union, Final

from .segment import ControlCode, ControlType, Segment

if TYPE_CHECKING:
    from .console import Console, ConsoleOptions, RenderResult

STRIP_CONTROL_CODES: Final = [
    7,  # Bell
    8,  # Backspace
    11,  # Vertical tab
    12,  # Form feed
    13,  # Carriage return
]
_CONTROL_STRIP_TRANSLATE: Final = {
    _codepoint: None for _codepoint in STRIP_CONTROL_CODES
}

CONTROL_ESCAPE: Final = {
    7: "\\a",
    8: "\\b",
    11: "\\v",
    12: "\\f",
    13: "\\r",
}

CONTROL_CODES_FORMAT: Dict[int, Callable[..., str]] = {
    ControlType.BELL: lambda: "\x07",
    ControlType.CARRIAGE_RETURN: lambda: "\r",
    ControlType.HOME: lambda: "\x1b[H",
    ControlType.CLEAR: lambda: "\x1b[2J",
    ControlType.ENABLE_ALT_SCREEN: lambda: "\x1b[?1049h",
    ControlType.DISABLE_ALT_SCREEN: lambda: "\x1b[?1049l",
    ControlType.SHOW_CURSOR: lambda: "\x1b[?25h",
    ControlType.HIDE_CURSOR: lambda: "\x1b[?25l",
    ControlType.CURSOR_UP: lambda param: f"\x1b[{param}A",
    ControlType.CURSOR_DOWN: lambda param: f"\x1b[{param}B",
    ControlType.CURSOR_FORWARD: lambda param: f"\x1b[{param}C",
    ControlType.CURSOR_BACKWARD: lambda param: f"\x1b[{param}D",
    ControlType.CURSOR_MOVE_TO_COLUMN: lambda param: f"\x1b[{param+1}G",
    ControlType.ERASE_IN_LINE: lambda param: f"\x1b[{param}K",
    ControlType.CURSOR_MOVE_TO: lambda x, y: f"\x1b[{y+1};{x+1}H",
    ControlType.SET_WINDOW_TITLE: lambda title: f"\x1b]0;{title}\x07",
}


class Control:
    """A renderable that inserts a control code (non printable but may move cursor).

    Args:
        *codes (str): Positional arguments are either a :class:`~rich.segment.ControlType` enum or a
            tuple of ControlType and an integer parameter
    """

    __slots__ = ["segment"]

    def __init__(self, *codes: Union[ControlType, ControlCode]) -> None:
        control_codes: List[ControlCode] = [
            (code,) if isinstance(code, ControlType) else code for code in codes
        ]
        _format_map = CONTROL_CODES_FORMAT
        rendered_codes = "".join(
            _format_map[code](*parameters) for code, *parameters in control_codes
        )
        self.segment = Segment(rendered_codes, None, control_codes)

    @classmethod
    def bell(cls) -> "Control":
        """Ring the 'bell'."""
        return cls(ControlType.BELL)

    @classmethod
    def home(cls) -> "Control":
        """Move cursor to 'home' position."""
        return cls(ControlType.HOME)

    @classmethod
    def move(cls, x: int = 0, y: int = 0) -> "Control":
        """Move cursor relative to current position.

        Args:
            x (int): X offset.
            y (int): Y offset.

        Returns:
            ~Control: Control object.

        """

        def get_codes() -> Iterable[ControlCode]:
            control = ControlType
            if x:
                yield (
                    control.CURSOR_FORWARD if x > 0 else control.CURSOR_BACKWARD,
                    abs(x),
                )
            if y:
                yield (
                    control.CURSOR_DOWN if y > 0 else control.CURSOR_UP,
                    abs(y),
                )

        control = cls(*get_codes())
        return control

    @classmethod
    def move_to_column(cls, x: int, y: int = 0) -> "Control":
        """Move to the given column, optionally add offset to row.

        Returns:
            x (int): absolute x (column)
            y (int): optional y offset (row)

        Returns:
            ~Control: Control object.
        """

        return (
            cls(
                (ControlType.CURSOR_MOVE_TO_COLUMN, x),
                (
                    ControlType.CURSOR_DOWN if y > 0 else ControlType.CURSOR_UP,
                    abs(y),
                ),
            )
            if y
            else cls((ControlType.CURSOR_MOVE_TO_COLUMN, x))
        )

    @classmethod
    def move_to(cls, x: int, y: int) -> "Control":
        """Move cursor to absolute position.

        Args:
            x (int): x offset (column)
            y (int): y offset (row)

        Returns:
            ~Control: Control object.
        """
        return cls((ControlType.CURSOR_MOVE_TO, x, y))

    @classmethod
    def clear(cls) -> "Control":
        """Clear the screen."""
        return cls(ControlType.CLEAR)

    @classmethod
    def show_cursor(cls, show: bool) -> "Control":
        """Show or hide the cursor."""
        return cls(ControlType.SHOW_CURSOR if show else ControlType.HIDE_CURSOR)

    @classmethod
    def alt_screen(cls, enable: bool) -> "Control":
        """Enable or disable alt screen."""
        if enable:
            return cls(ControlType.ENABLE_ALT_SCREEN, ControlType.HOME)
        else:
            return cls(ControlType.DISABLE_ALT_SCREEN)

    @classmethod
    def title(cls, title: str) -> "Control":
        """Set the terminal window title

        Args:
            title (str): The new terminal window title
        """
        return cls((ControlType.SET_WINDOW_TITLE, title))

    def __str__(self) -> str:
        return self.segment.text

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        if self.segment.text:
            yield self.segment


def strip_control_codes(
    text: str, _translate_table: Dict[int, None] = _CONTROL_STRIP_TRANSLATE
) -> str:
    """Remove control codes from text.

    Args:
        text (str): A string possibly contain control codes.

    Returns:
        str: String with control codes removed.
    """
    return text.translate(_translate_table)


def escape_control_codes(
    text: str,
    _translate_table: Dict[int, str] = CONTROL_ESCAPE,
) -> str:
    """Replace control codes with their "escaped" equivalent in the given text.
    (e.g. "\b" becomes "\\b")

    Args:
        text (str): A string possibly containing control codes.

    Returns:
        str: String with control codes replaced with their escaped version.
    """
    return text.translate(_translate_table)


if __name__ == "__main__":  # pragma: no cover
    from rich.console import Console

    console = Console()
    console.print("Look at the title of your terminal window ^")
    # console.print(Control((ControlType.SET_WINDOW_TITLE, "Hello, world!")))
    for i in range(10):
        console.set_window_title("馃殌 Loading" + "." * i)
        time.sleep(0.5)



================================================
FILE: rich/default_styles.py
================================================
from typing import Dict

from .style import Style

DEFAULT_STYLES: Dict[str, Style] = {
    "none": Style.null(),
    "reset": Style(
        color="default",
        bgcolor="default",
        dim=False,
        bold=False,
        italic=False,
        underline=False,
        blink=False,
        blink2=False,
        reverse=False,
        conceal=False,
        strike=False,
    ),
    "dim": Style(dim=True),
    "bright": Style(dim=False),
    "bold": Style(bold=True),
    "strong": Style(bold=True),
    "code": Style(reverse=True, bold=True),
    "italic": Style(italic=True),
    "emphasize": Style(italic=True),
    "underline": Style(underline=True),
    "blink": Style(blink=True),
    "blink2": Style(blink2=True),
    "reverse": Style(reverse=True),
    "strike": Style(strike=True),
    "black": Style(color="black"),
    "red": Style(color="red"),
    "green": Style(color="green"),
    "yellow": Style(color="yellow"),
    "magenta": Style(color="magenta"),
    "cyan": Style(color="cyan"),
    "white": Style(color="white"),
    "inspect.attr": Style(color="yellow", italic=True),
    "inspect.attr.dunder": Style(color="yellow", italic=True, dim=True),
    "inspect.callable": Style(bold=True, color="red"),
    "inspect.async_def": Style(italic=True, color="bright_cyan"),
    "inspect.def": Style(italic=True, color="bright_cyan"),
    "inspect.class": Style(italic=True, color="bright_cyan"),
    "inspect.error": Style(bold=True, color="red"),
    "inspect.equals": Style(),
    "inspect.help": Style(color="cyan"),
    "inspect.doc": Style(dim=True),
    "inspect.value.border": Style(color="green"),
    "live.ellipsis": Style(bold=True, color="red"),
    "layout.tree.row": Style(dim=False, color="red"),
    "layout.tree.column": Style(dim=False, color="blue"),
    "logging.keyword": Style(bold=True, color="yellow"),
    "logging.level.notset": Style(dim=True),
    "logging.level.debug": Style(color="green"),
    "logging.level.info": Style(color="blue"),
    "logging.level.warning": Style(color="yellow"),
    "logging.level.error": Style(color="red", bold=True),
    "logging.level.critical": Style(color="red", bold=True, reverse=True),
    "log.level": Style.null(),
    "log.time": Style(color="cyan", dim=True),
    "log.message": Style.null(),
    "log.path": Style(dim=True),
    "repr.ellipsis": Style(color="yellow"),
    "repr.indent": Style(color="green", dim=True),
    "repr.error": Style(color="red", bold=True),
    "repr.str": Style(color="green", italic=False, bold=False),
    "repr.brace": Style(bold=True),
    "repr.comma": Style(bold=True),
    "repr.ipv4": Style(bold=True, color="bright_green"),
    "repr.ipv6": Style(bold=True, color="bright_green"),
    "repr.eui48": Style(bold=True, color="bright_green"),
    "repr.eui64": Style(bold=True, color="bright_green"),
    "repr.tag_start": Style(bold=True),
    "repr.tag_name": Style(color="bright_magenta", bold=True),
    "repr.tag_contents": Style(color="default"),
    "repr.tag_end": Style(bold=True),
    "repr.attrib_name": Style(color="yellow", italic=False),
    "repr.attrib_equal": Style(bold=True),
    "repr.attrib_value": Style(color="magenta", italic=False),
    "repr.number": Style(color="cyan", bold=True, italic=False),
    "repr.number_complex": Style(color="cyan", bold=True, italic=False),  # same
    "repr.bool_true": Style(color="bright_green", italic=True),
    "repr.bool_false": Style(color="bright_red", italic=True),
    "repr.none": Style(color="magenta", italic=True),
    "repr.url": Style(underline=True, color="bright_blue", italic=False, bold=False),
    "repr.uuid": Style(color="bright_yellow", bold=False),
    "repr.call": Style(color="magenta", bold=True),
    "repr.path": Style(color="magenta"),
    "repr.filename": Style(color="bright_magenta"),
    "rule.line": Style(color="bright_green"),
    "rule.text": Style.null(),
    "json.brace": Style(bold=True),
    "json.bool_true": Style(color="bright_green", italic=True),
    "json.bool_false": Style(color="bright_red", italic=True),
    "json.null": Style(color="magenta", italic=True),
    "json.number": Style(color="cyan", bold=True, italic=False),
    "json.str": Style(color="green", italic=False, bold=False),
    "json.key": Style(color="blue", bold=True),
    "prompt": Style.null(),
    "prompt.choices": Style(color="magenta", bold=True),
    "prompt.default": Style(color="cyan", bold=True),
    "prompt.invalid": Style(color="red"),
    "prompt.invalid.choice": Style(color="red"),
    "pretty": Style.null(),
    "scope.border": Style(color="blue"),
    "scope.key": Style(color="yellow", italic=True),
    "scope.key.special": Style(color="yellow", italic=True, dim=True),
    "scope.equals": Style(color="red"),
    "table.header": Style(bold=True),
    "table.footer": Style(bold=True),
    "table.cell": Style.null(),
    "table.title": Style(italic=True),
    "table.caption": Style(italic=True, dim=True),
    "traceback.error": Style(color="red", italic=True),
    "traceback.border.syntax_error": Style(color="bright_red"),
    "traceback.border": Style(color="red"),
    "traceback.text": Style.null(),
    "traceback.title": Style(color="red", bold=True),
    "traceback.exc_type": Style(color="bright_red", bold=True),
    "traceback.exc_value": Style.null(),
    "traceback.offset": Style(color="bright_red", bold=True),
    "traceback.error_range": Style(underline=True, bold=True),
    "traceback.note": Style(color="green", bold=True),
    "traceback.group.border": Style(color="magenta"),
    "bar.back": Style(color="grey23"),
    "bar.complete": Style(color="rgb(249,38,114)"),
    "bar.finished": Style(color="rgb(114,156,31)"),
    "bar.pulse": Style(color="rgb(249,38,114)"),
    "progress.description": Style.null(),
    "progress.filesize": Style(color="green"),
    "progress.filesize.total": Style(color="green"),
    "progress.download": Style(color="green"),
    "progress.elapsed": Style(color="yellow"),
    "progress.percentage": Style(color="magenta"),
    "progress.remaining": Style(color="cyan"),
    "progress.data.speed": Style(color="red"),
    "progress.spinner": Style(color="green"),
    "status.spinner": Style(color="green"),
    "tree": Style(),
    "tree.line": Style(),
    "markdown.paragraph": Style(),
    "markdown.text": Style(),
    "markdown.em": Style(italic=True),
    "markdown.emph": Style(italic=True),  # For commonmark backwards compatibility
    "markdown.strong": Style(bold=True),
    "markdown.code": Style(bold=True, color="cyan", bgcolor="black"),
    "markdown.code_block": Style(color="cyan", bgcolor="black"),
    "markdown.block_quote": Style(color="magenta"),
    "markdown.list": Style(color="cyan"),
    "markdown.item": Style(),
    "markdown.item.bullet": Style(color="yellow", bold=True),
    "markdown.item.number": Style(color="yellow", bold=True),
    "markdown.hr": Style(color="yellow"),
    "markdown.h1.border": Style(),
    "markdown.h1": Style(bold=True),
    "markdown.h2": Style(bold=True, underline=True),
    "markdown.h3": Style(bold=True),
    "markdown.h4": Style(bold=True, dim=True),
    "markdown.h5": Style(underline=True),
    "markdown.h6": Style(italic=True),
    "markdown.h7": Style(italic=True, dim=True),
    "markdown.link": Style(color="bright_blue"),
    "markdown.link_url": Style(color="blue", underline=True),
    "markdown.s": Style(strike=True),
    "iso8601.date": Style(color="blue"),
    "iso8601.time": Style(color="magenta"),
    "iso8601.timezone": Style(color="yellow"),
}


if __name__ == "__main__":  # pragma: no cover
    import argparse
    import io

    from rich.console import Console
    from rich.table import Table
    from rich.text import Text

    parser = argparse.ArgumentParser()
    parser.add_argument("--html", action="store_true", help="Export as HTML table")
    args = parser.parse_args()
    html: bool = args.html
    console = Console(record=True, width=70, file=io.StringIO()) if html else Console()

    table = Table("Name", "Styling")

    for style_name, style in DEFAULT_STYLES.items():
        table.add_row(Text(style_name, style=style), str(style))

    console.print(table)
    if html:
        print(console.export_html(inline_styles=True))



================================================
FILE: rich/diagnose.py
================================================
import os
import platform

from rich import inspect
from rich.console import Console, get_windows_console_features
from rich.panel import Panel
from rich.pretty import Pretty


def report() -> None:  # pragma: no cover
    """Print a report to the terminal with debugging information"""
    console = Console()
    inspect(console)
    features = get_windows_console_features()
    inspect(features)

    env_names = (
        "CLICOLOR",
        "COLORTERM",
        "COLUMNS",
        "JPY_PARENT_PID",
        "JUPYTER_COLUMNS",
        "JUPYTER_LINES",
        "LINES",
        "NO_COLOR",
        "TERM_PROGRAM",
        "TERM",
        "TTY_COMPATIBLE",
        "TTY_INTERACTIVE",
        "VSCODE_VERBOSE_LOGGING",
    )
    env = {name: os.getenv(name) for name in env_names}
    console.print(Panel.fit((Pretty(env)), title="[b]Environment Variables"))

    console.print(f'platform="{platform.system()}"')


if __name__ == "__main__":  # pragma: no cover
    report()



================================================
FILE: rich/emoji.py
================================================
import sys
from typing import TYPE_CHECKING, Optional, Union, Literal

from .jupyter import JupyterMixin
from .segment import Segment
from .style import Style
from ._emoji_codes import EMOJI
from ._emoji_replace import _emoji_replace


if TYPE_CHECKING:
    from .console import Console, ConsoleOptions, RenderResult


EmojiVariant = Literal["emoji", "text"]


class NoEmoji(Exception):
    """No emoji by that name."""


class Emoji(JupyterMixin):
    __slots__ = ["name", "style", "_char", "variant"]

    VARIANTS = {"text": "\uFE0E", "emoji": "\uFE0F"}

    def __init__(
        self,
        name: str,
        style: Union[str, Style] = "none",
        variant: Optional[EmojiVariant] = None,
    ) -> None:
        """A single emoji character.

        Args:
            name (str): Name of emoji.
            style (Union[str, Style], optional): Optional style. Defaults to None.

        Raises:
            NoEmoji: If the emoji doesn't exist.
        """
        self.name = name
        self.style = style
        self.variant = variant
        try:
            self._char = EMOJI[name]
        except KeyError:
            raise NoEmoji(f"No emoji called {name!r}")
        if variant is not None:
            self._char += self.VARIANTS.get(variant, "")

    @classmethod
    def replace(cls, text: str) -> str:
        """Replace emoji markup with corresponding unicode characters.

        Args:
            text (str): A string with emojis codes, e.g. "Hello :smiley:!"

        Returns:
            str: A string with emoji codes replaces with actual emoji.
        """
        return _emoji_replace(text)

    def __repr__(self) -> str:
        return f"<emoji {self.name!r}>"

    def __str__(self) -> str:
        return self._char

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        yield Segment(self._char, console.get_style(self.style))


if __name__ == "__main__":  # pragma: no cover
    import sys

    from rich.columns import Columns
    from rich.console import Console

    console = Console(record=True)

    columns = Columns(
        (f":{name}: {name}" for name in sorted(EMOJI.keys()) if "\u200D" not in name),
        column_first=True,
    )

    console.print(columns)
    if len(sys.argv) > 1:
        console.save_html(sys.argv[1])



================================================
FILE: rich/errors.py
================================================
class ConsoleError(Exception):
    """An error in console operation."""


class StyleError(Exception):
    """An error in styles."""


class StyleSyntaxError(ConsoleError):
    """Style was badly formatted."""


class MissingStyle(StyleError):
    """No such style."""


class StyleStackError(ConsoleError):
    """Style stack is invalid."""


class NotRenderableError(ConsoleError):
    """Object is not renderable."""


class MarkupError(ConsoleError):
    """Markup was badly formatted."""


class LiveError(ConsoleError):
    """Error related to Live display."""


class NoAltScreen(ConsoleError):
    """Alt screen mode was required."""



================================================
FILE: rich/file_proxy.py
================================================
import io
from typing import IO, TYPE_CHECKING, Any, List

from .ansi import AnsiDecoder
from .text import Text

if TYPE_CHECKING:
    from .console import Console


class FileProxy(io.TextIOBase):
    """Wraps a file (e.g. sys.stdout) and redirects writes to a console."""

    def __init__(self, console: "Console", file: IO[str]) -> None:
        self.__console = console
        self.__file = file
        self.__buffer: List[str] = []
        self.__ansi_decoder = AnsiDecoder()

    @property
    def rich_proxied_file(self) -> IO[str]:
        """Get proxied file."""
        return self.__file

    def __getattr__(self, name: str) -> Any:
        return getattr(self.__file, name)

    def write(self, text: str) -> int:
        if not isinstance(text, str):
            raise TypeError(f"write() argument must be str, not {type(text).__name__}")
        buffer = self.__buffer
        lines: List[str] = []
        while text:
            line, new_line, text = text.partition("\n")
            if new_line:
                lines.append("".join(buffer) + line)
                buffer.clear()
            else:
                buffer.append(line)
                break
        if lines:
            console = self.__console
            with console:
                output = Text("\n").join(
                    self.__ansi_decoder.decode_line(line) for line in lines
                )
                console.print(output)
        return len(text)

    def flush(self) -> None:
        output = "".join(self.__buffer)
        if output:
            self.__console.print(output)
        del self.__buffer[:]

    def fileno(self) -> int:
        return self.__file.fileno()



================================================
FILE: rich/filesize.py
================================================
"""Functions for reporting filesizes. Borrowed from https://github.com/PyFilesystem/pyfilesystem2

The functions declared in this module should cover the different
use cases needed to generate a string representation of a file size
using several different units. Since there are many standards regarding
file size units, three different functions have been implemented.

See Also:
    * `Wikipedia: Binary prefix <https://en.wikipedia.org/wiki/Binary_prefix>`_

"""

__all__ = ["decimal"]

from typing import Iterable, List, Optional, Tuple


def _to_str(
    size: int,
    suffixes: Iterable[str],
    base: int,
    *,
    precision: Optional[int] = 1,
    separator: Optional[str] = " ",
) -> str:
    if size == 1:
        return "1 byte"
    elif size < base:
        return f"{size:,} bytes"

    for i, suffix in enumerate(suffixes, 2):  # noqa: B007
        unit = base**i
        if size < unit:
            break
    return "{:,.{precision}f}{separator}{}".format(
        (base * size / unit),
        suffix,
        precision=precision,
        separator=separator,
    )


def pick_unit_and_suffix(size: int, suffixes: List[str], base: int) -> Tuple[int, str]:
    """Pick a suffix and base for the given size."""
    for i, suffix in enumerate(suffixes):
        unit = base**i
        if size < unit * base:
            break
    return unit, suffix


def decimal(
    size: int,
    *,
    precision: Optional[int] = 1,
    separator: Optional[str] = " ",
) -> str:
    """Convert a filesize in to a string (powers of 1000, SI prefixes).

    In this convention, ``1000 B = 1 kB``.

    This is typically the format used to advertise the storage
    capacity of USB flash drives and the like (*256 MB* meaning
    actually a storage capacity of more than *256 000 000 B*),
    or used by **Mac OS X** since v10.6 to report file sizes.

    Arguments:
        int (size): A file size.
        int (precision): The number of decimal places to include (default = 1).
        str (separator): The string to separate the value from the units (default = " ").

    Returns:
        `str`: A string containing a abbreviated file size and units.

    Example:
        >>> filesize.decimal(30000)
        '30.0 kB'
        >>> filesize.decimal(30000, precision=2, separator="")
        '30.00kB'

    """
    return _to_str(
        size,
        ("kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"),
        1000,
        precision=precision,
        separator=separator,
    )



================================================
FILE: rich/highlighter.py
================================================
import re
from abc import ABC, abstractmethod
from typing import List, Union

from .text import Span, Text


def _combine_regex(*regexes: str) -> str:
    """Combine a number of regexes in to a single regex.

    Returns:
        str: New regex with all regexes ORed together.
    """
    return "|".join(regexes)


class Highlighter(ABC):
    """Abstract base class for highlighters."""

    def __call__(self, text: Union[str, Text]) -> Text:
        """Highlight a str or Text instance.

        Args:
            text (Union[str, ~Text]): Text to highlight.

        Raises:
            TypeError: If not called with text or str.

        Returns:
            Text: A test instance with highlighting applied.
        """
        if isinstance(text, str):
            highlight_text = Text(text)
        elif isinstance(text, Text):
            highlight_text = text.copy()
        else:
            raise TypeError(f"str or Text instance required, not {text!r}")
        self.highlight(highlight_text)
        return highlight_text

    @abstractmethod
    def highlight(self, text: Text) -> None:
        """Apply highlighting in place to text.

        Args:
            text (~Text): A text object highlight.
        """


class NullHighlighter(Highlighter):
    """A highlighter object that doesn't highlight.

    May be used to disable highlighting entirely.

    """

    def highlight(self, text: Text) -> None:
        """Nothing to do"""


class RegexHighlighter(Highlighter):
    """Applies highlighting from a list of regular expressions."""

    highlights: List[str] = []
    base_style: str = ""

    def highlight(self, text: Text) -> None:
        """Highlight :class:`rich.text.Text` using regular expressions.

        Args:
            text (~Text): Text to highlighted.

        """

        highlight_regex = text.highlight_regex
        for re_highlight in self.highlights:
            highlight_regex(re_highlight, style_prefix=self.base_style)


class ReprHighlighter(RegexHighlighter):
    """Highlights the text typically produced from ``__repr__`` methods."""

    base_style = "repr."
    highlights = [
        r"(?P<tag_start><)(?P<tag_name>[-\w.:|]*)(?P<tag_contents>[\w\W]*)(?P<tag_end>>)",
        r'(?P<attrib_name>[\w_]{1,50})=(?P<attrib_value>"?[\w_]+"?)?',
        r"(?P<brace>[][{}()])",
        _combine_regex(
            r"(?P<ipv4>[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})",
            r"(?P<ipv6>([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})",
            r"(?P<eui64>(?:[0-9A-Fa-f]{1,2}-){7}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{1,2}:){7}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{4}\.){3}[0-9A-Fa-f]{4})",
            r"(?P<eui48>(?:[0-9A-Fa-f]{1,2}-){5}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{1,2}:){5}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{4}\.){2}[0-9A-Fa-f]{4})",
            r"(?P<uuid>[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})",
            r"(?P<call>[\w.]*?)\(",
            r"\b(?P<bool_true>True)\b|\b(?P<bool_false>False)\b|\b(?P<none>None)\b",
            r"(?P<ellipsis>\.\.\.)",
            r"(?P<number_complex>(?<!\w)(?:\-?[0-9]+\.?[0-9]*(?:e[-+]?\d+?)?)(?:[-+](?:[0-9]+\.?[0-9]*(?:e[-+]?\d+)?))?j)",
            r"(?P<number>(?<!\w)\-?[0-9]+\.?[0-9]*(e[-+]?\d+?)?\b|0x[0-9a-fA-F]*)",
            r"(?P<path>\B(/[-\w._+]+)*\/)(?P<filename>[-\w._+]*)?",
            r"(?<![\\\w])(?P<str>b?'''.*?(?<!\\)'''|b?'.*?(?<!\\)'|b?\"\"\".*?(?<!\\)\"\"\"|b?\".*?(?<!\\)\")",
            r"(?P<url>(file|https|http|ws|wss)://[-0-9a-zA-Z$_+!`(),.?/;:&=%#~@]*)",
        ),
    ]


class JSONHighlighter(RegexHighlighter):
    """Highlights JSON"""

    # Captures the start and end of JSON strings, handling escaped quotes
    JSON_STR = r"(?<![\\\w])(?P<str>b?\".*?(?<!\\)\")"
    JSON_WHITESPACE = {" ", "\n", "\r", "\t"}

    base_style = "json."
    highlights = [
        _combine_regex(
            r"(?P<brace>[\{\[\(\)\]\}])",
            r"\b(?P<bool_true>true)\b|\b(?P<bool_false>false)\b|\b(?P<null>null)\b",
            r"(?P<number>(?<!\w)\-?[0-9]+\.?[0-9]*(e[\-\+]?\d+?)?\b|0x[0-9a-fA-F]*)",
            JSON_STR,
        ),
    ]

    def highlight(self, text: Text) -> None:
        super().highlight(text)

        # Additional work to handle highlighting JSON keys
        plain = text.plain
        append = text.spans.append
        whitespace = self.JSON_WHITESPACE
        for match in re.finditer(self.JSON_STR, plain):
            start, end = match.span()
            cursor = end
            while cursor < len(plain):
                char = plain[cursor]
                cursor += 1
                if char == ":":
                    append(Span(start, end, "json.key"))
                elif char in whitespace:
                    continue
                break


class ISO8601Highlighter(RegexHighlighter):
    """Highlights the ISO8601 date time strings.
    Regex reference: https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s07.html
    """

    base_style = "iso8601."
    highlights = [
        #
        # Dates
        #
        # Calendar month (e.g. 2008-08). The hyphen is required
        r"^(?P<year>[0-9]{4})-(?P<month>1[0-2]|0[1-9])$",
        # Calendar date w/o hyphens (e.g. 20080830)
        r"^(?P<date>(?P<year>[0-9]{4})(?P<month>1[0-2]|0[1-9])(?P<day>3[01]|0[1-9]|[12][0-9]))$",
        # Ordinal date (e.g. 2008-243). The hyphen is optional
        r"^(?P<date>(?P<year>[0-9]{4})-?(?P<day>36[0-6]|3[0-5][0-9]|[12][0-9]{2}|0[1-9][0-9]|00[1-9]))$",
        #
        # Weeks
        #
        # Week of the year (e.g., 2008-W35). The hyphen is optional
        r"^(?P<date>(?P<year>[0-9]{4})-?W(?P<week>5[0-3]|[1-4][0-9]|0[1-9]))$",
        # Week date (e.g., 2008-W35-6). The hyphens are optional
        r"^(?P<date>(?P<year>[0-9]{4})-?W(?P<week>5[0-3]|[1-4][0-9]|0[1-9])-?(?P<day>[1-7]))$",
        #
        # Times
        #
        # Hours and minutes (e.g., 17:21). The colon is optional
        r"^(?P<time>(?P<hour>2[0-3]|[01][0-9]):?(?P<minute>[0-5][0-9]))$",
        # Hours, minutes, and seconds w/o colons (e.g., 172159)
        r"^(?P<time>(?P<hour>2[0-3]|[01][0-9])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9]))$",
        # Time zone designator (e.g., Z, +07 or +07:00). The colons and the minutes are optional
        r"^(?P<timezone>(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?))$",
        # Hours, minutes, and seconds with time zone designator (e.g., 17:21:59+07:00).
        # All the colons are optional. The minutes in the time zone designator are also optional
        r"^(?P<time>(?P<hour>2[0-3]|[01][0-9])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9]))(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$",
        #
        # Date and Time
        #
        # Calendar date with hours, minutes, and seconds (e.g., 2008-08-30 17:21:59 or 20080830 172159).
        # A space is required between the date and the time. The hyphens and colons are optional.
        # This regex matches dates and times that specify some hyphens or colons but omit others.
        # This does not follow ISO 8601
        r"^(?P<date>(?P<year>[0-9]{4})(?P<hyphen>-)?(?P<month>1[0-2]|0[1-9])(?(hyphen)-)(?P<day>3[01]|0[1-9]|[12][0-9])) (?P<time>(?P<hour>2[0-3]|[01][0-9])(?(hyphen):)(?P<minute>[0-5][0-9])(?(hyphen):)(?P<second>[0-5][0-9]))$",
        #
        # XML Schema dates and times
        #
        # Date, with optional time zone (e.g., 2008-08-30 or 2008-08-30+07:00).
        # Hyphens are required. This is the XML Schema 'date' type
        r"^(?P<date>(?P<year>-?(?:[1-9][0-9]*)?[0-9]{4})-(?P<month>1[0-2]|0[1-9])-(?P<day>3[01]|0[1-9]|[12][0-9]))(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$",
        # Time, with optional fractional seconds and time zone (e.g., 01:45:36 or 01:45:36.123+07:00).
        # There is no limit on the number of digits for the fractional seconds. This is the XML Schema 'time' type
        r"^(?P<time>(?P<hour>2[0-3]|[01][0-9]):(?P<minute>[0-5][0-9]):(?P<second>[0-5][0-9])(?P<frac>\.[0-9]+)?)(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$",
        # Date and time, with optional fractional seconds and time zone (e.g., 2008-08-30T01:45:36 or 2008-08-30T01:45:36.123Z).
        # This is the XML Schema 'dateTime' type
        r"^(?P<date>(?P<year>-?(?:[1-9][0-9]*)?[0-9]{4})-(?P<month>1[0-2]|0[1-9])-(?P<day>3[01]|0[1-9]|[12][0-9]))T(?P<time>(?P<hour>2[0-3]|[01][0-9]):(?P<minute>[0-5][0-9]):(?P<second>[0-5][0-9])(?P<ms>\.[0-9]+)?)(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$",
    ]


if __name__ == "__main__":  # pragma: no cover
    from .console import Console

    console = Console()
    console.print("[bold green]hello world![/bold green]")
    console.print("'[bold green]hello world![/bold green]'")

    console.print(" /foo")
    console.print("/foo/")
    console.print("/foo/bar")
    console.print("foo/bar/baz")

    console.print("/foo/bar/baz?foo=bar+egg&egg=baz")
    console.print("/foo/bar/baz/")
    console.print("/foo/bar/baz/egg")
    console.print("/foo/bar/baz/egg.py")
    console.print("/foo/bar/baz/egg.py word")
    console.print(" /foo/bar/baz/egg.py word")
    console.print("foo /foo/bar/baz/egg.py word")
    console.print("foo /foo/bar/ba._++z/egg+.py word")
    console.print("https://example.org?foo=bar#header")

    console.print(1234567.34)
    console.print(1 / 2)
    console.print(-1 / 123123123123)

    console.print(
        "127.0.1.1 bar 192.168.1.4 2001:0db8:85a3:0000:0000:8a2e:0370:7334 foo"
    )
    import json

    console.print_json(json.dumps(obj={"name": "apple", "count": 1}), indent=None)



================================================
FILE: rich/json.py
================================================
from pathlib import Path
from json import loads, dumps
from typing import Any, Callable, Optional, Union

from .text import Text
from .highlighter import JSONHighlighter, NullHighlighter


class JSON:
    """A renderable which pretty prints JSON.

    Args:
        json (str): JSON encoded data.
        indent (Union[None, int, str], optional): Number of characters to indent by. Defaults to 2.
        highlight (bool, optional): Enable highlighting. Defaults to True.
        skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.
        ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.
        check_circular (bool, optional): Check for circular references. Defaults to True.
        allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.
        default (Callable, optional): A callable that converts values that can not be encoded
            in to something that can be JSON encoded. Defaults to None.
        sort_keys (bool, optional): Sort dictionary keys. Defaults to False.
    """

    def __init__(
        self,
        json: str,
        indent: Union[None, int, str] = 2,
        highlight: bool = True,
        skip_keys: bool = False,
        ensure_ascii: bool = False,
        check_circular: bool = True,
        allow_nan: bool = True,
        default: Optional[Callable[[Any], Any]] = None,
        sort_keys: bool = False,
    ) -> None:
        data = loads(json)
        json = dumps(
            data,
            indent=indent,
            skipkeys=skip_keys,
            ensure_ascii=ensure_ascii,
            check_circular=check_circular,
            allow_nan=allow_nan,
            default=default,
            sort_keys=sort_keys,
        )
        highlighter = JSONHighlighter() if highlight else NullHighlighter()
        self.text = highlighter(json)
        self.text.no_wrap = True
        self.text.overflow = None

    @classmethod
    def from_data(
        cls,
        data: Any,
        indent: Union[None, int, str] = 2,
        highlight: bool = True,
        skip_keys: bool = False,
        ensure_ascii: bool = False,
        check_circular: bool = True,
        allow_nan: bool = True,
        default: Optional[Callable[[Any], Any]] = None,
        sort_keys: bool = False,
    ) -> "JSON":
        """Encodes a JSON object from arbitrary data.

        Args:
            data (Any): An object that may be encoded in to JSON
            indent (Union[None, int, str], optional): Number of characters to indent by. Defaults to 2.
            highlight (bool, optional): Enable highlighting. Defaults to True.
            default (Callable, optional): Optional callable which will be called for objects that cannot be serialized. Defaults to None.
            skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.
            ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.
            check_circular (bool, optional): Check for circular references. Defaults to True.
            allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.
            default (Callable, optional): A callable that converts values that can not be encoded
                in to something that can be JSON encoded. Defaults to None.
            sort_keys (bool, optional): Sort dictionary keys. Defaults to False.

        Returns:
            JSON: New JSON object from the given data.
        """
        json_instance: "JSON" = cls.__new__(cls)
        json = dumps(
            data,
            indent=indent,
            skipkeys=skip_keys,
            ensure_ascii=ensure_ascii,
            check_circular=check_circular,
            allow_nan=allow_nan,
            default=default,
            sort_keys=sort_keys,
        )
        highlighter = JSONHighlighter() if highlight else NullHighlighter()
        json_instance.text = highlighter(json)
        json_instance.text.no_wrap = True
        json_instance.text.overflow = None
        return json_instance

    def __rich__(self) -> Text:
        return self.text


if __name__ == "__main__":
    import argparse
    import sys

    parser = argparse.ArgumentParser(description="Pretty print json")
    parser.add_argument(
        "path",
        metavar="PATH",
        help="path to file, or - for stdin",
    )
    parser.add_argument(
        "-i",
        "--indent",
        metavar="SPACES",
        type=int,
        help="Number of spaces in an indent",
        default=2,
    )
    args = parser.parse_args()

    from rich.console import Console

    console = Console()
    error_console = Console(stderr=True)

    try:
        if args.path == "-":
            json_data = sys.stdin.read()
        else:
            json_data = Path(args.path).read_text()
    except Exception as error:
        error_console.print(f"Unable to read {args.path!r}; {error}")
        sys.exit(-1)

    console.print(JSON(json_data, indent=args.indent), soft_wrap=True)



================================================
FILE: rich/jupyter.py
================================================
from typing import TYPE_CHECKING, Any, Dict, Iterable, List, Sequence

if TYPE_CHECKING:
    from rich.console import ConsoleRenderable

from . import get_console
from .segment import Segment
from .terminal_theme import DEFAULT_TERMINAL_THEME

if TYPE_CHECKING:
    from rich.console import ConsoleRenderable

JUPYTER_HTML_FORMAT = """\
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">{code}</pre>
"""


class JupyterRenderable:
    """A shim to write html to Jupyter notebook."""

    def __init__(self, html: str, text: str) -> None:
        self.html = html
        self.text = text

    def _repr_mimebundle_(
        self, include: Sequence[str], exclude: Sequence[str], **kwargs: Any
    ) -> Dict[str, str]:
        data = {"text/plain": self.text, "text/html": self.html}
        if include:
            data = {k: v for (k, v) in data.items() if k in include}
        if exclude:
            data = {k: v for (k, v) in data.items() if k not in exclude}
        return data


class JupyterMixin:
    """Add to an Rich renderable to make it render in Jupyter notebook."""

    __slots__ = ()

    def _repr_mimebundle_(
        self: "ConsoleRenderable",
        include: Sequence[str],
        exclude: Sequence[str],
        **kwargs: Any,
    ) -> Dict[str, str]:
        console = get_console()
        segments = list(console.render(self, console.options))
        html = _render_segments(segments)
        text = console._render_buffer(segments)
        data = {"text/plain": text, "text/html": html}
        if include:
            data = {k: v for (k, v) in data.items() if k in include}
        if exclude:
            data = {k: v for (k, v) in data.items() if k not in exclude}
        return data


def _render_segments(segments: Iterable[Segment]) -> str:
    def escape(text: str) -> str:
        """Escape html."""
        return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

    fragments: List[str] = []
    append_fragment = fragments.append
    theme = DEFAULT_TERMINAL_THEME
    for text, style, control in Segment.simplify(segments):
        if control:
            continue
        text = escape(text)
        if style:
            rule = style.get_html_style(theme)
            text = f'<span style="{rule}">{text}</span>' if rule else text
            if style.link:
                text = f'<a href="{style.link}" target="_blank">{text}</a>'
        append_fragment(text)

    code = "".join(fragments)
    html = JUPYTER_HTML_FORMAT.format(code=code)

    return html


def display(segments: Iterable[Segment], text: str) -> None:
    """Render segments to Jupyter."""
    html = _render_segments(segments)
    jupyter_renderable = JupyterRenderable(html, text)
    try:
        from IPython.display import display as ipython_display

        ipython_display(jupyter_renderable)
    except ModuleNotFoundError:
        # Handle the case where the Console has force_jupyter=True,
        # but IPython is not installed.
        pass


def print(*args: Any, **kwargs: Any) -> None:
    """Proxy for Console print."""
    console = get_console()
    return console.print(*args, **kwargs)



================================================
FILE: rich/layout.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x8c in position 2677: illegal multibyte sequence


================================================
FILE: rich/live.py
================================================
from __future__ import annotations

import sys
from threading import Event, RLock, Thread
from types import TracebackType
from typing import IO, TYPE_CHECKING, Any, Callable, List, Optional, TextIO, Type, cast

from . import get_console
from .console import Console, ConsoleRenderable, Group, RenderableType, RenderHook
from .control import Control
from .file_proxy import FileProxy
from .jupyter import JupyterMixin
from .live_render import LiveRender, VerticalOverflowMethod
from .screen import Screen
from .text import Text

if TYPE_CHECKING:
    # Can be replaced with `from typing import Self` in Python 3.11+
    from typing_extensions import Self  # pragma: no cover


class _RefreshThread(Thread):
    """A thread that calls refresh() at regular intervals."""

    def __init__(self, live: "Live", refresh_per_second: float) -> None:
        self.live = live
        self.refresh_per_second = refresh_per_second
        self.done = Event()
        super().__init__(daemon=True)

    def stop(self) -> None:
        self.done.set()

    def run(self) -> None:
        while not self.done.wait(1 / self.refresh_per_second):
            with self.live._lock:
                if not self.done.is_set():
                    self.live.refresh()


class Live(JupyterMixin, RenderHook):
    """Renders an auto-updating live display of any given renderable.

    Args:
        renderable (RenderableType, optional): The renderable to live display. Defaults to displaying nothing.
        console (Console, optional): Optional Console instance. Defaults to an internal Console instance writing to stdout.
        screen (bool, optional): Enable alternate screen mode. Defaults to False.
        auto_refresh (bool, optional): Enable auto refresh. If disabled, you will need to call `refresh()` or `update()` with refresh flag. Defaults to True
        refresh_per_second (float, optional): Number of times per second to refresh the live display. Defaults to 4.
        transient (bool, optional): Clear the renderable on exit (has no effect when screen=True). Defaults to False.
        redirect_stdout (bool, optional): Enable redirection of stdout, so ``print`` may be used. Defaults to True.
        redirect_stderr (bool, optional): Enable redirection of stderr. Defaults to True.
        vertical_overflow (VerticalOverflowMethod, optional): How to handle renderable when it is too tall for the console. Defaults to "ellipsis".
        get_renderable (Callable[[], RenderableType], optional): Optional callable to get renderable. Defaults to None.
    """

    def __init__(
        self,
        renderable: Optional[RenderableType] = None,
        *,
        console: Optional[Console] = None,
        screen: bool = False,
        auto_refresh: bool = True,
        refresh_per_second: float = 4,
        transient: bool = False,
        redirect_stdout: bool = True,
        redirect_stderr: bool = True,
        vertical_overflow: VerticalOverflowMethod = "ellipsis",
        get_renderable: Optional[Callable[[], RenderableType]] = None,
    ) -> None:
        assert refresh_per_second > 0, "refresh_per_second must be > 0"
        self._renderable = renderable
        self.console = console if console is not None else get_console()
        self._screen = screen
        self._alt_screen = False

        self._redirect_stdout = redirect_stdout
        self._redirect_stderr = redirect_stderr
        self._restore_stdout: Optional[IO[str]] = None
        self._restore_stderr: Optional[IO[str]] = None

        self._lock = RLock()
        self.ipy_widget: Optional[Any] = None
        self.auto_refresh = auto_refresh
        self._started: bool = False
        self.transient = True if screen else transient

        self._refresh_thread: Optional[_RefreshThread] = None
        self.refresh_per_second = refresh_per_second

        self.vertical_overflow = vertical_overflow
        self._get_renderable = get_renderable
        self._live_render = LiveRender(
            self.get_renderable(), vertical_overflow=vertical_overflow
        )
        self._nested = False

    @property
    def is_started(self) -> bool:
        """Check if live display has been started."""
        return self._started

    def get_renderable(self) -> RenderableType:
        renderable = (
            self._get_renderable()
            if self._get_renderable is not None
            else self._renderable
        )
        return renderable or ""

    def start(self, refresh: bool = False) -> None:
        """Start live rendering display.

        Args:
            refresh (bool, optional): Also refresh. Defaults to False.
        """
        with self._lock:
            if self._started:
                return
            self._started = True

            if not self.console.set_live(self):
                self._nested = True
                return

            if self._screen:
                self._alt_screen = self.console.set_alt_screen(True)
            self.console.show_cursor(False)
            self._enable_redirect_io()
            self.console.push_render_hook(self)
            if refresh:
                try:
                    self.refresh()
                except Exception:
                    # If refresh fails, we want to stop the redirection of sys.stderr,
                    # so the error stacktrace is properly displayed in the terminal.
                    # (or, if the code that calls Rich captures the exception and wants to display something,
                    # let this be displayed in the terminal).
                    self.stop()
                    raise
            if self.auto_refresh:
                self._refresh_thread = _RefreshThread(self, self.refresh_per_second)
                self._refresh_thread.start()

    def stop(self) -> None:
        """Stop live rendering display."""
        with self._lock:
            if not self._started:
                return
            self._started = False
            self.console.clear_live()
            if self._nested:
                if not self.transient:
                    self.console.print(self.renderable)
                return

            if self.auto_refresh and self._refresh_thread is not None:
                self._refresh_thread.stop()
                self._refresh_thread = None
            # allow it to fully render on the last even if overflow
            self.vertical_overflow = "visible"
            with self.console:
                try:
                    if not self._alt_screen and not self.console.is_jupyter:
                        self.refresh()
                finally:
                    self._disable_redirect_io()
                    self.console.pop_render_hook()
                    if not self._alt_screen and self.console.is_terminal:
                        self.console.line()
                    self.console.show_cursor(True)
                    if self._alt_screen:
                        self.console.set_alt_screen(False)
                    if self.transient and not self._alt_screen:
                        self.console.control(self._live_render.restore_cursor())
                    if self.ipy_widget is not None and self.transient:
                        self.ipy_widget.close()  # pragma: no cover

    def __enter__(self) -> Self:
        self.start(refresh=self._renderable is not None)
        return self

    def __exit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc_val: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        self.stop()

    def _enable_redirect_io(self) -> None:
        """Enable redirecting of stdout / stderr."""
        if self.console.is_terminal or self.console.is_jupyter:
            if self._redirect_stdout and not isinstance(sys.stdout, FileProxy):
                self._restore_stdout = sys.stdout
                sys.stdout = cast("TextIO", FileProxy(self.console, sys.stdout))
            if self._redirect_stderr and not isinstance(sys.stderr, FileProxy):
                self._restore_stderr = sys.stderr
                sys.stderr = cast("TextIO", FileProxy(self.console, sys.stderr))

    def _disable_redirect_io(self) -> None:
        """Disable redirecting of stdout / stderr."""
        if self._restore_stdout:
            sys.stdout = cast("TextIO", self._restore_stdout)
            self._restore_stdout = None
        if self._restore_stderr:
            sys.stderr = cast("TextIO", self._restore_stderr)
            self._restore_stderr = None

    @property
    def renderable(self) -> RenderableType:
        """Get the renderable that is being displayed

        Returns:
            RenderableType: Displayed renderable.
        """
        live_stack = self.console._live_stack
        renderable: RenderableType
        if live_stack and self is live_stack[0]:
            # The first Live instance will render everything in the Live stack
            renderable = Group(*[live.get_renderable() for live in live_stack])
        else:
            renderable = self.get_renderable()
        return Screen(renderable) if self._alt_screen else renderable

    def update(self, renderable: RenderableType, *, refresh: bool = False) -> None:
        """Update the renderable that is being displayed

        Args:
            renderable (RenderableType): New renderable to use.
            refresh (bool, optional): Refresh the display. Defaults to False.
        """
        if isinstance(renderable, str):
            renderable = self.console.render_str(renderable)
        with self._lock:
            self._renderable = renderable
            if refresh:
                self.refresh()

    def refresh(self) -> None:
        """Update the display of the Live Render."""
        with self._lock:
            self._live_render.set_renderable(self.renderable)
            if self._nested:
                if self.console._live_stack:
                    self.console._live_stack[0].refresh()
                return

            if self.console.is_jupyter:  # pragma: no cover
                try:
                    from IPython.display import display
                    from ipywidgets import Output
                except ImportError:
                    import warnings

                    warnings.warn('install "ipywidgets" for Jupyter support')
                else:
                    if self.ipy_widget is None:
                        self.ipy_widget = Output()
                        display(self.ipy_widget)

                    with self.ipy_widget:
                        self.ipy_widget.clear_output(wait=True)
                        self.console.print(self._live_render.renderable)
            elif self.console.is_terminal and not self.console.is_dumb_terminal:
                with self.console:
                    self.console.print(Control())
            elif (
                not self._started and not self.transient
            ):  # if it is finished allow files or dumb-terminals to see final result
                with self.console:
                    self.console.print(Control())

    def process_renderables(
        self, renderables: List[ConsoleRenderable]
    ) -> List[ConsoleRenderable]:
        """Process renderables to restore cursor and display progress."""
        self._live_render.vertical_overflow = self.vertical_overflow
        if self.console.is_interactive:
            # lock needs acquiring as user can modify live_render renderable at any time unlike in Progress.
            with self._lock:
                reset = (
                    Control.home()
                    if self._alt_screen
                    else self._live_render.position_cursor()
                )
                renderables = [reset, *renderables, self._live_render]
        elif (
            not self._started and not self.transient
        ):  # if it is finished render the final output for files or dumb_terminals
            renderables = [*renderables, self._live_render]

        return renderables


if __name__ == "__main__":  # pragma: no cover
    import random
    import time
    from itertools import cycle
    from typing import Dict, List, Tuple

    from .align import Align
    from .console import Console
    from .live import Live as Live
    from .panel import Panel
    from .rule import Rule
    from .syntax import Syntax
    from .table import Table

    console = Console()

    syntax = Syntax(
        '''def loop_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:
    """Iterate and generate a tuple with a flag for last value."""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    for value in iter_values:
        yield False, previous_value
        previous_value = value
    yield True, previous_value''',
        "python",
        line_numbers=True,
    )

    table = Table("foo", "bar", "baz")
    table.add_row("1", "2", "3")

    progress_renderables = [
        "You can make the terminal shorter and taller to see the live table hide"
        "Text may be printed while the progress bars are rendering.",
        Panel("In fact, [i]any[/i] renderable will work"),
        "Such as [magenta]tables[/]...",
        table,
        "Pretty printed structures...",
        {"type": "example", "text": "Pretty printed"},
        "Syntax...",
        syntax,
        Rule("Give it a try!"),
    ]

    examples = cycle(progress_renderables)

    exchanges = [
        "SGD",
        "MYR",
        "EUR",
        "USD",
        "AUD",
        "JPY",
        "CNH",
        "HKD",
        "CAD",
        "INR",
        "DKK",
        "GBP",
        "RUB",
        "NZD",
        "MXN",
        "IDR",
        "TWD",
        "THB",
        "VND",
    ]
    with Live(console=console) as live_table:
        exchange_rate_dict: Dict[Tuple[str, str], float] = {}

        for index in range(100):
            select_exchange = exchanges[index % len(exchanges)]

            for exchange in exchanges:
                if exchange == select_exchange:
                    continue
                time.sleep(0.4)
                if random.randint(0, 10) < 1:
                    console.log(next(examples))
                exchange_rate_dict[(select_exchange, exchange)] = 200 / (
                    (random.random() * 320) + 1
                )
                if len(exchange_rate_dict) > len(exchanges) - 1:
                    exchange_rate_dict.pop(list(exchange_rate_dict.keys())[0])
                table = Table(title="Exchange Rates")

                table.add_column("Source Currency")
                table.add_column("Destination Currency")
                table.add_column("Exchange Rate")

                for (source, dest), exchange_rate in exchange_rate_dict.items():
                    table.add_row(
                        source,
                        dest,
                        Text(
                            f"{exchange_rate:.4f}",
                            style="red" if exchange_rate < 1.0 else "green",
                        ),
                    )

                live_table.update(Align.center(table))



================================================
FILE: rich/live_render.py
================================================
from typing import Optional, Tuple, Literal


from ._loop import loop_last
from .console import Console, ConsoleOptions, RenderableType, RenderResult
from .control import Control
from .segment import ControlType, Segment
from .style import StyleType
from .text import Text

VerticalOverflowMethod = Literal["crop", "ellipsis", "visible"]


class LiveRender:
    """Creates a renderable that may be updated.

    Args:
        renderable (RenderableType): Any renderable object.
        style (StyleType, optional): An optional style to apply to the renderable. Defaults to "".
    """

    def __init__(
        self,
        renderable: RenderableType,
        style: StyleType = "",
        vertical_overflow: VerticalOverflowMethod = "ellipsis",
    ) -> None:
        self.renderable = renderable
        self.style = style
        self.vertical_overflow = vertical_overflow
        self._shape: Optional[Tuple[int, int]] = None

    def set_renderable(self, renderable: RenderableType) -> None:
        """Set a new renderable.

        Args:
            renderable (RenderableType): Any renderable object, including str.
        """
        self.renderable = renderable

    def position_cursor(self) -> Control:
        """Get control codes to move cursor to beginning of live render.

        Returns:
            Control: A control instance that may be printed.
        """
        if self._shape is not None:
            _, height = self._shape
            return Control(
                ControlType.CARRIAGE_RETURN,
                (ControlType.ERASE_IN_LINE, 2),
                *(
                    (
                        (ControlType.CURSOR_UP, 1),
                        (ControlType.ERASE_IN_LINE, 2),
                    )
                    * (height - 1)
                )
            )
        return Control()

    def restore_cursor(self) -> Control:
        """Get control codes to clear the render and restore the cursor to its previous position.

        Returns:
            Control: A Control instance that may be printed.
        """
        if self._shape is not None:
            _, height = self._shape
            return Control(
                ControlType.CARRIAGE_RETURN,
                *((ControlType.CURSOR_UP, 1), (ControlType.ERASE_IN_LINE, 2)) * height
            )
        return Control()

    def __rich_console__(
        self, console: Console, options: ConsoleOptions
    ) -> RenderResult:
        renderable = self.renderable
        style = console.get_style(self.style)
        lines = console.render_lines(renderable, options, style=style, pad=False)
        shape = Segment.get_shape(lines)

        _, height = shape
        if height > options.size.height:
            if self.vertical_overflow == "crop":
                lines = lines[: options.size.height]
                shape = Segment.get_shape(lines)
            elif self.vertical_overflow == "ellipsis":
                lines = lines[: (options.size.height - 1)]
                overflow_text = Text(
                    "...",
                    overflow="crop",
                    justify="center",
                    end="",
                    style="live.ellipsis",
                )
                lines.append(list(console.render(overflow_text)))
                shape = Segment.get_shape(lines)
        self._shape = shape

        new_line = Segment.line()
        for last, line in loop_last(lines):
            yield from line
            if not last:
                yield new_line



================================================
FILE: rich/logging.py
================================================
import logging
from datetime import datetime
from logging import Handler, LogRecord
from pathlib import Path
from types import ModuleType
from typing import ClassVar, Iterable, List, Optional, Type, Union

from rich._null_file import NullFile

from . import get_console
from ._log_render import FormatTimeCallable, LogRender
from .console import Console, ConsoleRenderable
from .highlighter import Highlighter, ReprHighlighter
from .text import Text
from .traceback import Traceback


class RichHandler(Handler):
    """A logging handler that renders output with Rich. The time / level / message and file are displayed in columns.
    The level is color coded, and the message is syntax highlighted.

    Note:
        Be careful when enabling console markup in log messages if you have configured logging for libraries not
        under your control. If a dependency writes messages containing square brackets, it may not produce the intended output.

    Args:
        level (Union[int, str], optional): Log level. Defaults to logging.NOTSET.
        console (:class:`~rich.console.Console`, optional): Optional console instance to write logs.
            Default will use a global console instance writing to stdout.
        show_time (bool, optional): Show a column for the time. Defaults to True.
        omit_repeated_times (bool, optional): Omit repetition of the same time. Defaults to True.
        show_level (bool, optional): Show a column for the level. Defaults to True.
        show_path (bool, optional): Show the path to the original log call. Defaults to True.
        enable_link_path (bool, optional): Enable terminal link of path column to file. Defaults to True.
        highlighter (Highlighter, optional): Highlighter to style log messages, or None to use ReprHighlighter. Defaults to None.
        markup (bool, optional): Enable console markup in log messages. Defaults to False.
        rich_tracebacks (bool, optional): Enable rich tracebacks with syntax highlighting and formatting. Defaults to False.
        tracebacks_width (Optional[int], optional): Number of characters used to render tracebacks, or None for full width. Defaults to None.
        tracebacks_code_width (int, optional): Number of code characters used to render tracebacks, or None for full width. Defaults to 88.
        tracebacks_extra_lines (int, optional): Additional lines of code to render tracebacks, or None for full width. Defaults to None.
        tracebacks_theme (str, optional): Override pygments theme used in traceback.
        tracebacks_word_wrap (bool, optional): Enable word wrapping of long tracebacks lines. Defaults to True.
        tracebacks_show_locals (bool, optional): Enable display of locals in tracebacks. Defaults to False.
        tracebacks_suppress (Sequence[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.
        tracebacks_max_frames (int, optional): Optional maximum number of frames returned by traceback.
        locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
            Defaults to 10.
        locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.
        log_time_format (Union[str, TimeFormatterCallable], optional): If ``log_time`` is enabled, either string for strftime or callable that formats the time. Defaults to "[%x %X] ".
        keywords (List[str], optional): List of words to highlight instead of ``RichHandler.KEYWORDS``.
    """

    KEYWORDS: ClassVar[Optional[List[str]]] = [
        "GET",
        "POST",
        "HEAD",
        "PUT",
        "DELETE",
        "OPTIONS",
        "TRACE",
        "PATCH",
    ]
    HIGHLIGHTER_CLASS: ClassVar[Type[Highlighter]] = ReprHighlighter

    def __init__(
        self,
        level: Union[int, str] = logging.NOTSET,
        console: Optional[Console] = None,
        *,
        show_time: bool = True,
        omit_repeated_times: bool = True,
        show_level: bool = True,
        show_path: bool = True,
        enable_link_path: bool = True,
        highlighter: Optional[Highlighter] = None,
        markup: bool = False,
        rich_tracebacks: bool = False,
        tracebacks_width: Optional[int] = None,
        tracebacks_code_width: Optional[int] = 88,
        tracebacks_extra_lines: int = 3,
        tracebacks_theme: Optional[str] = None,
        tracebacks_word_wrap: bool = True,
        tracebacks_show_locals: bool = False,
        tracebacks_suppress: Iterable[Union[str, ModuleType]] = (),
        tracebacks_max_frames: int = 100,
        locals_max_length: int = 10,
        locals_max_string: int = 80,
        log_time_format: Union[str, FormatTimeCallable] = "[%x %X]",
        keywords: Optional[List[str]] = None,
    ) -> None:
        super().__init__(level=level)
        self.console = console or get_console()
        self.highlighter = highlighter or self.HIGHLIGHTER_CLASS()
        self._log_render = LogRender(
            show_time=show_time,
            show_level=show_level,
            show_path=show_path,
            time_format=log_time_format,
            omit_repeated_times=omit_repeated_times,
            level_width=None,
        )
        self.enable_link_path = enable_link_path
        self.markup = markup
        self.rich_tracebacks = rich_tracebacks
        self.tracebacks_width = tracebacks_width
        self.tracebacks_extra_lines = tracebacks_extra_lines
        self.tracebacks_theme = tracebacks_theme
        self.tracebacks_word_wrap = tracebacks_word_wrap
        self.tracebacks_show_locals = tracebacks_show_locals
        self.tracebacks_suppress = tracebacks_suppress
        self.tracebacks_max_frames = tracebacks_max_frames
        self.tracebacks_code_width = tracebacks_code_width
        self.locals_max_length = locals_max_length
        self.locals_max_string = locals_max_string
        self.keywords = keywords

    def get_level_text(self, record: LogRecord) -> Text:
        """Get the level name from the record.

        Args:
            record (LogRecord): LogRecord instance.

        Returns:
            Text: A tuple of the style and level name.
        """
        level_name = record.levelname
        level_text = Text.styled(
            level_name.ljust(8), f"logging.level.{level_name.lower()}"
        )
        return level_text

    def emit(self, record: LogRecord) -> None:
        """Invoked by logging."""
        message = self.format(record)
        traceback = None
        if (
            self.rich_tracebacks
            and record.exc_info
            and record.exc_info != (None, None, None)
        ):
            exc_type, exc_value, exc_traceback = record.exc_info
            assert exc_type is not None
            assert exc_value is not None
            traceback = Traceback.from_exception(
                exc_type,
                exc_value,
                exc_traceback,
                width=self.tracebacks_width,
                code_width=self.tracebacks_code_width,
                extra_lines=self.tracebacks_extra_lines,
                theme=self.tracebacks_theme,
                word_wrap=self.tracebacks_word_wrap,
                show_locals=self.tracebacks_show_locals,
                locals_max_length=self.locals_max_length,
                locals_max_string=self.locals_max_string,
                suppress=self.tracebacks_suppress,
                max_frames=self.tracebacks_max_frames,
            )
            message = record.getMessage()
            if self.formatter:
                record.message = record.getMessage()
                formatter = self.formatter
                if hasattr(formatter, "usesTime") and formatter.usesTime():
                    record.asctime = formatter.formatTime(record, formatter.datefmt)
                message = formatter.formatMessage(record)

        message_renderable = self.render_message(record, message)
        log_renderable = self.render(
            record=record, traceback=traceback, message_renderable=message_renderable
        )
        if isinstance(self.console.file, NullFile):
            # Handles pythonw, where stdout/stderr are null, and we return NullFile
            # instance from Console.file. In this case, we still want to make a log record
            # even though we won't be writing anything to a file.
            self.handleError(record)
        else:
            try:
                self.console.print(log_renderable)
            except Exception:
                self.handleError(record)

    def render_message(self, record: LogRecord, message: str) -> "ConsoleRenderable":
        """Render message text in to Text.

        Args:
            record (LogRecord): logging Record.
            message (str): String containing log message.

        Returns:
            ConsoleRenderable: Renderable to display log message.
        """
        use_markup = getattr(record, "markup", self.markup)
        message_text = Text.from_markup(message) if use_markup else Text(message)

        highlighter = getattr(record, "highlighter", self.highlighter)
        if highlighter:
            message_text = highlighter(message_text)

        if self.keywords is None:
            self.keywords = self.KEYWORDS

        if self.keywords:
            message_text.highlight_words(self.keywords, "logging.keyword")

        return message_text

    def render(
        self,
        *,
        record: LogRecord,
        traceback: Optional[Traceback],
        message_renderable: "ConsoleRenderable",
    ) -> "ConsoleRenderable":
        """Render log for display.

        Args:
            record (LogRecord): logging Record.
            traceback (Optional[Traceback]): Traceback instance or None for no Traceback.
            message_renderable (ConsoleRenderable): Renderable (typically Text) containing log message contents.

        Returns:
            ConsoleRenderable: Renderable to display log.
        """
        path = Path(record.pathname).name
        level = self.get_level_text(record)
        time_format = None if self.formatter is None else self.formatter.datefmt
        log_time = datetime.fromtimestamp(record.created)

        log_renderable = self._log_render(
            self.console,
            [message_renderable] if not traceback else [message_renderable, traceback],
            log_time=log_time,
            time_format=time_format,
            level=level,
            path=path,
            line_no=record.lineno,
            link_path=record.pathname if self.enable_link_path else None,
        )
        return log_renderable


if __name__ == "__main__":  # pragma: no cover
    from time import sleep

    FORMAT = "%(message)s"
    # FORMAT = "%(asctime)-15s - %(levelname)s - %(message)s"
    logging.basicConfig(
        level="NOTSET",
        format=FORMAT,
        datefmt="[%X]",
        handlers=[RichHandler(rich_tracebacks=True, tracebacks_show_locals=True)],
    )
    log = logging.getLogger("rich")

    log.info("Server starting...")
    log.info("Listening on http://127.0.0.1:8080")
    sleep(1)

    log.info("GET /index.html 200 1298")
    log.info("GET /imgs/backgrounds/back1.jpg 200 54386")
    log.info("GET /css/styles.css 200 54386")
    log.warning("GET /favicon.ico 404 242")
    sleep(1)

    log.debug(
        "JSONRPC request\n--> %r\n<-- %r",
        {
            "version": "1.1",
            "method": "confirmFruitPurchase",
            "params": [["apple", "orange", "mangoes", "pomelo"], 1.123],
            "id": "194521489",
        },
        {"version": "1.1", "result": True, "error": None, "id": "194521489"},
    )
    log.debug(
        "Loading configuration file /adasd/asdasd/qeqwe/qwrqwrqwr/sdgsdgsdg/werwerwer/dfgerert/ertertert/ertetert/werwerwer"
    )
    log.error("Unable to find 'pomelo' in database!")
    log.info("POST /jsonrpc/ 200 65532")
    log.info("POST /admin/ 401 42234")
    log.warning("password was rejected for admin site.")

    def divide() -> None:
        number = 1
        divisor = 0
        foos = ["foo"] * 100
        log.debug("in divide")
        try:
            number / divisor
        except:
            log.exception("An error of some kind occurred!")

    divide()
    sleep(1)
    log.critical("Out of memory!")
    log.info("Server exited with code=-1")
    log.info("[bold]EXITING...[/bold]", extra=dict(markup=True))



================================================
FILE: rich/markdown.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x8c in position 6068: illegal multibyte sequence


================================================
FILE: rich/markup.py
================================================
import re
from ast import literal_eval
from operator import attrgetter
from typing import Callable, Iterable, List, Match, NamedTuple, Optional, Tuple, Union

from ._emoji_replace import _emoji_replace
from .emoji import EmojiVariant
from .errors import MarkupError
from .style import Style
from .text import Span, Text

RE_TAGS = re.compile(
    r"""((\\*)\[([a-z#/@][^[]*?)])""",
    re.VERBOSE,
)

RE_HANDLER = re.compile(r"^([\w.]*?)(\(.*?\))?$")


class Tag(NamedTuple):
    """A tag in console markup."""

    name: str
    """The tag name. e.g. 'bold'."""
    parameters: Optional[str]
    """Any additional parameters after the name."""

    def __str__(self) -> str:
        return (
            self.name if self.parameters is None else f"{self.name} {self.parameters}"
        )

    @property
    def markup(self) -> str:
        """Get the string representation of this tag."""
        return (
            f"[{self.name}]"
            if self.parameters is None
            else f"[{self.name}={self.parameters}]"
        )


_ReStringMatch = Match[str]  # regex match object
_ReSubCallable = Callable[[_ReStringMatch], str]  # Callable invoked by re.sub
_EscapeSubMethod = Callable[[_ReSubCallable, str], str]  # Sub method of a compiled re


def escape(
    markup: str,
    _escape: _EscapeSubMethod = re.compile(r"(\\*)(\[[a-z#/@][^[]*?])").sub,
) -> str:
    """Escapes text so that it won't be interpreted as markup.

    Args:
        markup (str): Content to be inserted in to markup.

    Returns:
        str: Markup with square brackets escaped.
    """

    def escape_backslashes(match: Match[str]) -> str:
        """Called by re.sub replace matches."""
        backslashes, text = match.groups()
        return f"{backslashes}{backslashes}\\{text}"

    markup = _escape(escape_backslashes, markup)
    if markup.endswith("\\") and not markup.endswith("\\\\"):
        return markup + "\\"

    return markup


def _parse(markup: str) -> Iterable[Tuple[int, Optional[str], Optional[Tag]]]:
    """Parse markup in to an iterable of tuples of (position, text, tag).

    Args:
        markup (str): A string containing console markup

    """
    position = 0
    _divmod = divmod
    _Tag = Tag
    for match in RE_TAGS.finditer(markup):
        full_text, escapes, tag_text = match.groups()
        start, end = match.span()
        if start > position:
            yield start, markup[position:start], None
        if escapes:
            backslashes, escaped = _divmod(len(escapes), 2)
            if backslashes:
                # Literal backslashes
                yield start, "\\" * backslashes, None
                start += backslashes * 2
            if escaped:
                # Escape of tag
                yield start, full_text[len(escapes) :], None
                position = end
                continue
        text, equals, parameters = tag_text.partition("=")
        yield start, None, _Tag(text, parameters if equals else None)
        position = end
    if position < len(markup):
        yield position, markup[position:], None


def render(
    markup: str,
    style: Union[str, Style] = "",
    emoji: bool = True,
    emoji_variant: Optional[EmojiVariant] = None,
) -> Text:
    """Render console markup in to a Text instance.

    Args:
        markup (str): A string containing console markup.
        style: (Union[str, Style]): The style to use.
        emoji (bool, optional): Also render emoji code. Defaults to True.
        emoji_variant (str, optional): Optional emoji variant, either "text" or "emoji". Defaults to None.


    Raises:
        MarkupError: If there is a syntax error in the markup.

    Returns:
        Text: A test instance.
    """
    emoji_replace = _emoji_replace
    if "[" not in markup:
        return Text(
            emoji_replace(markup, default_variant=emoji_variant) if emoji else markup,
            style=style,
        )
    text = Text(style=style)
    append = text.append
    normalize = Style.normalize

    style_stack: List[Tuple[int, Tag]] = []
    pop = style_stack.pop

    spans: List[Span] = []
    append_span = spans.append

    _Span = Span
    _Tag = Tag

    def pop_style(style_name: str) -> Tuple[int, Tag]:
        """Pop tag matching given style name."""
        for index, (_, tag) in enumerate(reversed(style_stack), 1):
            if tag.name == style_name:
                return pop(-index)
        raise KeyError(style_name)

    for position, plain_text, tag in _parse(markup):
        if plain_text is not None:
            # Handle open brace escapes, where the brace is not part of a tag.
            plain_text = plain_text.replace("\\[", "[")
            append(emoji_replace(plain_text) if emoji else plain_text)
        elif tag is not None:
            if tag.name.startswith("/"):  # Closing tag
                style_name = tag.name[1:].strip()

                if style_name:  # explicit close
                    style_name = normalize(style_name)
                    try:
                        start, open_tag = pop_style(style_name)
                    except KeyError:
                        raise MarkupError(
                            f"closing tag '{tag.markup}' at position {position} doesn't match any open tag"
                        ) from None
                else:  # implicit close
                    try:
                        start, open_tag = pop()
                    except IndexError:
                        raise MarkupError(
                            f"closing tag '[/]' at position {position} has nothing to close"
                        ) from None

                if open_tag.name.startswith("@"):
                    if open_tag.parameters:
                        handler_name = ""
                        parameters = open_tag.parameters.strip()
                        handler_match = RE_HANDLER.match(parameters)
                        if handler_match is not None:
                            handler_name, match_parameters = handler_match.groups()
                            parameters = (
                                "()" if match_parameters is None else match_parameters
                            )

                        try:
                            meta_params = literal_eval(parameters)
                        except SyntaxError as error:
                            raise MarkupError(
                                f"error parsing {parameters!r} in {open_tag.parameters!r}; {error.msg}"
                            )
                        except Exception as error:
                            raise MarkupError(
                                f"error parsing {open_tag.parameters!r}; {error}"
                            ) from None

                        if handler_name:
                            meta_params = (
                                handler_name,
                                meta_params
                                if isinstance(meta_params, tuple)
                                else (meta_params,),
                            )

                    else:
                        meta_params = ()

                    append_span(
                        _Span(
                            start, len(text), Style(meta={open_tag.name: meta_params})
                        )
                    )
                else:
                    append_span(_Span(start, len(text), str(open_tag)))

            else:  # Opening tag
                normalized_tag = _Tag(normalize(tag.name), tag.parameters)
                style_stack.append((len(text), normalized_tag))

    text_length = len(text)
    while style_stack:
        start, tag = style_stack.pop()
        style = str(tag)
        if style:
            append_span(_Span(start, text_length, style))

    text.spans = sorted(spans[::-1], key=attrgetter("start"))
    return text


if __name__ == "__main__":  # pragma: no cover
    MARKUP = [
        "[red]Hello World[/red]",
        "[magenta]Hello [b]World[/b]",
        "[bold]Bold[italic] bold and italic [/bold]italic[/italic]",
        "Click [link=https://www.willmcgugan.com]here[/link] to visit my Blog",
        ":warning-emoji: [bold red blink] DANGER![/]",
    ]

    from rich import print
    from rich.table import Table

    grid = Table("Markup", "Result", padding=(0, 1))

    for markup in MARKUP:
        grid.add_row(Text(markup), markup)

    print(grid)



================================================
FILE: rich/measure.py
================================================
from operator import itemgetter
from typing import TYPE_CHECKING, Callable, NamedTuple, Optional, Sequence

from . import errors
from .protocol import is_renderable, rich_cast

if TYPE_CHECKING:
    from .console import Console, ConsoleOptions, RenderableType


class Measurement(NamedTuple):
    """Stores the minimum and maximum widths (in characters) required to render an object."""

    minimum: int
    """Minimum number of cells required to render."""
    maximum: int
    """Maximum number of cells required to render."""

    @property
    def span(self) -> int:
        """Get difference between maximum and minimum."""
        return self.maximum - self.minimum

    def normalize(self) -> "Measurement":
        """Get measurement that ensures that minimum <= maximum and minimum >= 0

        Returns:
            Measurement: A normalized measurement.
        """
        minimum, maximum = self
        minimum = min(max(0, minimum), maximum)
        return Measurement(max(0, minimum), max(0, max(minimum, maximum)))

    def with_maximum(self, width: int) -> "Measurement":
        """Get a RenderableWith where the widths are <= width.

        Args:
            width (int): Maximum desired width.

        Returns:
            Measurement: New Measurement object.
        """
        minimum, maximum = self
        return Measurement(min(minimum, width), min(maximum, width))

    def with_minimum(self, width: int) -> "Measurement":
        """Get a RenderableWith where the widths are >= width.

        Args:
            width (int): Minimum desired width.

        Returns:
            Measurement: New Measurement object.
        """
        minimum, maximum = self
        width = max(0, width)
        return Measurement(max(minimum, width), max(maximum, width))

    def clamp(
        self, min_width: Optional[int] = None, max_width: Optional[int] = None
    ) -> "Measurement":
        """Clamp a measurement within the specified range.

        Args:
            min_width (int): Minimum desired width, or ``None`` for no minimum. Defaults to None.
            max_width (int): Maximum desired width, or ``None`` for no maximum. Defaults to None.

        Returns:
            Measurement: New Measurement object.
        """
        measurement = self
        if min_width is not None:
            measurement = measurement.with_minimum(min_width)
        if max_width is not None:
            measurement = measurement.with_maximum(max_width)
        return measurement

    @classmethod
    def get(
        cls, console: "Console", options: "ConsoleOptions", renderable: "RenderableType"
    ) -> "Measurement":
        """Get a measurement for a renderable.

        Args:
            console (~rich.console.Console): Console instance.
            options (~rich.console.ConsoleOptions): Console options.
            renderable (RenderableType): An object that may be rendered with Rich.

        Raises:
            errors.NotRenderableError: If the object is not renderable.

        Returns:
            Measurement: Measurement object containing range of character widths required to render the object.
        """
        _max_width = options.max_width
        if _max_width < 1:
            return Measurement(0, 0)
        if isinstance(renderable, str):
            renderable = console.render_str(
                renderable, markup=options.markup, highlight=False
            )
        renderable = rich_cast(renderable)
        if is_renderable(renderable):
            get_console_width: Optional[
                Callable[["Console", "ConsoleOptions"], "Measurement"]
            ] = getattr(renderable, "__rich_measure__", None)
            if get_console_width is not None:
                render_width = (
                    get_console_width(console, options)
                    .normalize()
                    .with_maximum(_max_width)
                )
                if render_width.maximum < 1:
                    return Measurement(0, 0)
                return render_width.normalize()
            else:
                return Measurement(0, _max_width)
        else:
            raise errors.NotRenderableError(
                f"Unable to get render width for {renderable!r}; "
                "a str, Segment, or object with __rich_console__ method is required"
            )


def measure_renderables(
    console: "Console",
    options: "ConsoleOptions",
    renderables: Sequence["RenderableType"],
) -> "Measurement":
    """Get a measurement that would fit a number of renderables.

    Args:
        console (~rich.console.Console): Console instance.
        options (~rich.console.ConsoleOptions): Console options.
        renderables (Iterable[RenderableType]): One or more renderable objects.

    Returns:
        Measurement: Measurement object containing range of character widths required to
            contain all given renderables.
    """
    if not renderables:
        return Measurement(0, 0)
    get_measurement = Measurement.get
    measurements = [
        get_measurement(console, options, renderable) for renderable in renderables
    ]
    measured_width = Measurement(
        max(measurements, key=itemgetter(0)).minimum,
        max(measurements, key=itemgetter(1)).maximum,
    )
    return measured_width



================================================
FILE: rich/padding.py
================================================
from typing import TYPE_CHECKING, List, Optional, Tuple, Union

if TYPE_CHECKING:
    from .console import (
        Console,
        ConsoleOptions,
        RenderableType,
        RenderResult,
    )

from .jupyter import JupyterMixin
from .measure import Measurement
from .segment import Segment
from .style import Style

PaddingDimensions = Union[int, Tuple[int], Tuple[int, int], Tuple[int, int, int, int]]


class Padding(JupyterMixin):
    """Draw space around content.

    Example:
        >>> print(Padding("Hello", (2, 4), style="on blue"))

    Args:
        renderable (RenderableType): String or other renderable.
        pad (Union[int, Tuple[int]]): Padding for top, right, bottom, and left borders.
            May be specified with 1, 2, or 4 integers (CSS style).
        style (Union[str, Style], optional): Style for padding characters. Defaults to "none".
        expand (bool, optional): Expand padding to fit available width. Defaults to True.
    """

    def __init__(
        self,
        renderable: "RenderableType",
        pad: "PaddingDimensions" = (0, 0, 0, 0),
        *,
        style: Union[str, Style] = "none",
        expand: bool = True,
    ):
        self.renderable = renderable
        self.top, self.right, self.bottom, self.left = self.unpack(pad)
        self.style = style
        self.expand = expand

    @classmethod
    def indent(cls, renderable: "RenderableType", level: int) -> "Padding":
        """Make padding instance to render an indent.

        Args:
            renderable (RenderableType): String or other renderable.
            level (int): Number of characters to indent.

        Returns:
            Padding: A Padding instance.
        """

        return Padding(renderable, pad=(0, 0, 0, level), expand=False)

    @staticmethod
    def unpack(pad: "PaddingDimensions") -> Tuple[int, int, int, int]:
        """Unpack padding specified in CSS style."""
        if isinstance(pad, int):
            return (pad, pad, pad, pad)
        if len(pad) == 1:
            _pad = pad[0]
            return (_pad, _pad, _pad, _pad)
        if len(pad) == 2:
            pad_top, pad_right = pad
            return (pad_top, pad_right, pad_top, pad_right)
        if len(pad) == 4:
            top, right, bottom, left = pad
            return (top, right, bottom, left)
        raise ValueError(f"1, 2 or 4 integers required for padding; {len(pad)} given")

    def __repr__(self) -> str:
        return f"Padding({self.renderable!r}, ({self.top},{self.right},{self.bottom},{self.left}))"

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        style = console.get_style(self.style)
        if self.expand:
            width = options.max_width
        else:
            width = min(
                Measurement.get(console, options, self.renderable).maximum
                + self.left
                + self.right,
                options.max_width,
            )
        render_options = options.update_width(width - self.left - self.right)
        if render_options.height is not None:
            render_options = render_options.update_height(
                height=render_options.height - self.top - self.bottom
            )
        lines = console.render_lines(
            self.renderable, render_options, style=style, pad=True
        )
        _Segment = Segment

        left = _Segment(" " * self.left, style) if self.left else None
        right = (
            [_Segment(f'{" " * self.right}', style), _Segment.line()]
            if self.right
            else [_Segment.line()]
        )
        blank_line: Optional[List[Segment]] = None
        if self.top:
            blank_line = [_Segment(f'{" " * width}\n', style)]
            yield from blank_line * self.top
        if left:
            for line in lines:
                yield left
                yield from line
                yield from right
        else:
            for line in lines:
                yield from line
                yield from right
        if self.bottom:
            blank_line = blank_line or [_Segment(f'{" " * width}\n', style)]
            yield from blank_line * self.bottom

    def __rich_measure__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "Measurement":
        max_width = options.max_width
        extra_width = self.left + self.right
        if max_width - extra_width < 1:
            return Measurement(max_width, max_width)
        measure_min, measure_max = Measurement.get(console, options, self.renderable)
        measurement = Measurement(measure_min + extra_width, measure_max + extra_width)
        measurement = measurement.with_maximum(max_width)
        return measurement


if __name__ == "__main__":  #  pragma: no cover
    from rich import print

    print(Padding("Hello, World", (2, 4), style="on blue"))



================================================
FILE: rich/pager.py
================================================
from abc import ABC, abstractmethod
from typing import Any


class Pager(ABC):
    """Base class for a pager."""

    @abstractmethod
    def show(self, content: str) -> None:
        """Show content in pager.

        Args:
            content (str): Content to be displayed.
        """


class SystemPager(Pager):
    """Uses the pager installed on the system."""

    def _pager(self, content: str) -> Any:  # 聽pragma: no cover
        return __import__("pydoc").pager(content)

    def show(self, content: str) -> None:
        """Use the same pager used by pydoc."""
        self._pager(content)


if __name__ == "__main__":  # pragma: no cover
    from .__main__ import make_test_card
    from .console import Console

    console = Console()
    with console.pager(styles=True):
        console.print(make_test_card())



================================================
FILE: rich/palette.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x84 in position 3250: illegal multibyte sequence


================================================
FILE: rich/panel.py
================================================
from typing import TYPE_CHECKING, Optional

from .align import AlignMethod
from .box import ROUNDED, Box
from .cells import cell_len
from .jupyter import JupyterMixin
from .measure import Measurement, measure_renderables
from .padding import Padding, PaddingDimensions
from .segment import Segment
from .style import Style, StyleType
from .text import Text, TextType

if TYPE_CHECKING:
    from .console import Console, ConsoleOptions, RenderableType, RenderResult


class Panel(JupyterMixin):
    """A console renderable that draws a border around its contents.

    Example:
        >>> console.print(Panel("Hello, World!"))

    Args:
        renderable (RenderableType): A console renderable object.
        box (Box): A Box instance that defines the look of the border (see :ref:`appendix_box`. Defaults to box.ROUNDED.
        title (Optional[TextType], optional): Optional title displayed in panel header. Defaults to None.
        title_align (AlignMethod, optional): Alignment of title. Defaults to "center".
        subtitle (Optional[TextType], optional): Optional subtitle displayed in panel footer. Defaults to None.
        subtitle_align (AlignMethod, optional): Alignment of subtitle. Defaults to "center".
        safe_box (bool, optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.
        expand (bool, optional): If True the panel will stretch to fill the console width, otherwise it will be sized to fit the contents. Defaults to True.
        style (str, optional): The style of the panel (border and contents). Defaults to "none".
        border_style (str, optional): The style of the border. Defaults to "none".
        width (Optional[int], optional): Optional width of panel. Defaults to None to auto-detect.
        height (Optional[int], optional): Optional height of panel. Defaults to None to auto-detect.
        padding (Optional[PaddingDimensions]): Optional padding around renderable. Defaults to 0.
        highlight (bool, optional): Enable automatic highlighting of panel title (if str). Defaults to False.
    """

    def __init__(
        self,
        renderable: "RenderableType",
        box: Box = ROUNDED,
        *,
        title: Optional[TextType] = None,
        title_align: AlignMethod = "center",
        subtitle: Optional[TextType] = None,
        subtitle_align: AlignMethod = "center",
        safe_box: Optional[bool] = None,
        expand: bool = True,
        style: StyleType = "none",
        border_style: StyleType = "none",
        width: Optional[int] = None,
        height: Optional[int] = None,
        padding: PaddingDimensions = (0, 1),
        highlight: bool = False,
    ) -> None:
        self.renderable = renderable
        self.box = box
        self.title = title
        self.title_align: AlignMethod = title_align
        self.subtitle = subtitle
        self.subtitle_align = subtitle_align
        self.safe_box = safe_box
        self.expand = expand
        self.style = style
        self.border_style = border_style
        self.width = width
        self.height = height
        self.padding = padding
        self.highlight = highlight

    @classmethod
    def fit(
        cls,
        renderable: "RenderableType",
        box: Box = ROUNDED,
        *,
        title: Optional[TextType] = None,
        title_align: AlignMethod = "center",
        subtitle: Optional[TextType] = None,
        subtitle_align: AlignMethod = "center",
        safe_box: Optional[bool] = None,
        style: StyleType = "none",
        border_style: StyleType = "none",
        width: Optional[int] = None,
        height: Optional[int] = None,
        padding: PaddingDimensions = (0, 1),
        highlight: bool = False,
    ) -> "Panel":
        """An alternative constructor that sets expand=False."""
        return cls(
            renderable,
            box,
            title=title,
            title_align=title_align,
            subtitle=subtitle,
            subtitle_align=subtitle_align,
            safe_box=safe_box,
            style=style,
            border_style=border_style,
            width=width,
            height=height,
            padding=padding,
            highlight=highlight,
            expand=False,
        )

    @property
    def _title(self) -> Optional[Text]:
        if self.title:
            title_text = (
                Text.from_markup(self.title)
                if isinstance(self.title, str)
                else self.title.copy()
            )
            title_text.end = ""
            title_text.plain = title_text.plain.replace("\n", " ")
            title_text.no_wrap = True
            title_text.expand_tabs()
            title_text.pad(1)
            return title_text
        return None

    @property
    def _subtitle(self) -> Optional[Text]:
        if self.subtitle:
            subtitle_text = (
                Text.from_markup(self.subtitle)
                if isinstance(self.subtitle, str)
                else self.subtitle.copy()
            )
            subtitle_text.end = ""
            subtitle_text.plain = subtitle_text.plain.replace("\n", " ")
            subtitle_text.no_wrap = True
            subtitle_text.expand_tabs()
            subtitle_text.pad(1)
            return subtitle_text
        return None

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        _padding = Padding.unpack(self.padding)
        renderable = (
            Padding(self.renderable, _padding) if any(_padding) else self.renderable
        )
        style = console.get_style(self.style)
        border_style = style + console.get_style(self.border_style)
        width = (
            options.max_width
            if self.width is None
            else min(options.max_width, self.width)
        )

        safe_box: bool = console.safe_box if self.safe_box is None else self.safe_box
        box = self.box.substitute(options, safe=safe_box)

        def align_text(
            text: Text, width: int, align: str, character: str, style: Style
        ) -> Text:
            """Gets new aligned text.

            Args:
                text (Text): Title or subtitle text.
                width (int): Desired width.
                align (str): Alignment.
                character (str): Character for alignment.
                style (Style): Border style

            Returns:
                Text: New text instance
            """
            text = text.copy()
            text.truncate(width)
            excess_space = width - cell_len(text.plain)
            if text.style:
                text.stylize(console.get_style(text.style))

            if excess_space:
                if align == "left":
                    return Text.assemble(
                        text,
                        (character * excess_space, style),
                        no_wrap=True,
                        end="",
                    )
                elif align == "center":
                    left = excess_space // 2
                    return Text.assemble(
                        (character * left, style),
                        text,
                        (character * (excess_space - left), style),
                        no_wrap=True,
                        end="",
                    )
                else:
                    return Text.assemble(
                        (character * excess_space, style),
                        text,
                        no_wrap=True,
                        end="",
                    )
            return text

        title_text = self._title
        if title_text is not None:
            title_text.stylize_before(border_style)

        child_width = (
            width - 2
            if self.expand
            else console.measure(
                renderable, options=options.update_width(width - 2)
            ).maximum
        )
        child_height = self.height or options.height or None
        if child_height:
            child_height -= 2
        if title_text is not None:
            child_width = min(
                options.max_width - 2, max(child_width, title_text.cell_len + 2)
            )

        width = child_width + 2
        child_options = options.update(
            width=child_width, height=child_height, highlight=self.highlight
        )
        lines = console.render_lines(renderable, child_options, style=style)

        line_start = Segment(box.mid_left, border_style)
        line_end = Segment(f"{box.mid_right}", border_style)
        new_line = Segment.line()
        if title_text is None or width <= 4:
            yield Segment(box.get_top([width - 2]), border_style)
        else:
            title_text = align_text(
                title_text,
                width - 4,
                self.title_align,
                box.top,
                border_style,
            )
            yield Segment(box.top_left + box.top, border_style)
            yield from console.render(title_text, child_options.update_width(width - 4))
            yield Segment(box.top + box.top_right, border_style)

        yield new_line
        for line in lines:
            yield line_start
            yield from line
            yield line_end
            yield new_line

        subtitle_text = self._subtitle
        if subtitle_text is not None:
            subtitle_text.stylize_before(border_style)

        if subtitle_text is None or width <= 4:
            yield Segment(box.get_bottom([width - 2]), border_style)
        else:
            subtitle_text = align_text(
                subtitle_text,
                width - 4,
                self.subtitle_align,
                box.bottom,
                border_style,
            )
            yield Segment(box.bottom_left + box.bottom, border_style)
            yield from console.render(
                subtitle_text, child_options.update_width(width - 4)
            )
            yield Segment(box.bottom + box.bottom_right, border_style)

        yield new_line

    def __rich_measure__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "Measurement":
        _title = self._title
        _, right, _, left = Padding.unpack(self.padding)
        padding = left + right
        renderables = [self.renderable, _title] if _title else [self.renderable]

        if self.width is None:
            width = (
                measure_renderables(
                    console,
                    options.update_width(options.max_width - padding - 2),
                    renderables,
                ).maximum
                + padding
                + 2
            )
        else:
            width = self.width
        return Measurement(width, width)


if __name__ == "__main__":  # pragma: no cover
    from .console import Console

    c = Console()

    from .box import DOUBLE, ROUNDED
    from .padding import Padding

    p = Panel(
        "Hello, World!",
        title="rich.Panel",
        style="white on blue",
        box=DOUBLE,
        padding=1,
    )

    c.print()
    c.print(p)



================================================
FILE: rich/pretty.py
================================================
import builtins
import collections
import dataclasses
import inspect
import os
import reprlib
import sys
from array import array
from collections import Counter, UserDict, UserList, defaultdict, deque
from dataclasses import dataclass, fields, is_dataclass
from inspect import isclass
from itertools import islice
from types import MappingProxyType
from typing import (
    TYPE_CHECKING,
    Any,
    Callable,
    DefaultDict,
    Deque,
    Dict,
    Iterable,
    List,
    Optional,
    Sequence,
    Set,
    Tuple,
    Union,
)

from rich.repr import RichReprResult

try:
    import attr as _attr_module

    _has_attrs = hasattr(_attr_module, "ib")
except ImportError:  # pragma: no cover
    _has_attrs = False

from . import get_console
from ._loop import loop_last
from ._pick import pick_bool
from .abc import RichRenderable
from .cells import cell_len
from .highlighter import ReprHighlighter
from .jupyter import JupyterMixin, JupyterRenderable
from .measure import Measurement
from .text import Text

if TYPE_CHECKING:
    from .console import (
        Console,
        ConsoleOptions,
        HighlighterType,
        JustifyMethod,
        OverflowMethod,
        RenderResult,
    )


def _is_attr_object(obj: Any) -> bool:
    """Check if an object was created with attrs module."""
    return _has_attrs and _attr_module.has(type(obj))


def _get_attr_fields(obj: Any) -> Sequence["_attr_module.Attribute[Any]"]:
    """Get fields for an attrs object."""
    return _attr_module.fields(type(obj)) if _has_attrs else []


def _is_dataclass_repr(obj: object) -> bool:
    """Check if an instance of a dataclass contains the default repr.

    Args:
        obj (object): A dataclass instance.

    Returns:
        bool: True if the default repr is used, False if there is a custom repr.
    """
    # Digging in to a lot of internals here
    # Catching all exceptions in case something is missing on a non CPython implementation
    try:
        return obj.__repr__.__code__.co_filename in (
            dataclasses.__file__,
            reprlib.__file__,
        )
    except Exception:  # pragma: no coverage
        return False


_dummy_namedtuple = collections.namedtuple("_dummy_namedtuple", [])


def _has_default_namedtuple_repr(obj: object) -> bool:
    """Check if an instance of namedtuple contains the default repr

    Args:
        obj (object): A namedtuple

    Returns:
        bool: True if the default repr is used, False if there's a custom repr.
    """
    obj_file = None
    try:
        obj_file = inspect.getfile(obj.__repr__)
    except (OSError, TypeError):
        # OSError handles case where object is defined in __main__ scope, e.g. REPL - no filename available.
        # TypeError trapped defensively, in case of object without filename slips through.
        pass
    default_repr_file = inspect.getfile(_dummy_namedtuple.__repr__)
    return obj_file == default_repr_file


def _ipy_display_hook(
    value: Any,
    console: Optional["Console"] = None,
    overflow: "OverflowMethod" = "ignore",
    crop: bool = False,
    indent_guides: bool = False,
    max_length: Optional[int] = None,
    max_string: Optional[int] = None,
    max_depth: Optional[int] = None,
    expand_all: bool = False,
) -> Union[str, None]:
    # needed here to prevent circular import:
    from .console import ConsoleRenderable

    # always skip rich generated jupyter renderables or None values
    if _safe_isinstance(value, JupyterRenderable) or value is None:
        return None

    console = console or get_console()

    with console.capture() as capture:
        # certain renderables should start on a new line
        if _safe_isinstance(value, ConsoleRenderable):
            console.line()
        console.print(
            (
                value
                if _safe_isinstance(value, RichRenderable)
                else Pretty(
                    value,
                    overflow=overflow,
                    indent_guides=indent_guides,
                    max_length=max_length,
                    max_string=max_string,
                    max_depth=max_depth,
                    expand_all=expand_all,
                    margin=12,
                )
            ),
            crop=crop,
            new_line_start=True,
            end="",
        )
    # strip trailing newline, not usually part of a text repr
    # I'm not sure if this should be prevented at a lower level
    return capture.get().rstrip("\n")


def _safe_isinstance(
    obj: object, class_or_tuple: Union[type, Tuple[type, ...]]
) -> bool:
    """isinstance can fail in rare cases, for example types with no __class__"""
    try:
        return isinstance(obj, class_or_tuple)
    except Exception:
        return False


def install(
    console: Optional["Console"] = None,
    overflow: "OverflowMethod" = "ignore",
    crop: bool = False,
    indent_guides: bool = False,
    max_length: Optional[int] = None,
    max_string: Optional[int] = None,
    max_depth: Optional[int] = None,
    expand_all: bool = False,
) -> None:
    """Install automatic pretty printing in the Python REPL.

    Args:
        console (Console, optional): Console instance or ``None`` to use global console. Defaults to None.
        overflow (Optional[OverflowMethod], optional): Overflow method. Defaults to "ignore".
        crop (Optional[bool], optional): Enable cropping of long lines. Defaults to False.
        indent_guides (bool, optional): Enable indentation guides. Defaults to False.
        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
            Defaults to None.
        max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.
        max_depth (int, optional): Maximum depth of nested data structures, or None for no maximum. Defaults to None.
        expand_all (bool, optional): Expand all containers. Defaults to False.
        max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.
    """
    from rich import get_console

    console = console or get_console()
    assert console is not None

    def display_hook(value: Any) -> None:
        """Replacement sys.displayhook which prettifies objects with Rich."""
        if value is not None:
            assert console is not None
            builtins._ = None  # type: ignore[attr-defined]
            console.print(
                (
                    value
                    if _safe_isinstance(value, RichRenderable)
                    else Pretty(
                        value,
                        overflow=overflow,
                        indent_guides=indent_guides,
                        max_length=max_length,
                        max_string=max_string,
                        max_depth=max_depth,
                        expand_all=expand_all,
                    )
                ),
                crop=crop,
            )
            builtins._ = value  # type: ignore[attr-defined]

    try:
        ip = get_ipython()  # type: ignore[name-defined]
    except NameError:
        sys.displayhook = display_hook
    else:
        from IPython.core.formatters import BaseFormatter

        class RichFormatter(BaseFormatter):  # type: ignore[misc]
            pprint: bool = True

            def __call__(self, value: Any) -> Any:
                if self.pprint:
                    return _ipy_display_hook(
                        value,
                        console=get_console(),
                        overflow=overflow,
                        indent_guides=indent_guides,
                        max_length=max_length,
                        max_string=max_string,
                        max_depth=max_depth,
                        expand_all=expand_all,
                    )
                else:
                    return repr(value)

        # replace plain text formatter with rich formatter
        rich_formatter = RichFormatter()
        ip.display_formatter.formatters["text/plain"] = rich_formatter


class Pretty(JupyterMixin):
    """A rich renderable that pretty prints an object.

    Args:
        _object (Any): An object to pretty print.
        highlighter (HighlighterType, optional): Highlighter object to apply to result, or None for ReprHighlighter. Defaults to None.
        indent_size (int, optional): Number of spaces in indent. Defaults to 4.
        justify (JustifyMethod, optional): Justify method, or None for default. Defaults to None.
        overflow (OverflowMethod, optional): Overflow method, or None for default. Defaults to None.
        no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to False.
        indent_guides (bool, optional): Enable indentation guides. Defaults to False.
        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
            Defaults to None.
        max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.
        max_depth (int, optional): Maximum depth of nested data structures, or None for no maximum. Defaults to None.
        expand_all (bool, optional): Expand all containers. Defaults to False.
        margin (int, optional): Subtrace a margin from width to force containers to expand earlier. Defaults to 0.
        insert_line (bool, optional): Insert a new line if the output has multiple new lines. Defaults to False.
    """

    def __init__(
        self,
        _object: Any,
        highlighter: Optional["HighlighterType"] = None,
        *,
        indent_size: int = 4,
        justify: Optional["JustifyMethod"] = None,
        overflow: Optional["OverflowMethod"] = None,
        no_wrap: Optional[bool] = False,
        indent_guides: bool = False,
        max_length: Optional[int] = None,
        max_string: Optional[int] = None,
        max_depth: Optional[int] = None,
        expand_all: bool = False,
        margin: int = 0,
        insert_line: bool = False,
    ) -> None:
        self._object = _object
        self.highlighter = highlighter or ReprHighlighter()
        self.indent_size = indent_size
        self.justify: Optional["JustifyMethod"] = justify
        self.overflow: Optional["OverflowMethod"] = overflow
        self.no_wrap = no_wrap
        self.indent_guides = indent_guides
        self.max_length = max_length
        self.max_string = max_string
        self.max_depth = max_depth
        self.expand_all = expand_all
        self.margin = margin
        self.insert_line = insert_line

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        pretty_str = pretty_repr(
            self._object,
            max_width=options.max_width - self.margin,
            indent_size=self.indent_size,
            max_length=self.max_length,
            max_string=self.max_string,
            max_depth=self.max_depth,
            expand_all=self.expand_all,
        )
        pretty_text = Text.from_ansi(
            pretty_str,
            justify=self.justify or options.justify,
            overflow=self.overflow or options.overflow,
            no_wrap=pick_bool(self.no_wrap, options.no_wrap),
            style="pretty",
        )
        pretty_text = (
            self.highlighter(pretty_text)
            if pretty_text
            else Text(
                f"{type(self._object)}.__repr__ returned empty string",
                style="dim italic",
            )
        )
        if self.indent_guides and not options.ascii_only:
            pretty_text = pretty_text.with_indent_guides(
                self.indent_size, style="repr.indent"
            )
        if self.insert_line and "\n" in pretty_text:
            yield ""
        yield pretty_text

    def __rich_measure__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "Measurement":
        pretty_str = pretty_repr(
            self._object,
            max_width=options.max_width,
            indent_size=self.indent_size,
            max_length=self.max_length,
            max_string=self.max_string,
            max_depth=self.max_depth,
            expand_all=self.expand_all,
        )
        text_width = (
            max(cell_len(line) for line in pretty_str.splitlines()) if pretty_str else 0
        )
        return Measurement(text_width, text_width)


def _get_braces_for_defaultdict(_object: DefaultDict[Any, Any]) -> Tuple[str, str, str]:
    return (
        f"defaultdict({_object.default_factory!r}, {{",
        "})",
        f"defaultdict({_object.default_factory!r}, {{}})",
    )


def _get_braces_for_deque(_object: Deque[Any]) -> Tuple[str, str, str]:
    if _object.maxlen is None:
        return ("deque([", "])", "deque()")
    return (
        "deque([",
        f"], maxlen={_object.maxlen})",
        f"deque(maxlen={_object.maxlen})",
    )


def _get_braces_for_array(_object: "array[Any]") -> Tuple[str, str, str]:
    return (f"array({_object.typecode!r}, [", "])", f"array({_object.typecode!r})")


_BRACES: Dict[type, Callable[[Any], Tuple[str, str, str]]] = {
    os._Environ: lambda _object: ("environ({", "})", "environ({})"),
    array: _get_braces_for_array,
    defaultdict: _get_braces_for_defaultdict,
    Counter: lambda _object: ("Counter({", "})", "Counter()"),
    deque: _get_braces_for_deque,
    dict: lambda _object: ("{", "}", "{}"),
    UserDict: lambda _object: ("{", "}", "{}"),
    frozenset: lambda _object: ("frozenset({", "})", "frozenset()"),
    list: lambda _object: ("[", "]", "[]"),
    UserList: lambda _object: ("[", "]", "[]"),
    set: lambda _object: ("{", "}", "set()"),
    tuple: lambda _object: ("(", ")", "()"),
    MappingProxyType: lambda _object: ("mappingproxy({", "})", "mappingproxy({})"),
}
_CONTAINERS = tuple(_BRACES.keys())
_MAPPING_CONTAINERS = (dict, os._Environ, MappingProxyType, UserDict)


def is_expandable(obj: Any) -> bool:
    """Check if an object may be expanded by pretty print."""
    return (
        _safe_isinstance(obj, _CONTAINERS)
        or (is_dataclass(obj))
        or (hasattr(obj, "__rich_repr__"))
        or _is_attr_object(obj)
    ) and not isclass(obj)


@dataclass
class Node:
    """A node in a repr tree. May be atomic or a container."""

    key_repr: str = ""
    value_repr: str = ""
    open_brace: str = ""
    close_brace: str = ""
    empty: str = ""
    last: bool = False
    is_tuple: bool = False
    is_namedtuple: bool = False
    children: Optional[List["Node"]] = None
    key_separator: str = ": "
    separator: str = ", "

    def iter_tokens(self) -> Iterable[str]:
        """Generate tokens for this node."""
        if self.key_repr:
            yield self.key_repr
            yield self.key_separator
        if self.value_repr:
            yield self.value_repr
        elif self.children is not None:
            if self.children:
                yield self.open_brace
                if self.is_tuple and not self.is_namedtuple and len(self.children) == 1:
                    yield from self.children[0].iter_tokens()
                    yield ","
                else:
                    for child in self.children:
                        yield from child.iter_tokens()
                        if not child.last:
                            yield self.separator
                yield self.close_brace
            else:
                yield self.empty

    def check_length(self, start_length: int, max_length: int) -> bool:
        """Check the length fits within a limit.

        Args:
            start_length (int): Starting length of the line (indent, prefix, suffix).
            max_length (int): Maximum length.

        Returns:
            bool: True if the node can be rendered within max length, otherwise False.
        """
        total_length = start_length
        for token in self.iter_tokens():
            total_length += cell_len(token)
            if total_length > max_length:
                return False
        return True

    def __str__(self) -> str:
        repr_text = "".join(self.iter_tokens())
        return repr_text

    def render(
        self, max_width: int = 80, indent_size: int = 4, expand_all: bool = False
    ) -> str:
        """Render the node to a pretty repr.

        Args:
            max_width (int, optional): Maximum width of the repr. Defaults to 80.
            indent_size (int, optional): Size of indents. Defaults to 4.
            expand_all (bool, optional): Expand all levels. Defaults to False.

        Returns:
            str: A repr string of the original object.
        """
        lines = [_Line(node=self, is_root=True)]
        line_no = 0
        while line_no < len(lines):
            line = lines[line_no]
            if line.expandable and not line.expanded:
                if expand_all or not line.check_length(max_width):
                    lines[line_no : line_no + 1] = line.expand(indent_size)
            line_no += 1

        repr_str = "\n".join(str(line) for line in lines)
        return repr_str


@dataclass
class _Line:
    """A line in repr output."""

    parent: Optional["_Line"] = None
    is_root: bool = False
    node: Optional[Node] = None
    text: str = ""
    suffix: str = ""
    whitespace: str = ""
    expanded: bool = False
    last: bool = False

    @property
    def expandable(self) -> bool:
        """Check if the line may be expanded."""
        return bool(self.node is not None and self.node.children)

    def check_length(self, max_length: int) -> bool:
        """Check this line fits within a given number of cells."""
        start_length = (
            len(self.whitespace) + cell_len(self.text) + cell_len(self.suffix)
        )
        assert self.node is not None
        return self.node.check_length(start_length, max_length)

    def expand(self, indent_size: int) -> Iterable["_Line"]:
        """Expand this line by adding children on their own line."""
        node = self.node
        assert node is not None
        whitespace = self.whitespace
        assert node.children
        if node.key_repr:
            new_line = yield _Line(
                text=f"{node.key_repr}{node.key_separator}{node.open_brace}",
                whitespace=whitespace,
            )
        else:
            new_line = yield _Line(text=node.open_brace, whitespace=whitespace)
        child_whitespace = self.whitespace + " " * indent_size
        tuple_of_one = node.is_tuple and len(node.children) == 1
        for last, child in loop_last(node.children):
            separator = "," if tuple_of_one else node.separator
            line = _Line(
                parent=new_line,
                node=child,
                whitespace=child_whitespace,
                suffix=separator,
                last=last and not tuple_of_one,
            )
            yield line

        yield _Line(
            text=node.close_brace,
            whitespace=whitespace,
            suffix=self.suffix,
            last=self.last,
        )

    def __str__(self) -> str:
        if self.last:
            return f"{self.whitespace}{self.text}{self.node or ''}"
        else:
            return (
                f"{self.whitespace}{self.text}{self.node or ''}{self.suffix.rstrip()}"
            )


def _is_namedtuple(obj: Any) -> bool:
    """Checks if an object is most likely a namedtuple. It is possible
    to craft an object that passes this check and isn't a namedtuple, but
    there is only a minuscule chance of this happening unintentionally.

    Args:
        obj (Any): The object to test

    Returns:
        bool: True if the object is a namedtuple. False otherwise.
    """
    try:
        fields = getattr(obj, "_fields", None)
    except Exception:
        # Being very defensive - if we cannot get the attr then its not a namedtuple
        return False
    return isinstance(obj, tuple) and isinstance(fields, tuple)


def traverse(
    _object: Any,
    max_length: Optional[int] = None,
    max_string: Optional[int] = None,
    max_depth: Optional[int] = None,
) -> Node:
    """Traverse object and generate a tree.

    Args:
        _object (Any): Object to be traversed.
        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
            Defaults to None.
        max_string (int, optional): Maximum length of string before truncating, or None to disable truncating.
            Defaults to None.
        max_depth (int, optional): Maximum depth of data structures, or None for no maximum.
            Defaults to None.

    Returns:
        Node: The root of a tree structure which can be used to render a pretty repr.
    """

    def to_repr(obj: Any) -> str:
        """Get repr string for an object, but catch errors."""
        if (
            max_string is not None
            and _safe_isinstance(obj, (bytes, str))
            and len(obj) > max_string
        ):
            truncated = len(obj) - max_string
            obj_repr = f"{obj[:max_string]!r}+{truncated}"
        else:
            try:
                obj_repr = repr(obj)
            except Exception as error:
                obj_repr = f"<repr-error {str(error)!r}>"
        return obj_repr

    visited_ids: Set[int] = set()
    push_visited = visited_ids.add
    pop_visited = visited_ids.remove

    def _traverse(obj: Any, root: bool = False, depth: int = 0) -> Node:
        """Walk the object depth first."""

        obj_id = id(obj)
        if obj_id in visited_ids:
            # Recursion detected
            return Node(value_repr="...")

        obj_type = type(obj)
        children: List[Node]
        reached_max_depth = max_depth is not None and depth >= max_depth

        def iter_rich_args(rich_args: Any) -> Iterable[Union[Any, Tuple[str, Any]]]:
            for arg in rich_args:
                if _safe_isinstance(arg, tuple):
                    if len(arg) == 3:
                        key, child, default = arg
                        if default == child:
                            continue
                        yield key, child
                    elif len(arg) == 2:
                        key, child = arg
                        yield key, child
                    elif len(arg) == 1:
                        yield arg[0]
                else:
                    yield arg

        try:
            fake_attributes = hasattr(
                obj, "awehoi234_wdfjwljet234_234wdfoijsdfmmnxpi492"
            )
        except Exception:
            fake_attributes = False

        rich_repr_result: Optional[RichReprResult] = None
        if not fake_attributes:
            try:
                if hasattr(obj, "__rich_repr__") and not isclass(obj):
                    rich_repr_result = obj.__rich_repr__()
            except Exception:
                pass

        if rich_repr_result is not None:
            push_visited(obj_id)
            angular = getattr(obj.__rich_repr__, "angular", False)
            args = list(iter_rich_args(rich_repr_result))
            class_name = obj.__class__.__name__

            if args:
                children = []
                append = children.append

                if reached_max_depth:
                    if angular:
                        node = Node(value_repr=f"<{class_name}...>")
                    else:
                        node = Node(value_repr=f"{class_name}(...)")
                else:
                    if angular:
                        node = Node(
                            open_brace=f"<{class_name} ",
                            close_brace=">",
                            children=children,
                            last=root,
                            separator=" ",
                        )
                    else:
                        node = Node(
                            open_brace=f"{class_name}(",
                            close_brace=")",
                            children=children,
                            last=root,
                        )
                    for last, arg in loop_last(args):
                        if _safe_isinstance(arg, tuple):
                            key, child = arg
                            child_node = _traverse(child, depth=depth + 1)
                            child_node.last = last
                            child_node.key_repr = key
                            child_node.key_separator = "="
                            append(child_node)
                        else:
                            child_node = _traverse(arg, depth=depth + 1)
                            child_node.last = last
                            append(child_node)
            else:
                node = Node(
                    value_repr=f"<{class_name}>" if angular else f"{class_name}()",
                    children=[],
                    last=root,
                )
            pop_visited(obj_id)
        elif _is_attr_object(obj) and not fake_attributes:
            push_visited(obj_id)
            children = []
            append = children.append

            attr_fields = _get_attr_fields(obj)
            if attr_fields:
                if reached_max_depth:
                    node = Node(value_repr=f"{obj.__class__.__name__}(...)")
                else:
                    node = Node(
                        open_brace=f"{obj.__class__.__name__}(",
                        close_brace=")",
                        children=children,
                        last=root,
                    )

                    def iter_attrs() -> (
                        Iterable[Tuple[str, Any, Optional[Callable[[Any], str]]]]
                    ):
                        """Iterate over attr fields and values."""
                        for attr in attr_fields:
                            if attr.repr:
                                try:
                                    value = getattr(obj, attr.name)
                                except Exception as error:
                                    # Can happen, albeit rarely
                                    yield (attr.name, error, None)
                                else:
                                    yield (
                                        attr.name,
                                        value,
                                        attr.repr if callable(attr.repr) else None,
                                    )

                    for last, (name, value, repr_callable) in loop_last(iter_attrs()):
                        if repr_callable:
                            child_node = Node(value_repr=str(repr_callable(value)))
                        else:
                            child_node = _traverse(value, depth=depth + 1)
                        child_node.last = last
                        child_node.key_repr = name
                        child_node.key_separator = "="
                        append(child_node)
            else:
                node = Node(
                    value_repr=f"{obj.__class__.__name__}()", children=[], last=root
                )
            pop_visited(obj_id)
        elif (
            is_dataclass(obj)
            and not _safe_isinstance(obj, type)
            and not fake_attributes
            and _is_dataclass_repr(obj)
        ):
            push_visited(obj_id)
            children = []
            append = children.append
            if reached_max_depth:
                node = Node(value_repr=f"{obj.__class__.__name__}(...)")
            else:
                node = Node(
                    open_brace=f"{obj.__class__.__name__}(",
                    close_brace=")",
                    children=children,
                    last=root,
                    empty=f"{obj.__class__.__name__}()",
                )

                for last, field in loop_last(
                    field
                    for field in fields(obj)
                    if field.repr and hasattr(obj, field.name)
                ):
                    child_node = _traverse(getattr(obj, field.name), depth=depth + 1)
                    child_node.key_repr = field.name
                    child_node.last = last
                    child_node.key_separator = "="
                    append(child_node)

            pop_visited(obj_id)
        elif _is_namedtuple(obj) and _has_default_namedtuple_repr(obj):
            push_visited(obj_id)
            class_name = obj.__class__.__name__
            if reached_max_depth:
                # If we've reached the max depth, we still show the class name, but not its contents
                node = Node(
                    value_repr=f"{class_name}(...)",
                )
            else:
                children = []
                append = children.append
                node = Node(
                    open_brace=f"{class_name}(",
                    close_brace=")",
                    children=children,
                    empty=f"{class_name}()",
                )
                for last, (key, value) in loop_last(obj._asdict().items()):
                    child_node = _traverse(value, depth=depth + 1)
                    child_node.key_repr = key
                    child_node.last = last
                    child_node.key_separator = "="
                    append(child_node)
            pop_visited(obj_id)
        elif _safe_isinstance(obj, _CONTAINERS):
            for container_type in _CONTAINERS:
                if _safe_isinstance(obj, container_type):
                    obj_type = container_type
                    break

            push_visited(obj_id)

            open_brace, close_brace, empty = _BRACES[obj_type](obj)

            if reached_max_depth:
                node = Node(value_repr=f"{open_brace}...{close_brace}")
            elif obj_type.__repr__ != type(obj).__repr__:
                node = Node(value_repr=to_repr(obj), last=root)
            elif obj:
                children = []
                node = Node(
                    open_brace=open_brace,
                    close_brace=close_brace,
                    children=children,
                    last=root,
                )
                append = children.append
                num_items = len(obj)
                last_item_index = num_items - 1

                if _safe_isinstance(obj, _MAPPING_CONTAINERS):
                    iter_items = iter(obj.items())
                    if max_length is not None:
                        iter_items = islice(iter_items, max_length)
                    for index, (key, child) in enumerate(iter_items):
                        child_node = _traverse(child, depth=depth + 1)
                        child_node.key_repr = to_repr(key)
                        child_node.last = index == last_item_index
                        append(child_node)
                else:
                    iter_values = iter(obj)
                    if max_length is not None:
                        iter_values = islice(iter_values, max_length)
                    for index, child in enumerate(iter_values):
                        child_node = _traverse(child, depth=depth + 1)
                        child_node.last = index == last_item_index
                        append(child_node)
                if max_length is not None and num_items > max_length:
                    append(Node(value_repr=f"... +{num_items - max_length}", last=True))
            else:
                node = Node(empty=empty, children=[], last=root)

            pop_visited(obj_id)
        else:
            node = Node(value_repr=to_repr(obj), last=root)
        node.is_tuple = type(obj) == tuple
        node.is_namedtuple = _is_namedtuple(obj)
        return node

    node = _traverse(_object, root=True)
    return node


def pretty_repr(
    _object: Any,
    *,
    max_width: int = 80,
    indent_size: int = 4,
    max_length: Optional[int] = None,
    max_string: Optional[int] = None,
    max_depth: Optional[int] = None,
    expand_all: bool = False,
) -> str:
    """Prettify repr string by expanding on to new lines to fit within a given width.

    Args:
        _object (Any): Object to repr.
        max_width (int, optional): Desired maximum width of repr string. Defaults to 80.
        indent_size (int, optional): Number of spaces to indent. Defaults to 4.
        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
            Defaults to None.
        max_string (int, optional): Maximum length of string before truncating, or None to disable truncating.
            Defaults to None.
        max_depth (int, optional): Maximum depth of nested data structure, or None for no depth.
            Defaults to None.
        expand_all (bool, optional): Expand all containers regardless of available width. Defaults to False.

    Returns:
        str: A possibly multi-line representation of the object.
    """

    if _safe_isinstance(_object, Node):
        node = _object
    else:
        node = traverse(
            _object, max_length=max_length, max_string=max_string, max_depth=max_depth
        )
    repr_str: str = node.render(
        max_width=max_width, indent_size=indent_size, expand_all=expand_all
    )
    return repr_str


def pprint(
    _object: Any,
    *,
    console: Optional["Console"] = None,
    indent_guides: bool = True,
    max_length: Optional[int] = None,
    max_string: Optional[int] = None,
    max_depth: Optional[int] = None,
    expand_all: bool = False,
) -> None:
    """A convenience function for pretty printing.

    Args:
        _object (Any): Object to pretty print.
        console (Console, optional): Console instance, or None to use default. Defaults to None.
        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
            Defaults to None.
        max_string (int, optional): Maximum length of strings before truncating, or None to disable. Defaults to None.
        max_depth (int, optional): Maximum depth for nested data structures, or None for unlimited depth. Defaults to None.
        indent_guides (bool, optional): Enable indentation guides. Defaults to True.
        expand_all (bool, optional): Expand all containers. Defaults to False.
    """
    _console = get_console() if console is None else console
    _console.print(
        Pretty(
            _object,
            max_length=max_length,
            max_string=max_string,
            max_depth=max_depth,
            indent_guides=indent_guides,
            expand_all=expand_all,
            overflow="ignore",
        ),
        soft_wrap=True,
    )


if __name__ == "__main__":  # pragma: no cover

    class BrokenRepr:
        def __repr__(self) -> str:
            1 / 0
            return "this will fail"

    from typing import NamedTuple

    class StockKeepingUnit(NamedTuple):
        name: str
        description: str
        price: float
        category: str
        reviews: List[str]

    d = defaultdict(int)
    d["foo"] = 5
    data = {
        "foo": [
            1,
            "Hello World!",
            100.123,
            323.232,
            432324.0,
            {5, 6, 7, (1, 2, 3, 4), 8},
        ],
        "bar": frozenset({1, 2, 3}),
        "defaultdict": defaultdict(
            list, {"crumble": ["apple", "rhubarb", "butter", "sugar", "flour"]}
        ),
        "counter": Counter(
            [
                "apple",
                "orange",
                "pear",
                "kumquat",
                "kumquat",
                "durian" * 100,
            ]
        ),
        "atomic": (False, True, None),
        "namedtuple": StockKeepingUnit(
            "Sparkling British Spring Water",
            "Carbonated spring water",
            0.9,
            "water",
            ["its amazing!", "its terrible!"],
        ),
        "Broken": BrokenRepr(),
    }
    data["foo"].append(data)  # type: ignore[attr-defined]

    from rich import print

    print(Pretty(data, indent_guides=True, max_string=20))

    class Thing:
        def __repr__(self) -> str:
            return "Hello\x1b[38;5;239m World!"

    print(Pretty(Thing()))



================================================
FILE: rich/progress.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xb6 in position 26902: illegal multibyte sequence


================================================
FILE: rich/progress_bar.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x81 in position 3180: illegal multibyte sequence


================================================
FILE: rich/prompt.py
================================================
from typing import Any, Generic, List, Optional, TextIO, TypeVar, Union, overload

from . import get_console
from .console import Console
from .text import Text, TextType

PromptType = TypeVar("PromptType")
DefaultType = TypeVar("DefaultType")


class PromptError(Exception):
    """Exception base class for prompt related errors."""


class InvalidResponse(PromptError):
    """Exception to indicate a response was invalid. Raise this within process_response() to indicate an error
    and provide an error message.

    Args:
        message (Union[str, Text]): Error message.
    """

    def __init__(self, message: TextType) -> None:
        self.message = message

    def __rich__(self) -> TextType:
        return self.message


class PromptBase(Generic[PromptType]):
    """Ask the user for input until a valid response is received. This is the base class, see one of
    the concrete classes for examples.

    Args:
        prompt (TextType, optional): Prompt text. Defaults to "".
        console (Console, optional): A Console instance or None to use global console. Defaults to None.
        password (bool, optional): Enable password input. Defaults to False.
        choices (List[str], optional): A list of valid choices. Defaults to None.
        case_sensitive (bool, optional): Matching of choices should be case-sensitive. Defaults to True.
        show_default (bool, optional): Show default in prompt. Defaults to True.
        show_choices (bool, optional): Show choices in prompt. Defaults to True.
    """

    response_type: type = str

    validate_error_message = "[prompt.invalid]Please enter a valid value"
    illegal_choice_message = (
        "[prompt.invalid.choice]Please select one of the available options"
    )
    prompt_suffix = ": "

    choices: Optional[List[str]] = None

    def __init__(
        self,
        prompt: TextType = "",
        *,
        console: Optional[Console] = None,
        password: bool = False,
        choices: Optional[List[str]] = None,
        case_sensitive: bool = True,
        show_default: bool = True,
        show_choices: bool = True,
    ) -> None:
        self.console = console or get_console()
        self.prompt = (
            Text.from_markup(prompt, style="prompt")
            if isinstance(prompt, str)
            else prompt
        )
        self.password = password
        if choices is not None:
            self.choices = choices
        self.case_sensitive = case_sensitive
        self.show_default = show_default
        self.show_choices = show_choices

    @classmethod
    @overload
    def ask(
        cls,
        prompt: TextType = "",
        *,
        console: Optional[Console] = None,
        password: bool = False,
        choices: Optional[List[str]] = None,
        case_sensitive: bool = True,
        show_default: bool = True,
        show_choices: bool = True,
        default: DefaultType,
        stream: Optional[TextIO] = None,
    ) -> Union[DefaultType, PromptType]:
        ...

    @classmethod
    @overload
    def ask(
        cls,
        prompt: TextType = "",
        *,
        console: Optional[Console] = None,
        password: bool = False,
        choices: Optional[List[str]] = None,
        case_sensitive: bool = True,
        show_default: bool = True,
        show_choices: bool = True,
        stream: Optional[TextIO] = None,
    ) -> PromptType:
        ...

    @classmethod
    def ask(
        cls,
        prompt: TextType = "",
        *,
        console: Optional[Console] = None,
        password: bool = False,
        choices: Optional[List[str]] = None,
        case_sensitive: bool = True,
        show_default: bool = True,
        show_choices: bool = True,
        default: Any = ...,
        stream: Optional[TextIO] = None,
    ) -> Any:
        """Shortcut to construct and run a prompt loop and return the result.

        Example:
            >>> filename = Prompt.ask("Enter a filename")

        Args:
            prompt (TextType, optional): Prompt text. Defaults to "".
            console (Console, optional): A Console instance or None to use global console. Defaults to None.
            password (bool, optional): Enable password input. Defaults to False.
            choices (List[str], optional): A list of valid choices. Defaults to None.
            case_sensitive (bool, optional): Matching of choices should be case-sensitive. Defaults to True.
            show_default (bool, optional): Show default in prompt. Defaults to True.
            show_choices (bool, optional): Show choices in prompt. Defaults to True.
            stream (TextIO, optional): Optional text file open for reading to get input. Defaults to None.
        """
        _prompt = cls(
            prompt,
            console=console,
            password=password,
            choices=choices,
            case_sensitive=case_sensitive,
            show_default=show_default,
            show_choices=show_choices,
        )
        return _prompt(default=default, stream=stream)

    def render_default(self, default: DefaultType) -> Text:
        """Turn the supplied default in to a Text instance.

        Args:
            default (DefaultType): Default value.

        Returns:
            Text: Text containing rendering of default value.
        """
        return Text(f"({default})", "prompt.default")

    def make_prompt(self, default: DefaultType) -> Text:
        """Make prompt text.

        Args:
            default (DefaultType): Default value.

        Returns:
            Text: Text to display in prompt.
        """
        prompt = self.prompt.copy()
        prompt.end = ""

        if self.show_choices and self.choices:
            _choices = "/".join(self.choices)
            choices = f"[{_choices}]"
            prompt.append(" ")
            prompt.append(choices, "prompt.choices")

        if (
            default != ...
            and self.show_default
            and isinstance(default, (str, self.response_type))
        ):
            prompt.append(" ")
            _default = self.render_default(default)
            prompt.append(_default)

        prompt.append(self.prompt_suffix)

        return prompt

    @classmethod
    def get_input(
        cls,
        console: Console,
        prompt: TextType,
        password: bool,
        stream: Optional[TextIO] = None,
    ) -> str:
        """Get input from user.

        Args:
            console (Console): Console instance.
            prompt (TextType): Prompt text.
            password (bool): Enable password entry.

        Returns:
            str: String from user.
        """
        return console.input(prompt, password=password, stream=stream)

    def check_choice(self, value: str) -> bool:
        """Check value is in the list of valid choices.

        Args:
            value (str): Value entered by user.

        Returns:
            bool: True if choice was valid, otherwise False.
        """
        assert self.choices is not None
        if self.case_sensitive:
            return value.strip() in self.choices
        return value.strip().lower() in [choice.lower() for choice in self.choices]

    def process_response(self, value: str) -> PromptType:
        """Process response from user, convert to prompt type.

        Args:
            value (str): String typed by user.

        Raises:
            InvalidResponse: If ``value`` is invalid.

        Returns:
            PromptType: The value to be returned from ask method.
        """
        value = value.strip()
        try:
            return_value: PromptType = self.response_type(value)
        except ValueError:
            raise InvalidResponse(self.validate_error_message)

        if self.choices is not None:
            if not self.check_choice(value):
                raise InvalidResponse(self.illegal_choice_message)

            if not self.case_sensitive:
                # return the original choice, not the lower case version
                return_value = self.response_type(
                    self.choices[
                        [choice.lower() for choice in self.choices].index(value.lower())
                    ]
                )
        return return_value

    def on_validate_error(self, value: str, error: InvalidResponse) -> None:
        """Called to handle validation error.

        Args:
            value (str): String entered by user.
            error (InvalidResponse): Exception instance the initiated the error.
        """
        self.console.print(error)

    def pre_prompt(self) -> None:
        """Hook to display something before the prompt."""

    @overload
    def __call__(self, *, stream: Optional[TextIO] = None) -> PromptType:
        ...

    @overload
    def __call__(
        self, *, default: DefaultType, stream: Optional[TextIO] = None
    ) -> Union[PromptType, DefaultType]:
        ...

    def __call__(self, *, default: Any = ..., stream: Optional[TextIO] = None) -> Any:
        """Run the prompt loop.

        Args:
            default (Any, optional): Optional default value.

        Returns:
            PromptType: Processed value.
        """
        while True:
            self.pre_prompt()
            prompt = self.make_prompt(default)
            value = self.get_input(self.console, prompt, self.password, stream=stream)
            if value == "" and default != ...:
                return default
            try:
                return_value = self.process_response(value)
            except InvalidResponse as error:
                self.on_validate_error(value, error)
                continue
            else:
                return return_value


class Prompt(PromptBase[str]):
    """A prompt that returns a str.

    Example:
        >>> name = Prompt.ask("Enter your name")


    """

    response_type = str


class IntPrompt(PromptBase[int]):
    """A prompt that returns an integer.

    Example:
        >>> burrito_count = IntPrompt.ask("How many burritos do you want to order")

    """

    response_type = int
    validate_error_message = "[prompt.invalid]Please enter a valid integer number"


class FloatPrompt(PromptBase[float]):
    """A prompt that returns a float.

    Example:
        >>> temperature = FloatPrompt.ask("Enter desired temperature")

    """

    response_type = float
    validate_error_message = "[prompt.invalid]Please enter a number"


class Confirm(PromptBase[bool]):
    """A yes / no confirmation prompt.

    Example:
        >>> if Confirm.ask("Continue"):
                run_job()

    """

    response_type = bool
    validate_error_message = "[prompt.invalid]Please enter Y or N"
    choices: List[str] = ["y", "n"]

    def render_default(self, default: DefaultType) -> Text:
        """Render the default as (y) or (n) rather than True/False."""
        yes, no = self.choices
        return Text(f"({yes})" if default else f"({no})", style="prompt.default")

    def process_response(self, value: str) -> bool:
        """Convert choices to a bool."""
        value = value.strip().lower()
        if value not in self.choices:
            raise InvalidResponse(self.validate_error_message)
        return value == self.choices[0]


if __name__ == "__main__":  # pragma: no cover
    from rich import print

    if Confirm.ask("Run [i]prompt[/i] tests?", default=True):
        while True:
            result = IntPrompt.ask(
                ":rocket: Enter a number between [b]1[/b] and [b]10[/b]", default=5
            )
            if result >= 1 and result <= 10:
                break
            print(":pile_of_poo: [prompt.invalid]Number must be between 1 and 10")
        print(f"number={result}")

        while True:
            password = Prompt.ask(
                "Please enter a password [cyan](must be at least 5 characters)",
                password=True,
            )
            if len(password) >= 5:
                break
            print("[prompt.invalid]password too short")
        print(f"password={password!r}")

        fruit = Prompt.ask("Enter a fruit", choices=["apple", "orange", "pear"])
        print(f"fruit={fruit!r}")

        doggie = Prompt.ask(
            "What's the best Dog? (Case INSENSITIVE)",
            choices=["Border Terrier", "Collie", "Labradoodle"],
            case_sensitive=False,
        )
        print(f"doggie={doggie!r}")

    else:
        print("[b]OK :loudly_crying_face:")



================================================
FILE: rich/protocol.py
================================================
from typing import Any, cast, Set, TYPE_CHECKING
from inspect import isclass

if TYPE_CHECKING:
    from rich.console import RenderableType

_GIBBERISH = """aihwerij235234ljsdnp34ksodfipwoe234234jlskjdf"""


def is_renderable(check_object: Any) -> bool:
    """Check if an object may be rendered by Rich."""
    return (
        isinstance(check_object, str)
        or hasattr(check_object, "__rich__")
        or hasattr(check_object, "__rich_console__")
    )


def rich_cast(renderable: object) -> "RenderableType":
    """Cast an object to a renderable by calling __rich__ if present.

    Args:
        renderable (object): A potentially renderable object

    Returns:
        object: The result of recursively calling __rich__.
    """
    from rich.console import RenderableType

    rich_visited_set: Set[type] = set()  # Prevent potential infinite loop
    while hasattr(renderable, "__rich__") and not isclass(renderable):
        # Detect object which claim to have all the attributes
        if hasattr(renderable, _GIBBERISH):
            return repr(renderable)
        cast_method = getattr(renderable, "__rich__")
        renderable = cast_method()
        renderable_type = type(renderable)
        if renderable_type in rich_visited_set:
            break
        rich_visited_set.add(renderable_type)

    return cast(RenderableType, renderable)



================================================
FILE: rich/py.typed
================================================
[Empty file]


================================================
FILE: rich/region.py
================================================
from typing import NamedTuple


class Region(NamedTuple):
    """Defines a rectangular region of the screen."""

    x: int
    y: int
    width: int
    height: int



================================================
FILE: rich/repr.py
================================================
import inspect
from functools import partial
from typing import (
    Any,
    Callable,
    Iterable,
    List,
    Optional,
    Tuple,
    Type,
    TypeVar,
    Union,
    overload,
)

T = TypeVar("T")


Result = Iterable[Union[Any, Tuple[Any], Tuple[str, Any], Tuple[str, Any, Any]]]
RichReprResult = Result


class ReprError(Exception):
    """An error occurred when attempting to build a repr."""


@overload
def auto(cls: Optional[Type[T]]) -> Type[T]:
    ...


@overload
def auto(*, angular: bool = False) -> Callable[[Type[T]], Type[T]]:
    ...


def auto(
    cls: Optional[Type[T]] = None, *, angular: Optional[bool] = None
) -> Union[Type[T], Callable[[Type[T]], Type[T]]]:
    """Class decorator to create __repr__ from __rich_repr__"""

    def do_replace(cls: Type[T], angular: Optional[bool] = None) -> Type[T]:
        def auto_repr(self: T) -> str:
            """Create repr string from __rich_repr__"""
            repr_str: List[str] = []
            append = repr_str.append

            angular: bool = getattr(self.__rich_repr__, "angular", False)  # type: ignore[attr-defined]
            for arg in self.__rich_repr__():  # type: ignore[attr-defined]
                if isinstance(arg, tuple):
                    if len(arg) == 1:
                        append(repr(arg[0]))
                    else:
                        key, value, *default = arg
                        if key is None:
                            append(repr(value))
                        else:
                            if default and default[0] == value:
                                continue
                            append(f"{key}={value!r}")
                else:
                    append(repr(arg))
            if angular:
                return f"<{self.__class__.__name__} {' '.join(repr_str)}>"
            else:
                return f"{self.__class__.__name__}({', '.join(repr_str)})"

        def auto_rich_repr(self: Type[T]) -> Result:
            """Auto generate __rich_rep__ from signature of __init__"""
            try:
                signature = inspect.signature(self.__init__)
                for name, param in signature.parameters.items():
                    if param.kind == param.POSITIONAL_ONLY:
                        yield getattr(self, name)
                    elif param.kind in (
                        param.POSITIONAL_OR_KEYWORD,
                        param.KEYWORD_ONLY,
                    ):
                        if param.default is param.empty:
                            yield getattr(self, param.name)
                        else:
                            yield param.name, getattr(self, param.name), param.default
            except Exception as error:
                raise ReprError(
                    f"Failed to auto generate __rich_repr__; {error}"
                ) from None

        if not hasattr(cls, "__rich_repr__"):
            auto_rich_repr.__doc__ = "Build a rich repr"
            cls.__rich_repr__ = auto_rich_repr  # type: ignore[attr-defined]

        auto_repr.__doc__ = "Return repr(self)"
        cls.__repr__ = auto_repr  # type: ignore[assignment]
        if angular is not None:
            cls.__rich_repr__.angular = angular  # type: ignore[attr-defined]
        return cls

    if cls is None:
        return partial(do_replace, angular=angular)
    else:
        return do_replace(cls, angular=angular)


@overload
def rich_repr(cls: Optional[Type[T]]) -> Type[T]:
    ...


@overload
def rich_repr(*, angular: bool = False) -> Callable[[Type[T]], Type[T]]:
    ...


def rich_repr(
    cls: Optional[Type[T]] = None, *, angular: bool = False
) -> Union[Type[T], Callable[[Type[T]], Type[T]]]:
    if cls is None:
        return auto(angular=angular)
    else:
        return auto(cls)


if __name__ == "__main__":

    @auto
    class Foo:
        def __rich_repr__(self) -> Result:
            yield "foo"
            yield "bar", {"shopping": ["eggs", "ham", "pineapple"]}
            yield "buy", "hand sanitizer"

    foo = Foo()
    from rich.console import Console

    console = Console()

    console.rule("Standard repr")
    console.print(foo)

    console.print(foo, width=60)
    console.print(foo, width=30)

    console.rule("Angular repr")
    Foo.__rich_repr__.angular = True  # type: ignore[attr-defined]

    console.print(foo)

    console.print(foo, width=60)
    console.print(foo, width=30)



================================================
FILE: rich/rule.py
================================================
from typing import Union

from .align import AlignMethod
from .cells import cell_len, set_cell_size
from .console import Console, ConsoleOptions, RenderResult
from .jupyter import JupyterMixin
from .measure import Measurement
from .style import Style
from .text import Text


class Rule(JupyterMixin):
    """A console renderable to draw a horizontal rule (line).

    Args:
        title (Union[str, Text], optional): Text to render in the rule. Defaults to "".
        characters (str, optional): Character(s) used to draw the line. Defaults to "─".
        style (StyleType, optional): Style of Rule. Defaults to "rule.line".
        end (str, optional): Character at end of Rule. defaults to "\\\\n"
        align (str, optional): How to align the title, one of "left", "center", or "right". Defaults to "center".
    """

    def __init__(
        self,
        title: Union[str, Text] = "",
        *,
        characters: str = "─",
        style: Union[str, Style] = "rule.line",
        end: str = "\n",
        align: AlignMethod = "center",
    ) -> None:
        if cell_len(characters) < 1:
            raise ValueError(
                "'characters' argument must have a cell width of at least 1"
            )
        if align not in ("left", "center", "right"):
            raise ValueError(
                f'invalid value for align, expected "left", "center", "right" (not {align!r})'
            )
        self.title = title
        self.characters = characters
        self.style = style
        self.end = end
        self.align = align

    def __repr__(self) -> str:
        return f"Rule({self.title!r}, {self.characters!r})"

    def __rich_console__(
        self, console: Console, options: ConsoleOptions
    ) -> RenderResult:
        width = options.max_width

        characters = (
            "-"
            if (options.ascii_only and not self.characters.isascii())
            else self.characters
        )

        chars_len = cell_len(characters)
        if not self.title:
            yield self._rule_line(chars_len, width)
            return

        if isinstance(self.title, Text):
            title_text = self.title
        else:
            title_text = console.render_str(self.title, style="rule.text")

        title_text.plain = title_text.plain.replace("\n", " ")
        title_text.expand_tabs()

        required_space = 4 if self.align == "center" else 2
        truncate_width = max(0, width - required_space)
        if not truncate_width:
            yield self._rule_line(chars_len, width)
            return

        rule_text = Text(end=self.end)
        if self.align == "center":
            title_text.truncate(truncate_width, overflow="ellipsis")
            side_width = (width - cell_len(title_text.plain)) // 2
            left = Text(characters * (side_width // chars_len + 1))
            left.truncate(side_width - 1)
            right_length = width - cell_len(left.plain) - cell_len(title_text.plain)
            right = Text(characters * (side_width // chars_len + 1))
            right.truncate(right_length)
            rule_text.append(left.plain + " ", self.style)
            rule_text.append(title_text)
            rule_text.append(" " + right.plain, self.style)
        elif self.align == "left":
            title_text.truncate(truncate_width, overflow="ellipsis")
            rule_text.append(title_text)
            rule_text.append(" ")
            rule_text.append(characters * (width - rule_text.cell_len), self.style)
        elif self.align == "right":
            title_text.truncate(truncate_width, overflow="ellipsis")
            rule_text.append(characters * (width - title_text.cell_len - 1), self.style)
            rule_text.append(" ")
            rule_text.append(title_text)

        rule_text.plain = set_cell_size(rule_text.plain, width)
        yield rule_text

    def _rule_line(self, chars_len: int, width: int) -> Text:
        rule_text = Text(self.characters * ((width // chars_len) + 1), self.style)
        rule_text.truncate(width)
        rule_text.plain = set_cell_size(rule_text.plain, width)
        return rule_text

    def __rich_measure__(
        self, console: Console, options: ConsoleOptions
    ) -> Measurement:
        return Measurement(1, 1)


if __name__ == "__main__":  # pragma: no cover
    import sys

    from rich.console import Console

    try:
        text = sys.argv[1]
    except IndexError:
        text = "Hello, World"
    console = Console()
    console.print(Rule(title=text))

    console = Console()
    console.print(Rule("foo"), width=4)



================================================
FILE: rich/scope.py
================================================
from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, Optional, Tuple

from .highlighter import ReprHighlighter
from .panel import Panel
from .pretty import Pretty
from .table import Table
from .text import Text, TextType

if TYPE_CHECKING:
    from .console import ConsoleRenderable


def render_scope(
    scope: "Mapping[str, Any]",
    *,
    title: Optional[TextType] = None,
    sort_keys: bool = True,
    indent_guides: bool = False,
    max_length: Optional[int] = None,
    max_string: Optional[int] = None,
) -> "ConsoleRenderable":
    """Render python variables in a given scope.

    Args:
        scope (Mapping): A mapping containing variable names and values.
        title (str, optional): Optional title. Defaults to None.
        sort_keys (bool, optional): Enable sorting of items. Defaults to True.
        indent_guides (bool, optional): Enable indentation guides. Defaults to False.
        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.
            Defaults to None.
        max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.

    Returns:
        ConsoleRenderable: A renderable object.
    """
    highlighter = ReprHighlighter()
    items_table = Table.grid(padding=(0, 1), expand=False)
    items_table.add_column(justify="right")

    def sort_items(item: Tuple[str, Any]) -> Tuple[bool, str]:
        """Sort special variables first, then alphabetically."""
        key, _ = item
        return (not key.startswith("__"), key.lower())

    items = sorted(scope.items(), key=sort_items) if sort_keys else scope.items()
    for key, value in items:
        key_text = Text.assemble(
            (key, "scope.key.special" if key.startswith("__") else "scope.key"),
            (" =", "scope.equals"),
        )
        items_table.add_row(
            key_text,
            Pretty(
                value,
                highlighter=highlighter,
                indent_guides=indent_guides,
                max_length=max_length,
                max_string=max_string,
            ),
        )
    return Panel.fit(
        items_table,
        title=title,
        border_style="scope.border",
        padding=(0, 1),
    )


if __name__ == "__main__":  # pragma: no cover
    from rich import print

    print()

    def test(foo: float, bar: float) -> None:
        list_of_things = [1, 2, 3, None, 4, True, False, "Hello World"]
        dict_of_things = {
            "version": "1.1",
            "method": "confirmFruitPurchase",
            "params": [["apple", "orange", "mangoes", "pomelo"], 1.123],
            "id": "194521489",
        }
        print(render_scope(locals(), title="[i]locals", sort_keys=False))

    test(20.3423, 3.1427)
    print()



================================================
FILE: rich/screen.py
================================================
from typing import Optional, TYPE_CHECKING

from .segment import Segment
from .style import StyleType
from ._loop import loop_last


if TYPE_CHECKING:
    from .console import (
        Console,
        ConsoleOptions,
        RenderResult,
        RenderableType,
        Group,
    )


class Screen:
    """A renderable that fills the terminal screen and crops excess.

    Args:
        renderable (RenderableType): Child renderable.
        style (StyleType, optional): Optional background style. Defaults to None.
    """

    renderable: "RenderableType"

    def __init__(
        self,
        *renderables: "RenderableType",
        style: Optional[StyleType] = None,
        application_mode: bool = False,
    ) -> None:
        from rich.console import Group

        self.renderable = Group(*renderables)
        self.style = style
        self.application_mode = application_mode

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        width, height = options.size
        style = console.get_style(self.style) if self.style else None
        render_options = options.update(width=width, height=height)
        lines = console.render_lines(
            self.renderable or "", render_options, style=style, pad=True
        )
        lines = Segment.set_shape(lines, width, height, style=style)
        new_line = Segment("\n\r") if self.application_mode else Segment.line()
        for last, line in loop_last(lines):
            yield from line
            if not last:
                yield new_line



================================================
FILE: rich/segment.py
================================================
from enum import IntEnum
from functools import lru_cache
from itertools import filterfalse
from logging import getLogger
from operator import attrgetter
from typing import (
    TYPE_CHECKING,
    Dict,
    Iterable,
    List,
    NamedTuple,
    Optional,
    Sequence,
    Tuple,
    Type,
    Union,
)

from .cells import (
    _is_single_cell_widths,
    cached_cell_len,
    cell_len,
    get_character_cell_size,
    set_cell_size,
)
from .repr import Result, rich_repr
from .style import Style

if TYPE_CHECKING:
    from .console import Console, ConsoleOptions, RenderResult

log = getLogger("rich")


class ControlType(IntEnum):
    """Non-printable control codes which typically translate to ANSI codes."""

    BELL = 1
    CARRIAGE_RETURN = 2
    HOME = 3
    CLEAR = 4
    SHOW_CURSOR = 5
    HIDE_CURSOR = 6
    ENABLE_ALT_SCREEN = 7
    DISABLE_ALT_SCREEN = 8
    CURSOR_UP = 9
    CURSOR_DOWN = 10
    CURSOR_FORWARD = 11
    CURSOR_BACKWARD = 12
    CURSOR_MOVE_TO_COLUMN = 13
    CURSOR_MOVE_TO = 14
    ERASE_IN_LINE = 15
    SET_WINDOW_TITLE = 16


ControlCode = Union[
    Tuple[ControlType],
    Tuple[ControlType, Union[int, str]],
    Tuple[ControlType, int, int],
]


@rich_repr()
class Segment(NamedTuple):
    """A piece of text with associated style. Segments are produced by the Console render process and
    are ultimately converted in to strings to be written to the terminal.

    Args:
        text (str): A piece of text.
        style (:class:`~rich.style.Style`, optional): An optional style to apply to the text.
        control (Tuple[ControlCode], optional): Optional sequence of control codes.

    Attributes:
        cell_length (int): The cell length of this Segment.
    """

    text: str
    style: Optional[Style] = None
    control: Optional[Sequence[ControlCode]] = None

    @property
    def cell_length(self) -> int:
        """The number of terminal cells required to display self.text.

        Returns:
            int: A number of cells.
        """
        text, _style, control = self
        return 0 if control else cell_len(text)

    def __rich_repr__(self) -> Result:
        yield self.text
        if self.control is None:
            if self.style is not None:
                yield self.style
        else:
            yield self.style
            yield self.control

    def __bool__(self) -> bool:
        """Check if the segment contains text."""
        return bool(self.text)

    @property
    def is_control(self) -> bool:
        """Check if the segment contains control codes."""
        return self.control is not None

    @classmethod
    @lru_cache(1024 * 16)
    def _split_cells(cls, segment: "Segment", cut: int) -> Tuple["Segment", "Segment"]:
        """Split a segment in to two at a given cell position.

        Note that splitting a double-width character, may result in that character turning
        into two spaces.

        Args:
            segment (Segment): A segment to split.
            cut (int): A cell position to cut on.

        Returns:
            A tuple of two segments.
        """
        text, style, control = segment
        _Segment = Segment
        cell_length = segment.cell_length
        if cut >= cell_length:
            return segment, _Segment("", style, control)

        cell_size = get_character_cell_size

        pos = int((cut / cell_length) * len(text))

        while True:
            before = text[:pos]
            cell_pos = cell_len(before)
            out_by = cell_pos - cut
            if not out_by:
                return (
                    _Segment(before, style, control),
                    _Segment(text[pos:], style, control),
                )
            if out_by == -1 and cell_size(text[pos]) == 2:
                return (
                    _Segment(text[:pos] + " ", style, control),
                    _Segment(" " + text[pos + 1 :], style, control),
                )
            if out_by == +1 and cell_size(text[pos - 1]) == 2:
                return (
                    _Segment(text[: pos - 1] + " ", style, control),
                    _Segment(" " + text[pos:], style, control),
                )
            if cell_pos < cut:
                pos += 1
            else:
                pos -= 1

    def split_cells(self, cut: int) -> Tuple["Segment", "Segment"]:
        """Split segment in to two segments at the specified column.

        If the cut point falls in the middle of a 2-cell wide character then it is replaced
        by two spaces, to preserve the display width of the parent segment.

        Args:
            cut (int): Offset within the segment to cut.

        Returns:
            Tuple[Segment, Segment]: Two segments.
        """
        text, style, control = self
        assert cut >= 0

        if _is_single_cell_widths(text):
            # Fast path with all 1 cell characters
            if cut >= len(text):
                return self, Segment("", style, control)
            return (
                Segment(text[:cut], style, control),
                Segment(text[cut:], style, control),
            )

        return self._split_cells(self, cut)

    @classmethod
    def line(cls) -> "Segment":
        """Make a new line segment."""
        return cls("\n")

    @classmethod
    def apply_style(
        cls,
        segments: Iterable["Segment"],
        style: Optional[Style] = None,
        post_style: Optional[Style] = None,
    ) -> Iterable["Segment"]:
        """Apply style(s) to an iterable of segments.

        Returns an iterable of segments where the style is replaced by ``style + segment.style + post_style``.

        Args:
            segments (Iterable[Segment]): Segments to process.
            style (Style, optional): Base style. Defaults to None.
            post_style (Style, optional): Style to apply on top of segment style. Defaults to None.

        Returns:
            Iterable[Segments]: A new iterable of segments (possibly the same iterable).
        """
        result_segments = segments
        if style:
            apply = style.__add__
            result_segments = (
                cls(text, None if control else apply(_style), control)
                for text, _style, control in result_segments
            )
        if post_style:
            result_segments = (
                cls(
                    text,
                    (
                        None
                        if control
                        else (_style + post_style if _style else post_style)
                    ),
                    control,
                )
                for text, _style, control in result_segments
            )
        return result_segments

    @classmethod
    def filter_control(
        cls, segments: Iterable["Segment"], is_control: bool = False
    ) -> Iterable["Segment"]:
        """Filter segments by ``is_control`` attribute.

        Args:
            segments (Iterable[Segment]): An iterable of Segment instances.
            is_control (bool, optional): is_control flag to match in search.

        Returns:
            Iterable[Segment]: And iterable of Segment instances.

        """
        if is_control:
            return filter(attrgetter("control"), segments)
        else:
            return filterfalse(attrgetter("control"), segments)

    @classmethod
    def split_lines(cls, segments: Iterable["Segment"]) -> Iterable[List["Segment"]]:
        """Split a sequence of segments in to a list of lines.

        Args:
            segments (Iterable[Segment]): Segments potentially containing line feeds.

        Yields:
            Iterable[List[Segment]]: Iterable of segment lists, one per line.
        """
        line: List[Segment] = []
        append = line.append

        for segment in segments:
            if "\n" in segment.text and not segment.control:
                text, style, _ = segment
                while text:
                    _text, new_line, text = text.partition("\n")
                    if _text:
                        append(cls(_text, style))
                    if new_line:
                        yield line
                        line = []
                        append = line.append
            else:
                append(segment)
        if line:
            yield line

    @classmethod
    def split_and_crop_lines(
        cls,
        segments: Iterable["Segment"],
        length: int,
        style: Optional[Style] = None,
        pad: bool = True,
        include_new_lines: bool = True,
    ) -> Iterable[List["Segment"]]:
        """Split segments in to lines, and crop lines greater than a given length.

        Args:
            segments (Iterable[Segment]): An iterable of segments, probably
                generated from console.render.
            length (int): Desired line length.
            style (Style, optional): Style to use for any padding.
            pad (bool): Enable padding of lines that are less than `length`.

        Returns:
            Iterable[List[Segment]]: An iterable of lines of segments.
        """
        line: List[Segment] = []
        append = line.append

        adjust_line_length = cls.adjust_line_length
        new_line_segment = cls("\n")

        for segment in segments:
            if "\n" in segment.text and not segment.control:
                text, segment_style, _ = segment
                while text:
                    _text, new_line, text = text.partition("\n")
                    if _text:
                        append(cls(_text, segment_style))
                    if new_line:
                        cropped_line = adjust_line_length(
                            line, length, style=style, pad=pad
                        )
                        if include_new_lines:
                            cropped_line.append(new_line_segment)
                        yield cropped_line
                        line.clear()
            else:
                append(segment)
        if line:
            yield adjust_line_length(line, length, style=style, pad=pad)

    @classmethod
    def adjust_line_length(
        cls,
        line: List["Segment"],
        length: int,
        style: Optional[Style] = None,
        pad: bool = True,
    ) -> List["Segment"]:
        """Adjust a line to a given width (cropping or padding as required).

        Args:
            segments (Iterable[Segment]): A list of segments in a single line.
            length (int): The desired width of the line.
            style (Style, optional): The style of padding if used (space on the end). Defaults to None.
            pad (bool, optional): Pad lines with spaces if they are shorter than `length`. Defaults to True.

        Returns:
            List[Segment]: A line of segments with the desired length.
        """
        line_length = sum(segment.cell_length for segment in line)
        new_line: List[Segment]

        if line_length < length:
            if pad:
                new_line = line + [cls(" " * (length - line_length), style)]
            else:
                new_line = line[:]
        elif line_length > length:
            new_line = []
            append = new_line.append
            line_length = 0
            for segment in line:
                segment_length = segment.cell_length
                if line_length + segment_length < length or segment.control:
                    append(segment)
                    line_length += segment_length
                else:
                    text, segment_style, _ = segment
                    text = set_cell_size(text, length - line_length)
                    append(cls(text, segment_style))
                    break
        else:
            new_line = line[:]
        return new_line

    @classmethod
    def get_line_length(cls, line: List["Segment"]) -> int:
        """Get the length of list of segments.

        Args:
            line (List[Segment]): A line encoded as a list of Segments (assumes no '\\\\n' characters),

        Returns:
            int: The length of the line.
        """
        _cell_len = cell_len
        return sum(_cell_len(text) for text, style, control in line if not control)

    @classmethod
    def get_shape(cls, lines: List[List["Segment"]]) -> Tuple[int, int]:
        """Get the shape (enclosing rectangle) of a list of lines.

        Args:
            lines (List[List[Segment]]): A list of lines (no '\\\\n' characters).

        Returns:
            Tuple[int, int]: Width and height in characters.
        """
        get_line_length = cls.get_line_length
        max_width = max(get_line_length(line) for line in lines) if lines else 0
        return (max_width, len(lines))

    @classmethod
    def set_shape(
        cls,
        lines: List[List["Segment"]],
        width: int,
        height: Optional[int] = None,
        style: Optional[Style] = None,
        new_lines: bool = False,
    ) -> List[List["Segment"]]:
        """Set the shape of a list of lines (enclosing rectangle).

        Args:
            lines (List[List[Segment]]): A list of lines.
            width (int): Desired width.
            height (int, optional): Desired height or None for no change.
            style (Style, optional): Style of any padding added.
            new_lines (bool, optional): Padded lines should include "\n". Defaults to False.

        Returns:
            List[List[Segment]]: New list of lines.
        """
        _height = height or len(lines)

        blank = (
            [cls(" " * width + "\n", style)] if new_lines else [cls(" " * width, style)]
        )

        adjust_line_length = cls.adjust_line_length
        shaped_lines = lines[:_height]
        shaped_lines[:] = [
            adjust_line_length(line, width, style=style) for line in lines
        ]
        if len(shaped_lines) < _height:
            shaped_lines.extend([blank] * (_height - len(shaped_lines)))
        return shaped_lines

    @classmethod
    def align_top(
        cls: Type["Segment"],
        lines: List[List["Segment"]],
        width: int,
        height: int,
        style: Style,
        new_lines: bool = False,
    ) -> List[List["Segment"]]:
        """Aligns lines to top (adds extra lines to bottom as required).

        Args:
            lines (List[List[Segment]]): A list of lines.
            width (int): Desired width.
            height (int, optional): Desired height or None for no change.
            style (Style): Style of any padding added.
            new_lines (bool, optional): Padded lines should include "\n". Defaults to False.

        Returns:
            List[List[Segment]]: New list of lines.
        """
        extra_lines = height - len(lines)
        if not extra_lines:
            return lines[:]
        lines = lines[:height]
        blank = cls(" " * width + "\n", style) if new_lines else cls(" " * width, style)
        lines = lines + [[blank]] * extra_lines
        return lines

    @classmethod
    def align_bottom(
        cls: Type["Segment"],
        lines: List[List["Segment"]],
        width: int,
        height: int,
        style: Style,
        new_lines: bool = False,
    ) -> List[List["Segment"]]:
        """Aligns render to bottom (adds extra lines above as required).

        Args:
            lines (List[List[Segment]]): A list of lines.
            width (int): Desired width.
            height (int, optional): Desired height or None for no change.
            style (Style): Style of any padding added. Defaults to None.
            new_lines (bool, optional): Padded lines should include "\n". Defaults to False.

        Returns:
            List[List[Segment]]: New list of lines.
        """
        extra_lines = height - len(lines)
        if not extra_lines:
            return lines[:]
        lines = lines[:height]
        blank = cls(" " * width + "\n", style) if new_lines else cls(" " * width, style)
        lines = [[blank]] * extra_lines + lines
        return lines

    @classmethod
    def align_middle(
        cls: Type["Segment"],
        lines: List[List["Segment"]],
        width: int,
        height: int,
        style: Style,
        new_lines: bool = False,
    ) -> List[List["Segment"]]:
        """Aligns lines to middle (adds extra lines to above and below as required).

        Args:
            lines (List[List[Segment]]): A list of lines.
            width (int): Desired width.
            height (int, optional): Desired height or None for no change.
            style (Style): Style of any padding added.
            new_lines (bool, optional): Padded lines should include "\n". Defaults to False.

        Returns:
            List[List[Segment]]: New list of lines.
        """
        extra_lines = height - len(lines)
        if not extra_lines:
            return lines[:]
        lines = lines[:height]
        blank = cls(" " * width + "\n", style) if new_lines else cls(" " * width, style)
        top_lines = extra_lines // 2
        bottom_lines = extra_lines - top_lines
        lines = [[blank]] * top_lines + lines + [[blank]] * bottom_lines
        return lines

    @classmethod
    def simplify(cls, segments: Iterable["Segment"]) -> Iterable["Segment"]:
        """Simplify an iterable of segments by combining contiguous segments with the same style.

        Args:
            segments (Iterable[Segment]): An iterable of segments.

        Returns:
            Iterable[Segment]: A possibly smaller iterable of segments that will render the same way.
        """
        iter_segments = iter(segments)
        try:
            last_segment = next(iter_segments)
        except StopIteration:
            return

        _Segment = Segment
        for segment in iter_segments:
            if last_segment.style == segment.style and not segment.control:
                last_segment = _Segment(
                    last_segment.text + segment.text, last_segment.style
                )
            else:
                yield last_segment
                last_segment = segment
        yield last_segment

    @classmethod
    def strip_links(cls, segments: Iterable["Segment"]) -> Iterable["Segment"]:
        """Remove all links from an iterable of styles.

        Args:
            segments (Iterable[Segment]): An iterable segments.

        Yields:
            Segment: Segments with link removed.
        """
        for segment in segments:
            if segment.control or segment.style is None:
                yield segment
            else:
                text, style, _control = segment
                yield cls(text, style.update_link(None) if style else None)

    @classmethod
    def strip_styles(cls, segments: Iterable["Segment"]) -> Iterable["Segment"]:
        """Remove all styles from an iterable of segments.

        Args:
            segments (Iterable[Segment]): An iterable segments.

        Yields:
            Segment: Segments with styles replace with None
        """
        for text, _style, control in segments:
            yield cls(text, None, control)

    @classmethod
    def remove_color(cls, segments: Iterable["Segment"]) -> Iterable["Segment"]:
        """Remove all color from an iterable of segments.

        Args:
            segments (Iterable[Segment]): An iterable segments.

        Yields:
            Segment: Segments with colorless style.
        """

        cache: Dict[Style, Style] = {}
        for text, style, control in segments:
            if style:
                colorless_style = cache.get(style)
                if colorless_style is None:
                    colorless_style = style.without_color
                    cache[style] = colorless_style
                yield cls(text, colorless_style, control)
            else:
                yield cls(text, None, control)

    @classmethod
    def divide(
        cls, segments: Iterable["Segment"], cuts: Iterable[int]
    ) -> Iterable[List["Segment"]]:
        """Divides an iterable of segments in to portions.

        Args:
            cuts (Iterable[int]): Cell positions where to divide.

        Yields:
            [Iterable[List[Segment]]]: An iterable of Segments in List.
        """
        split_segments: List["Segment"] = []
        add_segment = split_segments.append

        iter_cuts = iter(cuts)

        while True:
            cut = next(iter_cuts, -1)
            if cut == -1:
                return
            if cut != 0:
                break
            yield []
        pos = 0

        segments_clear = split_segments.clear
        segments_copy = split_segments.copy

        _cell_len = cached_cell_len
        for segment in segments:
            text, _style, control = segment
            while text:
                end_pos = pos if control else pos + _cell_len(text)
                if end_pos < cut:
                    add_segment(segment)
                    pos = end_pos
                    break

                if end_pos == cut:
                    add_segment(segment)
                    yield segments_copy()
                    segments_clear()
                    pos = end_pos

                    cut = next(iter_cuts, -1)
                    if cut == -1:
                        if split_segments:
                            yield segments_copy()
                        return

                    break

                else:
                    before, segment = segment.split_cells(cut - pos)
                    text, _style, control = segment
                    add_segment(before)
                    yield segments_copy()
                    segments_clear()
                    pos = cut

                cut = next(iter_cuts, -1)
                if cut == -1:
                    if split_segments:
                        yield segments_copy()
                    return

        yield segments_copy()


class Segments:
    """A simple renderable to render an iterable of segments. This class may be useful if
    you want to print segments outside of a __rich_console__ method.

    Args:
        segments (Iterable[Segment]): An iterable of segments.
        new_lines (bool, optional): Add new lines between segments. Defaults to False.
    """

    def __init__(self, segments: Iterable[Segment], new_lines: bool = False) -> None:
        self.segments = list(segments)
        self.new_lines = new_lines

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        if self.new_lines:
            line = Segment.line()
            for segment in self.segments:
                yield segment
                yield line
        else:
            yield from self.segments


class SegmentLines:
    def __init__(self, lines: Iterable[List[Segment]], new_lines: bool = False) -> None:
        """A simple renderable containing a number of lines of segments. May be used as an intermediate
        in rendering process.

        Args:
            lines (Iterable[List[Segment]]): Lists of segments forming lines.
            new_lines (bool, optional): Insert new lines after each line. Defaults to False.
        """
        self.lines = list(lines)
        self.new_lines = new_lines

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        if self.new_lines:
            new_line = Segment.line()
            for line in self.lines:
                yield from line
                yield new_line
        else:
            for line in self.lines:
                yield from line


if __name__ == "__main__":  # pragma: no cover
    from rich.console import Console
    from rich.syntax import Syntax
    from rich.text import Text

    code = """from rich.console import Console
console = Console()
text = Text.from_markup("Hello, [bold magenta]World[/]!")
console.print(text)"""

    text = Text.from_markup("Hello, [bold magenta]World[/]!")

    console = Console()

    console.rule("rich.Segment")
    console.print(
        "A Segment is the last step in the Rich render process before generating text with ANSI codes."
    )
    console.print("\nConsider the following code:\n")
    console.print(Syntax(code, "python", line_numbers=True))
    console.print()
    console.print(
        "When you call [b]print()[/b], Rich [i]renders[/i] the object in to the following:\n"
    )
    fragments = list(console.render(text))
    console.print(fragments)
    console.print()
    console.print("The Segments are then processed to produce the following output:\n")
    console.print(text)
    console.print(
        "\nYou will only need to know this if you are implementing your own Rich renderables."
    )



================================================
FILE: rich/spinner.py
================================================
from typing import TYPE_CHECKING, List, Optional, Union, cast

from ._spinners import SPINNERS
from .measure import Measurement
from .table import Table
from .text import Text

if TYPE_CHECKING:
    from .console import Console, ConsoleOptions, RenderableType, RenderResult
    from .style import StyleType


class Spinner:
    """A spinner animation.

    Args:
        name (str): Name of spinner (run python -m rich.spinner).
        text (RenderableType, optional): A renderable to display at the right of the spinner (str or Text typically). Defaults to "".
        style (StyleType, optional): Style for spinner animation. Defaults to None.
        speed (float, optional): Speed factor for animation. Defaults to 1.0.

    Raises:
        KeyError: If name isn't one of the supported spinner animations.
    """

    def __init__(
        self,
        name: str,
        text: "RenderableType" = "",
        *,
        style: Optional["StyleType"] = None,
        speed: float = 1.0,
    ) -> None:
        try:
            spinner = SPINNERS[name]
        except KeyError:
            raise KeyError(f"no spinner called {name!r}")
        self.text: "Union[RenderableType, Text]" = (
            Text.from_markup(text) if isinstance(text, str) else text
        )
        self.name = name
        self.frames = cast(List[str], spinner["frames"])[:]
        self.interval = cast(float, spinner["interval"])
        self.start_time: Optional[float] = None
        self.style = style
        self.speed = speed
        self.frame_no_offset: float = 0.0
        self._update_speed = 0.0

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        yield self.render(console.get_time())

    def __rich_measure__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> Measurement:
        text = self.render(0)
        return Measurement.get(console, options, text)

    def render(self, time: float) -> "RenderableType":
        """Render the spinner for a given time.

        Args:
            time (float): Time in seconds.

        Returns:
            RenderableType: A renderable containing animation frame.
        """
        if self.start_time is None:
            self.start_time = time

        frame_no = ((time - self.start_time) * self.speed) / (
            self.interval / 1000.0
        ) + self.frame_no_offset
        frame = Text(
            self.frames[int(frame_no) % len(self.frames)], style=self.style or ""
        )

        if self._update_speed:
            self.frame_no_offset = frame_no
            self.start_time = time
            self.speed = self._update_speed
            self._update_speed = 0.0

        if not self.text:
            return frame
        elif isinstance(self.text, (str, Text)):
            return Text.assemble(frame, " ", self.text)
        else:
            table = Table.grid(padding=1)
            table.add_row(frame, self.text)
            return table

    def update(
        self,
        *,
        text: "RenderableType" = "",
        style: Optional["StyleType"] = None,
        speed: Optional[float] = None,
    ) -> None:
        """Updates attributes of a spinner after it has been started.

        Args:
            text (RenderableType, optional): A renderable to display at the right of the spinner (str or Text typically). Defaults to "".
            style (StyleType, optional): Style for spinner animation. Defaults to None.
            speed (float, optional): Speed factor for animation. Defaults to None.
        """
        if text:
            self.text = Text.from_markup(text) if isinstance(text, str) else text
        if style:
            self.style = style
        if speed:
            self._update_speed = speed


if __name__ == "__main__":  # pragma: no cover
    from time import sleep

    from .console import Group
    from .live import Live

    all_spinners = Group(
        *[
            Spinner(spinner_name, text=Text(repr(spinner_name), style="green"))
            for spinner_name in sorted(SPINNERS.keys())
        ]
    )

    with Live(all_spinners, refresh_per_second=20) as live:
        while True:
            sleep(0.1)



================================================
FILE: rich/status.py
================================================
from types import TracebackType
from typing import Optional, Type

from .console import Console, RenderableType
from .jupyter import JupyterMixin
from .live import Live
from .spinner import Spinner
from .style import StyleType


class Status(JupyterMixin):
    """Displays a status indicator with a 'spinner' animation.

    Args:
        status (RenderableType): A status renderable (str or Text typically).
        console (Console, optional): Console instance to use, or None for global console. Defaults to None.
        spinner (str, optional): Name of spinner animation (see python -m rich.spinner). Defaults to "dots".
        spinner_style (StyleType, optional): Style of spinner. Defaults to "status.spinner".
        speed (float, optional): Speed factor for spinner animation. Defaults to 1.0.
        refresh_per_second (float, optional): Number of refreshes per second. Defaults to 12.5.
    """

    def __init__(
        self,
        status: RenderableType,
        *,
        console: Optional[Console] = None,
        spinner: str = "dots",
        spinner_style: StyleType = "status.spinner",
        speed: float = 1.0,
        refresh_per_second: float = 12.5,
    ):
        self.status = status
        self.spinner_style = spinner_style
        self.speed = speed
        self._spinner = Spinner(spinner, text=status, style=spinner_style, speed=speed)
        self._live = Live(
            self.renderable,
            console=console,
            refresh_per_second=refresh_per_second,
            transient=True,
        )

    @property
    def renderable(self) -> Spinner:
        return self._spinner

    @property
    def console(self) -> "Console":
        """Get the Console used by the Status objects."""
        return self._live.console

    def update(
        self,
        status: Optional[RenderableType] = None,
        *,
        spinner: Optional[str] = None,
        spinner_style: Optional[StyleType] = None,
        speed: Optional[float] = None,
    ) -> None:
        """Update status.

        Args:
            status (Optional[RenderableType], optional): New status renderable or None for no change. Defaults to None.
            spinner (Optional[str], optional): New spinner or None for no change. Defaults to None.
            spinner_style (Optional[StyleType], optional): New spinner style or None for no change. Defaults to None.
            speed (Optional[float], optional): Speed factor for spinner animation or None for no change. Defaults to None.
        """
        if status is not None:
            self.status = status
        if spinner_style is not None:
            self.spinner_style = spinner_style
        if speed is not None:
            self.speed = speed
        if spinner is not None:
            self._spinner = Spinner(
                spinner, text=self.status, style=self.spinner_style, speed=self.speed
            )
            self._live.update(self.renderable, refresh=True)
        else:
            self._spinner.update(
                text=self.status, style=self.spinner_style, speed=self.speed
            )

    def start(self) -> None:
        """Start the status animation."""
        self._live.start()

    def stop(self) -> None:
        """Stop the spinner animation."""
        self._live.stop()

    def __rich__(self) -> RenderableType:
        return self.renderable

    def __enter__(self) -> "Status":
        self.start()
        return self

    def __exit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc_val: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        self.stop()


if __name__ == "__main__":  # pragma: no cover
    from time import sleep

    from .console import Console

    console = Console()
    with console.status("[magenta]Covid detector booting up") as status:
        sleep(3)
        console.log("Importing advanced AI")
        sleep(3)
        console.log("Advanced Covid AI Ready")
        sleep(3)
        status.update(status="[bold blue] Scanning for Covid", spinner="earth")
        sleep(3)
        console.log("Found 10,000,000,000 copies of Covid32.exe")
        sleep(3)
        status.update(
            status="[bold red]Moving Covid32.exe to Trash",
            spinner="bouncingBall",
            spinner_style="yellow",
        )
        sleep(5)
    console.print("[bold green]Covid deleted successfully")



================================================
FILE: rich/style.py
================================================
import sys
from functools import lru_cache
from marshal import dumps, loads
from random import randint
from typing import Any, Dict, Iterable, List, Optional, Type, Union, cast

from . import errors
from .color import Color, ColorParseError, ColorSystem, blend_rgb
from .repr import Result, rich_repr
from .terminal_theme import DEFAULT_TERMINAL_THEME, TerminalTheme

# Style instances and style definitions are often interchangeable
StyleType = Union[str, "Style"]


class _Bit:
    """A descriptor to get/set a style attribute bit."""

    __slots__ = ["bit"]

    def __init__(self, bit_no: int) -> None:
        self.bit = 1 << bit_no

    def __get__(self, obj: "Style", objtype: Type["Style"]) -> Optional[bool]:
        if obj._set_attributes & self.bit:
            return obj._attributes & self.bit != 0
        return None


@rich_repr
class Style:
    """A terminal style.

    A terminal style consists of a color (`color`), a background color (`bgcolor`), and a number of attributes, such
    as bold, italic etc. The attributes have 3 states: they can either be on
    (``True``), off (``False``), or not set (``None``).

    Args:
        color (Union[Color, str], optional): Color of terminal text. Defaults to None.
        bgcolor (Union[Color, str], optional): Color of terminal background. Defaults to None.
        bold (bool, optional): Enable bold text. Defaults to None.
        dim (bool, optional): Enable dim text. Defaults to None.
        italic (bool, optional): Enable italic text. Defaults to None.
        underline (bool, optional): Enable underlined text. Defaults to None.
        blink (bool, optional): Enabled blinking text. Defaults to None.
        blink2 (bool, optional): Enable fast blinking text. Defaults to None.
        reverse (bool, optional): Enabled reverse text. Defaults to None.
        conceal (bool, optional): Enable concealed text. Defaults to None.
        strike (bool, optional): Enable strikethrough text. Defaults to None.
        underline2 (bool, optional): Enable doubly underlined text. Defaults to None.
        frame (bool, optional): Enable framed text. Defaults to None.
        encircle (bool, optional): Enable encircled text. Defaults to None.
        overline (bool, optional): Enable overlined text. Defaults to None.
        link (str, link): Link URL. Defaults to None.

    """

    _color: Optional[Color]
    _bgcolor: Optional[Color]
    _attributes: int
    _set_attributes: int
    _hash: Optional[int]
    _null: bool
    _meta: Optional[bytes]

    __slots__ = [
        "_color",
        "_bgcolor",
        "_attributes",
        "_set_attributes",
        "_link",
        "_link_id",
        "_ansi",
        "_style_definition",
        "_hash",
        "_null",
        "_meta",
    ]

    # maps bits on to SGR parameter
    _style_map = {
        0: "1",
        1: "2",
        2: "3",
        3: "4",
        4: "5",
        5: "6",
        6: "7",
        7: "8",
        8: "9",
        9: "21",
        10: "51",
        11: "52",
        12: "53",
    }

    STYLE_ATTRIBUTES = {
        "dim": "dim",
        "d": "dim",
        "bold": "bold",
        "b": "bold",
        "italic": "italic",
        "i": "italic",
        "underline": "underline",
        "u": "underline",
        "blink": "blink",
        "blink2": "blink2",
        "reverse": "reverse",
        "r": "reverse",
        "conceal": "conceal",
        "c": "conceal",
        "strike": "strike",
        "s": "strike",
        "underline2": "underline2",
        "uu": "underline2",
        "frame": "frame",
        "encircle": "encircle",
        "overline": "overline",
        "o": "overline",
    }

    def __init__(
        self,
        *,
        color: Optional[Union[Color, str]] = None,
        bgcolor: Optional[Union[Color, str]] = None,
        bold: Optional[bool] = None,
        dim: Optional[bool] = None,
        italic: Optional[bool] = None,
        underline: Optional[bool] = None,
        blink: Optional[bool] = None,
        blink2: Optional[bool] = None,
        reverse: Optional[bool] = None,
        conceal: Optional[bool] = None,
        strike: Optional[bool] = None,
        underline2: Optional[bool] = None,
        frame: Optional[bool] = None,
        encircle: Optional[bool] = None,
        overline: Optional[bool] = None,
        link: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
    ):
        self._ansi: Optional[str] = None
        self._style_definition: Optional[str] = None

        def _make_color(color: Union[Color, str]) -> Color:
            return color if isinstance(color, Color) else Color.parse(color)

        self._color = None if color is None else _make_color(color)
        self._bgcolor = None if bgcolor is None else _make_color(bgcolor)
        self._set_attributes = sum(
            (
                bold is not None,
                dim is not None and 2,
                italic is not None and 4,
                underline is not None and 8,
                blink is not None and 16,
                blink2 is not None and 32,
                reverse is not None and 64,
                conceal is not None and 128,
                strike is not None and 256,
                underline2 is not None and 512,
                frame is not None and 1024,
                encircle is not None and 2048,
                overline is not None and 4096,
            )
        )
        self._attributes = (
            sum(
                (
                    bold and 1 or 0,
                    dim and 2 or 0,
                    italic and 4 or 0,
                    underline and 8 or 0,
                    blink and 16 or 0,
                    blink2 and 32 or 0,
                    reverse and 64 or 0,
                    conceal and 128 or 0,
                    strike and 256 or 0,
                    underline2 and 512 or 0,
                    frame and 1024 or 0,
                    encircle and 2048 or 0,
                    overline and 4096 or 0,
                )
            )
            if self._set_attributes
            else 0
        )

        self._link = link
        self._meta = None if meta is None else dumps(meta)
        self._link_id = (
            f"{randint(0, 999999)}{hash(self._meta)}" if (link or meta) else ""
        )
        self._hash: Optional[int] = None
        self._null = not (self._set_attributes or color or bgcolor or link or meta)

    @classmethod
    def null(cls) -> "Style":
        """Create an 'null' style, equivalent to Style(), but more performant."""
        return NULL_STYLE

    @classmethod
    def from_color(
        cls, color: Optional[Color] = None, bgcolor: Optional[Color] = None
    ) -> "Style":
        """Create a new style with colors and no attributes.

        Returns:
            color (Optional[Color]): A (foreground) color, or None for no color. Defaults to None.
            bgcolor (Optional[Color]): A (background) color, or None for no color. Defaults to None.
        """
        style: Style = cls.__new__(Style)
        style._ansi = None
        style._style_definition = None
        style._color = color
        style._bgcolor = bgcolor
        style._set_attributes = 0
        style._attributes = 0
        style._link = None
        style._link_id = ""
        style._meta = None
        style._null = not (color or bgcolor)
        style._hash = None
        return style

    @classmethod
    def from_meta(cls, meta: Optional[Dict[str, Any]]) -> "Style":
        """Create a new style with meta data.

        Returns:
            meta (Optional[Dict[str, Any]]): A dictionary of meta data. Defaults to None.
        """
        style: Style = cls.__new__(Style)
        style._ansi = None
        style._style_definition = None
        style._color = None
        style._bgcolor = None
        style._set_attributes = 0
        style._attributes = 0
        style._link = None
        style._meta = dumps(meta)
        style._link_id = f"{randint(0, 999999)}{hash(style._meta)}"
        style._hash = None
        style._null = not (meta)
        return style

    @classmethod
    def on(cls, meta: Optional[Dict[str, Any]] = None, **handlers: Any) -> "Style":
        """Create a blank style with meta information.

        Example:
            style = Style.on(click=self.on_click)

        Args:
            meta (Optional[Dict[str, Any]], optional): An optional dict of meta information.
            **handlers (Any): Keyword arguments are translated in to handlers.

        Returns:
            Style: A Style with meta information attached.
        """
        meta = {} if meta is None else meta
        meta.update({f"@{key}": value for key, value in handlers.items()})
        return cls.from_meta(meta)

    bold = _Bit(0)
    dim = _Bit(1)
    italic = _Bit(2)
    underline = _Bit(3)
    blink = _Bit(4)
    blink2 = _Bit(5)
    reverse = _Bit(6)
    conceal = _Bit(7)
    strike = _Bit(8)
    underline2 = _Bit(9)
    frame = _Bit(10)
    encircle = _Bit(11)
    overline = _Bit(12)

    @property
    def link_id(self) -> str:
        """Get a link id, used in ansi code for links."""
        return self._link_id

    def __str__(self) -> str:
        """Re-generate style definition from attributes."""
        if self._style_definition is None:
            attributes: List[str] = []
            append = attributes.append
            bits = self._set_attributes
            if bits & 0b0000000001111:
                if bits & 1:
                    append("bold" if self.bold else "not bold")
                if bits & (1 << 1):
                    append("dim" if self.dim else "not dim")
                if bits & (1 << 2):
                    append("italic" if self.italic else "not italic")
                if bits & (1 << 3):
                    append("underline" if self.underline else "not underline")
            if bits & 0b0000111110000:
                if bits & (1 << 4):
                    append("blink" if self.blink else "not blink")
                if bits & (1 << 5):
                    append("blink2" if self.blink2 else "not blink2")
                if bits & (1 << 6):
                    append("reverse" if self.reverse else "not reverse")
                if bits & (1 << 7):
                    append("conceal" if self.conceal else "not conceal")
                if bits & (1 << 8):
                    append("strike" if self.strike else "not strike")
            if bits & 0b1111000000000:
                if bits & (1 << 9):
                    append("underline2" if self.underline2 else "not underline2")
                if bits & (1 << 10):
                    append("frame" if self.frame else "not frame")
                if bits & (1 << 11):
                    append("encircle" if self.encircle else "not encircle")
                if bits & (1 << 12):
                    append("overline" if self.overline else "not overline")
            if self._color is not None:
                append(self._color.name)
            if self._bgcolor is not None:
                append("on")
                append(self._bgcolor.name)
            if self._link:
                append("link")
                append(self._link)
            self._style_definition = " ".join(attributes) or "none"
        return self._style_definition

    def __bool__(self) -> bool:
        """A Style is false if it has no attributes, colors, or links."""
        return not self._null

    def _make_ansi_codes(self, color_system: ColorSystem) -> str:
        """Generate ANSI codes for this style.

        Args:
            color_system (ColorSystem): Color system.

        Returns:
            str: String containing codes.
        """

        if self._ansi is None:
            sgr: List[str] = []
            append = sgr.append
            _style_map = self._style_map
            attributes = self._attributes & self._set_attributes
            if attributes:
                if attributes & 1:
                    append(_style_map[0])
                if attributes & 2:
                    append(_style_map[1])
                if attributes & 4:
                    append(_style_map[2])
                if attributes & 8:
                    append(_style_map[3])
                if attributes & 0b0000111110000:
                    for bit in range(4, 9):
                        if attributes & (1 << bit):
                            append(_style_map[bit])
                if attributes & 0b1111000000000:
                    for bit in range(9, 13):
                        if attributes & (1 << bit):
                            append(_style_map[bit])
            if self._color is not None:
                sgr.extend(self._color.downgrade(color_system).get_ansi_codes())
            if self._bgcolor is not None:
                sgr.extend(
                    self._bgcolor.downgrade(color_system).get_ansi_codes(
                        foreground=False
                    )
                )
            self._ansi = ";".join(sgr)
        return self._ansi

    @classmethod
    @lru_cache(maxsize=1024)
    def normalize(cls, style: str) -> str:
        """Normalize a style definition so that styles with the same effect have the same string
        representation.

        Args:
            style (str): A style definition.

        Returns:
            str: Normal form of style definition.
        """
        try:
            return str(cls.parse(style))
        except errors.StyleSyntaxError:
            return style.strip().lower()

    @classmethod
    def pick_first(cls, *values: Optional[StyleType]) -> StyleType:
        """Pick first non-None style."""
        for value in values:
            if value is not None:
                return value
        raise ValueError("expected at least one non-None style")

    def __rich_repr__(self) -> Result:
        yield "color", self.color, None
        yield "bgcolor", self.bgcolor, None
        yield "bold", self.bold, None,
        yield "dim", self.dim, None,
        yield "italic", self.italic, None
        yield "underline", self.underline, None,
        yield "blink", self.blink, None
        yield "blink2", self.blink2, None
        yield "reverse", self.reverse, None
        yield "conceal", self.conceal, None
        yield "strike", self.strike, None
        yield "underline2", self.underline2, None
        yield "frame", self.frame, None
        yield "encircle", self.encircle, None
        yield "link", self.link, None
        if self._meta:
            yield "meta", self.meta

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, Style):
            return NotImplemented
        return self.__hash__() == other.__hash__()

    def __ne__(self, other: Any) -> bool:
        if not isinstance(other, Style):
            return NotImplemented
        return self.__hash__() != other.__hash__()

    def __hash__(self) -> int:
        if self._hash is not None:
            return self._hash
        self._hash = hash(
            (
                self._color,
                self._bgcolor,
                self._attributes,
                self._set_attributes,
                self._link,
                self._meta,
            )
        )
        return self._hash

    @property
    def color(self) -> Optional[Color]:
        """The foreground color or None if it is not set."""
        return self._color

    @property
    def bgcolor(self) -> Optional[Color]:
        """The background color or None if it is not set."""
        return self._bgcolor

    @property
    def link(self) -> Optional[str]:
        """Link text, if set."""
        return self._link

    @property
    def transparent_background(self) -> bool:
        """Check if the style specified a transparent background."""
        return self.bgcolor is None or self.bgcolor.is_default

    @property
    def background_style(self) -> "Style":
        """A Style with background only."""
        return Style(bgcolor=self.bgcolor)

    @property
    def meta(self) -> Dict[str, Any]:
        """Get meta information (can not be changed after construction)."""
        return {} if self._meta is None else cast(Dict[str, Any], loads(self._meta))

    @property
    def without_color(self) -> "Style":
        """Get a copy of the style with color removed."""
        if self._null:
            return NULL_STYLE
        style: Style = self.__new__(Style)
        style._ansi = None
        style._style_definition = None
        style._color = None
        style._bgcolor = None
        style._attributes = self._attributes
        style._set_attributes = self._set_attributes
        style._link = self._link
        style._link_id = f"{randint(0, 999999)}" if self._link else ""
        style._null = False
        style._meta = None
        style._hash = None
        return style

    @classmethod
    @lru_cache(maxsize=4096)
    def parse(cls, style_definition: str) -> "Style":
        """Parse a style definition.

        Args:
            style_definition (str): A string containing a style.

        Raises:
            errors.StyleSyntaxError: If the style definition syntax is invalid.

        Returns:
            `Style`: A Style instance.
        """
        if style_definition.strip() == "none" or not style_definition:
            return cls.null()

        STYLE_ATTRIBUTES = cls.STYLE_ATTRIBUTES
        color: Optional[str] = None
        bgcolor: Optional[str] = None
        attributes: Dict[str, Optional[Any]] = {}
        link: Optional[str] = None

        words = iter(style_definition.split())
        for original_word in words:
            word = original_word.lower()
            if word == "on":
                word = next(words, "")
                if not word:
                    raise errors.StyleSyntaxError("color expected after 'on'")
                try:
                    Color.parse(word)
                except ColorParseError as error:
                    raise errors.StyleSyntaxError(
                        f"unable to parse {word!r} as background color; {error}"
                    ) from None
                bgcolor = word

            elif word == "not":
                word = next(words, "")
                attribute = STYLE_ATTRIBUTES.get(word)
                if attribute is None:
                    raise errors.StyleSyntaxError(
                        f"expected style attribute after 'not', found {word!r}"
                    )
                attributes[attribute] = False

            elif word == "link":
                word = next(words, "")
                if not word:
                    raise errors.StyleSyntaxError("URL expected after 'link'")
                link = word

            elif word in STYLE_ATTRIBUTES:
                attributes[STYLE_ATTRIBUTES[word]] = True

            else:
                try:
                    Color.parse(word)
                except ColorParseError as error:
                    raise errors.StyleSyntaxError(
                        f"unable to parse {word!r} as color; {error}"
                    ) from None
                color = word
        style = Style(color=color, bgcolor=bgcolor, link=link, **attributes)
        return style

    @lru_cache(maxsize=1024)
    def get_html_style(self, theme: Optional[TerminalTheme] = None) -> str:
        """Get a CSS style rule."""
        theme = theme or DEFAULT_TERMINAL_THEME
        css: List[str] = []
        append = css.append

        color = self.color
        bgcolor = self.bgcolor
        if self.reverse:
            color, bgcolor = bgcolor, color
        if self.dim:
            foreground_color = (
                theme.foreground_color if color is None else color.get_truecolor(theme)
            )
            color = Color.from_triplet(
                blend_rgb(foreground_color, theme.background_color, 0.5)
            )
        if color is not None:
            theme_color = color.get_truecolor(theme)
            append(f"color: {theme_color.hex}")
            append(f"text-decoration-color: {theme_color.hex}")
        if bgcolor is not None:
            theme_color = bgcolor.get_truecolor(theme, foreground=False)
            append(f"background-color: {theme_color.hex}")
        if self.bold:
            append("font-weight: bold")
        if self.italic:
            append("font-style: italic")
        if self.underline:
            append("text-decoration: underline")
        if self.strike:
            append("text-decoration: line-through")
        if self.overline:
            append("text-decoration: overline")
        return "; ".join(css)

    @classmethod
    def combine(cls, styles: Iterable["Style"]) -> "Style":
        """Combine styles and get result.

        Args:
            styles (Iterable[Style]): Styles to combine.

        Returns:
            Style: A new style instance.
        """
        iter_styles = iter(styles)
        return sum(iter_styles, next(iter_styles))

    @classmethod
    def chain(cls, *styles: "Style") -> "Style":
        """Combine styles from positional argument in to a single style.

        Args:
            *styles (Iterable[Style]): Styles to combine.

        Returns:
            Style: A new style instance.
        """
        iter_styles = iter(styles)
        return sum(iter_styles, next(iter_styles))

    def copy(self) -> "Style":
        """Get a copy of this style.

        Returns:
            Style: A new Style instance with identical attributes.
        """
        if self._null:
            return NULL_STYLE
        style: Style = self.__new__(Style)
        style._ansi = self._ansi
        style._style_definition = self._style_definition
        style._color = self._color
        style._bgcolor = self._bgcolor
        style._attributes = self._attributes
        style._set_attributes = self._set_attributes
        style._link = self._link
        style._link_id = f"{randint(0, 999999)}" if self._link else ""
        style._hash = self._hash
        style._null = False
        style._meta = self._meta
        return style

    @lru_cache(maxsize=128)
    def clear_meta_and_links(self) -> "Style":
        """Get a copy of this style with link and meta information removed.

        Returns:
            Style: New style object.
        """
        if self._null:
            return NULL_STYLE
        style: Style = self.__new__(Style)
        style._ansi = self._ansi
        style._style_definition = self._style_definition
        style._color = self._color
        style._bgcolor = self._bgcolor
        style._attributes = self._attributes
        style._set_attributes = self._set_attributes
        style._link = None
        style._link_id = ""
        style._hash = None
        style._null = False
        style._meta = None
        return style

    def update_link(self, link: Optional[str] = None) -> "Style":
        """Get a copy with a different value for link.

        Args:
            link (str, optional): New value for link. Defaults to None.

        Returns:
            Style: A new Style instance.
        """
        style: Style = self.__new__(Style)
        style._ansi = self._ansi
        style._style_definition = self._style_definition
        style._color = self._color
        style._bgcolor = self._bgcolor
        style._attributes = self._attributes
        style._set_attributes = self._set_attributes
        style._link = link
        style._link_id = f"{randint(0, 999999)}" if link else ""
        style._hash = None
        style._null = False
        style._meta = self._meta
        return style

    def render(
        self,
        text: str = "",
        *,
        color_system: Optional[ColorSystem] = ColorSystem.TRUECOLOR,
        legacy_windows: bool = False,
    ) -> str:
        """Render the ANSI codes for the style.

        Args:
            text (str, optional): A string to style. Defaults to "".
            color_system (Optional[ColorSystem], optional): Color system to render to. Defaults to ColorSystem.TRUECOLOR.

        Returns:
            str: A string containing ANSI style codes.
        """
        if not text or color_system is None:
            return text
        attrs = self._ansi or self._make_ansi_codes(color_system)
        rendered = f"\x1b[{attrs}m{text}\x1b[0m" if attrs else text
        if self._link and not legacy_windows:
            rendered = (
                f"\x1b]8;id={self._link_id};{self._link}\x1b\\{rendered}\x1b]8;;\x1b\\"
            )
        return rendered

    def test(self, text: Optional[str] = None) -> None:
        """Write text with style directly to terminal.

        This method is for testing purposes only.

        Args:
            text (Optional[str], optional): Text to style or None for style name.

        """
        text = text or str(self)
        sys.stdout.write(f"{self.render(text)}\n")

    @lru_cache(maxsize=1024)
    def _add(self, style: Optional["Style"]) -> "Style":
        if style is None or style._null:
            return self
        if self._null:
            return style
        new_style: Style = self.__new__(Style)
        new_style._ansi = None
        new_style._style_definition = None
        new_style._color = style._color or self._color
        new_style._bgcolor = style._bgcolor or self._bgcolor
        new_style._attributes = (self._attributes & ~style._set_attributes) | (
            style._attributes & style._set_attributes
        )
        new_style._set_attributes = self._set_attributes | style._set_attributes
        new_style._link = style._link or self._link
        new_style._link_id = style._link_id or self._link_id
        new_style._null = style._null
        if self._meta and style._meta:
            new_style._meta = dumps({**self.meta, **style.meta})
        else:
            new_style._meta = self._meta or style._meta
        new_style._hash = None
        return new_style

    def __add__(self, style: Optional["Style"]) -> "Style":
        combined_style = self._add(style)
        return combined_style.copy() if combined_style.link else combined_style


NULL_STYLE = Style()


class StyleStack:
    """A stack of styles."""

    __slots__ = ["_stack"]

    def __init__(self, default_style: "Style") -> None:
        self._stack: List[Style] = [default_style]

    def __repr__(self) -> str:
        return f"<stylestack {self._stack!r}>"

    @property
    def current(self) -> Style:
        """Get the Style at the top of the stack."""
        return self._stack[-1]

    def push(self, style: Style) -> None:
        """Push a new style on to the stack.

        Args:
            style (Style): New style to combine with current style.
        """
        self._stack.append(self._stack[-1] + style)

    def pop(self) -> Style:
        """Pop last style and discard.

        Returns:
            Style: New current style (also available as stack.current)
        """
        self._stack.pop()
        return self._stack[-1]



================================================
FILE: rich/styled.py
================================================
from typing import TYPE_CHECKING

from .measure import Measurement
from .segment import Segment
from .style import StyleType

if TYPE_CHECKING:
    from .console import Console, ConsoleOptions, RenderResult, RenderableType


class Styled:
    """Apply a style to a renderable.

    Args:
        renderable (RenderableType): Any renderable.
        style (StyleType): A style to apply across the entire renderable.
    """

    def __init__(self, renderable: "RenderableType", style: "StyleType") -> None:
        self.renderable = renderable
        self.style = style

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        style = console.get_style(self.style)
        rendered_segments = console.render(self.renderable, options)
        segments = Segment.apply_style(rendered_segments, style)
        return segments

    def __rich_measure__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> Measurement:
        return Measurement.get(console, options, self.renderable)


if __name__ == "__main__":  # pragma: no cover
    from rich import print
    from rich.panel import Panel

    panel = Styled(Panel("hello"), "on blue")
    print(panel)



================================================
FILE: rich/syntax.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xb1 in position 28472: illegal multibyte sequence


================================================
FILE: rich/table.py
================================================
from dataclasses import dataclass, field, replace
from typing import (
    TYPE_CHECKING,
    Dict,
    Iterable,
    List,
    NamedTuple,
    Optional,
    Sequence,
    Tuple,
    Union,
)

from . import box, errors
from ._loop import loop_first_last, loop_last
from ._pick import pick_bool
from ._ratio import ratio_distribute, ratio_reduce
from .align import VerticalAlignMethod
from .jupyter import JupyterMixin
from .measure import Measurement
from .padding import Padding, PaddingDimensions
from .protocol import is_renderable
from .segment import Segment
from .style import Style, StyleType
from .text import Text, TextType

if TYPE_CHECKING:
    from .console import (
        Console,
        ConsoleOptions,
        JustifyMethod,
        OverflowMethod,
        RenderableType,
        RenderResult,
    )


@dataclass
class Column:
    """Defines a column within a ~Table.

    Args:
        title (Union[str, Text], optional): The title of the table rendered at the top. Defaults to None.
        caption (Union[str, Text], optional): The table caption rendered below. Defaults to None.
        width (int, optional): The width in characters of the table, or ``None`` to automatically fit. Defaults to None.
        min_width (Optional[int], optional): The minimum width of the table, or ``None`` for no minimum. Defaults to None.
        box (box.Box, optional): One of the constants in box.py used to draw the edges (see :ref:`appendix_box`), or ``None`` for no box lines. Defaults to box.HEAVY_HEAD.
        safe_box (Optional[bool], optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.
        padding (PaddingDimensions, optional): Padding for cells (top, right, bottom, left). Defaults to (0, 1).
        collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to False.
        pad_edge (bool, optional): Enable padding of edge cells. Defaults to True.
        expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.
        show_header (bool, optional): Show a header row. Defaults to True.
        show_footer (bool, optional): Show a footer row. Defaults to False.
        show_edge (bool, optional): Draw a box around the outside of the table. Defaults to True.
        show_lines (bool, optional): Draw lines between every row. Defaults to False.
        leading (int, optional): Number of blank lines between rows (precludes ``show_lines``). Defaults to 0.
        style (Union[str, Style], optional): Default style for the table. Defaults to "none".
        row_styles (List[Union, str], optional): Optional list of row styles, if more than one style is given then the styles will alternate. Defaults to None.
        header_style (Union[str, Style], optional): Style of the header. Defaults to "table.header".
        footer_style (Union[str, Style], optional): Style of the footer. Defaults to "table.footer".
        border_style (Union[str, Style], optional): Style of the border. Defaults to None.
        title_style (Union[str, Style], optional): Style of the title. Defaults to None.
        caption_style (Union[str, Style], optional): Style of the caption. Defaults to None.
        title_justify (str, optional): Justify method for title. Defaults to "center".
        caption_justify (str, optional): Justify method for caption. Defaults to "center".
        highlight (bool, optional): Highlight cell contents (if str). Defaults to False.
    """

    header: "RenderableType" = ""
    """RenderableType: Renderable for the header (typically a string)"""

    footer: "RenderableType" = ""
    """RenderableType: Renderable for the footer (typically a string)"""

    header_style: StyleType = ""
    """StyleType: The style of the header."""

    footer_style: StyleType = ""
    """StyleType: The style of the footer."""

    style: StyleType = ""
    """StyleType: The style of the column."""

    justify: "JustifyMethod" = "left"
    """str: How to justify text within the column ("left", "center", "right", or "full")"""

    vertical: "VerticalAlignMethod" = "top"
    """str: How to vertically align content ("top", "middle", or "bottom")"""

    overflow: "OverflowMethod" = "ellipsis"
    """str: Overflow method."""

    width: Optional[int] = None
    """Optional[int]: Width of the column, or ``None`` (default) to auto calculate width."""

    min_width: Optional[int] = None
    """Optional[int]: Minimum width of column, or ``None`` for no minimum. Defaults to None."""

    max_width: Optional[int] = None
    """Optional[int]: Maximum width of column, or ``None`` for no maximum. Defaults to None."""

    ratio: Optional[int] = None
    """Optional[int]: Ratio to use when calculating column width, or ``None`` (default) to adapt to column contents."""

    no_wrap: bool = False
    """bool: Prevent wrapping of text within the column. Defaults to ``False``."""

    highlight: bool = False
    """bool: Apply highlighter to column. Defaults to ``False``."""

    _index: int = 0
    """Index of column."""

    _cells: List["RenderableType"] = field(default_factory=list)

    def copy(self) -> "Column":
        """Return a copy of this Column."""
        return replace(self, _cells=[])

    @property
    def cells(self) -> Iterable["RenderableType"]:
        """Get all cells in the column, not including header."""
        yield from self._cells

    @property
    def flexible(self) -> bool:
        """Check if this column is flexible."""
        return self.ratio is not None


@dataclass
class Row:
    """Information regarding a row."""

    style: Optional[StyleType] = None
    """Style to apply to row."""

    end_section: bool = False
    """Indicated end of section, which will force a line beneath the row."""


class _Cell(NamedTuple):
    """A single cell in a table."""

    style: StyleType
    """Style to apply to cell."""
    renderable: "RenderableType"
    """Cell renderable."""
    vertical: VerticalAlignMethod
    """Cell vertical alignment."""


class Table(JupyterMixin):
    """A console renderable to draw a table.

    Args:
        *headers (Union[Column, str]): Column headers, either as a string, or :class:`~rich.table.Column` instance.
        title (Union[str, Text], optional): The title of the table rendered at the top. Defaults to None.
        caption (Union[str, Text], optional): The table caption rendered below. Defaults to None.
        width (int, optional): The width in characters of the table, or ``None`` to automatically fit. Defaults to None.
        min_width (Optional[int], optional): The minimum width of the table, or ``None`` for no minimum. Defaults to None.
        box (box.Box, optional): One of the constants in box.py used to draw the edges (see :ref:`appendix_box`), or ``None`` for no box lines. Defaults to box.HEAVY_HEAD.
        safe_box (Optional[bool], optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.
        padding (PaddingDimensions, optional): Padding for cells (top, right, bottom, left). Defaults to (0, 1).
        collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to False.
        pad_edge (bool, optional): Enable padding of edge cells. Defaults to True.
        expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.
        show_header (bool, optional): Show a header row. Defaults to True.
        show_footer (bool, optional): Show a footer row. Defaults to False.
        show_edge (bool, optional): Draw a box around the outside of the table. Defaults to True.
        show_lines (bool, optional): Draw lines between every row. Defaults to False.
        leading (int, optional): Number of blank lines between rows (precludes ``show_lines``). Defaults to 0.
        style (Union[str, Style], optional): Default style for the table. Defaults to "none".
        row_styles (List[Union, str], optional): Optional list of row styles, if more than one style is given then the styles will alternate. Defaults to None.
        header_style (Union[str, Style], optional): Style of the header. Defaults to "table.header".
        footer_style (Union[str, Style], optional): Style of the footer. Defaults to "table.footer".
        border_style (Union[str, Style], optional): Style of the border. Defaults to None.
        title_style (Union[str, Style], optional): Style of the title. Defaults to None.
        caption_style (Union[str, Style], optional): Style of the caption. Defaults to None.
        title_justify (str, optional): Justify method for title. Defaults to "center".
        caption_justify (str, optional): Justify method for caption. Defaults to "center".
        highlight (bool, optional): Highlight cell contents (if str). Defaults to False.
    """

    columns: List[Column]
    rows: List[Row]

    def __init__(
        self,
        *headers: Union[Column, str],
        title: Optional[TextType] = None,
        caption: Optional[TextType] = None,
        width: Optional[int] = None,
        min_width: Optional[int] = None,
        box: Optional[box.Box] = box.HEAVY_HEAD,
        safe_box: Optional[bool] = None,
        padding: PaddingDimensions = (0, 1),
        collapse_padding: bool = False,
        pad_edge: bool = True,
        expand: bool = False,
        show_header: bool = True,
        show_footer: bool = False,
        show_edge: bool = True,
        show_lines: bool = False,
        leading: int = 0,
        style: StyleType = "none",
        row_styles: Optional[Iterable[StyleType]] = None,
        header_style: Optional[StyleType] = "table.header",
        footer_style: Optional[StyleType] = "table.footer",
        border_style: Optional[StyleType] = None,
        title_style: Optional[StyleType] = None,
        caption_style: Optional[StyleType] = None,
        title_justify: "JustifyMethod" = "center",
        caption_justify: "JustifyMethod" = "center",
        highlight: bool = False,
    ) -> None:
        self.columns: List[Column] = []
        self.rows: List[Row] = []
        self.title = title
        self.caption = caption
        self.width = width
        self.min_width = min_width
        self.box = box
        self.safe_box = safe_box
        self._padding = Padding.unpack(padding)
        self.pad_edge = pad_edge
        self._expand = expand
        self.show_header = show_header
        self.show_footer = show_footer
        self.show_edge = show_edge
        self.show_lines = show_lines
        self.leading = leading
        self.collapse_padding = collapse_padding
        self.style = style
        self.header_style = header_style or ""
        self.footer_style = footer_style or ""
        self.border_style = border_style
        self.title_style = title_style
        self.caption_style = caption_style
        self.title_justify: "JustifyMethod" = title_justify
        self.caption_justify: "JustifyMethod" = caption_justify
        self.highlight = highlight
        self.row_styles: Sequence[StyleType] = list(row_styles or [])
        append_column = self.columns.append
        for header in headers:
            if isinstance(header, str):
                self.add_column(header=header)
            else:
                header._index = len(self.columns)
                append_column(header)

    @classmethod
    def grid(
        cls,
        *headers: Union[Column, str],
        padding: PaddingDimensions = 0,
        collapse_padding: bool = True,
        pad_edge: bool = False,
        expand: bool = False,
    ) -> "Table":
        """Get a table with no lines, headers, or footer.

        Args:
            *headers (Union[Column, str]): Column headers, either as a string, or :class:`~rich.table.Column` instance.
            padding (PaddingDimensions, optional): Get padding around cells. Defaults to 0.
            collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to True.
            pad_edge (bool, optional): Enable padding around edges of table. Defaults to False.
            expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.

        Returns:
            Table: A table instance.
        """
        return cls(
            *headers,
            box=None,
            padding=padding,
            collapse_padding=collapse_padding,
            show_header=False,
            show_footer=False,
            show_edge=False,
            pad_edge=pad_edge,
            expand=expand,
        )

    @property
    def expand(self) -> bool:
        """Setting a non-None self.width implies expand."""
        return self._expand or self.width is not None

    @expand.setter
    def expand(self, expand: bool) -> None:
        """Set expand."""
        self._expand = expand

    @property
    def _extra_width(self) -> int:
        """Get extra width to add to cell content."""
        width = 0
        if self.box and self.show_edge:
            width += 2
        if self.box:
            width += len(self.columns) - 1
        return width

    @property
    def row_count(self) -> int:
        """Get the current number of rows."""
        return len(self.rows)

    def get_row_style(self, console: "Console", index: int) -> StyleType:
        """Get the current row style."""
        style = Style.null()
        if self.row_styles:
            style += console.get_style(self.row_styles[index % len(self.row_styles)])
        row_style = self.rows[index].style
        if row_style is not None:
            style += console.get_style(row_style)
        return style

    def __rich_measure__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> Measurement:
        max_width = options.max_width
        if self.width is not None:
            max_width = self.width
        if max_width < 0:
            return Measurement(0, 0)

        extra_width = self._extra_width
        max_width = sum(
            self._calculate_column_widths(
                console, options.update_width(max_width - extra_width)
            )
        )
        _measure_column = self._measure_column

        measurements = [
            _measure_column(console, options.update_width(max_width), column)
            for column in self.columns
        ]
        minimum_width = (
            sum(measurement.minimum for measurement in measurements) + extra_width
        )
        maximum_width = (
            sum(measurement.maximum for measurement in measurements) + extra_width
            if (self.width is None)
            else self.width
        )
        measurement = Measurement(minimum_width, maximum_width)
        measurement = measurement.clamp(self.min_width)
        return measurement

    @property
    def padding(self) -> Tuple[int, int, int, int]:
        """Get cell padding."""
        return self._padding

    @padding.setter
    def padding(self, padding: PaddingDimensions) -> "Table":
        """Set cell padding."""
        self._padding = Padding.unpack(padding)
        return self

    def add_column(
        self,
        header: "RenderableType" = "",
        footer: "RenderableType" = "",
        *,
        header_style: Optional[StyleType] = None,
        highlight: Optional[bool] = None,
        footer_style: Optional[StyleType] = None,
        style: Optional[StyleType] = None,
        justify: "JustifyMethod" = "left",
        vertical: "VerticalAlignMethod" = "top",
        overflow: "OverflowMethod" = "ellipsis",
        width: Optional[int] = None,
        min_width: Optional[int] = None,
        max_width: Optional[int] = None,
        ratio: Optional[int] = None,
        no_wrap: bool = False,
    ) -> None:
        """Add a column to the table.

        Args:
            header (RenderableType, optional): Text or renderable for the header.
                Defaults to "".
            footer (RenderableType, optional): Text or renderable for the footer.
                Defaults to "".
            header_style (Union[str, Style], optional): Style for the header, or None for default. Defaults to None.
            highlight (bool, optional): Whether to highlight the text. The default of None uses the value of the table (self) object.
            footer_style (Union[str, Style], optional): Style for the footer, or None for default. Defaults to None.
            style (Union[str, Style], optional): Style for the column cells, or None for default. Defaults to None.
            justify (JustifyMethod, optional): Alignment for cells. Defaults to "left".
            vertical (VerticalAlignMethod, optional): Vertical alignment, one of "top", "middle", or "bottom". Defaults to "top".
            overflow (OverflowMethod): Overflow method: "crop", "fold", "ellipsis". Defaults to "ellipsis".
            width (int, optional): Desired width of column in characters, or None to fit to contents. Defaults to None.
            min_width (Optional[int], optional): Minimum width of column, or ``None`` for no minimum. Defaults to None.
            max_width (Optional[int], optional): Maximum width of column, or ``None`` for no maximum. Defaults to None.
            ratio (int, optional): Flexible ratio for the column (requires ``Table.expand`` or ``Table.width``). Defaults to None.
            no_wrap (bool, optional): Set to ``True`` to disable wrapping of this column.
        """

        column = Column(
            _index=len(self.columns),
            header=header,
            footer=footer,
            header_style=header_style or "",
            highlight=highlight if highlight is not None else self.highlight,
            footer_style=footer_style or "",
            style=style or "",
            justify=justify,
            vertical=vertical,
            overflow=overflow,
            width=width,
            min_width=min_width,
            max_width=max_width,
            ratio=ratio,
            no_wrap=no_wrap,
        )
        self.columns.append(column)

    def add_row(
        self,
        *renderables: Optional["RenderableType"],
        style: Optional[StyleType] = None,
        end_section: bool = False,
    ) -> None:
        """Add a row of renderables.

        Args:
            *renderables (None or renderable): Each cell in a row must be a renderable object (including str),
                or ``None`` for a blank cell.
            style (StyleType, optional): An optional style to apply to the entire row. Defaults to None.
            end_section (bool, optional): End a section and draw a line. Defaults to False.

        Raises:
            errors.NotRenderableError: If you add something that can't be rendered.
        """

        def add_cell(column: Column, renderable: "RenderableType") -> None:
            column._cells.append(renderable)

        cell_renderables: List[Optional["RenderableType"]] = list(renderables)

        columns = self.columns
        if len(cell_renderables) < len(columns):
            cell_renderables = [
                *cell_renderables,
                *[None] * (len(columns) - len(cell_renderables)),
            ]
        for index, renderable in enumerate(cell_renderables):
            if index == len(columns):
                column = Column(_index=index, highlight=self.highlight)
                for _ in self.rows:
                    add_cell(column, Text(""))
                self.columns.append(column)
            else:
                column = columns[index]
            if renderable is None:
                add_cell(column, "")
            elif is_renderable(renderable):
                add_cell(column, renderable)
            else:
                raise errors.NotRenderableError(
                    f"unable to render {type(renderable).__name__}; a string or other renderable object is required"
                )
        self.rows.append(Row(style=style, end_section=end_section))

    def add_section(self) -> None:
        """Add a new section (draw a line after current row)."""

        if self.rows:
            self.rows[-1].end_section = True

    def __rich_console__(
        self, console: "Console", options: "ConsoleOptions"
    ) -> "RenderResult":
        if not self.columns:
            yield Segment("\n")
            return

        max_width = options.max_width
        if self.width is not None:
            max_width = self.width

        extra_width = self._extra_width
        widths = self._calculate_column_widths(
            console, options.update_width(max_width - extra_width)
        )
        table_width = sum(widths) + extra_width

        render_options = options.update(
            width=table_width, highlight=self.highlight, height=None
        )

        def render_annotation(
            text: TextType, style: StyleType, justify: "JustifyMethod" = "center"
        ) -> "RenderResult":
            render_text = (
                console.render_str(text, style=style, highlight=False)
                if isinstance(text, str)
                else text
            )
            return console.render(
                render_text, options=render_options.update(justify=justify)
            )

        if self.title:
            yield from render_annotation(
                self.title,
                style=Style.pick_first(self.title_style, "table.title"),
                justify=self.title_justify,
            )
        yield from self._render(console, render_options, widths)
        if self.caption:
            yield from render_annotation(
                self.caption,
                style=Style.pick_first(self.caption_style, "table.caption"),
                justify=self.caption_justify,
            )

    def _calculate_column_widths(
        self, console: "Console", options: "ConsoleOptions"
    ) -> List[int]:
        """Calculate the widths of each column, including padding, not including borders."""
        max_width = options.max_width
        columns = self.columns
        width_ranges = [
            self._measure_column(console, options, column) for column in columns
        ]
        widths = [_range.maximum or 1 for _range in width_ranges]
        get_padding_width = self._get_padding_width
        extra_width = self._extra_width
        if self.expand:
            ratios = [col.ratio or 0 for col in columns if col.flexible]
            if any(ratios):
                fixed_widths = [
                    0 if column.flexible else _range.maximum
                    for _range, column in zip(width_ranges, columns)
                ]
                flex_minimum = [
                    (column.width or 1) + get_padding_width(column._index)
                    for column in columns
                    if column.flexible
                ]
                flexible_width = max_width - sum(fixed_widths)
                flex_widths = ratio_distribute(flexible_width, ratios, flex_minimum)
                iter_flex_widths = iter(flex_widths)
                for index, column in enumerate(columns):
                    if column.flexible:
                        widths[index] = fixed_widths[index] + next(iter_flex_widths)
        table_width = sum(widths)

        if table_width > max_width:
            widths = self._collapse_widths(
                widths,
                [(column.width is None and not column.no_wrap) for column in columns],
                max_width,
            )
            table_width = sum(widths)
            # last resort, reduce columns evenly
            if table_width > max_width:
                excess_width = table_width - max_width
                widths = ratio_reduce(excess_width, [1] * len(widths), widths, widths)
                table_width = sum(widths)

            width_ranges = [
                self._measure_column(console, options.update_width(width), column)
                for width, column in zip(widths, columns)
            ]
            widths = [_range.maximum or 0 for _range in width_ranges]

        if (table_width < max_width and self.expand) or (
            self.min_width is not None and table_width < (self.min_width - extra_width)
        ):
            _max_width = (
                max_width
                if self.min_width is None
                else min(self.min_width - extra_width, max_width)
            )
            pad_widths = ratio_distribute(_max_width - table_width, widths)
            widths = [_width + pad for _width, pad in zip(widths, pad_widths)]

        return widths

    @classmethod
    def _collapse_widths(
        cls, widths: List[int], wrapable: List[bool], max_width: int
    ) -> List[int]:
        """Reduce widths so that the total is under max_width.

        Args:
            widths (List[int]): List of widths.
            wrapable (List[bool]): List of booleans that indicate if a column may shrink.
            max_width (int): Maximum width to reduce to.

        Returns:
            List[int]: A new list of widths.
        """
        total_width = sum(widths)
        excess_width = total_width - max_width
        if any(wrapable):
            while total_width and excess_width > 0:
                max_column = max(
                    width for width, allow_wrap in zip(widths, wrapable) if allow_wrap
                )
                second_max_column = max(
                    width if allow_wrap and width != max_column else 0
                    for width, allow_wrap in zip(widths, wrapable)
                )
                column_difference = max_column - second_max_column
                ratios = [
                    (1 if (width == max_column and allow_wrap) else 0)
                    for width, allow_wrap in zip(widths, wrapable)
                ]
                if not any(ratios) or not column_difference:
                    break
                max_reduce = [min(excess_width, column_difference)] * len(widths)
                widths = ratio_reduce(excess_width, ratios, max_reduce, widths)

                total_width = sum(widths)
                excess_width = total_width - max_width
        return widths

    def _get_cells(
        self, console: "Console", column_index: int, column: Column
    ) -> Iterable[_Cell]:
        """Get all the cells with padding and optional header."""

        collapse_padding = self.collapse_padding
        pad_edge = self.pad_edge
        padding = self.padding
        any_padding = any(padding)

        first_column = column_index == 0
        last_column = column_index == len(self.columns) - 1

        _padding_cache: Dict[Tuple[bool, bool], Tuple[int, int, int, int]] = {}

        def get_padding(first_row: bool, last_row: bool) -> Tuple[int, int, int, int]:
            cached = _padding_cache.get((first_row, last_row))
            if cached:
                return cached
            top, right, bottom, left = padding

            if collapse_padding:
                if not first_column:
                    left = max(0, left - right)
                if not last_row:
                    bottom = max(0, top - bottom)

            if not pad_edge:
                if first_column:
                    left = 0
                if last_column:
                    right = 0
                if first_row:
                    top = 0
                if last_row:
                    bottom = 0
            _padding = (top, right, bottom, left)
            _padding_cache[(first_row, last_row)] = _padding
            return _padding

        raw_cells: List[Tuple[StyleType, "RenderableType"]] = []
        _append = raw_cells.append
        get_style = console.get_style
        if self.show_header:
            header_style = get_style(self.header_style or "") + get_style(
                column.header_style
            )
            _append((header_style, column.header))
        cell_style = get_style(column.style or "")
        for cell in column.cells:
            _append((cell_style, cell))
        if self.show_footer:
            footer_style = get_style(self.footer_style or "") + get_style(
                column.footer_style
            )
            _append((footer_style, column.footer))

        if any_padding:
            _Padding = Padding
            for first, last, (style, renderable) in loop_first_last(raw_cells):
                yield _Cell(
                    style,
                    _Padding(renderable, get_padding(first, last)),
                    getattr(renderable, "vertical", None) or column.vertical,
                )
        else:
            for style, renderable in raw_cells:
                yield _Cell(
                    style,
                    renderable,
                    getattr(renderable, "vertical", None) or column.vertical,
                )

    def _get_padding_width(self, column_index: int) -> int:
        """Get extra width from padding."""
        _, pad_right, _, pad_left = self.padding
        if self.collapse_padding:
            if column_index > 0:
                pad_left = max(0, pad_left - pad_right)
        return pad_left + pad_right

    def _measure_column(
        self,
        console: "Console",
        options: "ConsoleOptions",
        column: Column,
    ) -> Measurement:
        """Get the minimum and maximum width of the column."""

        max_width = options.max_width
        if max_width < 1:
            return Measurement(0, 0)

        padding_width = self._get_padding_width(column._index)

        if column.width is not None:
            # Fixed width column
            return Measurement(
                column.width + padding_width, column.width + padding_width
            ).with_maximum(max_width)
        # Flexible column, we need to measure contents
        min_widths: List[int] = []
        max_widths: List[int] = []
        append_min = min_widths.append
        append_max = max_widths.append
        get_render_width = Measurement.get
        for cell in self._get_cells(console, column._index, column):
            _min, _max = get_render_width(console, options, cell.renderable)
            append_min(_min)
            append_max(_max)

        measurement = Measurement(
            max(min_widths) if min_widths else 1,
            max(max_widths) if max_widths else max_width,
        ).with_maximum(max_width)
        measurement = measurement.clamp(
            None if column.min_width is None else column.min_width + padding_width,
            None if column.max_width is None else column.max_width + padding_width,
        )
        return measurement

    def _render(
        self, console: "Console", options: "ConsoleOptions", widths: List[int]
    ) -> "RenderResult":
        table_style = console.get_style(self.style or "")

        border_style = table_style + console.get_style(self.border_style or "")
        _column_cells = (
            self._get_cells(console, column_index, column)
            for column_index, column in enumerate(self.columns)
        )
        row_cells: List[Tuple[_Cell, ...]] = list(zip(*_column_cells))
        _box = (
            self.box.substitute(
                options, safe=pick_bool(self.safe_box, console.safe_box)
            )
            if self.box
            else None
        )
        _box = _box.get_plain_headed_box() if _box and not self.show_header else _box

        new_line = Segment.line()

        columns = self.columns
        show_header = self.show_header
        show_footer = self.show_footer
        show_edge = self.show_edge
        show_lines = self.show_lines
        leading = self.leading

        _Segment = Segment
        if _box:
            box_segments = [
                (
                    _Segment(_box.head_left, border_style),
                    _Segment(_box.head_right, border_style),
                    _Segment(_box.head_vertical, border_style),
                ),
                (
                    _Segment(_box.mid_left, border_style),
                    _Segment(_box.mid_right, border_style),
                    _Segment(_box.mid_vertical, border_style),
                ),
                (
                    _Segment(_box.foot_left, border_style),
                    _Segment(_box.foot_right, border_style),
                    _Segment(_box.foot_vertical, border_style),
                ),
            ]
            if show_edge:
                yield _Segment(_box.get_top(widths), border_style)
                yield new_line
        else:
            box_segments = []

        get_row_style = self.get_row_style
        get_style = console.get_style

        for index, (first, last, row_cell) in enumerate(loop_first_last(row_cells)):
            header_row = first and show_header
            footer_row = last and show_footer
            row = (
                self.rows[index - show_header]
                if (not header_row and not footer_row)
                else None
            )
            max_height = 1
            cells: List[List[List[Segment]]] = []
            if header_row or footer_row:
                row_style = Style.null()
            else:
                row_style = get_style(
                    get_row_style(console, index - 1 if show_header else index)
                )
            for width, cell, column in zip(widths, row_cell, columns):
                render_options = options.update(
                    width=width,
                    justify=column.justify,
                    no_wrap=column.no_wrap,
                    overflow=column.overflow,
                    height=None,
                    highlight=column.highlight,
                )
                lines = console.render_lines(
                    cell.renderable,
                    render_options,
                    style=get_style(cell.style) + row_style,
                )
                max_height = max(max_height, len(lines))
                cells.append(lines)

            row_height = max(len(cell) for cell in cells)

            def align_cell(
                cell: List[List[Segment]],
                vertical: "VerticalAlignMethod",
                width: int,
                style: Style,
            ) -> List[List[Segment]]:
                if header_row:
                    vertical = "bottom"
                elif footer_row:
                    vertical = "top"

                if vertical == "top":
                    return _Segment.align_top(cell, width, row_height, style)
                elif vertical == "middle":
                    return _Segment.align_middle(cell, width, row_height, style)
                return _Segment.align_bottom(cell, width, row_height, style)

            cells[:] = [
                _Segment.set_shape(
                    align_cell(
                        cell,
                        _cell.vertical,
                        width,
                        get_style(_cell.style) + row_style,
                    ),
                    width,
                    max_height,
                )
                for width, _cell, cell, column in zip(widths, row_cell, cells, columns)
            ]

            if _box:
                if last and show_footer:
                    yield _Segment(
                        _box.get_row(widths, "foot", edge=show_edge), border_style
                    )
                    yield new_line
                left, right, _divider = box_segments[0 if first else (2 if last else 1)]

                # If the column divider is whitespace also style it with the row background
                divider = (
                    _divider
                    if _divider.text.strip()
                    else _Segment(
                        _divider.text, row_style.background_style + _divider.style
                    )
                )
                for line_no in range(max_height):
                    if show_edge:
                        yield left
                    for last_cell, rendered_cell in loop_last(cells):
                        yield from rendered_cell[line_no]
                        if not last_cell:
                            yield divider
                    if show_edge:
                        yield right
                    yield new_line
            else:
                for line_no in range(max_height):
                    for rendered_cell in cells:
                        yield from rendered_cell[line_no]
                    yield new_line
            if _box and first and show_header:
                yield _Segment(
                    _box.get_row(widths, "head", edge=show_edge), border_style
                )
                yield new_line
            end_section = row and row.end_section
            if _box and (show_lines or leading or end_section):
                if (
                    not last
                    and not (show_footer and index >= len(row_cells) - 2)
                    and not (show_header and header_row)
                ):
                    if leading:
                        yield _Segment(
                            _box.get_row(widths, "mid", edge=show_edge) * leading,
                            border_style,
                        )
                    else:
                        yield _Segment(
                            _box.get_row(widths, "row", edge=show_edge), border_style
                        )
                    yield new_line

        if _box and show_edge:
            yield _Segment(_box.get_bottom(widths), border_style)
            yield new_line


if __name__ == "__main__":  # pragma: no cover
    from rich.console import Console
    from rich.highlighter import ReprHighlighter

    from ._timer import timer

    with timer("Table render"):
        table = Table(
            title="Star Wars Movies",
            caption="Rich example table",
            caption_justify="right",
        )

        table.add_column(
            "Released", header_style="bright_cyan", style="cyan", no_wrap=True
        )
        table.add_column("Title", style="magenta")
        table.add_column("Box Office", justify="right", style="green")

        table.add_row(
            "Dec 20, 2019",
            "Star Wars: The Rise of Skywalker",
            "$952,110,690",
        )
        table.add_row("May 25, 2018", "Solo: A Star Wars Story", "$393,151,347")
        table.add_row(
            "Dec 15, 2017",
            "Star Wars Ep. V111: The Last Jedi",
            "$1,332,539,889",
            style="on black",
            end_section=True,
        )
        table.add_row(
            "Dec 16, 2016",
            "Rogue One: A Star Wars Story",
            "$1,332,439,889",
        )

        def header(text: str) -> None:
            console.print()
            console.rule(highlight(text))
            console.print()

        console = Console()
        highlight = ReprHighlighter()
        header("Example Table")
        console.print(table, justify="center")

        table.expand = True
        header("expand=True")
        console.print(table)

        table.width = 50
        header("width=50")

        console.print(table, justify="center")

        table.width = None
        table.expand = False
        table.row_styles = ["dim", "none"]
        header("row_styles=['dim', 'none']")

        console.print(table, justify="center")

        table.width = None
        table.expand = False
        table.row_styles = ["dim", "none"]
        table.leading = 1
        header("leading=1, row_styles=['dim', 'none']")
        console.print(table, justify="center")

        table.width = None
        table.expand = False
        table.row_styles = ["dim", "none"]
        table.show_lines = True
        table.leading = 0
        header("show_lines=True, row_styles=['dim', 'none']")
        console.print(table, justify="center")



================================================
FILE: rich/terminal_theme.py
================================================
from typing import List, Optional, Tuple

from .color_triplet import ColorTriplet
from .palette import Palette

_ColorTuple = Tuple[int, int, int]


class TerminalTheme:
    """A color theme used when exporting console content.

    Args:
        background (Tuple[int, int, int]): The background color.
        foreground (Tuple[int, int, int]): The foreground (text) color.
        normal (List[Tuple[int, int, int]]): A list of 8 normal intensity colors.
        bright (List[Tuple[int, int, int]], optional): A list of 8 bright colors, or None
            to repeat normal intensity. Defaults to None.
    """

    def __init__(
        self,
        background: _ColorTuple,
        foreground: _ColorTuple,
        normal: List[_ColorTuple],
        bright: Optional[List[_ColorTuple]] = None,
    ) -> None:
        self.background_color = ColorTriplet(*background)
        self.foreground_color = ColorTriplet(*foreground)
        self.ansi_colors = Palette(normal + (bright or normal))


DEFAULT_TERMINAL_THEME = TerminalTheme(
    (255, 255, 255),
    (0, 0, 0),
    [
        (0, 0, 0),
        (128, 0, 0),
        (0, 128, 0),
        (128, 128, 0),
        (0, 0, 128),
        (128, 0, 128),
        (0, 128, 128),
        (192, 192, 192),
    ],
    [
        (128, 128, 128),
        (255, 0, 0),
        (0, 255, 0),
        (255, 255, 0),
        (0, 0, 255),
        (255, 0, 255),
        (0, 255, 255),
        (255, 255, 255),
    ],
)

MONOKAI = TerminalTheme(
    (12, 12, 12),
    (217, 217, 217),
    [
        (26, 26, 26),
        (244, 0, 95),
        (152, 224, 36),
        (253, 151, 31),
        (157, 101, 255),
        (244, 0, 95),
        (88, 209, 235),
        (196, 197, 181),
        (98, 94, 76),
    ],
    [
        (244, 0, 95),
        (152, 224, 36),
        (224, 213, 97),
        (157, 101, 255),
        (244, 0, 95),
        (88, 209, 235),
        (246, 246, 239),
    ],
)
DIMMED_MONOKAI = TerminalTheme(
    (25, 25, 25),
    (185, 188, 186),
    [
        (58, 61, 67),
        (190, 63, 72),
        (135, 154, 59),
        (197, 166, 53),
        (79, 118, 161),
        (133, 92, 141),
        (87, 143, 164),
        (185, 188, 186),
        (136, 137, 135),
    ],
    [
        (251, 0, 31),
        (15, 114, 47),
        (196, 112, 51),
        (24, 109, 227),
        (251, 0, 103),
        (46, 112, 109),
        (253, 255, 185),
    ],
)
NIGHT_OWLISH = TerminalTheme(
    (255, 255, 255),
    (64, 63, 83),
    [
        (1, 22, 39),
        (211, 66, 62),
        (42, 162, 152),
        (218, 170, 1),
        (72, 118, 214),
        (64, 63, 83),
        (8, 145, 106),
        (122, 129, 129),
        (122, 129, 129),
    ],
    [
        (247, 110, 110),
        (73, 208, 197),
        (218, 194, 107),
        (92, 167, 228),
        (105, 112, 152),
        (0, 201, 144),
        (152, 159, 177),
    ],
)

SVG_EXPORT_THEME = TerminalTheme(
    (41, 41, 41),
    (197, 200, 198),
    [
        (75, 78, 85),
        (204, 85, 90),
        (152, 168, 75),
        (208, 179, 68),
        (96, 138, 177),
        (152, 114, 159),
        (104, 160, 179),
        (197, 200, 198),
        (154, 155, 153),
    ],
    [
        (255, 38, 39),
        (0, 130, 61),
        (208, 132, 66),
        (25, 132, 233),
        (255, 44, 122),
        (57, 130, 128),
        (253, 253, 197),
    ],
)



================================================
FILE: rich/text.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xa6 in position 31195: illegal multibyte sequence


================================================
FILE: rich/theme.py
================================================
import configparser
from typing import IO, Dict, List, Mapping, Optional

from .default_styles import DEFAULT_STYLES
from .style import Style, StyleType


class Theme:
    """A container for style information, used by :class:`~rich.console.Console`.

    Args:
        styles (Dict[str, Style], optional): A mapping of style names on to styles. Defaults to None for a theme with no styles.
        inherit (bool, optional): Inherit default styles. Defaults to True.
    """

    styles: Dict[str, Style]

    def __init__(
        self, styles: Optional[Mapping[str, StyleType]] = None, inherit: bool = True
    ):
        self.styles = DEFAULT_STYLES.copy() if inherit else {}
        if styles is not None:
            self.styles.update(
                {
                    name: style if isinstance(style, Style) else Style.parse(style)
                    for name, style in styles.items()
                }
            )

    @property
    def config(self) -> str:
        """Get contents of a config file for this theme."""
        config = "[styles]\n" + "\n".join(
            f"{name} = {style}" for name, style in sorted(self.styles.items())
        )
        return config

    @classmethod
    def from_file(
        cls, config_file: IO[str], source: Optional[str] = None, inherit: bool = True
    ) -> "Theme":
        """Load a theme from a text mode file.

        Args:
            config_file (IO[str]): An open conf file.
            source (str, optional): The filename of the open file. Defaults to None.
            inherit (bool, optional): Inherit default styles. Defaults to True.

        Returns:
            Theme: A New theme instance.
        """
        config = configparser.ConfigParser()
        config.read_file(config_file, source=source)
        styles = {name: Style.parse(value) for name, value in config.items("styles")}
        theme = Theme(styles, inherit=inherit)
        return theme

    @classmethod
    def read(
        cls, path: str, inherit: bool = True, encoding: Optional[str] = None
    ) -> "Theme":
        """Read a theme from a path.

        Args:
            path (str): Path to a config file readable by Python configparser module.
            inherit (bool, optional): Inherit default styles. Defaults to True.
            encoding (str, optional): Encoding of the config file. Defaults to None.

        Returns:
            Theme: A new theme instance.
        """
        with open(path, encoding=encoding) as config_file:
            return cls.from_file(config_file, source=path, inherit=inherit)


class ThemeStackError(Exception):
    """Base exception for errors related to the theme stack."""


class ThemeStack:
    """A stack of themes.

    Args:
        theme (Theme): A theme instance
    """

    def __init__(self, theme: Theme) -> None:
        self._entries: List[Dict[str, Style]] = [theme.styles]
        self.get = self._entries[-1].get

    def push_theme(self, theme: Theme, inherit: bool = True) -> None:
        """Push a theme on the top of the stack.

        Args:
            theme (Theme): A Theme instance.
            inherit (boolean, optional): Inherit styles from current top of stack.
        """
        styles: Dict[str, Style]
        styles = (
            {**self._entries[-1], **theme.styles} if inherit else theme.styles.copy()
        )
        self._entries.append(styles)
        self.get = self._entries[-1].get

    def pop_theme(self) -> None:
        """Pop (and discard) the top-most theme."""
        if len(self._entries) == 1:
            raise ThemeStackError("Unable to pop base theme")
        self._entries.pop()
        self.get = self._entries[-1].get


if __name__ == "__main__":  # pragma: no cover
    theme = Theme()
    print(theme.config)



================================================
FILE: rich/themes.py
================================================
from .default_styles import DEFAULT_STYLES
from .theme import Theme


DEFAULT = Theme(DEFAULT_STYLES)



================================================
FILE: rich/traceback.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xaf in position 36164: illegal multibyte sequence


================================================
FILE: rich/tree.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x82 in position 1256: illegal multibyte sequence


================================================
FILE: tests/__init__.py
================================================
[Empty file]


================================================
FILE: tests/_card_render.py
================================================
expected = "\x1b[3m                                           Rich features                                            \x1b[0m\n\x1b[1;31m              \x1b[0m                                                                                      \n\x1b[1;31m \x1b[0m\x1b[1;31m   Colors   \x1b[0m\x1b[1;31m \x1b[0m✓ \x1b[1;32m4-bit color\x1b[0m                 \x1b[38;2;86;0;0;48;2;51;0;0m▄\x1b[0m\x1b[38;2;86;9;0;48;2;51;5;0m▄\x1b[0m\x1b[38;2;86;18;0;48;2;51;11;0m▄\x1b[0m\x1b[38;2;86;28;0;48;2;51;16;0m▄\x1b[0m\x1b[38;2;86;37;0;48;2;51;22;0m▄\x1b[0m\x1b[38;2;86;47;0;48;2;51;27;0m▄\x1b[0m\x1b[38;2;86;56;0;48;2;51;33;0m▄\x1b[0m\x1b[38;2;86;66;0;48;2;51;38;0m▄\x1b[0m\x1b[38;2;86;75;0;48;2;51;44;0m▄\x1b[0m\x1b[38;2;86;85;0;48;2;51;50;0m▄\x1b[0m\x1b[38;2;78;86;0;48;2;46;51;0m▄\x1b[0m\x1b[38;2;69;86;0;48;2;40;51;0m▄\x1b[0m\x1b[38;2;59;86;0;48;2;35;51;0m▄\x1b[0m\x1b[38;2;50;86;0;48;2;29;51;0m▄\x1b[0m\x1b[38;2;40;86;0;48;2;24;51;0m▄\x1b[0m\x1b[38;2;31;86;0;48;2;18;51;0m▄\x1b[0m\x1b[38;2;22;86;0;48;2;12;51;0m▄\x1b[0m\x1b[38;2;12;86;0;48;2;7;51;0m▄\x1b[0m\x1b[38;2;3;86;0;48;2;1;51;0m▄\x1b[0m\x1b[38;2;0;86;6;48;2;0;51;3m▄\x1b[0m\x1b[38;2;0;86;15;48;2;0;51;9m▄\x1b[0m\x1b[38;2;0;86;25;48;2;0;51;14m▄\x1b[0m\x1b[38;2;0;86;34;48;2;0;51;20m▄\x1b[0m\x1b[38;2;0;86;44;48;2;0;51;25m▄\x1b[0m\x1b[38;2;0;86;53;48;2;0;51;31m▄\x1b[0m\x1b[38;2;0;86;63;48;2;0;51;37m▄\x1b[0m\x1b[38;2;0;86;72;48;2;0;51;42m▄\x1b[0m\x1b[38;2;0;86;81;48;2;0;51;48m▄\x1b[0m\x1b[38;2;0;81;86;48;2;0;48;51m▄\x1b[0m\x1b[38;2;0;72;86;48;2;0;42;51m▄\x1b[0m\x1b[38;2;0;63;86;48;2;0;37;51m▄\x1b[0m\x1b[38;2;0;53;86;48;2;0;31;51m▄\x1b[0m\x1b[38;2;0;44;86;48;2;0;25;51m▄\x1b[0m\x1b[38;2;0;34;86;48;2;0;20;51m▄\x1b[0m\x1b[38;2;0;25;86;48;2;0;14;51m▄\x1b[0m\x1b[38;2;0;15;86;48;2;0;9;51m▄\x1b[0m\x1b[38;2;0;6;86;48;2;0;3;51m▄\x1b[0m\x1b[38;2;3;0;86;48;2;1;0;51m▄\x1b[0m\x1b[38;2;12;0;86;48;2;7;0;51m▄\x1b[0m\x1b[38;2;22;0;86;48;2;12;0;51m▄\x1b[0m\x1b[38;2;31;0;86;48;2;18;0;51m▄\x1b[0m\x1b[38;2;40;0;86;48;2;24;0;51m▄\x1b[0m\x1b[38;2;50;0;86;48;2;29;0;51m▄\x1b[0m\x1b[38;2;59;0;86;48;2;35;0;51m▄\x1b[0m\x1b[38;2;69;0;86;48;2;40;0;51m▄\x1b[0m\x1b[38;2;78;0;86;48;2;46;0;51m▄\x1b[0m\x1b[38;2;86;0;85;48;2;51;0;50m▄\x1b[0m\x1b[38;2;86;0;75;48;2;51;0;44m▄\x1b[0m\x1b[38;2;86;0;66;48;2;51;0;38m▄\x1b[0m\x1b[38;2;86;0;56;48;2;51;0;33m▄\x1b[0m\x1b[38;2;86;0;47;48;2;51;0;27m▄\x1b[0m\x1b[38;2;86;0;37;48;2;51;0;22m▄\x1b[0m\x1b[38;2;86;0;28;48;2;51;0;16m▄\x1b[0m\x1b[38;2;86;0;18;48;2;51;0;11m▄\x1b[0m\x1b[38;2;86;0;9;48;2;51;0;5m▄\x1b[0m \n\x1b[1;31m              \x1b[0m✓ \x1b[1;34m8-bit color\x1b[0m                 \x1b[38;2;158;0;0;48;2;122;0;0m▄\x1b[0m\x1b[38;2;158;17;0;48;2;122;13;0m▄\x1b[0m\x1b[38;2;158;34;0;48;2;122;26;0m▄\x1b[0m\x1b[38;2;158;51;0;48;2;122;40;0m▄\x1b[0m\x1b[38;2;158;68;0;48;2;122;53;0m▄\x1b[0m\x1b[38;2;158;86;0;48;2;122;66;0m▄\x1b[0m\x1b[38;2;158;103;0;48;2;122;80;0m▄\x1b[0m\x1b[38;2;158;120;0;48;2;122;93;0m▄\x1b[0m\x1b[38;2;158;137;0;48;2;122;106;0m▄\x1b[0m\x1b[38;2;158;155;0;48;2;122;120;0m▄\x1b[0m\x1b[38;2;143;158;0;48;2;111;122;0m▄\x1b[0m\x1b[38;2;126;158;0;48;2;97;122;0m▄\x1b[0m\x1b[38;2;109;158;0;48;2;84;122;0m▄\x1b[0m\x1b[38;2;91;158;0;48;2;71;122;0m▄\x1b[0m\x1b[38;2;74;158;0;48;2;57;122;0m▄\x1b[0m\x1b[38;2;57;158;0;48;2;44;122;0m▄\x1b[0m\x1b[38;2;40;158;0;48;2;31;122;0m▄\x1b[0m\x1b[38;2;22;158;0;48;2;17;122;0m▄\x1b[0m\x1b[38;2;5;158;0;48;2;4;122;0m▄\x1b[0m\x1b[38;2;0;158;11;48;2;0;122;8m▄\x1b[0m\x1b[38;2;0;158;28;48;2;0;122;22m▄\x1b[0m\x1b[38;2;0;158;45;48;2;0;122;35m▄\x1b[0m\x1b[38;2;0;158;63;48;2;0;122;48m▄\x1b[0m\x1b[38;2;0;158;80;48;2;0;122;62m▄\x1b[0m\x1b[38;2;0;158;97;48;2;0;122;75m▄\x1b[0m\x1b[38;2;0;158;114;48;2;0;122;89m▄\x1b[0m\x1b[38;2;0;158;132;48;2;0;122;102m▄\x1b[0m\x1b[38;2;0;158;149;48;2;0;122;115m▄\x1b[0m\x1b[38;2;0;149;158;48;2;0;115;122m▄\x1b[0m\x1b[38;2;0;132;158;48;2;0;102;122m▄\x1b[0m\x1b[38;2;0;114;158;48;2;0;89;122m▄\x1b[0m\x1b[38;2;0;97;158;48;2;0;75;122m▄\x1b[0m\x1b[38;2;0;80;158;48;2;0;62;122m▄\x1b[0m\x1b[38;2;0;63;158;48;2;0;48;122m▄\x1b[0m\x1b[38;2;0;45;158;48;2;0;35;122m▄\x1b[0m\x1b[38;2;0;28;158;48;2;0;22;122m▄\x1b[0m\x1b[38;2;0;11;158;48;2;0;8;122m▄\x1b[0m\x1b[38;2;5;0;158;48;2;4;0;122m▄\x1b[0m\x1b[38;2;22;0;158;48;2;17;0;122m▄\x1b[0m\x1b[38;2;40;0;158;48;2;31;0;122m▄\x1b[0m\x1b[38;2;57;0;158;48;2;44;0;122m▄\x1b[0m\x1b[38;2;74;0;158;48;2;57;0;122m▄\x1b[0m\x1b[38;2;91;0;158;48;2;71;0;122m▄\x1b[0m\x1b[38;2;109;0;158;48;2;84;0;122m▄\x1b[0m\x1b[38;2;126;0;158;48;2;97;0;122m▄\x1b[0m\x1b[38;2;143;0;158;48;2;111;0;122m▄\x1b[0m\x1b[38;2;158;0;155;48;2;122;0;120m▄\x1b[0m\x1b[38;2;158;0;137;48;2;122;0;106m▄\x1b[0m\x1b[38;2;158;0;120;48;2;122;0;93m▄\x1b[0m\x1b[38;2;158;0;103;48;2;122;0;80m▄\x1b[0m\x1b[38;2;158;0;86;48;2;122;0;66m▄\x1b[0m\x1b[38;2;158;0;68;48;2;122;0;53m▄\x1b[0m\x1b[38;2;158;0;51;48;2;122;0;40m▄\x1b[0m\x1b[38;2;158;0;34;48;2;122;0;26m▄\x1b[0m\x1b[38;2;158;0;17;48;2;122;0;13m▄\x1b[0m \n\x1b[1;31m              \x1b[0m✓ \x1b[1;35mTruecolor (16.7 million)\x1b[0m    \x1b[38;2;229;0;0;48;2;193;0;0m▄\x1b[0m\x1b[38;2;229;25;0;48;2;193;21;0m▄\x1b[0m\x1b[38;2;229;50;0;48;2;193;42;0m▄\x1b[0m\x1b[38;2;229;75;0;48;2;193;63;0m▄\x1b[0m\x1b[38;2;229;100;0;48;2;193;84;0m▄\x1b[0m\x1b[38;2;229;125;0;48;2;193;105;0m▄\x1b[0m\x1b[38;2;229;150;0;48;2;193;126;0m▄\x1b[0m\x1b[38;2;229;175;0;48;2;193;147;0m▄\x1b[0m\x1b[38;2;229;200;0;48;2;193;169;0m▄\x1b[0m\x1b[38;2;229;225;0;48;2;193;190;0m▄\x1b[0m\x1b[38;2;208;229;0;48;2;176;193;0m▄\x1b[0m\x1b[38;2;183;229;0;48;2;155;193;0m▄\x1b[0m\x1b[38;2;158;229;0;48;2;133;193;0m▄\x1b[0m\x1b[38;2;133;229;0;48;2;112;193;0m▄\x1b[0m\x1b[38;2;108;229;0;48;2;91;193;0m▄\x1b[0m\x1b[38;2;83;229;0;48;2;70;193;0m▄\x1b[0m\x1b[38;2;58;229;0;48;2;49;193;0m▄\x1b[0m\x1b[38;2;33;229;0;48;2;28;193;0m▄\x1b[0m\x1b[38;2;8;229;0;48;2;7;193;0m▄\x1b[0m\x1b[38;2;0;229;16;48;2;0;193;14m▄\x1b[0m\x1b[38;2;0;229;41;48;2;0;193;35m▄\x1b[0m\x1b[38;2;0;229;66;48;2;0;193;56m▄\x1b[0m\x1b[38;2;0;229;91;48;2;0;193;77m▄\x1b[0m\x1b[38;2;0;229;116;48;2;0;193;98m▄\x1b[0m\x1b[38;2;0;229;141;48;2;0;193;119m▄\x1b[0m\x1b[38;2;0;229;166;48;2;0;193;140m▄\x1b[0m\x1b[38;2;0;229;191;48;2;0;193;162m▄\x1b[0m\x1b[38;2;0;229;216;48;2;0;193;183m▄\x1b[0m\x1b[38;2;0;216;229;48;2;0;183;193m▄\x1b[0m\x1b[38;2;0;191;229;48;2;0;162;193m▄\x1b[0m\x1b[38;2;0;166;229;48;2;0;140;193m▄\x1b[0m\x1b[38;2;0;141;229;48;2;0;119;193m▄\x1b[0m\x1b[38;2;0;116;229;48;2;0;98;193m▄\x1b[0m\x1b[38;2;0;91;229;48;2;0;77;193m▄\x1b[0m\x1b[38;2;0;66;229;48;2;0;56;193m▄\x1b[0m\x1b[38;2;0;41;229;48;2;0;35;193m▄\x1b[0m\x1b[38;2;0;16;229;48;2;0;14;193m▄\x1b[0m\x1b[38;2;8;0;229;48;2;7;0;193m▄\x1b[0m\x1b[38;2;33;0;229;48;2;28;0;193m▄\x1b[0m\x1b[38;2;58;0;229;48;2;49;0;193m▄\x1b[0m\x1b[38;2;83;0;229;48;2;70;0;193m▄\x1b[0m\x1b[38;2;108;0;229;48;2;91;0;193m▄\x1b[0m\x1b[38;2;133;0;229;48;2;112;0;193m▄\x1b[0m\x1b[38;2;158;0;229;48;2;133;0;193m▄\x1b[0m\x1b[38;2;183;0;229;48;2;155;0;193m▄\x1b[0m\x1b[38;2;208;0;229;48;2;176;0;193m▄\x1b[0m\x1b[38;2;229;0;225;48;2;193;0;190m▄\x1b[0m\x1b[38;2;229;0;200;48;2;193;0;169m▄\x1b[0m\x1b[38;2;229;0;175;48;2;193;0;147m▄\x1b[0m\x1b[38;2;229;0;150;48;2;193;0;126m▄\x1b[0m\x1b[38;2;229;0;125;48;2;193;0;105m▄\x1b[0m\x1b[38;2;229;0;100;48;2;193;0;84m▄\x1b[0m\x1b[38;2;229;0;75;48;2;193;0;63m▄\x1b[0m\x1b[38;2;229;0;50;48;2;193;0;42m▄\x1b[0m\x1b[38;2;229;0;25;48;2;193;0;21m▄\x1b[0m \n\x1b[1;31m              \x1b[0m✓ \x1b[1;33mDumb terminals\x1b[0m              \x1b[38;2;254;45;45;48;2;255;10;10m▄\x1b[0m\x1b[38;2;254;68;45;48;2;255;36;10m▄\x1b[0m\x1b[38;2;254;91;45;48;2;255;63;10m▄\x1b[0m\x1b[38;2;254;114;45;48;2;255;90;10m▄\x1b[0m\x1b[38;2;254;137;45;48;2;255;117;10m▄\x1b[0m\x1b[38;2;254;159;45;48;2;255;143;10m▄\x1b[0m\x1b[38;2;254;182;45;48;2;255;170;10m▄\x1b[0m\x1b[38;2;254;205;45;48;2;255;197;10m▄\x1b[0m\x1b[38;2;254;228;45;48;2;255;223;10m▄\x1b[0m\x1b[38;2;254;251;45;48;2;255;250;10m▄\x1b[0m\x1b[38;2;235;254;45;48;2;232;255;10m▄\x1b[0m\x1b[38;2;213;254;45;48;2;206;255;10m▄\x1b[0m\x1b[38;2;190;254;45;48;2;179;255;10m▄\x1b[0m\x1b[38;2;167;254;45;48;2;152;255;10m▄\x1b[0m\x1b[38;2;144;254;45;48;2;125;255;10m▄\x1b[0m\x1b[38;2;121;254;45;48;2;99;255;10m▄\x1b[0m\x1b[38;2;99;254;45;48;2;72;255;10m▄\x1b[0m\x1b[38;2;76;254;45;48;2;45;255;10m▄\x1b[0m\x1b[38;2;53;254;45;48;2;19;255;10m▄\x1b[0m\x1b[38;2;45;254;61;48;2;10;255;28m▄\x1b[0m\x1b[38;2;45;254;83;48;2;10;255;54m▄\x1b[0m\x1b[38;2;45;254;106;48;2;10;255;81m▄\x1b[0m\x1b[38;2;45;254;129;48;2;10;255;108m▄\x1b[0m\x1b[38;2;45;254;152;48;2;10;255;134m▄\x1b[0m\x1b[38;2;45;254;175;48;2;10;255;161m▄\x1b[0m\x1b[38;2;45;254;197;48;2;10;255;188m▄\x1b[0m\x1b[38;2;45;254;220;48;2;10;255;214m▄\x1b[0m\x1b[38;2;45;254;243;48;2;10;255;241m▄\x1b[0m\x1b[38;2;45;243;254;48;2;10;241;255m▄\x1b[0m\x1b[38;2;45;220;254;48;2;10;214;255m▄\x1b[0m\x1b[38;2;45;197;254;48;2;10;188;255m▄\x1b[0m\x1b[38;2;45;175;254;48;2;10;161;255m▄\x1b[0m\x1b[38;2;45;152;254;48;2;10;134;255m▄\x1b[0m\x1b[38;2;45;129;254;48;2;10;108;255m▄\x1b[0m\x1b[38;2;45;106;254;48;2;10;81;255m▄\x1b[0m\x1b[38;2;45;83;254;48;2;10;54;255m▄\x1b[0m\x1b[38;2;45;61;254;48;2;10;28;255m▄\x1b[0m\x1b[38;2;53;45;254;48;2;19;10;255m▄\x1b[0m\x1b[38;2;76;45;254;48;2;45;10;255m▄\x1b[0m\x1b[38;2;99;45;254;48;2;72;10;255m▄\x1b[0m\x1b[38;2;121;45;254;48;2;99;10;255m▄\x1b[0m\x1b[38;2;144;45;254;48;2;125;10;255m▄\x1b[0m\x1b[38;2;167;45;254;48;2;152;10;255m▄\x1b[0m\x1b[38;2;190;45;254;48;2;179;10;255m▄\x1b[0m\x1b[38;2;213;45;254;48;2;206;10;255m▄\x1b[0m\x1b[38;2;235;45;254;48;2;232;10;255m▄\x1b[0m\x1b[38;2;254;45;251;48;2;255;10;250m▄\x1b[0m\x1b[38;2;254;45;228;48;2;255;10;223m▄\x1b[0m\x1b[38;2;254;45;205;48;2;255;10;197m▄\x1b[0m\x1b[38;2;254;45;182;48;2;255;10;170m▄\x1b[0m\x1b[38;2;254;45;159;48;2;255;10;143m▄\x1b[0m\x1b[38;2;254;45;137;48;2;255;10;117m▄\x1b[0m\x1b[38;2;254;45;114;48;2;255;10;90m▄\x1b[0m\x1b[38;2;254;45;91;48;2;255;10;63m▄\x1b[0m\x1b[38;2;254;45;68;48;2;255;10;36m▄\x1b[0m \n\x1b[1;31m              \x1b[0m✓ \x1b[1;36mAutomatic color conversion\x1b[0m  \x1b[38;2;255;117;117;48;2;255;81;81m▄\x1b[0m\x1b[38;2;255;132;117;48;2;255;100;81m▄\x1b[0m\x1b[38;2;255;147;117;48;2;255;119;81m▄\x1b[0m\x1b[38;2;255;162;117;48;2;255;138;81m▄\x1b[0m\x1b[38;2;255;177;117;48;2;255;157;81m▄\x1b[0m\x1b[38;2;255;192;117;48;2;255;176;81m▄\x1b[0m\x1b[38;2;255;207;117;48;2;255;195;81m▄\x1b[0m\x1b[38;2;255;222;117;48;2;255;214;81m▄\x1b[0m\x1b[38;2;255;237;117;48;2;255;232;81m▄\x1b[0m\x1b[38;2;255;252;117;48;2;255;251;81m▄\x1b[0m\x1b[38;2;242;255;117;48;2;239;255;81m▄\x1b[0m\x1b[38;2;227;255;117;48;2;220;255;81m▄\x1b[0m\x1b[38;2;212;255;117;48;2;201;255;81m▄\x1b[0m\x1b[38;2;197;255;117;48;2;182;255;81m▄\x1b[0m\x1b[38;2;182;255;117;48;2;163;255;81m▄\x1b[0m\x1b[38;2;167;255;117;48;2;144;255;81m▄\x1b[0m\x1b[38;2;152;255;117;48;2;125;255;81m▄\x1b[0m\x1b[38;2;137;255;117;48;2;106;255;81m▄\x1b[0m\x1b[38;2;122;255;117;48;2;87;255;81m▄\x1b[0m\x1b[38;2;117;255;127;48;2;81;255;94m▄\x1b[0m\x1b[38;2;117;255;142;48;2;81;255;113m▄\x1b[0m\x1b[38;2;117;255;157;48;2;81;255;132m▄\x1b[0m\x1b[38;2;117;255;172;48;2;81;255;150m▄\x1b[0m\x1b[38;2;117;255;187;48;2;81;255;169m▄\x1b[0m\x1b[38;2;117;255;202;48;2;81;255;188m▄\x1b[0m\x1b[38;2;117;255;217;48;2;81;255;207m▄\x1b[0m\x1b[38;2;117;255;232;48;2;81;255;226m▄\x1b[0m\x1b[38;2;117;255;247;48;2;81;255;245m▄\x1b[0m\x1b[38;2;117;247;255;48;2;81;245;255m▄\x1b[0m\x1b[38;2;117;232;255;48;2;81;226;255m▄\x1b[0m\x1b[38;2;117;217;255;48;2;81;207;255m▄\x1b[0m\x1b[38;2;117;202;255;48;2;81;188;255m▄\x1b[0m\x1b[38;2;117;187;255;48;2;81;169;255m▄\x1b[0m\x1b[38;2;117;172;255;48;2;81;150;255m▄\x1b[0m\x1b[38;2;117;157;255;48;2;81;132;255m▄\x1b[0m\x1b[38;2;117;142;255;48;2;81;113;255m▄\x1b[0m\x1b[38;2;117;127;255;48;2;81;94;255m▄\x1b[0m\x1b[38;2;122;117;255;48;2;87;81;255m▄\x1b[0m\x1b[38;2;137;117;255;48;2;106;81;255m▄\x1b[0m\x1b[38;2;152;117;255;48;2;125;81;255m▄\x1b[0m\x1b[38;2;167;117;255;48;2;144;81;255m▄\x1b[0m\x1b[38;2;182;117;255;48;2;163;81;255m▄\x1b[0m\x1b[38;2;197;117;255;48;2;182;81;255m▄\x1b[0m\x1b[38;2;212;117;255;48;2;201;81;255m▄\x1b[0m\x1b[38;2;227;117;255;48;2;220;81;255m▄\x1b[0m\x1b[38;2;242;117;255;48;2;239;81;255m▄\x1b[0m\x1b[38;2;255;117;252;48;2;255;81;251m▄\x1b[0m\x1b[38;2;255;117;237;48;2;255;81;232m▄\x1b[0m\x1b[38;2;255;117;222;48;2;255;81;214m▄\x1b[0m\x1b[38;2;255;117;207;48;2;255;81;195m▄\x1b[0m\x1b[38;2;255;117;192;48;2;255;81;176m▄\x1b[0m\x1b[38;2;255;117;177;48;2;255;81;157m▄\x1b[0m\x1b[38;2;255;117;162;48;2;255;81;138m▄\x1b[0m\x1b[38;2;255;117;147;48;2;255;81;119m▄\x1b[0m\x1b[38;2;255;117;132;48;2;255;81;100m▄\x1b[0m \n\x1b[1;31m              \x1b[0m                                                                                      \n\x1b[1;31m \x1b[0m\x1b[1;31m   Styles   \x1b[0m\x1b[1;31m \x1b[0mAll ansi styles: \x1b[1mbold\x1b[0m, \x1b[2mdim\x1b[0m, \x1b[3mitalic\x1b[0m, \x1b[4munderline\x1b[0m, \x1b[9mstrikethrough\x1b[0m, \x1b[7mreverse\x1b[0m, and even       \n\x1b[1;31m              \x1b[0m\x1b[5mblink\x1b[0m.                                                                                \n\x1b[1;31m              \x1b[0m                                                                                      \n\x1b[1;31m \x1b[0m\x1b[1;31m    Text    \x1b[0m\x1b[1;31m \x1b[0mWord wrap text. Justify \x1b[32mleft\x1b[0m, \x1b[33mcenter\x1b[0m, \x1b[34mright\x1b[0m or \x1b[31mfull\x1b[0m.                                  \n\x1b[1;31m              \x1b[0m                                                                                      \n\x1b[1;31m              \x1b[0m\x1b[32mLorem ipsum dolor   \x1b[0m \x1b[33m Lorem ipsum dolor  \x1b[0m \x1b[34m   Lorem ipsum dolor\x1b[0m \x1b[31mLorem\x1b[0m\x1b[31m \x1b[0m\x1b[31mipsum\x1b[0m\x1b[31m \x1b[0m\x1b[31mdolor\x1b[0m\x1b[31m  \x1b[0m\x1b[31msit\x1b[0m \n\x1b[1;31m              \x1b[0m\x1b[32msit amet,           \x1b[0m \x1b[33m     sit amet,      \x1b[0m \x1b[34m           sit amet,\x1b[0m \x1b[31mamet,\x1b[0m\x1b[31m      \x1b[0m\x1b[31mconsectetur\x1b[0m \n\x1b[1;31m              \x1b[0m\x1b[32mconsectetur         \x1b[0m \x1b[33m    consectetur     \x1b[0m \x1b[34m         consectetur\x1b[0m \x1b[31madipiscing\x1b[0m\x1b[31m       \x1b[0m\x1b[31melit.\x1b[0m \n\x1b[1;31m              \x1b[0m\x1b[32madipiscing elit.    \x1b[0m \x1b[33m  adipiscing elit.  \x1b[0m \x1b[34m    adipiscing elit.\x1b[0m \x1b[31mQuisque\x1b[0m\x1b[31m \x1b[0m\x1b[31min\x1b[0m\x1b[31m  \x1b[0m\x1b[31mmetus\x1b[0m\x1b[31m  \x1b[0m\x1b[31msed\x1b[0m \n\x1b[1;31m              \x1b[0m\x1b[32mQuisque in metus sed\x1b[0m \x1b[33mQuisque in metus sed\x1b[0m \x1b[34mQuisque in metus sed\x1b[0m \x1b[31msapien\x1b[0m\x1b[31m       \x1b[0m\x1b[31multricies\x1b[0m \n\x1b[1;31m              \x1b[0m\x1b[32msapien ultricies    \x1b[0m \x1b[33m  sapien ultricies  \x1b[0m \x1b[34m    sapien ultricies\x1b[0m \x1b[31mpretium\x1b[0m\x1b[31m  \x1b[0m\x1b[31ma\x1b[0m\x1b[31m  \x1b[0m\x1b[31mat\x1b[0m\x1b[31m  \x1b[0m\x1b[31mjusto.\x1b[0m \n\x1b[1;31m              \x1b[0m\x1b[32mpretium a at justo. \x1b[0m \x1b[33mpretium a at justo. \x1b[0m \x1b[34m pretium a at justo.\x1b[0m \x1b[31mMaecenas\x1b[0m\x1b[31m \x1b[0m\x1b[31mluctus\x1b[0m\x1b[31m  \x1b[0m\x1b[31mvelit\x1b[0m \n\x1b[1;31m              \x1b[0m\x1b[32mMaecenas luctus     \x1b[0m \x1b[33m  Maecenas luctus   \x1b[0m \x1b[34m     Maecenas luctus\x1b[0m \x1b[31met auctor maximus.\x1b[0m     \n\x1b[1;31m              \x1b[0m\x1b[32mvelit et auctor     \x1b[0m \x1b[33m  velit et auctor   \x1b[0m \x1b[34m     velit et auctor\x1b[0m                        \n\x1b[1;31m              \x1b[0m\x1b[32mmaximus.            \x1b[0m \x1b[33m      maximus.      \x1b[0m \x1b[34m            maximus.\x1b[0m                        \n\x1b[1;31m              \x1b[0m                                                                                      \n\x1b[1;31m \x1b[0m\x1b[1;31m   Asian    \x1b[0m\x1b[1;31m \x1b[0m🇨🇳  该库支持中文，日文和韩文文本！                                                    \n\x1b[1;31m \x1b[0m\x1b[1;31m  language  \x1b[0m\x1b[1;31m \x1b[0m🇯🇵  ライブラリは中国語、日本語、韓国語のテキストをサポートしています                  \n\x1b[1;31m \x1b[0m\x1b[1;31m  support   \x1b[0m\x1b[1;31m \x1b[0m🇰🇷  이 라이브러리는 중국어, 일본어 및 한국어 텍스트를 지원합니다                      \n\x1b[1;31m              \x1b[0m                                                                                      \n\x1b[1;31m \x1b[0m\x1b[1;31m   Markup   \x1b[0m\x1b[1;31m \x1b[0m\x1b[1;35mRich\x1b[0m supports a simple \x1b[3mbbcode\x1b[0m-like \x1b[1mmarkup\x1b[0m for \x1b[33mcolor\x1b[0m, \x1b[4mstyle\x1b[0m, and emoji! 👍 🍎 🐜 🐻  … \n\x1b[1;31m              \x1b[0m🚌                                                                                    \n\x1b[1;31m              \x1b[0m                                                                                      \n\x1b[1;31m \x1b[0m\x1b[1;31m   Tables   \x1b[0m\x1b[1;31m \x1b[0m\x1b[1m \x1b[0m\x1b[1;32mDate\x1b[0m\x1b[1m        \x1b[0m\x1b[1m \x1b[0m \x1b[1m \x1b[0m\x1b[1;34mTitle\x1b[0m\x1b[1m                          \x1b[0m\x1b[1m \x1b[0m \x1b[1m \x1b[0m\x1b[1;36mProduction Budget\x1b[0m\x1b[1m \x1b[0m \x1b[1m \x1b[0m\x1b[1m    \x1b[0m\x1b[1;35mBox Office\x1b[0m\x1b[1m \x1b[0m \n\x1b[1;31m              \x1b[0m───────────────────────────────────────────────────────────────────────────────────── \n\x1b[1;31m              \x1b[0m\x1b[32m \x1b[0m\x1b[32mDec 20, 2019\x1b[0m\x1b[32m \x1b[0m \x1b[34m \x1b[0m\x1b[34mStar Wars: The Rise of         \x1b[0m\x1b[34m \x1b[0m \x1b[36m \x1b[0m\x1b[36m     $275,000,000\x1b[0m\x1b[36m \x1b[0m \x1b[35m \x1b[0m\x1b[35m  $375,126,118\x1b[0m\x1b[35m \x1b[0m \n\x1b[1;31m              \x1b[0m\x1b[32m              \x1b[0m \x1b[34m \x1b[0m\x1b[34mSkywalker                      \x1b[0m\x1b[34m \x1b[0m \x1b[36m                   \x1b[0m \x1b[35m                \x1b[0m \n\x1b[1;31m              \x1b[0m\x1b[2;32m \x1b[0m\x1b[2;32mMay 25, 2018\x1b[0m\x1b[2;32m \x1b[0m \x1b[2;34m \x1b[0m\x1b[1;2;34mSolo\x1b[0m\x1b[2;34m: A Star Wars Story        \x1b[0m\x1b[2;34m \x1b[0m \x1b[2;36m \x1b[0m\x1b[2;36m     $275,000,000\x1b[0m\x1b[2;36m \x1b[0m \x1b[2;35m \x1b[0m\x1b[2;35m  $393,151,347\x1b[0m\x1b[2;35m \x1b[0m \n\x1b[1;31m              \x1b[0m\x1b[32m \x1b[0m\x1b[32mDec 15, 2017\x1b[0m\x1b[32m \x1b[0m \x1b[34m \x1b[0m\x1b[34mStar Wars Ep. VIII: The Last   \x1b[0m\x1b[34m \x1b[0m \x1b[36m \x1b[0m\x1b[36m     $262,000,000\x1b[0m\x1b[36m \x1b[0m \x1b[35m \x1b[0m\x1b[1;35m$1,332,539,889\x1b[0m\x1b[35m \x1b[0m \n\x1b[1;31m              \x1b[0m\x1b[32m              \x1b[0m \x1b[34m \x1b[0m\x1b[34mJedi                           \x1b[0m\x1b[34m \x1b[0m \x1b[36m                   \x1b[0m \x1b[35m                \x1b[0m \n\x1b[1;31m              \x1b[0m\x1b[2;32m \x1b[0m\x1b[2;32mMay 19, 1999\x1b[0m\x1b[2;32m \x1b[0m \x1b[2;34m \x1b[0m\x1b[2;34mStar Wars Ep. \x1b[0m\x1b[1;2;34mI\x1b[0m\x1b[2;34m: \x1b[0m\x1b[2;3;34mThe phantom \x1b[0m\x1b[2;34m  \x1b[0m\x1b[2;34m \x1b[0m \x1b[2;36m \x1b[0m\x1b[2;36m     $115,000,000\x1b[0m\x1b[2;36m \x1b[0m \x1b[2;35m \x1b[0m\x1b[2;35m$1,027,044,677\x1b[0m\x1b[2;35m \x1b[0m \n\x1b[1;31m              \x1b[0m\x1b[2;32m              \x1b[0m \x1b[2;34m \x1b[0m\x1b[2;3;34mMenace\x1b[0m\x1b[2;34m                         \x1b[0m\x1b[2;34m \x1b[0m \x1b[2;36m                   \x1b[0m \x1b[2;35m                \x1b[0m \n\x1b[1;31m              \x1b[0m                                                                                      \n\x1b[1;31m \x1b[0m\x1b[1;31m   Syntax   \x1b[0m\x1b[1;31m \x1b[0m\x1b[1;38;2;227;227;221;48;2;39;40;34m  \x1b[0m\x1b[38;2;101;102;96;48;2;39;40;34m 1 \x1b[0m\x1b[38;2;102;217;239;48;2;39;40;34mdef\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;166;226;46;48;2;39;40;34miter_last\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m(\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34mvalues\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m:\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34mIterable\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m[\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34mT\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m]\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m)\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;255;70;137;48;2;39;40;34m-\x1b[0m\x1b[38;2;255;70;137;48;2;39;40;34m>\x1b[0m  \x1b[1m{\x1b[0m                                         \n\x1b[1;31m \x1b[0m\x1b[1;31mhighlighting\x1b[0m\x1b[1;31m \x1b[0m\x1b[1;38;2;227;227;221;48;2;39;40;34m  \x1b[0m\x1b[38;2;101;102;96;48;2;39;40;34m 2 \x1b[0m\x1b[2;38;2;149;144;119;48;2;39;40;34m│   \x1b[0m\x1b[38;2;230;219;116;48;2;39;40;34m\"\"\"Iterate and generate a tuple w\x1b[0m  \x1b[2;32m│   \x1b[0m\x1b[32m'foo'\x1b[0m: \x1b[1m[\x1b[0m                              \n\x1b[1;31m \x1b[0m\x1b[1;31m     &      \x1b[0m\x1b[1;31m \x1b[0m\x1b[1;38;2;227;227;221;48;2;39;40;34m  \x1b[0m\x1b[38;2;101;102;96;48;2;39;40;34m 3 \x1b[0m\x1b[2;38;2;149;144;119;48;2;39;40;34m│   \x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34miter_values\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;255;70;137;48;2;39;40;34m=\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34miter\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m(\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34mvalues\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m)\x1b[0m\x1b[48;2;39;40;34m       \x1b[0m  \x1b[2;32m│   │   \x1b[0m\x1b[1;36m3.1427\x1b[0m,                           \n\x1b[1;31m \x1b[0m\x1b[1;31m   pretty   \x1b[0m\x1b[1;31m \x1b[0m\x1b[1;38;2;227;227;221;48;2;39;40;34m  \x1b[0m\x1b[38;2;101;102;96;48;2;39;40;34m 4 \x1b[0m\x1b[2;38;2;149;144;119;48;2;39;40;34m│   \x1b[0m\x1b[38;2;102;217;239;48;2;39;40;34mtry\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m:\x1b[0m\x1b[48;2;39;40;34m                             \x1b[0m  \x1b[2;32m│   │   \x1b[0m\x1b[1m(\x1b[0m                                 \n\x1b[1;31m \x1b[0m\x1b[1;31m  printing  \x1b[0m\x1b[1;31m \x1b[0m\x1b[1;38;2;227;227;221;48;2;39;40;34m  \x1b[0m\x1b[38;2;101;102;96;48;2;39;40;34m 5 \x1b[0m\x1b[2;38;2;149;144;119;48;2;39;40;34m│   │   \x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;255;70;137;48;2;39;40;34m=\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34mnext\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m(\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34miter_va\x1b[0m  \x1b[2;32m│   │   │   \x1b[0m\x1b[32m'Paul Atreides'\x1b[0m,              \n\x1b[1;31m              \x1b[0m\x1b[1;38;2;227;227;221;48;2;39;40;34m  \x1b[0m\x1b[38;2;101;102;96;48;2;39;40;34m 6 \x1b[0m\x1b[2;38;2;149;144;119;48;2;39;40;34m│   \x1b[0m\x1b[38;2;102;217;239;48;2;39;40;34mexcept\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;166;226;46;48;2;39;40;34mStopIteration\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m:\x1b[0m\x1b[48;2;39;40;34m            \x1b[0m  \x1b[2;32m│   │   │   \x1b[0m\x1b[32m'Vladimir Harkonnen'\x1b[0m,         \n\x1b[1;31m              \x1b[0m\x1b[1;38;2;227;227;221;48;2;39;40;34m  \x1b[0m\x1b[38;2;101;102;96;48;2;39;40;34m 7 \x1b[0m\x1b[2;38;2;149;144;119;48;2;39;40;34m│   │   \x1b[0m\x1b[38;2;102;217;239;48;2;39;40;34mreturn\x1b[0m\x1b[48;2;39;40;34m                       \x1b[0m  \x1b[2;32m│   │   │   \x1b[0m\x1b[32m'Thufir Hawat'\x1b[0m                \n\x1b[1;31m              \x1b[0m\x1b[1;38;2;227;227;221;48;2;39;40;34m  \x1b[0m\x1b[38;2;101;102;96;48;2;39;40;34m 8 \x1b[0m\x1b[2;38;2;149;144;119;48;2;39;40;34m│   \x1b[0m\x1b[38;2;102;217;239;48;2;39;40;34mfor\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34mvalue\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;255;70;137;48;2;39;40;34min\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34miter_values\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m:\x1b[0m\x1b[48;2;39;40;34m        \x1b[0m  \x1b[2;32m│   │   \x1b[0m\x1b[1m)\x1b[0m                                 \n\x1b[1;31m              \x1b[0m\x1b[1;38;2;227;227;221;48;2;39;40;34m  \x1b[0m\x1b[38;2;101;102;96;48;2;39;40;34m 9 \x1b[0m\x1b[2;38;2;149;144;119;48;2;39;40;34m│   │   \x1b[0m\x1b[38;2;102;217;239;48;2;39;40;34myield\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;102;217;239;48;2;39;40;34mFalse\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m,\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\x1b[0m\x1b[48;2;39;40;34m  \x1b[0m  \x1b[2;32m│   \x1b[0m\x1b[1m]\x1b[0m,                                    \n\x1b[1;31m              \x1b[0m\x1b[1;38;2;227;227;221;48;2;39;40;34m  \x1b[0m\x1b[38;2;101;102;96;48;2;39;40;34m10 \x1b[0m\x1b[2;38;2;149;144;119;48;2;39;40;34m│   │   \x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;255;70;137;48;2;39;40;34m=\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34mvalue\x1b[0m\x1b[48;2;39;40;34m       \x1b[0m  \x1b[2;32m│   \x1b[0m\x1b[32m'atomic'\x1b[0m: \x1b[1m(\x1b[0m\x1b[3;91mFalse\x1b[0m, \x1b[3;92mTrue\x1b[0m, \x1b[3;35mNone\x1b[0m\x1b[1m)\x1b[0m         \n\x1b[1;31m              \x1b[0m\x1b[1;38;2;227;227;221;48;2;39;40;34m  \x1b[0m\x1b[38;2;101;102;96;48;2;39;40;34m11 \x1b[0m\x1b[2;38;2;149;144;119;48;2;39;40;34m│   \x1b[0m\x1b[38;2;102;217;239;48;2;39;40;34myield\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;102;217;239;48;2;39;40;34mTrue\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m,\x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34m \x1b[0m\x1b[38;2;248;248;242;48;2;39;40;34mprevious_value\x1b[0m\x1b[48;2;39;40;34m       \x1b[0m  \x1b[1m}\x1b[0m                                         \n\x1b[1;31m              \x1b[0m                                                                                      \n\x1b[1;31m \x1b[0m\x1b[1;31m  Markdown  \x1b[0m\x1b[1;31m \x1b[0m\x1b[36m# Markdown\x1b[0m                                  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ \n\x1b[1;31m              \x1b[0m                                            ┃               \x1b[1mMarkdown\x1b[0m                ┃ \n\x1b[1;31m              \x1b[0m\x1b[36mSupports much of the *markdown* \x1b[0m            ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ \n\x1b[1;31m              \x1b[0m\x1b[36m__syntax__!\x1b[0m                                                                           \n\x1b[1;31m              \x1b[0m                                            Supports much of the \x1b[3mmarkdown\x1b[0m \x1b[1msyntax\x1b[0m!     \n\x1b[1;31m              \x1b[0m\x1b[36m- Headers\x1b[0m                                                                             \n\x1b[1;31m              \x1b[0m\x1b[36m- Basic formatting: **bold**, *italic*, \x1b[0m    \x1b[1;33m • \x1b[0mHeaders                                \n\x1b[1;31m              \x1b[0m\x1b[36m`code`\x1b[0m                                      \x1b[1;33m • \x1b[0mBasic formatting: \x1b[1mbold\x1b[0m, \x1b[3mitalic\x1b[0m, \x1b[1;36;40mcode\x1b[0m   \n\x1b[1;31m              \x1b[0m\x1b[36m- Block quotes\x1b[0m                              \x1b[1;33m • \x1b[0mBlock quotes                           \n\x1b[1;31m              \x1b[0m\x1b[36m- Lists, and more...\x1b[0m                        \x1b[1;33m • \x1b[0mLists, and more...                     \n\x1b[1;31m              \x1b[0m\x1b[36m    \x1b[0m                                                                                  \n\x1b[1;31m              \x1b[0m                                                                                      \n\x1b[1;31m \x1b[0m\x1b[1;31m   +more!   \x1b[0m\x1b[1;31m \x1b[0mProgress bars, columns, styled logging handler, tracebacks, etc...                    \n\x1b[1;31m              \x1b[0m                                                                                      \n"



================================================
FILE: tests/conftest.py
================================================
import pytest


@pytest.fixture(autouse=True)
def reset_color_envvars(monkeypatch):
    """Remove color-related envvars to fix test output"""
    monkeypatch.delenv("FORCE_COLOR", raising=False)
    monkeypatch.delenv("NO_COLOR", raising=False)



================================================
FILE: tests/pytest.ini
================================================
[pytest]
junit_family=legacy



================================================
FILE: tests/render.py
================================================
import io
import re

from rich.console import Console, RenderableType


re_link_ids = re.compile(r"id=[\d.\-]*?;.*?\x1b")


def replace_link_ids(render: str) -> str:
    """Link IDs have a random ID and system path which is a problem for
    reproducible tests.

    """
    return re_link_ids.sub("id=0;foo\x1b", render)


def render(renderable: RenderableType, no_wrap: bool = False) -> str:
    console = Console(
        width=100, file=io.StringIO(), color_system="truecolor", legacy_windows=False
    )
    console.print(renderable, no_wrap=no_wrap)
    output = replace_link_ids(console.file.getvalue())
    return output



================================================
FILE: tests/test_align.py
================================================
import io

import pytest

from rich.console import Console
from rich.align import Align, VerticalCenter
from rich.measure import Measurement


def test_bad_align_legal():
    # Legal
    Align("foo", "left")
    Align("foo", "center")
    Align("foo", "right")

    # illegal
    with pytest.raises(ValueError):
        Align("foo", None)
    with pytest.raises(ValueError):
        Align("foo", "middle")
    with pytest.raises(ValueError):
        Align("foo", "")
    with pytest.raises(ValueError):
        Align("foo", "LEFT")
    with pytest.raises(ValueError):
        Align("foo", vertical="somewhere")


def test_repr():
    repr(Align("foo", "left"))
    repr(Align("foo", "center"))
    repr(Align("foo", "right"))


def test_align_left():
    console = Console(file=io.StringIO(), width=10)
    console.print(Align("foo", "left"))
    assert console.file.getvalue() == "foo       \n"


def test_align_center():
    console = Console(file=io.StringIO(), width=10)
    console.print(Align("foo", "center"))
    assert console.file.getvalue() == "   foo    \n"


def test_align_right():
    console = Console(file=io.StringIO(), width=10)
    console.print(Align("foo", "right"))
    assert console.file.getvalue() == "       foo\n"


def test_align_top():
    console = Console(file=io.StringIO(), width=10)
    console.print(Align("foo", vertical="top"), height=5)
    expected = "foo       \n          \n          \n          \n          \n"
    result = console.file.getvalue()
    print(repr(result))
    assert result == expected


def test_align_middle():
    console = Console(file=io.StringIO(), width=10)
    console.print(Align("foo", vertical="middle"), height=5)
    expected = "          \n          \nfoo       \n          \n          \n"
    result = console.file.getvalue()
    print(repr(result))
    assert result == expected


def test_align_bottom():
    console = Console(file=io.StringIO(), width=10)
    console.print(Align("foo", vertical="bottom"), height=5)
    expected = "          \n          \n          \n          \nfoo       \n"
    result = console.file.getvalue()
    print(repr(result))
    assert result == expected


def test_align_center_middle():
    console = Console(file=io.StringIO(), width=10)
    console.print(Align("foo\nbar", "center", vertical="middle"), height=5)
    expected = "          \n   foo    \n   bar    \n          \n          \n"
    result = console.file.getvalue()
    print(repr(result))
    assert result == expected


def test_align_fit():
    console = Console(file=io.StringIO(), width=10)
    console.print(Align("foobarbaze", "center"))
    assert console.file.getvalue() == "foobarbaze\n"


def test_align_right_style():
    console = Console(
        file=io.StringIO(),
        width=10,
        color_system="truecolor",
        force_terminal=True,
        _environ={},
    )
    console.print(Align("foo", "right", style="on blue"))
    assert console.file.getvalue() == "\x1b[44m       \x1b[0m\x1b[44mfoo\x1b[0m\n"


def test_measure():
    console = Console(file=io.StringIO(), width=20)
    _min, _max = Measurement.get(console, console.options, Align("foo bar", "left"))
    assert _min == 3
    assert _max == 7


def test_align_no_pad():
    console = Console(file=io.StringIO(), width=10)
    console.print(Align("foo", "center", pad=False))
    console.print(Align("foo", "left", pad=False))
    assert console.file.getvalue() == "   foo\nfoo\n"


def test_align_width():
    console = Console(file=io.StringIO(), width=40)
    words = "Deep in the human unconscious is a pervasive need for a logical universe that makes sense. But the real universe is always one step beyond logic"
    console.print(Align(words, "center", width=30))
    result = console.file.getvalue()
    expected = "     Deep in the human unconscious      \n     is a pervasive need for a          \n     logical universe that makes        \n     sense. But the real universe       \n     is always one step beyond          \n     logic                              \n"
    assert result == expected


def test_shortcuts():
    assert Align.left("foo").align == "left"
    assert Align.left("foo").renderable == "foo"
    assert Align.right("foo").align == "right"
    assert Align.right("foo").renderable == "foo"
    assert Align.center("foo").align == "center"
    assert Align.center("foo").renderable == "foo"


def test_vertical_center():
    console = Console(color_system=None, height=6)
    console.begin_capture()
    vertical_center = VerticalCenter("foo")
    repr(vertical_center)
    console.print(vertical_center)
    result = console.end_capture()
    print(repr(result))
    expected = "   \n   \nfoo\n   \n   \n   \n"
    assert result == expected
    assert Measurement.get(console, console.options, vertical_center) == Measurement(
        3, 3
    )



================================================
FILE: tests/test_ansi.py
================================================
import pytest

from rich.ansi import AnsiDecoder
from rich.console import Console
from rich.style import Style
from rich.text import Span, Text


def test_decode():
    console = Console(
        force_terminal=True, legacy_windows=False, color_system="truecolor"
    )
    console.begin_capture()
    console.print("Hello")
    console.print("[b]foo[/b]")
    console.print("[link http://example.org]bar")
    console.print("[#ff0000 on color(200)]red")
    console.print("[color(200) on #ff0000]red")
    terminal_codes = console.end_capture()

    decoder = AnsiDecoder()
    lines = list(decoder.decode(terminal_codes))

    expected = [
        Text("Hello"),
        Text("foo", spans=[Span(0, 3, Style.parse("bold"))]),
        Text("bar", spans=[Span(0, 3, Style.parse("link http://example.org"))]),
        Text("red", spans=[Span(0, 3, Style.parse("#ff0000 on color(200)"))]),
        Text("red", spans=[Span(0, 3, Style.parse("color(200) on #ff0000"))]),
    ]

    assert lines == expected


def test_decode_example():
    ansi_bytes = b"\x1b[01m\x1b[KC:\\Users\\stefa\\AppData\\Local\\Temp\\tmp3ydingba:\x1b[m\x1b[K In function '\x1b[01m\x1b[Kmain\x1b[m\x1b[K':\n\x1b[01m\x1b[KC:\\Users\\stefa\\AppData\\Local\\Temp\\tmp3ydingba:3:5:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kunused variable '\x1b[01m\x1b[Ka\x1b[m\x1b[K' [\x1b[01;35m\x1b[K-Wunused-variable\x1b[m\x1b[K]\n    3 | int \x1b[01;35m\x1b[Ka\x1b[m\x1b[K=1;\n      |     \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n"
    ansi_text = ansi_bytes.decode("utf-8")

    text = Text.from_ansi(ansi_text)

    console = Console(
        force_terminal=True, legacy_windows=False, color_system="truecolor"
    )
    with console.capture() as capture:
        console.print(text)
    result = capture.get()
    print(repr(result))
    expected = "\x1b[1mC:\\Users\\stefa\\AppData\\Local\\Temp\\tmp3ydingba:\x1b[0m In function '\x1b[1mmain\x1b[0m':\n\x1b[1mC:\\Users\\stefa\\AppData\\Local\\Temp\\tmp3ydingba:3:5:\x1b[0m \x1b[1;35mwarning: \x1b[0munused variable '\x1b[1ma\x1b[0m' \n[\x1b[1;35m-Wunused-variable\x1b[0m]\n    3 | int \x1b[1;35ma\x1b[0m=1;\n      |     \x1b[1;35m^\x1b[0m\n"
    assert result == expected


@pytest.mark.parametrize(
    "ansi_bytes, expected_text",
    [
        # https://github.com/Textualize/rich/issues/2688
        (
            b"\x1b[31mFound 4 errors in 2 files (checked 18 source files)\x1b(B\x1b[m\n",
            "Found 4 errors in 2 files (checked 18 source files)",
        ),
        # https://mail.python.org/pipermail/python-list/2007-December/424756.html
        (b"Hallo", "Hallo"),
        (b"\x1b(BHallo", "Hallo"),
        (b"\x1b(JHallo", "Hallo"),
        (b"\x1b(BHal\x1b(Jlo", "Hallo"),
    ],
)
def test_decode_issue_2688(ansi_bytes, expected_text):
    text = Text.from_ansi(ansi_bytes.decode())

    assert str(text) == expected_text


@pytest.mark.parametrize("code", [*"0123456789:;<=>?"])
def test_strip_private_escape_sequences(code):
    text = Text.from_ansi(f"\x1b{code}x")

    console = Console(force_terminal=True)

    with console.capture() as capture:
        console.print(text)

    expected = "x\n"

    assert capture.get() == expected



================================================
FILE: tests/test_bar.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x81 in position 5094: illegal multibyte sequence


================================================
FILE: tests/test_block_bar.py
================================================
from rich.bar import Bar
from rich.console import Console

from .render import render


expected = [
    "\x1b[39;49m     ▐█████████████████████████                   \x1b[0m\n",
    "\x1b[39;49m      ██████████████████████▌                     \x1b[0m\n",
    "\x1b[39;49m                                                  \x1b[0m\n",
]


def test_repr():
    bar = Bar(size=100, begin=11, end=62, width=50)
    assert repr(bar) == "Bar(100, 11, 62)"


def test_render():
    bar = Bar(size=100, begin=11, end=62, width=50)
    bar_render = render(bar)
    assert bar_render == expected[0]
    bar = Bar(size=100, begin=12, end=57, width=50)
    bar_render = render(bar)
    assert bar_render == expected[1]
    # begin after end
    bar = Bar(size=100, begin=60, end=40, width=50)
    bar_render = render(bar)
    assert bar_render == expected[2]


def test_measure():
    console = Console(width=120)
    bar = Bar(size=100, begin=11, end=62)
    measurement = bar.__rich_measure__(console, console.options)
    assert measurement.minimum == 4
    assert measurement.maximum == 120


def test_zero_total():
    # Shouldn't throw zero division error
    bar = Bar(size=0, begin=0, end=0)
    render(bar)


if __name__ == "__main__":
    bar = Bar(size=100, begin=11, end=62, width=50)
    bar_render = render(bar)
    print(repr(bar_render))
    bar = Bar(size=100, begin=12, end=57, width=50)
    bar_render = render(bar)
    print(repr(bar_render))
    bar = Bar(size=100, begin=60, end=40, width=50)
    bar_render = render(bar)
    print(repr(bar_render))



================================================
FILE: tests/test_box.py
================================================
import pytest

from rich.console import ConsoleOptions, ConsoleDimensions
from rich.box import (
    ASCII,
    DOUBLE,
    ROUNDED,
    HEAVY,
    SQUARE,
    MINIMAL_HEAVY_HEAD,
    MINIMAL,
    SIMPLE_HEAVY,
    SIMPLE,
    HEAVY_EDGE,
    HEAVY_HEAD,
)


def test_str():
    assert str(ASCII) == "+--+\n| ||\n|-+|\n| ||\n|-+|\n|-+|\n| ||\n+--+\n"


def test_repr():
    assert repr(ASCII) == "Box(...)"


def test_get_top():
    top = HEAVY.get_top(widths=[1, 2])
    assert top == "┏━┳━━┓"


def test_get_row():
    head_row = DOUBLE.get_row(widths=[3, 2, 1], level="head")
    assert head_row == "╠═══╬══╬═╣"

    row = ASCII.get_row(widths=[1, 2, 3], level="row")
    assert row == "|-+--+---|"

    foot_row = ROUNDED.get_row(widths=[2, 1, 3], level="foot")
    assert foot_row == "├──┼─┼───┤"

    with pytest.raises(ValueError):
        ROUNDED.get_row(widths=[1, 2, 3], level="FOO")


def test_get_bottom():
    bottom = HEAVY.get_bottom(widths=[1, 2, 3])
    assert bottom == "┗━┻━━┻━━━┛"


def test_box_substitute_for_same_box():
    options = ConsoleOptions(
        ConsoleDimensions(80, 25),
        legacy_windows=False,
        min_width=1,
        max_width=100,
        is_terminal=True,
        encoding="utf-8",
        max_height=25,
    )

    assert ROUNDED.substitute(options) == ROUNDED
    assert MINIMAL_HEAVY_HEAD.substitute(options) == MINIMAL_HEAVY_HEAD
    assert SIMPLE_HEAVY.substitute(options) == SIMPLE_HEAVY
    assert HEAVY.substitute(options) == HEAVY
    assert HEAVY_EDGE.substitute(options) == HEAVY_EDGE
    assert HEAVY_HEAD.substitute(options) == HEAVY_HEAD


def test_box_substitute_for_different_box_legacy_windows():
    options = ConsoleOptions(
        ConsoleDimensions(80, 25),
        legacy_windows=True,
        min_width=1,
        max_width=100,
        is_terminal=True,
        encoding="utf-8",
        max_height=25,
    )

    assert ROUNDED.substitute(options) == SQUARE
    assert MINIMAL_HEAVY_HEAD.substitute(options) == MINIMAL
    assert SIMPLE_HEAVY.substitute(options) == SIMPLE
    assert HEAVY.substitute(options) == SQUARE
    assert HEAVY_EDGE.substitute(options) == SQUARE
    assert HEAVY_HEAD.substitute(options) == SQUARE


def test_box_substitute_for_different_box_ascii_encoding():
    options = ConsoleOptions(
        ConsoleDimensions(80, 25),
        legacy_windows=True,
        min_width=1,
        max_width=100,
        is_terminal=True,
        encoding="ascii",
        max_height=25,
    )

    assert ROUNDED.substitute(options) == ASCII
    assert MINIMAL_HEAVY_HEAD.substitute(options) == ASCII
    assert SIMPLE_HEAVY.substitute(options) == ASCII
    assert HEAVY.substitute(options) == ASCII
    assert HEAVY_EDGE.substitute(options) == ASCII
    assert HEAVY_HEAD.substitute(options) == ASCII



================================================
FILE: tests/test_card.py
================================================
import io
import re

from rich.__main__ import make_test_card
from rich.console import Console, RenderableType

from ._card_render import expected

re_link_ids = re.compile(r"id=[\d\.\-]*?;.*?\x1b")


def replace_link_ids(render: str) -> str:
    """Link IDs have a random ID and system path which is a problem for
    reproducible tests.

    """
    return re_link_ids.sub("id=0;foo\x1b", render)


def render(renderable: RenderableType) -> str:
    console = Console(
        width=100, file=io.StringIO(), color_system="truecolor", legacy_windows=False
    )
    console.print(renderable)
    output = replace_link_ids(console.file.getvalue())
    return output


def test_card_render():
    card = make_test_card()
    result = render(card)
    print(repr(result))
    assert result == expected


if __name__ == "__main__":
    card = make_test_card()
    with open("_card_render.py", "wt") as fh:
        card_render = render(card)
        print(card_render)
        fh.write(f"expected={card_render!r}")



================================================
FILE: tests/test_cells.py
================================================
[Binary file]


================================================
FILE: tests/test_color.py
================================================
from rich.color import (
    blend_rgb,
    parse_rgb_hex,
    Color,
    ColorParseError,
    ColorSystem,
    ColorType,
    ColorTriplet,
)
from rich.style import Style
from rich.text import Text, Span

import pytest


def test_str() -> None:
    assert str(Color.parse("red")) == "Color('red', ColorType.STANDARD, number=1)"


def test_repr() -> None:
    assert repr(Color.parse("red")) == "Color('red', ColorType.STANDARD, number=1)"


def test_color_system_repr() -> None:
    assert repr(ColorSystem.EIGHT_BIT) == "ColorSystem.EIGHT_BIT"


def test_rich() -> None:
    color = Color.parse("red")
    as_text = color.__rich__()
    print(repr(as_text))
    print(repr(as_text.spans))
    assert as_text == Text(
        "<color 'red' (standard)⬤ >", spans=[Span(23, 24, Style(color=color))]
    )


def test_system() -> None:
    assert Color.parse("default").system == ColorSystem.STANDARD
    assert Color.parse("red").system == ColorSystem.STANDARD
    assert Color.parse("#ff0000").system == ColorSystem.TRUECOLOR


def test_windows() -> None:
    assert Color("red", ColorType.WINDOWS, number=1).get_ansi_codes() == ("31",)


def test_truecolor() -> None:
    assert Color.parse("#ff0000").get_truecolor() == ColorTriplet(255, 0, 0)
    assert Color.parse("red").get_truecolor() == ColorTriplet(128, 0, 0)
    assert Color.parse("color(1)").get_truecolor() == ColorTriplet(128, 0, 0)
    assert Color.parse("color(17)").get_truecolor() == ColorTriplet(0, 0, 95)
    assert Color.parse("default").get_truecolor() == ColorTriplet(0, 0, 0)
    assert Color.parse("default").get_truecolor(foreground=False) == ColorTriplet(
        255, 255, 255
    )
    assert Color("red", ColorType.WINDOWS, number=1).get_truecolor() == ColorTriplet(
        197, 15, 31
    )


def test_parse_success() -> None:
    assert Color.parse("default") == Color("default", ColorType.DEFAULT, None, None)
    assert Color.parse("red") == Color("red", ColorType.STANDARD, 1, None)
    assert Color.parse("bright_red") == Color("bright_red", ColorType.STANDARD, 9, None)
    assert Color.parse("yellow4") == Color("yellow4", ColorType.EIGHT_BIT, 106, None)
    assert Color.parse("color(100)") == Color(
        "color(100)", ColorType.EIGHT_BIT, 100, None
    )
    assert Color.parse("#112233") == Color(
        "#112233", ColorType.TRUECOLOR, None, ColorTriplet(0x11, 0x22, 0x33)
    )
    assert Color.parse("rgb(90,100,110)") == Color(
        "rgb(90,100,110)", ColorType.TRUECOLOR, None, ColorTriplet(90, 100, 110)
    )


def test_from_triplet() -> None:
    assert Color.from_triplet(ColorTriplet(0x10, 0x20, 0x30)) == Color(
        "#102030", ColorType.TRUECOLOR, None, ColorTriplet(0x10, 0x20, 0x30)
    )


def test_from_rgb() -> None:
    assert Color.from_rgb(0x10, 0x20, 0x30) == Color(
        "#102030", ColorType.TRUECOLOR, None, ColorTriplet(0x10, 0x20, 0x30)
    )


def test_from_ansi() -> None:
    assert Color.from_ansi(1) == Color("color(1)", ColorType.STANDARD, 1)


def test_default() -> None:
    assert Color.default() == Color("default", ColorType.DEFAULT, None, None)


def test_parse_error() -> None:
    with pytest.raises(ColorParseError):
        Color.parse("256")
    with pytest.raises(ColorParseError):
        Color.parse("color(256)")
    with pytest.raises(ColorParseError):
        Color.parse("rgb(999,0,0)")
    with pytest.raises(ColorParseError):
        Color.parse("rgb(0,0)")
    with pytest.raises(ColorParseError):
        Color.parse("rgb(0,0,0,0)")
    with pytest.raises(ColorParseError):
        Color.parse("nosuchcolor")
    with pytest.raises(ColorParseError):
        Color.parse("#xxyyzz")


def test_get_ansi_codes() -> None:
    assert Color.parse("default").get_ansi_codes() == ("39",)
    assert Color.parse("default").get_ansi_codes(False) == ("49",)
    assert Color.parse("red").get_ansi_codes() == ("31",)
    assert Color.parse("red").get_ansi_codes(False) == ("41",)
    assert Color.parse("color(1)").get_ansi_codes() == ("31",)
    assert Color.parse("color(1)").get_ansi_codes(False) == ("41",)
    assert Color.parse("#ff0000").get_ansi_codes() == ("38", "2", "255", "0", "0")
    assert Color.parse("#ff0000").get_ansi_codes(False) == ("48", "2", "255", "0", "0")


def test_downgrade() -> None:
    assert Color.parse("color(9)").downgrade(0) == Color(
        "color(9)", ColorType.STANDARD, 9, None
    )

    assert Color.parse("#000000").downgrade(ColorSystem.EIGHT_BIT) == Color(
        "#000000", ColorType.EIGHT_BIT, 16, None
    )

    assert Color.parse("#ffffff").downgrade(ColorSystem.EIGHT_BIT) == Color(
        "#ffffff", ColorType.EIGHT_BIT, 231, None
    )

    assert Color.parse("#404142").downgrade(ColorSystem.EIGHT_BIT) == Color(
        "#404142", ColorType.EIGHT_BIT, 237, None
    )

    assert Color.parse("#ff0000").downgrade(ColorSystem.EIGHT_BIT) == Color(
        "#ff0000", ColorType.EIGHT_BIT, 196, None
    )

    assert Color.parse("#ff0000").downgrade(ColorSystem.STANDARD) == Color(
        "#ff0000", ColorType.STANDARD, 1, None
    )

    assert Color.parse("color(9)").downgrade(ColorSystem.STANDARD) == Color(
        "color(9)", ColorType.STANDARD, 9, None
    )

    assert Color.parse("color(20)").downgrade(ColorSystem.STANDARD) == Color(
        "color(20)", ColorType.STANDARD, 4, None
    )

    assert Color.parse("red").downgrade(ColorSystem.WINDOWS) == Color(
        "red", ColorType.WINDOWS, 1, None
    )

    assert Color.parse("bright_red").downgrade(ColorSystem.WINDOWS) == Color(
        "bright_red", ColorType.WINDOWS, 9, None
    )

    assert Color.parse("#ff0000").downgrade(ColorSystem.WINDOWS) == Color(
        "#ff0000", ColorType.WINDOWS, 1, None
    )

    assert Color.parse("color(255)").downgrade(ColorSystem.WINDOWS) == Color(
        "color(255)", ColorType.WINDOWS, 15, None
    )

    assert Color.parse("#00ff00").downgrade(ColorSystem.STANDARD) == Color(
        "#00ff00", ColorType.STANDARD, 2, None
    )


def test_parse_rgb_hex() -> None:
    assert parse_rgb_hex("aabbcc") == ColorTriplet(0xAA, 0xBB, 0xCC)


def test_blend_rgb() -> None:
    assert blend_rgb(
        ColorTriplet(10, 20, 30), ColorTriplet(30, 40, 50)
    ) == ColorTriplet(20, 30, 40)



================================================
FILE: tests/test_color_triplet.py
================================================
from rich.color_triplet import ColorTriplet


def test_hex():
    assert ColorTriplet(255, 255, 255).hex == "#ffffff"
    assert ColorTriplet(0, 255, 0).hex == "#00ff00"


def test_rgb():
    assert ColorTriplet(255, 255, 255).rgb == "rgb(255,255,255)"
    assert ColorTriplet(0, 255, 0).rgb == "rgb(0,255,0)"


def test_normalized():
    assert ColorTriplet(255, 255, 255).normalized == (1.0, 1.0, 1.0)
    assert ColorTriplet(0, 255, 0).normalized == (0.0, 1.0, 0.0)



================================================
FILE: tests/test_columns.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x80 in position 1646: illegal multibyte sequence


================================================
FILE: tests/test_columns_align.py
================================================
[Binary file]


================================================
FILE: tests/test_console.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xad in position 14799: illegal multibyte sequence


================================================
FILE: tests/test_constrain.py
================================================
from rich.console import Console
from rich.constrain import Constrain
from rich.text import Text


def test_width_of_none():
    console = Console()
    constrain = Constrain(Text("foo"), width=None)
    min_width, max_width = constrain.__rich_measure__(
        console, console.options.update_width(80)
    )
    assert min_width == 3
    assert max_width == 3



================================================
FILE: tests/test_containers.py
================================================
from rich.console import Console
from rich.containers import Lines, Renderables
from rich.text import Span, Text
from rich.style import Style


def test_renderables_measure():
    console = Console()
    text = Text("foo")
    renderables = Renderables([text])

    result = renderables.__rich_measure__(console, console.options)
    _min, _max = result
    assert _min == 3
    assert _max == 3

    assert list(renderables) == [text]


def test_renderables_empty():
    console = Console()
    renderables = Renderables()

    result = renderables.__rich_measure__(console, console.options)
    _min, _max = result
    assert _min == 1
    assert _max == 1


def test_lines_rich_console():
    console = Console()
    lines = Lines([Text("foo")])

    result = list(lines.__rich_console__(console, console.options))
    assert result == [Text("foo")]


def test_lines_justify():
    console = Console()
    lines1 = Lines([Text("foo", style="b"), Text("test", style="b")])
    lines1.justify(console, 10, justify="left")
    assert lines1._lines == [Text("foo       "), Text("test      ")]
    lines1.justify(console, 10, justify="center")
    assert lines1._lines == [Text("   foo    "), Text("   test   ")]
    lines1.justify(console, 10, justify="right")
    assert lines1._lines == [Text("       foo"), Text("      test")]

    lines2 = Lines([Text("foo bar", style="b"), Text("test", style="b")])
    lines2.justify(console, 7, justify="full")
    print(repr(lines2._lines[0].spans))
    assert lines2._lines == [
        Text(
            "foo bar",
            spans=[Span(0, 3, "b"), Span(3, 4, Style.parse("bold")), Span(4, 7, "b")],
        ),
        Text("test"),
    ]



================================================
FILE: tests/test_control.py
================================================
from rich.control import Control, escape_control_codes, strip_control_codes
from rich.segment import ControlType, Segment


def test_control():
    control = Control(ControlType.BELL)
    assert str(control) == "\x07"


def test_strip_control_codes():
    assert strip_control_codes("") == ""
    assert strip_control_codes("foo\rbar") == "foobar"
    assert strip_control_codes("Fear is the mind killer") == "Fear is the mind killer"


def test_escape_control_codes():
    assert escape_control_codes("") == ""
    assert escape_control_codes("foo\rbar") == "foo\\rbar"
    assert escape_control_codes("Fear is the mind killer") == "Fear is the mind killer"


def test_control_move_to():
    control = Control.move_to(5, 10)
    print(control.segment)
    assert control.segment == Segment(
        "\x1b[11;6H", None, [(ControlType.CURSOR_MOVE_TO, 5, 10)]
    )


def test_control_move():
    assert Control.move(0, 0).segment == Segment("", None, [])
    control = Control.move(3, 4)
    print(repr(control.segment))
    assert control.segment == Segment(
        "\x1b[3C\x1b[4B",
        None,
        [(ControlType.CURSOR_FORWARD, 3), (ControlType.CURSOR_DOWN, 4)],
    )


def test_move_to_column():
    print(repr(Control.move_to_column(10, 20).segment))
    assert Control.move_to_column(10, 20).segment == Segment(
        "\x1b[11G\x1b[20B",
        None,
        [(ControlType.CURSOR_MOVE_TO_COLUMN, 10), (ControlType.CURSOR_DOWN, 20)],
    )

    assert Control.move_to_column(10, -20).segment == Segment(
        "\x1b[11G\x1b[20A",
        None,
        [(ControlType.CURSOR_MOVE_TO_COLUMN, 10), (ControlType.CURSOR_UP, 20)],
    )


def test_title():
    control_segment = Control.title("hello").segment
    assert control_segment == Segment(
        "\x1b]0;hello\x07",
        None,
        [(ControlType.SET_WINDOW_TITLE, "hello")],
    )



================================================
FILE: tests/test_emoji.py
================================================
import pytest

from rich.emoji import Emoji, NoEmoji

from .render import render


def test_no_emoji():
    with pytest.raises(NoEmoji):
        Emoji("ambivalent_bunny")


def test_str_repr():
    assert str(Emoji("pile_of_poo")) == "💩"
    assert repr(Emoji("pile_of_poo")) == "<emoji 'pile_of_poo'>"


def test_replace():
    assert Emoji.replace("my code is :pile_of_poo:") == "my code is 💩"


def test_render():
    render_result = render(Emoji("pile_of_poo"))
    assert render_result == "💩"


def test_variant():
    print(repr(Emoji.replace(":warning:")))
    assert Emoji.replace(":warning:") == "⚠"
    assert Emoji.replace(":warning-text:") == "⚠" + "\uFE0E"
    assert Emoji.replace(":warning-emoji:") == "⚠" + "\uFE0F"
    assert Emoji.replace(":warning-foo:") == ":warning-foo:"


def test_variant_non_default():
    render_result = render(Emoji("warning", variant="emoji"))
    assert render_result == "⚠" + "\uFE0F"



================================================
FILE: tests/test_file_proxy.py
================================================
import io
import sys

import pytest

from rich.console import Console
from rich.file_proxy import FileProxy


def test_empty_bytes():
    console = Console()
    file_proxy = FileProxy(console, sys.stdout)
    # File should raise TypeError when writing bytes
    with pytest.raises(TypeError):
        file_proxy.write(b"")  # type: ignore
    with pytest.raises(TypeError):
        file_proxy.write(b"foo")  # type: ignore


def test_flush():
    file = io.StringIO()
    console = Console(file=file)
    file_proxy = FileProxy(console, file)
    file_proxy.write("foo")
    assert file.getvalue() == ""
    file_proxy.flush()
    assert file.getvalue() == "foo\n"


def test_new_lines():
    file = io.StringIO()
    console = Console(file=file)
    file_proxy = FileProxy(console, file)
    file_proxy.write("-\n-")
    assert file.getvalue() == "-\n"
    file_proxy.flush()
    assert file.getvalue() == "-\n-\n"



================================================
FILE: tests/test_filesize.py
================================================
from rich import filesize


def test_traditional():
    assert filesize.decimal(0) == "0 bytes"
    assert filesize.decimal(1) == "1 byte"
    assert filesize.decimal(2) == "2 bytes"
    assert filesize.decimal(1000) == "1.0 kB"
    assert filesize.decimal(1.5 * 1000 * 1000) == "1.5 MB"
    assert filesize.decimal(0, precision=2) == "0 bytes"
    assert filesize.decimal(1111, precision=0) == "1 kB"
    assert filesize.decimal(1111, precision=1) == "1.1 kB"
    assert filesize.decimal(1111, precision=2) == "1.11 kB"
    assert filesize.decimal(1111, separator="") == "1.1kB"


def test_pick_unit_and_suffix():
    units = ["bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
    assert filesize.pick_unit_and_suffix(50, units, 1024) == (1, "bytes")
    assert filesize.pick_unit_and_suffix(2048, units, 1024) == (1024, "KB")



================================================
FILE: tests/test_getfileno.py
================================================
from rich._fileno import get_fileno


def test_get_fileno():
    class FileLike:
        def fileno(self) -> int:
            return 123

    assert get_fileno(FileLike()) == 123


def test_get_fileno_missing():
    class FileLike:
        pass

    assert get_fileno(FileLike()) is None


def test_get_fileno_broken():
    class FileLike:
        def fileno(self) -> int:
            1 / 0
            return 123

    assert get_fileno(FileLike()) is None



================================================
FILE: tests/test_highlighter.py
================================================
"""Tests for the highlighter classes."""
import json
from typing import List

import pytest

from rich.highlighter import (
    ISO8601Highlighter,
    JSONHighlighter,
    NullHighlighter,
    ReprHighlighter,
)
from rich.text import Span, Text


def test_wrong_type():
    highlighter = NullHighlighter()
    with pytest.raises(TypeError):
        highlighter([])


highlight_tests = [
    ("", []),
    (" ", []),
    (
        "<foo>",
        [
            Span(0, 1, "repr.tag_start"),
            Span(1, 4, "repr.tag_name"),
            Span(4, 5, "repr.tag_end"),
        ],
    ),
    (
        "<foo: 23>",
        [
            Span(0, 1, "repr.tag_start"),
            Span(1, 5, "repr.tag_name"),
            Span(5, 8, "repr.tag_contents"),
            Span(8, 9, "repr.tag_end"),
            Span(6, 8, "repr.number"),
        ],
    ),
    (
        "<foo: <bar: 23>>",
        [
            Span(0, 1, "repr.tag_start"),
            Span(1, 5, "repr.tag_name"),
            Span(5, 15, "repr.tag_contents"),
            Span(15, 16, "repr.tag_end"),
            Span(12, 14, "repr.number"),
        ],
    ),
    (
        "False True None",
        [
            Span(0, 5, "repr.bool_false"),
            Span(6, 10, "repr.bool_true"),
            Span(11, 15, "repr.none"),
        ],
    ),
    ("foo=bar", [Span(0, 3, "repr.attrib_name"), Span(4, 7, "repr.attrib_value")]),
    (
        'foo="bar"',
        [
            Span(0, 3, "repr.attrib_name"),
            Span(4, 9, "repr.attrib_value"),
            Span(4, 9, "repr.str"),
        ],
    ),
    (
        "<Permission.WRITE|READ: 3>",
        [
            Span(0, 1, "repr.tag_start"),
            Span(1, 23, "repr.tag_name"),
            Span(23, 25, "repr.tag_contents"),
            Span(25, 26, "repr.tag_end"),
            Span(24, 25, "repr.number"),
        ],
    ),
    ("( )", [Span(0, 1, "repr.brace"), Span(2, 3, "repr.brace")]),
    ("[ ]", [Span(0, 1, "repr.brace"), Span(2, 3, "repr.brace")]),
    ("{ }", [Span(0, 1, "repr.brace"), Span(2, 3, "repr.brace")]),
    (" 1 ", [Span(1, 2, "repr.number")]),
    (" 1.2 ", [Span(1, 4, "repr.number")]),
    (" 0xff ", [Span(1, 5, "repr.number")]),
    (" 1e10 ", [Span(1, 5, "repr.number")]),
    (" 1j ", [Span(1, 3, "repr.number_complex")]),
    (" 3.14j ", [Span(1, 6, "repr.number_complex")]),
    (
        " (3.14+2.06j) ",
        [
            Span(1, 2, "repr.brace"),
            Span(12, 13, "repr.brace"),
            Span(2, 12, "repr.number_complex"),
        ],
    ),
    (
        " (3+2j) ",
        [
            Span(1, 2, "repr.brace"),
            Span(6, 7, "repr.brace"),
            Span(2, 6, "repr.number_complex"),
        ],
    ),
    (
        " (123456.4321-1234.5678j) ",
        [
            Span(1, 2, "repr.brace"),
            Span(24, 25, "repr.brace"),
            Span(2, 24, "repr.number_complex"),
        ],
    ),
    (
        " (-123123-2.1312342342423422e+25j) ",
        [
            Span(1, 2, "repr.brace"),
            Span(33, 34, "repr.brace"),
            Span(2, 33, "repr.number_complex"),
        ],
    ),
    (" /foo ", [Span(1, 2, "repr.path"), Span(2, 5, "repr.filename")]),
    (" /foo/bar.html ", [Span(1, 6, "repr.path"), Span(6, 14, "repr.filename")]),
    ("01-23-45-67-89-AB", [Span(0, 17, "repr.eui48")]),  # 6x2 hyphen
    ("01-23-45-FF-FE-67-89-AB", [Span(0, 23, "repr.eui64")]),  # 8x2 hyphen
    ("01:23:45:67:89:AB", [Span(0, 17, "repr.ipv6")]),  # 6x2 colon
    ("01:23:45:FF:FE:67:89:AB", [Span(0, 23, "repr.ipv6")]),  # 8x2 colon
    ("0123.4567.89AB", [Span(0, 14, "repr.eui48")]),  # 3x4 dot
    ("0123.45FF.FE67.89AB", [Span(0, 19, "repr.eui64")]),  # 4x4 dot
    ("ed-ed-ed-ed-ed-ed", [Span(0, 17, "repr.eui48")]),  # lowercase
    ("ED-ED-ED-ED-ED-ED", [Span(0, 17, "repr.eui48")]),  # uppercase
    ("Ed-Ed-Ed-Ed-Ed-Ed", [Span(0, 17, "repr.eui48")]),  # mixed case
    ("0-00-1-01-2-02", [Span(0, 14, "repr.eui48")]),  # dropped zero
    (" https://example.org ", [Span(1, 20, "repr.url")]),
    (" http://example.org ", [Span(1, 19, "repr.url")]),
    (" http://example.org/index.html ", [Span(1, 30, "repr.url")]),
    (" http://example.org/index.html#anchor ", [Span(1, 37, "repr.url")]),
    ("https://www.youtube.com/@LinusTechTips", [Span(0, 38, "repr.url")]),
    (
        " http://example.org/index.html?param1=value1 ",
        [
            Span(31, 37, "repr.attrib_name"),
            Span(38, 44, "repr.attrib_value"),
            Span(1, 44, "repr.url"),
        ],
    ),
    (" http://example.org/~folder ", [Span(1, 27, "repr.url")]),
    ("No place like 127.0.0.1", [Span(14, 23, "repr.ipv4")]),
    ("''", [Span(0, 2, "repr.str")]),
    ("'hello'", [Span(0, 7, "repr.str")]),
    ("'''hello'''", [Span(0, 11, "repr.str")]),
    ('""', [Span(0, 2, "repr.str")]),
    ('"hello"', [Span(0, 7, "repr.str")]),
    ('"""hello"""', [Span(0, 11, "repr.str")]),
    ("\\'foo'", []),
    ("it's no 'string'", [Span(8, 16, "repr.str")]),
    ("78351748-9b32-4e08-ad3e-7e9ff124d541", [Span(0, 36, "repr.uuid")]),
]


@pytest.mark.parametrize("test, spans", highlight_tests)
def test_highlight_regex(test: str, spans: List[Span]):
    """Tests for the regular expressions used in ReprHighlighter."""
    text = Text(test)
    highlighter = ReprHighlighter()
    highlighter.highlight(text)
    print(text.spans)
    assert text.spans == spans


def test_highlight_json_with_indent():
    json_string = json.dumps({"name": "apple", "count": 1}, indent=4)
    text = Text(json_string)
    highlighter = JSONHighlighter()
    highlighter.highlight(text)
    assert text.spans == [
        Span(0, 1, "json.brace"),
        Span(6, 12, "json.str"),
        Span(14, 21, "json.str"),
        Span(27, 34, "json.str"),
        Span(36, 37, "json.number"),
        Span(38, 39, "json.brace"),
        Span(6, 12, "json.key"),
        Span(27, 34, "json.key"),
    ]


def test_highlight_json_string_only():
    json_string = '"abc"'
    text = Text(json_string)
    highlighter = JSONHighlighter()
    highlighter.highlight(text)
    assert text.spans == [Span(0, 5, "json.str")]


def test_highlight_json_empty_string_only():
    json_string = '""'
    text = Text(json_string)
    highlighter = JSONHighlighter()
    highlighter.highlight(text)
    assert text.spans == [Span(0, 2, "json.str")]


def test_highlight_json_no_indent():
    json_string = json.dumps({"name": "apple", "count": 1}, indent=None)
    text = Text(json_string)
    highlighter = JSONHighlighter()
    highlighter.highlight(text)
    assert text.spans == [
        Span(0, 1, "json.brace"),
        Span(1, 7, "json.str"),
        Span(9, 16, "json.str"),
        Span(18, 25, "json.str"),
        Span(27, 28, "json.number"),
        Span(28, 29, "json.brace"),
        Span(1, 7, "json.key"),
        Span(18, 25, "json.key"),
    ]


iso8601_highlight_tests = [
    ("2008-08", [Span(0, 4, "iso8601.year"), Span(5, 7, "iso8601.month")]),
    (
        "2008-08-30",
        [
            Span(0, 10, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(5, 7, "iso8601.month"),
            Span(8, 10, "iso8601.day"),
        ],
    ),
    (
        "20080830",
        [
            Span(0, 8, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(4, 6, "iso8601.month"),
            Span(6, 8, "iso8601.day"),
        ],
    ),
    (
        "2008-243",
        [
            Span(0, 8, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(5, 8, "iso8601.day"),
        ],
    ),
    (
        "2008243",
        [
            Span(0, 7, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(4, 7, "iso8601.day"),
        ],
    ),
    (
        "2008-W35",
        [
            Span(0, 8, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(6, 8, "iso8601.week"),
        ],
    ),
    (
        "2008W35",
        [
            Span(0, 7, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(5, 7, "iso8601.week"),
        ],
    ),
    (
        "2008-W35-6",
        [
            Span(0, 10, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(6, 8, "iso8601.week"),
            Span(9, 10, "iso8601.day"),
        ],
    ),
    (
        "2008W356",
        [
            Span(0, 8, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(5, 7, "iso8601.week"),
            Span(7, 8, "iso8601.day"),
        ],
    ),
    (
        "17:21",
        [
            Span(0, 5, "iso8601.time"),
            Span(0, 2, "iso8601.hour"),
            Span(3, 5, "iso8601.minute"),
        ],
    ),
    (
        "1721",
        [
            Span(0, 4, "iso8601.time"),
            Span(0, 2, "iso8601.hour"),
            Span(2, 4, "iso8601.minute"),
        ],
    ),
    (
        "172159",
        [
            Span(0, 6, "iso8601.time"),
            Span(0, 2, "iso8601.hour"),
            Span(2, 4, "iso8601.minute"),
            Span(4, 6, "iso8601.second"),
        ],
    ),
    ("Z", [Span(0, 1, "iso8601.timezone")]),
    ("+07", [Span(0, 3, "iso8601.timezone")]),
    ("+07:00", [Span(0, 6, "iso8601.timezone")]),
    (
        "17:21:59+07:00",
        [
            Span(0, 8, "iso8601.time"),
            Span(0, 2, "iso8601.hour"),
            Span(3, 5, "iso8601.minute"),
            Span(6, 8, "iso8601.second"),
            Span(8, 14, "iso8601.timezone"),
        ],
    ),
    (
        "172159+0700",
        [
            Span(0, 6, "iso8601.time"),
            Span(0, 2, "iso8601.hour"),
            Span(2, 4, "iso8601.minute"),
            Span(4, 6, "iso8601.second"),
            Span(6, 11, "iso8601.timezone"),
        ],
    ),
    (
        "172159+07",
        [
            Span(0, 6, "iso8601.time"),
            Span(0, 2, "iso8601.hour"),
            Span(2, 4, "iso8601.minute"),
            Span(4, 6, "iso8601.second"),
            Span(6, 9, "iso8601.timezone"),
        ],
    ),
    (
        "2008-08-30 17:21:59",
        [
            Span(0, 10, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(4, 5, "iso8601.hyphen"),
            Span(5, 7, "iso8601.month"),
            Span(8, 10, "iso8601.day"),
            Span(11, 19, "iso8601.time"),
            Span(11, 13, "iso8601.hour"),
            Span(14, 16, "iso8601.minute"),
            Span(17, 19, "iso8601.second"),
        ],
    ),
    (
        "20080830 172159",
        [
            Span(0, 8, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(4, 6, "iso8601.month"),
            Span(6, 8, "iso8601.day"),
            Span(9, 15, "iso8601.time"),
            Span(9, 11, "iso8601.hour"),
            Span(11, 13, "iso8601.minute"),
            Span(13, 15, "iso8601.second"),
        ],
    ),
    (
        "2008-08-30",
        [
            Span(0, 10, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(5, 7, "iso8601.month"),
            Span(8, 10, "iso8601.day"),
        ],
    ),
    (
        "2008-08-30+07:00",
        [
            Span(0, 10, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(5, 7, "iso8601.month"),
            Span(8, 10, "iso8601.day"),
            Span(10, 16, "iso8601.timezone"),
        ],
    ),
    (
        "01:45:36",
        [
            Span(0, 8, "iso8601.time"),
            Span(0, 2, "iso8601.hour"),
            Span(3, 5, "iso8601.minute"),
            Span(6, 8, "iso8601.second"),
        ],
    ),
    (
        "01:45:36.123+07:00",
        [
            Span(0, 12, "iso8601.time"),
            Span(0, 2, "iso8601.hour"),
            Span(3, 5, "iso8601.minute"),
            Span(6, 8, "iso8601.second"),
            Span(8, 12, "iso8601.frac"),
            Span(12, 18, "iso8601.timezone"),
        ],
    ),
    (
        "01:45:36.123+07:00",
        [
            Span(0, 12, "iso8601.time"),
            Span(0, 2, "iso8601.hour"),
            Span(3, 5, "iso8601.minute"),
            Span(6, 8, "iso8601.second"),
            Span(8, 12, "iso8601.frac"),
            Span(12, 18, "iso8601.timezone"),
        ],
    ),
    (
        "2008-08-30T01:45:36",
        [
            Span(0, 10, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(5, 7, "iso8601.month"),
            Span(8, 10, "iso8601.day"),
            Span(11, 19, "iso8601.time"),
            Span(11, 13, "iso8601.hour"),
            Span(14, 16, "iso8601.minute"),
            Span(17, 19, "iso8601.second"),
        ],
    ),
    (
        "2008-08-30T01:45:36.123Z",
        [
            Span(0, 10, "iso8601.date"),
            Span(0, 4, "iso8601.year"),
            Span(5, 7, "iso8601.month"),
            Span(8, 10, "iso8601.day"),
            Span(11, 23, "iso8601.time"),
            Span(11, 13, "iso8601.hour"),
            Span(14, 16, "iso8601.minute"),
            Span(17, 19, "iso8601.second"),
            Span(19, 23, "iso8601.ms"),
            Span(23, 24, "iso8601.timezone"),
        ],
    ),
]


@pytest.mark.parametrize("test, spans", iso8601_highlight_tests)
def test_highlight_iso8601_regex(test: str, spans: List[Span]):
    """Tests for the regular expressions used in ISO8601Highlighter."""
    text = Text(test)
    highlighter = ISO8601Highlighter()
    highlighter.highlight(text)
    print(text.spans)
    assert text.spans == spans



================================================
FILE: tests/test_inspect.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xad in position 2394: illegal multibyte sequence


================================================
FILE: tests/test_json.py
================================================
from rich.json import JSON
import datetime


def test_print_json_data_with_default():
    date = datetime.date(2021, 1, 1)
    json = JSON.from_data({"date": date}, default=lambda d: d.isoformat())
    assert str(json.text) == '{\n  "date": "2021-01-01"\n}'



================================================
FILE: tests/test_jupyter.py
================================================
from rich.console import Console


def test_jupyter():
    console = Console(force_jupyter=True)
    assert console.width == 115
    assert console.height == 100
    assert console.color_system == "truecolor"


def test_jupyter_columns_env():
    console = Console(_environ={"JUPYTER_COLUMNS": "314"}, force_jupyter=True)
    assert console.width == 314
    # width take precedence
    console = Console(width=40, _environ={"JUPYTER_COLUMNS": "314"}, force_jupyter=True)
    assert console.width == 40
    # Should not fail
    console = Console(
        width=40, _environ={"JUPYTER_COLUMNS": "broken"}, force_jupyter=True
    )


def test_jupyter_lines_env():
    console = Console(_environ={"JUPYTER_LINES": "220"}, force_jupyter=True)
    assert console.height == 220
    # height take precedence
    console = Console(height=40, _environ={"JUPYTER_LINES": "220"}, force_jupyter=True)
    assert console.height == 40
    # Should not fail
    console = Console(
        width=40, _environ={"JUPYTER_LINES": "broken"}, force_jupyter=True
    )



================================================
FILE: tests/test_layout.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xad in position 1635: illegal multibyte sequence


================================================
FILE: tests/test_live.py
================================================
# encoding=utf-8
import time
from typing import Optional

# import pytest
from rich.console import Console
from rich.live import Live
from rich.text import Text


def create_capture_console(
    *, width: int = 60, height: int = 80, force_terminal: Optional[bool] = True
) -> Console:
    return Console(
        width=width,
        height=height,
        force_terminal=force_terminal,
        legacy_windows=False,
        color_system=None,  # use no color system to reduce complexity of output,
        _environ={},
    )


def test_live_state() -> None:
    with Live("") as live:
        assert live._started
        live.start()

        assert live.get_renderable() == ""

        assert live._started
        live.stop()
        assert not live._started

    assert not live._started


def test_growing_display() -> None:
    console = create_capture_console()
    console.begin_capture()
    with Live(console=console, auto_refresh=False) as live:
        display = ""
        for step in range(10):
            display += f"Step {step}\n"
            live.update(display, refresh=True)
    output = console.end_capture()
    print(repr(output))
    assert (
        output
        == "\x1b[?25lStep 0\n\r\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\nStep 9\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\nStep 9\n\n\x1b[?25h"
    )


def test_growing_display_transient() -> None:
    console = create_capture_console()
    console.begin_capture()
    with Live(console=console, auto_refresh=False, transient=True) as live:
        display = ""
        for step in range(10):
            display += f"Step {step}\n"
            live.update(display, refresh=True)
    output = console.end_capture()
    assert (
        output
        == "\x1b[?25lStep 0\n\r\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\nStep 9\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\nStep 9\n\n\x1b[?25h\r\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K"
    )


def test_growing_display_overflow_ellipsis() -> None:
    console = create_capture_console(height=5)
    console.begin_capture()
    with Live(
        console=console, auto_refresh=False, vertical_overflow="ellipsis"
    ) as live:
        display = ""
        for step in range(10):
            display += f"Step {step}\n"
            live.update(display, refresh=True)
    output = console.end_capture()
    assert (
        output
        == "\x1b[?25lStep 0\n\r\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\n                            ...                             \r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\n                            ...                             \r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\n                            ...                             \r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\n                            ...                             \r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\n                            ...                             \r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\n                            ...                             \r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\nStep 9\n\n\x1b[?25h"
    )


def test_growing_display_overflow_crop() -> None:
    console = create_capture_console(height=5)
    console.begin_capture()
    with Live(console=console, auto_refresh=False, vertical_overflow="crop") as live:
        display = ""
        for step in range(10):
            display += f"Step {step}\n"
            live.update(display, refresh=True)
    output = console.end_capture()
    assert (
        output
        == "\x1b[?25lStep 0\n\r\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\nStep 9\n\n\x1b[?25h"
    )


def test_growing_display_overflow_visible() -> None:
    console = create_capture_console(height=5)
    console.begin_capture()
    with Live(console=console, auto_refresh=False, vertical_overflow="visible") as live:
        display = ""
        for step in range(10):
            display += f"Step {step}\n"
            live.update(display, refresh=True)
    output = console.end_capture()
    assert (
        output
        == "\x1b[?25lStep 0\n\r\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\nStep 9\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\nStep 9\n\n\x1b[?25h"
    )


def test_growing_display_autorefresh() -> None:
    """Test generating a table but using auto-refresh from threading"""
    console = create_capture_console(height=5)
    console.begin_capture()
    with Live(console=console, auto_refresh=True, vertical_overflow="visible") as live:
        display = ""
        for step in range(10):
            display += f"Step {step}\n"
            live.update(display)
            time.sleep(0.2)

    # no way to truly test w/ multithreading, just make sure it doesn't crash


def test_growing_display_console_redirect() -> None:
    console = create_capture_console()
    console.begin_capture()
    with Live(console=console, auto_refresh=False) as live:
        display = ""
        for step in range(10):
            console.print(f"Running step {step}")
            display += f"Step {step}\n"
            live.update(display, refresh=True)
    output = console.end_capture()
    assert (
        output
        == "\x1b[?25lRunning step 0\n\r\x1b[2KStep 0\n\r\x1b[2K\x1b[1A\x1b[2KRunning step 1\nStep 0\n\r\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KRunning step 2\nStep 0\nStep 1\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KRunning step 3\nStep 0\nStep 1\nStep 2\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KRunning step 4\nStep 0\nStep 1\nStep 2\nStep 3\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KRunning step 5\nStep 0\nStep 1\nStep 2\nStep 3\nStep 4\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KRunning step 6\nStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KRunning step 7\nStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KRunning step 8\nStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KRunning step 9\nStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\nStep 9\n\r\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2K\x1b[1A\x1b[2KStep 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\nStep 9\n\n\x1b[?25h"
    )


def test_growing_display_file_console() -> None:
    console = create_capture_console(force_terminal=False)
    console.begin_capture()
    with Live(console=console, auto_refresh=False) as live:
        display = ""
        for step in range(10):
            display += f"Step {step}\n"
            live.update(display, refresh=True)
    output = console.end_capture()
    assert (
        output
        == "Step 0\nStep 1\nStep 2\nStep 3\nStep 4\nStep 5\nStep 6\nStep 7\nStep 8\nStep 9\n"
    )


def test_live_screen() -> None:
    console = create_capture_console(width=20, height=5)
    console.begin_capture()
    with Live(Text("foo"), screen=True, console=console, auto_refresh=False) as live:
        live.refresh()
    result = console.end_capture()
    print(repr(result))
    expected = "\x1b[?1049h\x1b[H\x1b[?25l\x1b[Hfoo                 \n                    \n                    \n                    \n                    \x1b[Hfoo                 \n                    \n                    \n                    \n                    \x1b[?25h\x1b[?1049l"
    assert result == expected



================================================
FILE: tests/test_live_render.py
================================================
import pytest
from rich.live_render import LiveRender
from rich.console import Console, ConsoleDimensions, ConsoleOptions
from rich.style import Style
from rich.segment import Segment


@pytest.fixture
def live_render():
    return LiveRender(renderable="my string")


def test_renderable(live_render):
    assert live_render.renderable == "my string"
    live_render.set_renderable("another string")
    assert live_render.renderable == "another string"


def test_position_cursor(live_render):
    assert str(live_render.position_cursor()) == ""
    live_render._shape = (80, 2)
    assert str(live_render.position_cursor()) == "\r\x1b[2K\x1b[1A\x1b[2K"


def test_restore_cursor(live_render):
    assert str(live_render.restore_cursor()) == ""
    live_render._shape = (80, 2)
    assert str(live_render.restore_cursor()) == "\r\x1b[1A\x1b[2K\x1b[1A\x1b[2K"


def test_rich_console(live_render):
    options = ConsoleOptions(
        ConsoleDimensions(80, 25),
        max_height=25,
        legacy_windows=False,
        min_width=10,
        max_width=20,
        is_terminal=False,
        encoding="utf-8",
    )
    rich_console = live_render.__rich_console__(Console(), options)
    assert [Segment("my string", None)] == list(rich_console)
    live_render.style = "red"
    rich_console = live_render.__rich_console__(Console(), options)
    assert [Segment("my string", Style.parse("red"))] == list(rich_console)



================================================
FILE: tests/test_log.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xad in position 1778: illegal multibyte sequence


================================================
FILE: tests/test_logging.py
================================================
import io
import os
import logging
from typing import Optional

import pytest

from rich.console import Console
from rich.logging import RichHandler

handler = RichHandler(
    console=Console(
        file=io.StringIO(),
        force_terminal=True,
        width=80,
        color_system="truecolor",
        _environ={},
    ),
    enable_link_path=False,
)

logging.basicConfig(
    level="NOTSET", format="%(message)s", datefmt="[DATE]", handlers=[handler]
)
log = logging.getLogger("rich")


skip_win = pytest.mark.skipif(
    os.name == "nt",
    reason="rendered differently on windows",
)


@skip_win
def test_exception():
    console = Console(
        file=io.StringIO(),
        force_terminal=True,
        width=140,
        color_system=None,
        _environ={},
    )
    handler_with_tracebacks = RichHandler(
        console=console, enable_link_path=False, rich_tracebacks=True
    )
    formatter = logging.Formatter("FORMATTER %(message)s %(asctime)s")
    handler_with_tracebacks.setFormatter(formatter)
    log.addHandler(handler_with_tracebacks)
    log.error("foo")
    try:
        1 / 0
    except ZeroDivisionError:
        log.exception("message")

    render = handler_with_tracebacks.console.file.getvalue()
    print(render)

    assert "FORMATTER foo" in render
    assert "ZeroDivisionError" in render
    assert "message" in render
    assert "division by zero" in render


def test_exception_with_extra_lines():
    console = Console(
        file=io.StringIO(),
        force_terminal=True,
        width=140,
        color_system=None,
        _environ={},
    )
    handler_extra_lines = RichHandler(
        console=console,
        enable_link_path=False,
        markup=True,
        rich_tracebacks=True,
        tracebacks_extra_lines=5,
    )
    log.addHandler(handler_extra_lines)

    try:
        1 / 0
    except ZeroDivisionError:
        log.exception("message")

    render = handler_extra_lines.console.file.getvalue()
    print(render)

    assert "ZeroDivisionError" in render
    assert "message" in render
    assert "division by zero" in render


def test_stderr_and_stdout_are_none(monkeypatch):
    # This test is specifically to handle cases when using pythonw on
    # windows and stderr and stdout are set to None.
    # See https://bugs.python.org/issue13807

    monkeypatch.setattr("sys.stdout", None)
    monkeypatch.setattr("sys.stderr", None)

    console = Console(_environ={})
    target_handler = RichHandler(console=console)
    actual_record: Optional[logging.LogRecord] = None

    def mock_handle_error(record):
        nonlocal actual_record
        actual_record = record

    target_handler.handleError = mock_handle_error
    log.addHandler(target_handler)

    try:
        1 / 0
    except ZeroDivisionError:
        log.exception("message")

    finally:
        log.removeHandler(target_handler)

    assert actual_record is not None
    assert "message" in actual_record.msg


def test_markup_and_highlight():
    console = Console(
        file=io.StringIO(),
        force_terminal=True,
        width=140,
        color_system="truecolor",
        _environ={},
    )
    handler = RichHandler(console=console)

    # Check defaults are as expected
    assert handler.highlighter
    assert not handler.markup

    formatter = logging.Formatter("FORMATTER %(message)s %(asctime)s")
    handler.setFormatter(formatter)
    log.addHandler(handler)

    log_message = "foo 3.141 127.0.0.1 [red]alert[/red]"

    log.error(log_message)
    render_fancy = handler.console.file.getvalue()
    assert "FORMATTER" in render_fancy
    assert log_message not in render_fancy
    assert "red" in render_fancy

    handler.console.file = io.StringIO()
    log.error(log_message, extra={"markup": True})
    render_markup = handler.console.file.getvalue()
    assert "FORMATTER" in render_markup
    assert log_message not in render_markup
    assert "red" not in render_markup

    handler.console.file = io.StringIO()
    log.error(log_message, extra={"highlighter": None})
    render_plain = handler.console.file.getvalue()
    assert "FORMATTER" in render_plain
    assert log_message in render_plain



================================================
FILE: tests/test_markdown.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x83 in position 1895: illegal multibyte sequence


================================================
FILE: tests/test_markdown_no_hyperlinks.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x83 in position 1871: illegal multibyte sequence


================================================
FILE: tests/test_markup.py
================================================
import pytest

from rich.console import Console
from rich.errors import MarkupError
from rich.markup import RE_TAGS, Tag, _parse, escape, render
from rich.text import Span, Text


def test_re_no_match():
    assert RE_TAGS.match("[True]") == None
    assert RE_TAGS.match("[False]") == None
    assert RE_TAGS.match("[None]") == None
    assert RE_TAGS.match("[1]") == None
    assert RE_TAGS.match("[2]") == None
    assert RE_TAGS.match("[]") == None


def test_re_match():
    assert RE_TAGS.match("[true]")
    assert RE_TAGS.match("[false]")
    assert RE_TAGS.match("[none]")
    assert RE_TAGS.match("[color(1)]")
    assert RE_TAGS.match("[#ff00ff]")
    assert RE_TAGS.match("[/]")
    assert RE_TAGS.match("[@]")
    assert RE_TAGS.match("[@foo]")
    assert RE_TAGS.match("[@foo=bar]")


def test_escape():
    # Potential tags
    assert escape("foo[bar]") == r"foo\[bar]"
    assert escape(r"foo\[bar]") == r"foo\\\[bar]"

    # Not tags (escape not required)
    assert escape("[5]") == "[5]"
    assert escape("\\[5]") == "\\[5]"

    # Test @ escape
    assert escape("[@foo]") == "\\[@foo]"
    assert escape("[@]") == "\\[@]"

    # https://github.com/Textualize/rich/issues/2187
    assert escape("[nil, [nil]]") == r"[nil, \[nil]]"


def test_escape_backslash_end():
    # https://github.com/Textualize/rich/issues/2987
    value = "C:\\"
    assert escape(value) == "C:\\\\"

    escaped_tags = f"[red]{escape(value)}[/red]"
    assert escaped_tags == "[red]C:\\\\[/red]"
    escaped_text = Text.from_markup(escaped_tags)
    assert escaped_text.plain == "C:\\"
    assert escaped_text.spans == [Span(0, 3, "red")]


def test_render_escape():
    console = Console(width=80, color_system=None)
    console.begin_capture()
    console.print(
        escape(r"[red]"), escape(r"\[red]"), escape(r"\\[red]"), escape(r"\\\[red]")
    )
    result = console.end_capture()
    expected = r"[red] \[red] \\[red] \\\[red]" + "\n"
    assert result == expected


def test_parse():
    result = list(_parse(r"[foo]hello[/foo][bar]world[/]\[escaped]"))
    expected = [
        (0, None, Tag(name="foo", parameters=None)),
        (10, "hello", None),
        (10, None, Tag(name="/foo", parameters=None)),
        (16, None, Tag(name="bar", parameters=None)),
        (26, "world", None),
        (26, None, Tag(name="/", parameters=None)),
        (29, "[escaped]", None),
    ]
    print(repr(result))
    assert result == expected


def test_parse_link():
    result = list(_parse("[link=foo]bar[/link]"))
    expected = [
        (0, None, Tag(name="link", parameters="foo")),
        (13, "bar", None),
        (13, None, Tag(name="/link", parameters=None)),
    ]
    assert result == expected


def test_render():
    result = render("[bold]FOO[/bold]")
    assert str(result) == "FOO"
    assert result.spans == [Span(0, 3, "bold")]


def test_render_not_tags():
    result = render('[[1], [1,2,3,4], ["hello"], [None], [False], [True]] []')
    assert str(result) == '[[1], [1,2,3,4], ["hello"], [None], [False], [True]] []'
    assert result.spans == []


def test_render_link():
    result = render("[link=foo]FOO[/link]")
    assert str(result) == "FOO"
    assert result.spans == [Span(0, 3, "link foo")]


def test_render_combine():
    result = render("[green]X[blue]Y[/blue]Z[/green]")
    assert str(result) == "XYZ"
    assert result.spans == [
        Span(0, 3, "green"),
        Span(1, 2, "blue"),
    ]


def test_render_overlap():
    result = render("[green]X[bold]Y[/green]Z[/bold]")
    assert str(result) == "XYZ"
    assert result.spans == [
        Span(0, 2, "green"),
        Span(1, 3, "bold"),
    ]


def test_adjoint():
    result = render("[red][blue]B[/blue]R[/red]")
    print(repr(result))
    assert result.spans == [Span(0, 2, "red"), Span(0, 1, "blue")]


def test_render_close():
    result = render("[bold]X[/]Y")
    assert str(result) == "XY"
    assert result.spans == [Span(0, 1, "bold")]


def test_render_close_ambiguous():
    result = render("[green]X[bold]Y[/]Z[/]")
    assert str(result) == "XYZ"
    assert result.spans == [Span(0, 3, "green"), Span(1, 2, "bold")]


def test_markup_error():
    with pytest.raises(MarkupError):
        assert render("foo[/]")
    with pytest.raises(MarkupError):
        assert render("foo[/bar]")
    with pytest.raises(MarkupError):
        assert render("[foo]hello[/bar]")


def test_markup_escape():
    result = str(render("[dim white][url=[/]"))
    assert result == "[url="


def test_escape_escape():
    # Escaped escapes (i.e. double backslash)should be treated as literal
    result = render(r"\\[bold]FOO")
    assert str(result) == r"\FOO"

    # Single backslash makes the tag literal
    result = render(r"\[bold]FOO")
    assert str(result) == "[bold]FOO"

    # Double backslash produces a backslash
    result = render(r"\\[bold]some text[/]")
    assert str(result) == r"\some text"

    # Triple backslash parsed as literal backslash plus escaped tag
    result = render(r"\\\[bold]some text\[/]")
    assert str(result) == r"\[bold]some text[/]"

    # Backslash escaping only happens when preceding a tag
    result = render(r"\\")
    assert str(result) == r"\\"

    result = render(r"\\\\")
    assert str(result) == r"\\\\"


def test_events():
    result = render("[@click]Hello[/@click] [@click='view.toggle', 'left']World[/]")
    assert str(result) == "Hello World"


def test_events_broken():
    with pytest.raises(MarkupError):
        render("[@click=sdfwer(sfs)]foo[/]")

    with pytest.raises(MarkupError):
        render("[@click='view.toggle]foo[/]")


def test_render_meta():
    console = Console()
    text = render("foo[@click=close]bar[/]baz")
    assert text.get_style_at_offset(console, 3).meta == {"@click": ("close", ())}

    text = render("foo[@click=close()]bar[/]baz")
    assert text.get_style_at_offset(console, 3).meta == {"@click": ("close", ())}

    text = render("foo[@click=close('dialog')]bar[/]baz")
    assert text.get_style_at_offset(console, 3).meta == {
        "@click": ("close", ("dialog",))
    }
    text = render("foo[@click=close('dialog', 3)]bar[/]baz")
    assert text.get_style_at_offset(console, 3).meta == {
        "@click": ("close", ("dialog", 3))
    }

    text = render("foo[@click=(1, 2, 3)]bar[/]baz")
    assert text.get_style_at_offset(console, 3).meta == {"@click": (1, 2, 3)}



================================================
FILE: tests/test_measure.py
================================================
from rich.text import Text
import pytest

from rich.errors import NotRenderableError
from rich.console import Console
from rich.measure import Measurement, measure_renderables


def test_span():
    measurement = Measurement(10, 100)
    assert measurement.span == 90


def test_no_renderable():
    console = Console()
    text = Text()

    with pytest.raises(NotRenderableError):
        Measurement.get(console, console.options, None)


def test_measure_renderables():
    console = Console()
    assert measure_renderables(console, console.options, "") == Measurement(0, 0)
    assert measure_renderables(
        console, console.options.update_width(0), "hello"
    ) == Measurement(0, 0)


def test_clamp():
    measurement = Measurement(20, 100)
    assert measurement.clamp(10, 50) == Measurement(20, 50)
    assert measurement.clamp(30, 50) == Measurement(30, 50)
    assert measurement.clamp(None, 50) == Measurement(20, 50)
    assert measurement.clamp(30, None) == Measurement(30, 100)
    assert measurement.clamp(None, None) == Measurement(20, 100)



================================================
FILE: tests/test_null_file.py
================================================
from rich._null_file import NullFile


def test_null_file():
    file = NullFile()
    with file:
        assert file.write("abc") == 0
        assert file.close() is None
        assert not file.isatty()
        assert file.read() == ""
        assert not file.readable()
        assert file.readline() == ""
        assert file.readlines() == []
        assert file.seek(0, 0) == 0
        assert not file.seekable()
        assert file.tell() == 0
        assert file.truncate() == 0
        assert file.writable() == False
        assert file.writelines([""]) is None
        assert next(file) == ""
        assert next(iter(file)) == ""
        assert file.fileno() == -1
        assert file.flush() is None



================================================
FILE: tests/test_padding.py
================================================
import pytest

from rich.padding import Padding
from rich.console import Console, ConsoleDimensions, ConsoleOptions
from rich.style import Style
from rich.segment import Segment


def test_repr():
    padding = Padding("foo", (1, 2))
    assert isinstance(repr(padding), str)


def test_indent():
    indent_result = Padding.indent("test", 4)
    assert indent_result.top == 0
    assert indent_result.right == 0
    assert indent_result.bottom == 0
    assert indent_result.left == 4


def test_unpack():
    assert Padding.unpack(3) == (3, 3, 3, 3)
    assert Padding.unpack((3,)) == (3, 3, 3, 3)
    assert Padding.unpack((3, 4)) == (3, 4, 3, 4)
    assert Padding.unpack((3, 4, 5, 6)) == (3, 4, 5, 6)
    with pytest.raises(ValueError):
        Padding.unpack((1, 2, 3))


def test_expand_false():
    console = Console(width=100, color_system=None)
    console.begin_capture()
    console.print(Padding("foo", 1, expand=False))
    assert console.end_capture() == "     \n foo \n     \n"


def test_rich_console():
    renderable = "test renderable"
    style = Style(color="red")
    options = ConsoleOptions(
        ConsoleDimensions(80, 25),
        max_height=25,
        legacy_windows=False,
        min_width=10,
        max_width=20,
        is_terminal=False,
        encoding="utf-8",
    )

    expected_outputs = [
        Segment(renderable, style=style),
        Segment(" " * (20 - len(renderable)), style=style),
        Segment("\n", style=None),
    ]
    padding_generator = Padding(renderable, style=style).__rich_console__(
        Console(), options
    )
    for output, expected in zip(padding_generator, expected_outputs):
        assert output == expected



================================================
FILE: tests/test_palette.py
================================================
from rich._palettes import STANDARD_PALETTE
from rich.table import Table


def test_rich_cast():
    table = STANDARD_PALETTE.__rich__()
    assert isinstance(table, Table)
    assert table.row_count == 16



================================================
FILE: tests/test_panel.py
================================================
import io

import pytest

from rich.console import Console
from rich.panel import Panel
from rich.segment import Segment
from rich.style import Style
from rich.text import Text

tests = [
    Panel("Hello, World", padding=0),
    Panel("Hello, World", expand=False, padding=0),
    Panel.fit("Hello, World", padding=0),
    Panel("Hello, World", width=8, padding=0),
    Panel(Panel("Hello, World", padding=0), padding=0),
    Panel("Hello, World", title="FOO", padding=0),
    Panel("Hello, World", subtitle="FOO", padding=0),
]

expected = [
    "╭────────────────────────────────────────────────╮\n│Hello, World                                    │\n╰────────────────────────────────────────────────╯\n",
    "╭────────────╮\n│Hello, World│\n╰────────────╯\n",
    "╭────────────╮\n│Hello, World│\n╰────────────╯\n",
    "╭──────╮\n│Hello,│\n│World │\n╰──────╯\n",
    "╭────────────────────────────────────────────────╮\n│╭──────────────────────────────────────────────╮│\n││Hello, World                                  ││\n│╰──────────────────────────────────────────────╯│\n╰────────────────────────────────────────────────╯\n",
    "╭───────────────────── FOO ──────────────────────╮\n│Hello, World                                    │\n╰────────────────────────────────────────────────╯\n",
    "╭────────────────────────────────────────────────╮\n│Hello, World                                    │\n╰───────────────────── FOO ──────────────────────╯\n",
]


def render(panel, width=50) -> str:
    console = Console(file=io.StringIO(), width=50, legacy_windows=False)
    console.print(panel)
    result = console.file.getvalue()
    print(result)
    return result


@pytest.mark.parametrize("panel,expected", zip(tests, expected))
def test_render_panel(panel, expected) -> None:
    assert render(panel) == expected


def test_console_width() -> None:
    console = Console(file=io.StringIO(), width=50, legacy_windows=False)
    panel = Panel("Hello, World", expand=False)
    min_width, max_width = panel.__rich_measure__(console, console.options)
    assert min_width == 16
    assert max_width == 16


def test_fixed_width() -> None:
    console = Console(file=io.StringIO(), width=50, legacy_windows=False)
    panel = Panel("Hello World", width=20)
    min_width, max_width = panel.__rich_measure__(console, console.options)
    assert min_width == 20
    assert max_width == 20


def test_render_size() -> None:
    console = Console(width=63, height=46, legacy_windows=False)
    options = console.options.update_dimensions(80, 4)
    lines = console.render_lines(Panel("foo", title="Hello"), options=options)
    print(repr(lines))
    expected = [
        [
            Segment("╭─", Style()),
            Segment(
                "────────────────────────────────── Hello ───────────────────────────────────"
            ),
            Segment("─╮", Style()),
        ],
        [
            Segment("│", Style()),
            Segment(" ", Style()),
            Segment("foo"),
            Segment(
                "                                                                         ",
                Style(),
            ),
            Segment(" ", Style()),
            Segment("│", Style()),
        ],
        [
            Segment("│", Style()),
            Segment(" ", Style()),
            Segment(
                "                                                                            ",
                Style(),
            ),
            Segment(" ", Style()),
            Segment("│", Style()),
        ],
        [
            Segment(
                "╰──────────────────────────────────────────────────────────────────────────────╯",
                Style(),
            )
        ],
    ]
    assert lines == expected


def test_title_text() -> None:
    panel = Panel(
        "Hello, World",
        title=Text("title", style="red"),
        subtitle=Text("subtitle", style="magenta bold"),
    )
    console = Console(
        file=io.StringIO(),
        width=50,
        height=20,
        legacy_windows=False,
        force_terminal=True,
        color_system="truecolor",
    )
    console.print(panel)

    result = console.file.getvalue()
    print(repr(result))
    expected = "╭────────────────────\x1b[31m title \x1b[0m─────────────────────╮\n│ Hello, World                                   │\n╰───────────────────\x1b[1;35m subtitle \x1b[0m───────────────────╯\n"
    assert result == expected


def test_title_text_with_border_color() -> None:
    """Regression test for https://github.com/Textualize/rich/issues/2745"""
    panel = Panel(
        "Hello, World",
        border_style="blue",
        title=Text("title", style="red"),
        subtitle=Text("subtitle", style="magenta bold"),
    )
    console = Console(
        file=io.StringIO(),
        width=50,
        height=20,
        legacy_windows=False,
        force_terminal=True,
        color_system="truecolor",
    )
    console.print(panel)

    result = console.file.getvalue()
    print(repr(result))
    expected = "\x1b[34m╭─\x1b[0m\x1b[34m───────────────────\x1b[0m\x1b[31m title \x1b[0m\x1b[34m────────────────────\x1b[0m\x1b[34m─╮\x1b[0m\n\x1b[34m│\x1b[0m Hello, World                                   \x1b[34m│\x1b[0m\n\x1b[34m╰─\x1b[0m\x1b[34m──────────────────\x1b[0m\x1b[1;35m subtitle \x1b[0m\x1b[34m──────────────────\x1b[0m\x1b[34m─╯\x1b[0m\n"
    assert result == expected


def test_title_text_with_panel_background() -> None:
    """Regression test for https://github.com/Textualize/rich/issues/3569"""
    panel = Panel(
        "Hello, World",
        style="on blue",
        title=Text("title", style="red"),
        subtitle=Text("subtitle", style="magenta bold"),
    )
    console = Console(
        file=io.StringIO(),
        width=50,
        height=20,
        legacy_windows=False,
        force_terminal=True,
        color_system="truecolor",
    )
    console.print(panel)

    result = console.file.getvalue()
    print(repr(result))
    expected = "\x1b[44m╭─\x1b[0m\x1b[44m───────────────────\x1b[0m\x1b[31;44m title \x1b[0m\x1b[44m────────────────────\x1b[0m\x1b[44m─╮\x1b[0m\n\x1b[44m│\x1b[0m\x1b[44m \x1b[0m\x1b[44mHello, World\x1b[0m\x1b[44m                                  \x1b[0m\x1b[44m \x1b[0m\x1b[44m│\x1b[0m\n\x1b[44m╰─\x1b[0m\x1b[44m──────────────────\x1b[0m\x1b[1;35;44m subtitle \x1b[0m\x1b[44m──────────────────\x1b[0m\x1b[44m─╯\x1b[0m\n"
    assert result == expected


if __name__ == "__main__":
    expected = []
    for panel in tests:
        result = render(panel)
        print(result)
        expected.append(result)
    print("--")
    print()
    print(f"expected={repr(expected)}")



================================================
FILE: tests/test_pick.py
================================================
from rich._pick import pick_bool


def test_pick_bool():
    assert pick_bool(False) == False
    assert pick_bool(True) == True
    assert pick_bool(None) == False
    assert pick_bool(False, True) == False
    assert pick_bool(None, True) == True
    assert pick_bool(True, None) == True
    assert pick_bool(False, None) == False
    assert pick_bool(None, None) == False
    assert pick_bool(None, None, False, True) == False
    assert pick_bool(None, None, True, False) == True



================================================
FILE: tests/test_pretty.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x82 in position 15479: illegal multibyte sequence


================================================
FILE: tests/test_progress.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xbe in position 3578: illegal multibyte sequence


================================================
FILE: tests/test_prompt.py
================================================
import io

from rich.console import Console
from rich.prompt import Confirm, IntPrompt, Prompt


def test_prompt_str():
    INPUT = "egg\nfoo"
    console = Console(file=io.StringIO())
    name = Prompt.ask(
        "what is your name",
        console=console,
        choices=["foo", "bar"],
        default="baz",
        stream=io.StringIO(INPUT),
    )
    assert name == "foo"
    expected = "what is your name [foo/bar] (baz): Please select one of the available options\nwhat is your name [foo/bar] (baz): "
    output = console.file.getvalue()
    print(repr(output))
    assert output == expected


def test_prompt_str_case_insensitive():
    INPUT = "egg\nFoO"
    console = Console(file=io.StringIO())
    name = Prompt.ask(
        "what is your name",
        console=console,
        choices=["foo", "bar"],
        default="baz",
        case_sensitive=False,
        stream=io.StringIO(INPUT),
    )
    assert name == "foo"
    expected = "what is your name [foo/bar] (baz): Please select one of the available options\nwhat is your name [foo/bar] (baz): "
    output = console.file.getvalue()
    print(repr(output))
    assert output == expected


def test_prompt_str_default():
    INPUT = ""
    console = Console(file=io.StringIO())
    name = Prompt.ask(
        "what is your name",
        console=console,
        default="Will",
        stream=io.StringIO(INPUT),
    )
    assert name == "Will"
    expected = "what is your name (Will): "
    output = console.file.getvalue()
    print(repr(output))
    assert output == expected


def test_prompt_int():
    INPUT = "foo\n100"
    console = Console(file=io.StringIO())
    number = IntPrompt.ask(
        "Enter a number",
        console=console,
        stream=io.StringIO(INPUT),
    )
    assert number == 100
    expected = "Enter a number: Please enter a valid integer number\nEnter a number: "
    output = console.file.getvalue()
    print(repr(output))
    assert output == expected


def test_prompt_confirm_no():
    INPUT = "foo\nNO\nn"
    console = Console(file=io.StringIO())
    answer = Confirm.ask(
        "continue",
        console=console,
        stream=io.StringIO(INPUT),
    )
    assert answer is False
    expected = "continue [y/n]: Please enter Y or N\ncontinue [y/n]: Please enter Y or N\ncontinue [y/n]: "
    output = console.file.getvalue()
    print(repr(output))
    assert output == expected


def test_prompt_confirm_yes():
    INPUT = "foo\nNO\ny"
    console = Console(file=io.StringIO())
    answer = Confirm.ask(
        "continue",
        console=console,
        stream=io.StringIO(INPUT),
    )
    assert answer is True
    expected = "continue [y/n]: Please enter Y or N\ncontinue [y/n]: Please enter Y or N\ncontinue [y/n]: "
    output = console.file.getvalue()
    print(repr(output))
    assert output == expected


def test_prompt_confirm_default():
    INPUT = "foo\nNO\ny"
    console = Console(file=io.StringIO())
    answer = Confirm.ask(
        "continue", console=console, stream=io.StringIO(INPUT), default=True
    )
    assert answer is True
    expected = "continue [y/n] (y): Please enter Y or N\ncontinue [y/n] (y): Please enter Y or N\ncontinue [y/n] (y): "
    output = console.file.getvalue()
    print(repr(output))
    assert output == expected



================================================
FILE: tests/test_protocol.py
================================================
import io

from rich.abc import RichRenderable
from rich.console import Console
from rich.panel import Panel
from rich.text import Text


class Foo:
    def __rich__(self) -> Text:
        return Text("Foo")


def test_rich_cast():
    foo = Foo()
    console = Console(file=io.StringIO())
    console.print(foo)
    assert console.file.getvalue() == "Foo\n"


class Fake:
    def __getattr__(self, name):
        return 12

    def __repr__(self) -> str:
        return "Fake()"


def test_rich_cast_fake():
    fake = Fake()
    console = Console(file=io.StringIO())
    console.print(fake)
    assert console.file.getvalue() == "Fake()\n"


def test_rich_cast_container():
    foo = Foo()
    console = Console(file=io.StringIO(), legacy_windows=False)
    console.print(Panel.fit(foo, padding=0))
    assert console.file.getvalue() == "╭───╮\n│Foo│\n╰───╯\n"


def test_abc():
    foo = Foo()
    assert isinstance(foo, RichRenderable)
    assert isinstance(Text("hello"), RichRenderable)
    assert isinstance(Panel("hello"), RichRenderable)
    assert not isinstance(foo, str)
    assert not isinstance("foo", RichRenderable)
    assert not isinstance([], RichRenderable)


def test_cast_deep():
    class B:
        def __rich__(self) -> Foo:
            return Foo()

    class A:
        def __rich__(self) -> B:
            return B()

    console = Console(file=io.StringIO())
    console.print(A())
    assert console.file.getvalue() == "Foo\n"


def test_cast_recursive():
    class B:
        def __rich__(self) -> "A":
            return A()

        def __repr__(self) -> str:
            return "<B>"

    class A:
        def __rich__(self) -> B:
            return B()

        def __repr__(self) -> str:
            return "<A>"

    console = Console(file=io.StringIO())
    console.print(A())
    assert console.file.getvalue() == "<B>\n"



================================================
FILE: tests/test_ratio.py
================================================
import pytest
from typing import NamedTuple, Optional

from rich._ratio import ratio_reduce, ratio_resolve


class Edge(NamedTuple):
    size: Optional[int] = None
    ratio: int = 1
    minimum_size: int = 1


@pytest.mark.parametrize(
    "total,ratios,maximums,values,result",
    [
        (20, [2, 4], [20, 20], [5, 5], [-2, -8]),
        (20, [2, 4], [1, 1], [5, 5], [4, 4]),
        (20, [2, 4], [1, 1], [2, 2], [1, 1]),
        (3, [2, 4], [3, 3], [2, 2], [1, 0]),
        (3, [2, 4], [3, 3], [0, 0], [-1, -2]),
        (3, [0, 0], [3, 3], [4, 4], [4, 4]),
    ],
)
def test_ratio_reduce(total, ratios, maximums, values, result):
    assert ratio_reduce(total, ratios, maximums, values) == result


def test_ratio_resolve():
    assert ratio_resolve(100, []) == []
    assert ratio_resolve(100, [Edge(size=100), Edge(ratio=1)]) == [100, 1]
    assert ratio_resolve(100, [Edge(ratio=1)]) == [100]
    assert ratio_resolve(100, [Edge(ratio=1), Edge(ratio=1)]) == [50, 50]
    assert ratio_resolve(100, [Edge(size=20), Edge(ratio=1), Edge(ratio=1)]) == [
        20,
        40,
        40,
    ]
    assert ratio_resolve(100, [Edge(size=40), Edge(ratio=2), Edge(ratio=1)]) == [
        40,
        40,
        20,
    ]
    assert ratio_resolve(
        100, [Edge(size=40), Edge(ratio=2), Edge(ratio=1, minimum_size=25)]
    ) == [40, 35, 25]
    assert ratio_resolve(100, [Edge(ratio=1), Edge(ratio=1), Edge(ratio=1)]) == [
        33,
        33,
        34,
    ]
    assert ratio_resolve(
        50, [Edge(size=30), Edge(ratio=1, minimum_size=10), Edge(size=30)]
    ) == [30, 10, 30]
    assert ratio_resolve(110, [Edge(ratio=1), Edge(ratio=1), Edge(ratio=1)]) == [
        36,
        37,
        37,
    ]



================================================
FILE: tests/test_repr.py
================================================
from typing import Optional

import pytest

import rich.repr
from rich.console import Console

from inspect import Parameter


@rich.repr.auto
class Foo:
    def __init__(self, foo: str, bar: Optional[int] = None, egg: int = 1):
        self.foo = foo
        self.bar = bar
        self.egg = egg

    def __rich_repr__(self):
        yield self.foo
        yield None, self.foo,
        yield "bar", self.bar, None
        yield "egg", self.egg


@rich.repr.auto
class Egg:
    def __init__(self, foo: str, bar: Optional[int] = None, egg: int = 1):
        self.foo = foo
        self.bar = bar
        self.egg = egg


@rich.repr.auto
class BrokenEgg:
    def __init__(self, foo: str, *, bar: Optional[int] = None, egg: int = 1):
        self.foo = foo
        self.fubar = bar
        self.egg = egg


@rich.repr.auto(angular=True)
class AngularEgg:
    def __init__(self, foo: str, *, bar: Optional[int] = None, egg: int = 1):
        self.foo = foo
        self.bar = bar
        self.egg = egg


@rich.repr.auto
class Bar(Foo):
    def __rich_repr__(self):
        yield (self.foo,)
        yield None, self.foo,
        yield "bar", self.bar, None
        yield "egg", self.egg

    __rich_repr__.angular = True


class StupidClass:
    def __init__(self, a):
        self.a = a

    def __eq__(self, other) -> bool:
        if other is Parameter.empty:
            return True
        try:
            return self.a == other.a
        except Exception:
            return False

    def __ne__(self, other: object) -> bool:
        return not self.__eq__(other)


class NotStupid:
    pass


@rich.repr.auto
class Bird:
    def __init__(
        self, name, eats, fly=True, another=StupidClass(2), extinct=NotStupid()
    ):
        self.name = name
        self.eats = eats
        self.fly = fly
        self.another = another
        self.extinct = extinct


def test_rich_repr() -> None:
    assert (repr(Foo("hello"))) == "Foo('hello', 'hello', egg=1)"
    assert (repr(Foo("hello", bar=3))) == "Foo('hello', 'hello', bar=3, egg=1)"


def test_rich_repr_positional_only() -> None:
    _locals = locals().copy()
    exec(
        """\
@rich.repr.auto
class PosOnly:
    def __init__(self, foo, /):
        self.foo = 1
    """,
        globals(),
        _locals,
    )
    p = _locals["PosOnly"](1)
    assert repr(p) == "PosOnly(1)"


def test_rich_angular() -> None:
    assert (repr(Bar("hello"))) == "<Bar 'hello' 'hello' egg=1>"
    assert (repr(Bar("hello", bar=3))) == "<Bar 'hello' 'hello' bar=3 egg=1>"


def test_rich_repr_auto() -> None:
    assert repr(Egg("hello", egg=2)) == "Egg('hello', egg=2)"
    stupid_class = StupidClass(9)
    not_stupid = NotStupid()
    assert (
        repr(Bird("penguin", ["fish"], another=stupid_class, extinct=not_stupid))
        == f"Bird('penguin', ['fish'], another={repr(stupid_class)}, extinct={repr(not_stupid)})"
    )


def test_rich_repr_auto_angular() -> None:
    assert repr(AngularEgg("hello", egg=2)) == "<AngularEgg 'hello' egg=2>"


def test_broken_egg() -> None:
    with pytest.raises(rich.repr.ReprError):
        repr(BrokenEgg("foo"))


def test_rich_pretty() -> None:
    console = Console()
    with console.capture() as capture:
        console.print(Foo("hello", bar=3))
    result = capture.get()
    expected = "Foo('hello', 'hello', bar=3, egg=1)\n"
    assert result == expected


def test_rich_pretty_angular() -> None:
    console = Console()
    with console.capture() as capture:
        console.print(Bar("hello", bar=3))
    result = capture.get()
    expected = "<Bar 'hello' 'hello' bar=3 egg=1>\n"
    assert result == expected



================================================
FILE: tests/test_rich_print.py
================================================
import io
import json

import rich
from rich.console import Console


def test_get_console():
    console = rich.get_console()
    assert isinstance(console, Console)


def test_reconfigure_console():
    rich.reconfigure(width=100)
    assert rich.get_console().width == 100


def test_rich_print():
    console = rich.get_console()
    output = io.StringIO()
    backup_file = console.file
    try:
        console.file = output
        rich.print("foo", "bar")
        rich.print("foo\n")
        rich.print("foo\n\n")
        assert output.getvalue() == "foo bar\nfoo\n\nfoo\n\n\n"
    finally:
        console.file = backup_file


def test_rich_print_json():
    console = rich.get_console()
    with console.capture() as capture:
        rich.print_json('[false, true, null, "foo"]', indent=4)
    result = capture.get()
    print(repr(result))
    expected = '[\n    false,\n    true,\n    null,\n    "foo"\n]\n'
    assert result == expected


def test_rich_print_json_round_trip():
    data = ["x" * 100, 2e128]
    console = rich.get_console()
    with console.capture() as capture:
        rich.print_json(data=data, indent=4)
    result = capture.get()
    print(repr(result))
    result_data = json.loads(result)
    assert result_data == data


def test_rich_print_json_no_truncation():
    console = rich.get_console()
    with console.capture() as capture:
        rich.print_json(f'["{"x" * 100}", {int(2e128)}]', indent=4)
    result = capture.get()
    print(repr(result))
    assert ("x" * 100) in result
    assert str(int(2e128)) in result


def test_rich_print_X():
    console = rich.get_console()
    output = io.StringIO()
    backup_file = console.file
    try:
        console.file = output
        rich.print("foo")
        rich.print("fooX")
        rich.print("fooXX")
        assert output.getvalue() == "foo\nfooX\nfooXX\n"
    finally:
        console.file = backup_file



================================================
FILE: tests/test_rule.py
================================================
import io

import pytest

from rich.console import Console
from rich.rule import Rule
from rich.text import Text


def test_rule():
    console = Console(
        width=16,
        file=io.StringIO(),
        force_terminal=True,
        legacy_windows=False,
        _environ={},
    )
    console.print(Rule())
    console.print(Rule("foo"))
    console.rule(Text("foo", style="bold"))
    console.rule("foobarbazeggfoobarbazegg")
    expected = "\x1b[92m────────────────\x1b[0m\n"
    expected += "\x1b[92m───── \x1b[0mfoo\x1b[92m ──────\x1b[0m\n"
    expected += "\x1b[92m───── \x1b[0m\x1b[1mfoo\x1b[0m\x1b[92m ──────\x1b[0m\n"
    expected += "\x1b[92m─ \x1b[0mfoobarbazeg…\x1b[92m ─\x1b[0m\n"

    result = console.file.getvalue()
    assert result == expected


def test_rule_error():
    console = Console(width=16, file=io.StringIO(), legacy_windows=False, _environ={})
    with pytest.raises(ValueError):
        console.rule("foo", align="foo")


def test_rule_align():
    console = Console(width=16, file=io.StringIO(), legacy_windows=False, _environ={})
    console.rule("foo")
    console.rule("foo", align="left")
    console.rule("foo", align="center")
    console.rule("foo", align="right")
    console.rule()
    result = console.file.getvalue()
    print(repr(result))
    expected = "───── foo ──────\nfoo ────────────\n───── foo ──────\n──────────── foo\n────────────────\n"
    assert result == expected


def test_rule_cjk():
    console = Console(
        width=16,
        file=io.StringIO(),
        force_terminal=True,
        color_system=None,
        legacy_windows=False,
        _environ={},
    )
    console.rule("欢迎！")
    expected = "──── 欢迎！ ────\n"
    assert console.file.getvalue() == expected


@pytest.mark.parametrize(
    "align,outcome",
    [
        ("center", "───\n"),
        ("left", "… ─\n"),
        ("right", "─ …\n"),
    ],
)
def test_rule_not_enough_space_for_title_text(align, outcome):
    console = Console(width=3, file=io.StringIO(), record=True)
    console.rule("Hello!", align=align)
    assert console.file.getvalue() == outcome


def test_rule_center_aligned_title_not_enough_space_for_rule():
    console = Console(width=4, file=io.StringIO(), record=True)
    console.rule("ABCD")
    assert console.file.getvalue() == "────\n"


@pytest.mark.parametrize("align", ["left", "right"])
def test_rule_side_aligned_not_enough_space_for_rule(align):
    console = Console(width=2, file=io.StringIO(), record=True)
    console.rule("ABCD", align=align)
    assert console.file.getvalue() == "──\n"


@pytest.mark.parametrize(
    "align,outcome",
    [
        ("center", "─ … ─\n"),
        ("left", "AB… ─\n"),
        ("right", "─ AB…\n"),
    ],
)
def test_rule_just_enough_width_available_for_title(align, outcome):
    console = Console(width=5, file=io.StringIO(), record=True)
    console.rule("ABCD", align=align)
    assert console.file.getvalue() == outcome


def test_characters():
    console = Console(
        width=16,
        file=io.StringIO(),
        force_terminal=True,
        color_system=None,
        legacy_windows=False,
        _environ={},
    )
    console.rule(characters="+*")
    console.rule("foo", characters="+*")
    console.print(Rule(characters=".,"))
    expected = "+*+*+*+*+*+*+*+*\n"
    expected += "+*+*+ foo +*+*+*\n"
    expected += ".,.,.,.,.,.,.,.,\n"
    assert console.file.getvalue() == expected


def test_repr():
    rule = Rule("foo")
    assert isinstance(repr(rule), str)


def test_error():
    with pytest.raises(ValueError):
        Rule(characters="")



================================================
FILE: tests/test_rule_in_table.py
================================================
import io
from textwrap import dedent

import pytest

from rich import box
from rich.console import Console
from rich.rule import Rule
from rich.table import Table


@pytest.mark.parametrize("expand_kwarg", ({}, {"expand": False}))
def test_rule_in_unexpanded_table(expand_kwarg):
    console = Console(width=32, file=io.StringIO(), legacy_windows=False, _environ={})
    table = Table(box=box.ASCII, show_header=False, **expand_kwarg)
    table.add_column()
    table.add_column()
    table.add_row("COL1", "COL2")
    table.add_row("COL1", Rule())
    table.add_row("COL1", "COL2")
    console.print(table)
    expected = dedent(
        """\
        +-------------+
        | COL1 | COL2 |
        | COL1 | ──── |
        | COL1 | COL2 |
        +-------------+
        """
    )
    result = console.file.getvalue()
    assert result == expected


def test_rule_in_expanded_table():
    console = Console(width=32, file=io.StringIO(), legacy_windows=False, _environ={})
    table = Table(box=box.ASCII, expand=True, show_header=False)
    table.add_column()
    table.add_column()
    table.add_row("COL1", "COL2")
    table.add_row("COL1", Rule(style=None))
    table.add_row("COL1", "COL2")
    console.print(table)
    expected = dedent(
        """\
        +------------------------------+
        | COL1          | COL2         |
        | COL1          | ──────────── |
        | COL1          | COL2         |
        +------------------------------+
        """
    )
    result = console.file.getvalue()
    assert result == expected


def test_rule_in_ratio_table():
    console = Console(width=32, file=io.StringIO(), legacy_windows=False, _environ={})
    table = Table(box=box.ASCII, expand=True, show_header=False)
    table.add_column(ratio=1)
    table.add_column()
    table.add_row("COL1", "COL2")
    table.add_row("COL1", Rule(style=None))
    table.add_row("COL1", "COL2")
    console.print(table)
    expected = dedent(
        """\
        +------------------------------+
        | COL1                  | COL2 |
        | COL1                  | ──── |
        | COL1                  | COL2 |
        +------------------------------+
        """
    )
    result = console.file.getvalue()
    assert result == expected



================================================
FILE: tests/test_screen.py
================================================
from rich.console import Console
from rich.screen import Screen


def test_screen():
    console = Console(color_system=None, width=20, height=5, legacy_windows=False)
    with console.capture() as capture:
        console.print(Screen("foo\nbar\nbaz\nfoo\nbar\nbaz\foo"))
    result = capture.get()
    print(repr(result))
    expected = "foo                 \nbar                 \nbaz                 \nfoo                 \nbar                 "
    assert result == expected



================================================
FILE: tests/test_segment.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xad in position 7972: illegal multibyte sequence


================================================
FILE: tests/test_spinner.py
================================================
import pytest

from rich.console import Console
from rich.measure import Measurement
from rich.rule import Rule
from rich.spinner import Spinner
from rich.text import Text


def test_spinner_create():
    Spinner("dots")
    with pytest.raises(KeyError):
        Spinner("foobar")


def test_spinner_render():
    time = 0.0

    def get_time():
        nonlocal time
        return time

    console = Console(
        width=80, color_system=None, force_terminal=True, get_time=get_time
    )
    console.begin_capture()
    spinner = Spinner("dots", "Foo")
    console.print(spinner)
    time += 80 / 1000
    console.print(spinner)
    result = console.end_capture()
    print(repr(result))
    expected = "⠋ Foo\n⠙ Foo\n"
    assert result == expected


def test_spinner_update():
    time = 0.0

    def get_time():
        nonlocal time
        return time

    console = Console(width=20, force_terminal=True, get_time=get_time, _environ={})
    console.begin_capture()
    spinner = Spinner("dots")
    console.print(spinner)

    rule = Rule("Bar")

    spinner.update(text=rule)
    time += 80 / 1000
    console.print(spinner)

    result = console.end_capture()
    print(repr(result))
    expected = "⠋\n⠙ \x1b[92m─\x1b[0m\n"
    assert result == expected


def test_rich_measure():
    console = Console(width=80, color_system=None, force_terminal=True)
    spinner = Spinner("dots", "Foo")
    min_width, max_width = Measurement.get(console, console.options, spinner)
    assert min_width == 3
    assert max_width == 5


def test_spinner_markup():
    spinner = Spinner("dots", "[bold]spinning[/bold]")
    assert isinstance(spinner.text, Text)
    assert str(spinner.text) == "spinning"



================================================
FILE: tests/test_stack.py
================================================
from rich._stack import Stack


def test_stack():
    stack = Stack()
    stack.push("foo")
    stack.push("bar")
    assert stack.top == "bar"
    assert stack.pop() == "bar"
    assert stack.top == "foo"



================================================
FILE: tests/test_status.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x8b in position 1042: illegal multibyte sequence


================================================
FILE: tests/test_style.py
================================================
import pytest

from rich import errors
from rich.color import Color, ColorSystem, ColorType
from rich.style import Style, StyleStack


def test_str():
    assert str(Style(bold=False)) == "not bold"
    assert str(Style(color="red", bold=False)) == "not bold red"
    assert str(Style(color="red", bold=False, italic=True)) == "not bold italic red"
    assert str(Style()) == "none"
    assert str(Style(bold=True)) == "bold"
    assert str(Style(color="red", bold=True)) == "bold red"
    assert str(Style(color="red", bgcolor="black", bold=True)) == "bold red on black"
    all_styles = Style(
        color="red",
        bgcolor="black",
        bold=True,
        dim=True,
        italic=True,
        underline=True,
        blink=True,
        blink2=True,
        reverse=True,
        conceal=True,
        strike=True,
        underline2=True,
        frame=True,
        encircle=True,
        overline=True,
    )
    expected = "bold dim italic underline blink blink2 reverse conceal strike underline2 frame encircle overline red on black"
    assert str(all_styles) == expected
    assert str(Style(link="foo")) == "link foo"


def test_ansi_codes():
    all_styles = Style(
        color="red",
        bgcolor="black",
        bold=True,
        dim=True,
        italic=True,
        underline=True,
        blink=True,
        blink2=True,
        reverse=True,
        conceal=True,
        strike=True,
        underline2=True,
        frame=True,
        encircle=True,
        overline=True,
    )
    expected = "1;2;3;4;5;6;7;8;9;21;51;52;53;31;40"
    assert all_styles._make_ansi_codes(ColorSystem.TRUECOLOR) == expected


def test_repr():
    assert (
        repr(Style(bold=True, color="red"))
        == "Style(color=Color('red', ColorType.STANDARD, number=1), bold=True)"
    )


def test_eq():
    assert Style(bold=True, color="red") == Style(bold=True, color="red")
    assert Style(bold=True, color="red") != Style(bold=True, color="green")
    assert Style().__eq__("foo") == NotImplemented


def test_hash():
    assert isinstance(hash(Style()), int)


def test_empty():
    assert Style.null() == Style()


def test_bool():
    assert bool(Style()) is False
    assert bool(Style(bold=True)) is True
    assert bool(Style(color="red")) is True
    assert bool(Style.parse("")) is False


def test_color_property():
    assert Style(color="red").color == Color("red", ColorType.STANDARD, 1, None)


def test_bgcolor_property():
    assert Style(bgcolor="black").bgcolor == Color("black", ColorType.STANDARD, 0, None)


def test_parse():
    assert Style.parse("") == Style()
    assert Style.parse("red") == Style(color="red")
    assert Style.parse("not bold") == Style(bold=False)
    assert Style.parse("bold red on black") == Style(
        color="red", bgcolor="black", bold=True
    )
    assert Style.parse("bold link https://example.org") == Style(
        bold=True, link="https://example.org"
    )
    with pytest.raises(errors.StyleSyntaxError):
        Style.parse("on")
    with pytest.raises(errors.StyleSyntaxError):
        Style.parse("on nothing")
    with pytest.raises(errors.StyleSyntaxError):
        Style.parse("rgb(999,999,999)")
    with pytest.raises(errors.StyleSyntaxError):
        Style.parse("not monkey")
    with pytest.raises(errors.StyleSyntaxError):
        Style.parse("link")


def test_link_id():
    assert Style().link_id == ""
    assert Style.parse("").link_id == ""
    assert Style.parse("red").link_id == ""
    style = Style.parse("red link https://example.org")
    assert isinstance(style.link_id, str)
    assert len(style.link_id) > 1


def test_get_html_style():
    expected = "color: #7f7fbf; text-decoration-color: #7f7fbf; background-color: #800000; font-weight: bold; font-style: italic; text-decoration: underline; text-decoration: line-through; text-decoration: overline"
    html_style = Style(
        reverse=True,
        dim=True,
        color="red",
        bgcolor="blue",
        bold=True,
        italic=True,
        underline=True,
        strike=True,
        overline=True,
    ).get_html_style()
    print(repr(html_style))
    assert html_style == expected


def test_chain():
    assert Style.chain(Style(color="red"), Style(bold=True)) == Style(
        color="red", bold=True
    )


def test_copy():
    style = Style(color="red", bgcolor="black", italic=True)
    assert style == style.copy()
    assert style is not style.copy()


def test_render():
    assert Style(color="red").render("foo", color_system=None) == "foo"
    assert (
        Style(color="red", bgcolor="black", bold=True).render("foo")
        == "\x1b[1;31;40mfoo\x1b[0m"
    )
    assert Style().render("foo") == "foo"


def test_test():
    Style(color="red").test("hello")


def test_add():
    assert Style(color="red") + None == Style(color="red")


def test_iadd():
    style = Style(color="red")
    style += Style(bold=True)
    assert style == Style(color="red", bold=True)
    style += None
    assert style == Style(color="red", bold=True)


def test_style_stack():
    stack = StyleStack(Style(color="red"))
    repr(stack)
    assert stack.current == Style(color="red")
    stack.push(Style(bold=True))
    assert stack.current == Style(color="red", bold=True)
    stack.pop()
    assert stack.current == Style(color="red")


def test_pick_first():
    with pytest.raises(ValueError):
        Style.pick_first()


def test_background_style():
    assert Style(bold=True, color="yellow", bgcolor="red").background_style == Style(
        bgcolor="red"
    )


def test_without_color():
    style = Style(bold=True, color="red", bgcolor="blue")
    colorless_style = style.without_color
    assert colorless_style.color == None
    assert colorless_style.bgcolor == None
    assert colorless_style.bold == True
    null_style = Style.null()
    assert null_style.without_color == null_style


def test_meta():
    style = Style(bold=True, meta={"foo": "bar"})
    assert style.meta["foo"] == "bar"

    style += Style(meta={"egg": "baz"})

    assert style.meta == {"foo": "bar", "egg": "baz"}

    assert repr(style) == "Style(bold=True, meta={'foo': 'bar', 'egg': 'baz'})"


def test_from_meta():
    style = Style.from_meta({"foo": "bar"})
    assert style.color is None
    assert style.bold is None


def test_on():
    style = Style.on({"foo": "bar"}, click="CLICK") + Style(color="red")
    assert style.meta == {"foo": "bar", "@click": "CLICK"}


def test_clear_meta_and_links():
    style = Style.parse("bold red on black link https://example.org") + Style.on(
        click="CLICK"
    )

    assert style.meta == {"@click": "CLICK"}
    assert style.link == "https://example.org"
    assert style.color == Color.parse("red")
    assert style.bgcolor == Color.parse("black")
    assert style.bold
    assert not style.italic

    clear_style = style.clear_meta_and_links()

    assert clear_style.meta == {}
    assert clear_style.link == None
    assert clear_style.color == Color.parse("red")
    assert clear_style.bgcolor == Color.parse("black")
    assert clear_style.bold
    assert not clear_style.italic


def test_clear_meta_and_links_clears_hash():
    """Regression test for https://github.com/Textualize/rich/issues/2942."""

    style = Style.parse("bold red on black link https://example.org") + Style.on(
        click="CLICK"
    )
    hash(style)  # Force hash caching.

    assert style._hash is not None

    clear_style = style.clear_meta_and_links()
    assert clear_style._hash is None



================================================
FILE: tests/test_styled.py
================================================
import io

from rich.console import Console
from rich.measure import Measurement
from rich.styled import Styled


def test_styled():
    styled_foo = Styled("foo", "on red")
    console = Console(file=io.StringIO(), force_terminal=True, _environ={})
    assert Measurement.get(console, console.options, styled_foo) == Measurement(3, 3)
    console.print(styled_foo)
    result = console.file.getvalue()
    expected = "\x1b[41mfoo\x1b[0m\n"
    assert result == expected



================================================
FILE: tests/test_syntax.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xad in position 2643: illegal multibyte sequence


================================================
FILE: tests/test_table.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x83 in position 2347: illegal multibyte sequence


================================================
FILE: tests/test_text.py
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0xb3 in position 13023: illegal multibyte sequence


================================================
FILE: tests/test_theme.py
================================================
import io
import os
import tempfile

import pytest

from rich.style import Style
from rich.theme import Theme, ThemeStack, ThemeStackError


def test_inherit():
    theme = Theme({"warning": "red"})
    assert theme.styles["warning"] == Style(color="red")
    assert theme.styles["dim"] == Style(dim=True)


def test_config():
    theme = Theme({"warning": "red"})
    config = theme.config
    assert "warning = red\n" in config


def test_from_file():
    theme = Theme({"warning": "red"})
    text_file = io.StringIO()
    text_file.write(theme.config)
    text_file.seek(0)

    load_theme = Theme.from_file(text_file)
    assert theme.styles == load_theme.styles


def test_read():
    theme = Theme({"warning": "red"})
    with tempfile.TemporaryDirectory("richtheme") as name:
        filename = os.path.join(name, "theme.cfg")
        with open(filename, "wt") as write_theme:
            write_theme.write(theme.config)
        load_theme = Theme.read(filename)
        assert theme.styles == load_theme.styles


def test_theme_stack():
    theme = Theme({"warning": "red"})
    stack = ThemeStack(theme)
    assert stack.get("warning") == Style.parse("red")
    new_theme = Theme({"warning": "bold yellow"})
    stack.push_theme(new_theme)
    assert stack.get("warning") == Style.parse("bold yellow")
    stack.pop_theme()
    assert stack.get("warning") == Style.parse("red")
    with pytest.raises(ThemeStackError):
        stack.pop_theme()



================================================
FILE: tests/test_tools.py
================================================
from rich._loop import loop_first, loop_last, loop_first_last
from rich._ratio import ratio_distribute


def test_loop_first():
    assert list(loop_first([])) == []
    iterable = loop_first(["apples", "oranges", "pears", "lemons"])
    assert next(iterable) == (True, "apples")
    assert next(iterable) == (False, "oranges")
    assert next(iterable) == (False, "pears")
    assert next(iterable) == (False, "lemons")


def test_loop_last():
    assert list(loop_last([])) == []
    iterable = loop_last(["apples", "oranges", "pears", "lemons"])
    assert next(iterable) == (False, "apples")
    assert next(iterable) == (False, "oranges")
    assert next(iterable) == (False, "pears")
    assert next(iterable) == (True, "lemons")


def test_loop_first_last():
    assert list(loop_first_last([])) == []
    iterable = loop_first_last(["apples", "oranges", "pears", "lemons"])
    assert next(iterable) == (True, False, "apples")
    assert next(iterable) == (False, False, "oranges")
    assert next(iterable) == (False, False, "pears")
    assert next(iterable) == (False, True, "lemons")


def test_ratio_distribute():
    assert ratio_distribute(10, [1]) == [10]
    assert ratio_distribute(10, [1, 1]) == [5, 5]
    assert ratio_distribute(12, [1, 3]) == [3, 9]
    assert ratio_distribute(0, [1, 3]) == [0, 0]
    assert ratio_distribute(0, [1, 3], [1, 1]) == [1, 1]
    assert ratio_distribute(10, [1, 0]) == [10, 0]



================================================
FILE: tests/test_traceback.py
================================================
[Binary file]


================================================
FILE: tests/test_tree.py
================================================
import sys

import pytest

from rich.console import Console
from rich.measure import Measurement
from rich.tree import Tree


def test_render_single_node():
    tree = Tree("foo")
    console = Console(color_system=None, width=20)
    console.begin_capture()
    console.print(tree)
    assert console.end_capture() == "foo\n"


def test_render_single_branch():
    tree = Tree("foo")
    tree.add("bar")
    console = Console(color_system=None, width=20)
    console.begin_capture()
    console.print(tree)
    result = console.end_capture()
    print(repr(result))
    expected = "foo\n└── bar\n"
    assert result == expected


def test_render_double_branch():
    tree = Tree("foo")
    tree.add("bar")
    tree.add("baz")
    console = Console(color_system=None, width=20)
    console.begin_capture()
    console.print(tree)
    result = console.end_capture()
    print(repr(result))
    expected = "foo\n├── bar\n└── baz\n"
    assert result == expected


def test_render_ascii():
    tree = Tree("foo")
    tree.add("bar")
    tree.add("baz")

    class AsciiConsole(Console):
        @property
        def encoding(self):
            return "ascii"

    console = AsciiConsole(color_system=None, width=20)
    console.begin_capture()
    console.print(tree)
    result = console.end_capture()
    expected = "foo\n+-- bar\n`-- baz\n"
    assert result == expected


@pytest.mark.skipif(sys.platform == "win32", reason="different on Windows")
def test_render_tree_non_win32():
    tree = Tree("foo")
    tree.add("bar", style="italic")
    baz_tree = tree.add("baz", guide_style="bold red", style="on blue")
    baz_tree.add("1")
    baz_tree.add("2")
    tree.add("egg")

    console = Console(
        width=20, force_terminal=True, color_system="standard", _environ={}
    )
    console.begin_capture()
    console.print(tree)
    result = console.end_capture()
    print(repr(result))
    expected = "foo\n├── \x1b[3mbar\x1b[0m\n\x1b[44m├── \x1b[0m\x1b[44mbaz\x1b[0m\n\x1b[44m│   \x1b[0m\x1b[31;44m┣━━ \x1b[0m\x1b[44m1\x1b[0m\n\x1b[44m│   \x1b[0m\x1b[31;44m┗━━ \x1b[0m\x1b[44m2\x1b[0m\n└── egg\n"
    assert result == expected


@pytest.mark.skipif(sys.platform != "win32", reason="Windows specific")
def test_render_tree_win32():
    tree = Tree("foo")
    tree.add("bar", style="italic")
    baz_tree = tree.add("baz", guide_style="bold red", style="on blue")
    baz_tree.add("1")
    baz_tree.add("2")
    tree.add("egg")

    console = Console(
        width=20, force_terminal=True, color_system="standard", legacy_windows=True
    )
    console.begin_capture()
    console.print(tree)
    result = console.end_capture()
    print(repr(result))
    expected = "foo\n├── \x1b[3mbar\x1b[0m\n\x1b[44m├── \x1b[0m\x1b[44mbaz\x1b[0m\n\x1b[44m│   \x1b[0m\x1b[31;44m├── \x1b[0m\x1b[44m1\x1b[0m\n\x1b[44m│   \x1b[0m\x1b[31;44m└── \x1b[0m\x1b[44m2\x1b[0m\n└── egg\n"
    assert result == expected


@pytest.mark.skipif(sys.platform == "win32", reason="different on Windows")
def test_render_tree_hide_root_non_win32():
    tree = Tree("foo", hide_root=True)
    tree.add("bar", style="italic")
    baz_tree = tree.add("baz", guide_style="bold red", style="on blue")
    baz_tree.add("1")
    baz_tree.add("2")
    tree.add("egg")

    console = Console(
        width=20, force_terminal=True, color_system="standard", _environ={}
    )
    console.begin_capture()
    console.print(tree)
    result = console.end_capture()
    print(repr(result))
    expected = "\x1b[3mbar\x1b[0m\n\x1b[44mbaz\x1b[0m\n\x1b[31;44m┣━━ \x1b[0m\x1b[44m1\x1b[0m\n\x1b[31;44m┗━━ \x1b[0m\x1b[44m2\x1b[0m\negg\n"
    assert result == expected


@pytest.mark.skipif(sys.platform != "win32", reason="Windows specific")
def test_render_tree_hide_root_win32():
    tree = Tree("foo", hide_root=True)
    tree.add("bar", style="italic")
    baz_tree = tree.add("baz", guide_style="bold red", style="on blue")
    baz_tree.add("1")
    baz_tree.add("2")
    tree.add("egg")

    console = Console(width=20, force_terminal=True, color_system="standard")
    console.begin_capture()
    console.print(tree)
    result = console.end_capture()
    print(repr(result))
    expected = "\x1b[3mbar\x1b[0m\n\x1b[44mbaz\x1b[0m\n\x1b[31;44m├── \x1b[0m\x1b[44m1\x1b[0m\n\x1b[31;44m└── \x1b[0m\x1b[44m2\x1b[0m\negg\n"
    assert result == expected


def test_tree_measure():
    tree = Tree("foo")
    tree.add("bar")
    tree.add("mushroom risotto")
    console = Console()
    measurement = Measurement.get(console, console.options, tree)
    assert measurement == Measurement(12, 20)



================================================
FILE: tests/test_win32_console.py
================================================
import dataclasses
import sys
from unittest import mock
from unittest.mock import patch

import pytest

from rich.style import Style

if sys.platform == "win32":
    from rich import _win32_console
    from rich._win32_console import COORD, LegacyWindowsTerm, WindowsCoordinates

    CURSOR_X = 1
    CURSOR_Y = 2
    CURSOR_POSITION = WindowsCoordinates(row=CURSOR_Y, col=CURSOR_X)
    SCREEN_WIDTH = 20
    SCREEN_HEIGHT = 30
    DEFAULT_STYLE_ATTRIBUTE = 16
    CURSOR_SIZE = 25

    @dataclasses.dataclass
    class StubScreenBufferInfo:
        dwCursorPosition: COORD = COORD(CURSOR_X, CURSOR_Y)
        dwSize: COORD = COORD(SCREEN_WIDTH, SCREEN_HEIGHT)
        wAttributes: int = DEFAULT_STYLE_ATTRIBUTE

    pytestmark = pytest.mark.skipif(sys.platform != "win32", reason="windows only")

    def test_windows_coordinates_to_ctype():
        coord = WindowsCoordinates.from_param(WindowsCoordinates(row=1, col=2))
        assert coord.X == 2
        assert coord.Y == 1

    @pytest.fixture
    def win32_handle():
        handle = mock.sentinel
        with mock.patch.object(_win32_console, "GetStdHandle", return_value=handle):
            yield handle

    @pytest.fixture
    def win32_console_getters():
        def stub_console_cursor_info(std_handle, cursor_info):
            cursor_info.dwSize = CURSOR_SIZE
            cursor_info.bVisible = True

        with mock.patch.object(
            _win32_console,
            "GetConsoleScreenBufferInfo",
            return_value=StubScreenBufferInfo,
        ) as GetConsoleScreenBufferInfo, mock.patch.object(
            _win32_console, "GetConsoleCursorInfo", side_effect=stub_console_cursor_info
        ) as GetConsoleCursorInfo:
            yield {
                "GetConsoleScreenBufferInfo": GetConsoleScreenBufferInfo,
                "GetConsoleCursorInfo": GetConsoleCursorInfo,
            }

    def test_cursor_position(win32_console_getters):
        term = LegacyWindowsTerm(sys.stdout)
        assert term.cursor_position == WindowsCoordinates(row=CURSOR_Y, col=CURSOR_X)

    def test_screen_size(win32_console_getters):
        term = LegacyWindowsTerm(sys.stdout)
        assert term.screen_size == WindowsCoordinates(
            row=SCREEN_HEIGHT, col=SCREEN_WIDTH
        )

    def test_write_text(win32_console_getters, win32_handle, capsys):
        text = "Hello, world!"
        term = LegacyWindowsTerm(sys.stdout)

        term.write_text(text)

        captured = capsys.readouterr()
        assert captured.out == text

    @patch.object(_win32_console, "SetConsoleTextAttribute")
    def test_write_styled(
        SetConsoleTextAttribute,
        win32_console_getters,
        win32_handle,
        capsys,
    ):
        style = Style.parse("black on red")
        text = "Hello, world!"
        term = LegacyWindowsTerm(sys.stdout)

        term.write_styled(text, style)

        captured = capsys.readouterr()
        assert captured.out == text

        # Ensure we set the text attributes and then reset them after writing styled text
        call_args = SetConsoleTextAttribute.call_args_list
        assert len(call_args) == 2
        first_args, first_kwargs = call_args[0]
        second_args, second_kwargs = call_args[1]

        assert first_args == (win32_handle,)
        assert first_kwargs["attributes"].value == 64
        assert second_args == (win32_handle,)
        assert second_kwargs["attributes"] == DEFAULT_STYLE_ATTRIBUTE

    @patch.object(_win32_console, "SetConsoleTextAttribute")
    def test_write_styled_bold(
        SetConsoleTextAttribute, win32_console_getters, win32_handle
    ):
        style = Style.parse("bold black on red")
        text = "Hello, world!"
        term = LegacyWindowsTerm(sys.stdout)

        term.write_styled(text, style)

        call_args = SetConsoleTextAttribute.call_args_list
        first_args, first_kwargs = call_args[0]

        expected_attr = 64 + 8  # 64 for red bg, +8 for bright black
        assert first_args == (win32_handle,)
        assert first_kwargs["attributes"].value == expected_attr

    @patch.object(_win32_console, "SetConsoleTextAttribute")
    def test_write_styled_reverse(
        SetConsoleTextAttribute, win32_console_getters, win32_handle
    ):
        style = Style.parse("reverse red on blue")
        text = "Hello, world!"
        term = LegacyWindowsTerm(sys.stdout)

        term.write_styled(text, style)

        call_args = SetConsoleTextAttribute.call_args_list
        first_args, first_kwargs = call_args[0]

        expected_attr = 64 + 1  # 64 for red bg (after reverse), +1 for blue fg
        assert first_args == (win32_handle,)
        assert first_kwargs["attributes"].value == expected_attr

    @patch.object(_win32_console, "SetConsoleTextAttribute")
    def test_write_styled_reverse(
        SetConsoleTextAttribute, win32_console_getters, win32_handle
    ):
        style = Style.parse("dim bright_red on blue")
        text = "Hello, world!"
        term = LegacyWindowsTerm(sys.stdout)

        term.write_styled(text, style)

        call_args = SetConsoleTextAttribute.call_args_list
        first_args, first_kwargs = call_args[0]

        expected_attr = 4 + 16  # 4 for red text (after dim), +16 for blue bg
        assert first_args == (win32_handle,)
        assert first_kwargs["attributes"].value == expected_attr

    @patch.object(_win32_console, "SetConsoleTextAttribute")
    def test_write_styled_no_foreground_color(
        SetConsoleTextAttribute, win32_console_getters, win32_handle
    ):
        style = Style.parse("on blue")
        text = "Hello, world!"
        term = LegacyWindowsTerm(sys.stdout)

        term.write_styled(text, style)

        call_args = SetConsoleTextAttribute.call_args_list
        first_args, first_kwargs = call_args[0]

        expected_attr = 16 | term._default_fore  # 16 for blue bg, plus default fg color
        assert first_args == (win32_handle,)
        assert first_kwargs["attributes"].value == expected_attr

    @patch.object(_win32_console, "SetConsoleTextAttribute")
    def test_write_styled_no_background_color(
        SetConsoleTextAttribute, win32_console_getters, win32_handle
    ):
        style = Style.parse("blue")
        text = "Hello, world!"
        term = LegacyWindowsTerm(sys.stdout)

        term.write_styled(text, style)

        call_args = SetConsoleTextAttribute.call_args_list
        first_args, first_kwargs = call_args[0]

        expected_attr = (
            16 | term._default_back
        )  # 16 for blue foreground, plus default bg color
        assert first_args == (win32_handle,)
        assert first_kwargs["attributes"].value == expected_attr

    @patch.object(_win32_console, "FillConsoleOutputCharacter", return_value=None)
    @patch.object(_win32_console, "FillConsoleOutputAttribute", return_value=None)
    def test_erase_line(
        FillConsoleOutputAttribute,
        FillConsoleOutputCharacter,
        win32_console_getters,
        win32_handle,
    ):
        term = LegacyWindowsTerm(sys.stdout)
        term.erase_line()
        start = WindowsCoordinates(row=CURSOR_Y, col=0)
        FillConsoleOutputCharacter.assert_called_once_with(
            win32_handle, " ", length=SCREEN_WIDTH, start=start
        )
        FillConsoleOutputAttribute.assert_called_once_with(
            win32_handle, DEFAULT_STYLE_ATTRIBUTE, length=SCREEN_WIDTH, start=start
        )

    @patch.object(_win32_console, "FillConsoleOutputCharacter", return_value=None)
    @patch.object(_win32_console, "FillConsoleOutputAttribute", return_value=None)
    def test_erase_end_of_line(
        FillConsoleOutputAttribute,
        FillConsoleOutputCharacter,
        win32_console_getters,
        win32_handle,
    ):
        term = LegacyWindowsTerm(sys.stdout)
        term.erase_end_of_line()

        FillConsoleOutputCharacter.assert_called_once_with(
            win32_handle, " ", length=SCREEN_WIDTH - CURSOR_X, start=CURSOR_POSITION
        )
        FillConsoleOutputAttribute.assert_called_once_with(
            win32_handle,
            DEFAULT_STYLE_ATTRIBUTE,
            length=SCREEN_WIDTH - CURSOR_X,
            start=CURSOR_POSITION,
        )

    @patch.object(_win32_console, "FillConsoleOutputCharacter", return_value=None)
    @patch.object(_win32_console, "FillConsoleOutputAttribute", return_value=None)
    def test_erase_start_of_line(
        FillConsoleOutputAttribute,
        FillConsoleOutputCharacter,
        win32_console_getters,
        win32_handle,
    ):
        term = LegacyWindowsTerm(sys.stdout)
        term.erase_start_of_line()

        start = WindowsCoordinates(CURSOR_Y, 0)

        FillConsoleOutputCharacter.assert_called_once_with(
            win32_handle, " ", length=CURSOR_X, start=start
        )
        FillConsoleOutputAttribute.assert_called_once_with(
            win32_handle, DEFAULT_STYLE_ATTRIBUTE, length=CURSOR_X, start=start
        )

    @patch.object(_win32_console, "SetConsoleCursorPosition", return_value=None)
    def test_move_cursor_to(
        SetConsoleCursorPosition, win32_console_getters, win32_handle
    ):
        coords = WindowsCoordinates(row=4, col=5)
        term = LegacyWindowsTerm(sys.stdout)

        term.move_cursor_to(coords)

        SetConsoleCursorPosition.assert_called_once_with(win32_handle, coords=coords)

    @patch.object(_win32_console, "SetConsoleCursorPosition", return_value=None)
    def test_move_cursor_to_out_of_bounds_row(
        SetConsoleCursorPosition, win32_console_getters, win32_handle
    ):
        coords = WindowsCoordinates(row=-1, col=4)
        term = LegacyWindowsTerm(sys.stdout)

        term.move_cursor_to(coords)

        assert not SetConsoleCursorPosition.called

    @patch.object(_win32_console, "SetConsoleCursorPosition", return_value=None)
    def test_move_cursor_to_out_of_bounds_col(
        SetConsoleCursorPosition, win32_console_getters, win32_handle
    ):
        coords = WindowsCoordinates(row=10, col=-4)
        term = LegacyWindowsTerm(sys.stdout)

        term.move_cursor_to(coords)

        assert not SetConsoleCursorPosition.called

    @patch.object(_win32_console, "SetConsoleCursorPosition", return_value=None)
    def test_move_cursor_up(
        SetConsoleCursorPosition, win32_console_getters, win32_handle
    ):
        term = LegacyWindowsTerm(sys.stdout)

        term.move_cursor_up()

        SetConsoleCursorPosition.assert_called_once_with(
            win32_handle, coords=WindowsCoordinates(row=CURSOR_Y - 1, col=CURSOR_X)
        )

    @patch.object(_win32_console, "SetConsoleCursorPosition", return_value=None)
    def test_move_cursor_down(
        SetConsoleCursorPosition, win32_console_getters, win32_handle
    ):
        term = LegacyWindowsTerm(sys.stdout)

        term.move_cursor_down()

        SetConsoleCursorPosition.assert_called_once_with(
            win32_handle, coords=WindowsCoordinates(row=CURSOR_Y + 1, col=CURSOR_X)
        )

    @patch.object(_win32_console, "SetConsoleCursorPosition", return_value=None)
    def test_move_cursor_forward(
        SetConsoleCursorPosition, win32_console_getters, win32_handle
    ):
        term = LegacyWindowsTerm(sys.stdout)

        term.move_cursor_forward()

        SetConsoleCursorPosition.assert_called_once_with(
            win32_handle, coords=WindowsCoordinates(row=CURSOR_Y, col=CURSOR_X + 1)
        )

    @patch.object(_win32_console, "SetConsoleCursorPosition", return_value=None)
    def test_move_cursor_forward_newline_wrap(
        SetConsoleCursorPosition, win32_console_getters, win32_handle
    ):
        cursor_at_end_of_line = StubScreenBufferInfo(
            dwCursorPosition=COORD(SCREEN_WIDTH - 1, CURSOR_Y)
        )
        win32_console_getters[
            "GetConsoleScreenBufferInfo"
        ].return_value = cursor_at_end_of_line
        term = LegacyWindowsTerm(sys.stdout)
        term.move_cursor_forward()

        SetConsoleCursorPosition.assert_called_once_with(
            win32_handle, coords=WindowsCoordinates(row=CURSOR_Y + 1, col=0)
        )

    @patch.object(_win32_console, "SetConsoleCursorPosition", return_value=None)
    def test_move_cursor_to_column(
        SetConsoleCursorPosition, win32_console_getters, win32_handle
    ):
        term = LegacyWindowsTerm(sys.stdout)
        term.move_cursor_to_column(5)
        SetConsoleCursorPosition.assert_called_once_with(
            win32_handle, coords=WindowsCoordinates(CURSOR_Y, 5)
        )

    @patch.object(_win32_console, "SetConsoleCursorPosition", return_value=None)
    def test_move_cursor_backward(
        SetConsoleCursorPosition, win32_console_getters, win32_handle
    ):
        term = LegacyWindowsTerm(sys.stdout)
        term.move_cursor_backward()
        SetConsoleCursorPosition.assert_called_once_with(
            win32_handle, coords=WindowsCoordinates(row=CURSOR_Y, col=CURSOR_X - 1)
        )

    @patch.object(_win32_console, "SetConsoleCursorPosition", return_value=None)
    def test_move_cursor_backward_prev_line_wrap(
        SetConsoleCursorPosition, win32_console_getters, win32_handle
    ):
        cursor_at_start_of_line = StubScreenBufferInfo(
            dwCursorPosition=COORD(0, CURSOR_Y)
        )
        win32_console_getters[
            "GetConsoleScreenBufferInfo"
        ].return_value = cursor_at_start_of_line
        term = LegacyWindowsTerm(sys.stdout)
        term.move_cursor_backward()
        SetConsoleCursorPosition.assert_called_once_with(
            win32_handle,
            coords=WindowsCoordinates(row=CURSOR_Y - 1, col=SCREEN_WIDTH - 1),
        )

    @patch.object(_win32_console, "SetConsoleCursorInfo", return_value=None)
    def test_hide_cursor(SetConsoleCursorInfo, win32_console_getters, win32_handle):
        term = LegacyWindowsTerm(sys.stdout)
        term.hide_cursor()

        call_args = SetConsoleCursorInfo.call_args_list

        assert len(call_args) == 1

        args, kwargs = call_args[0]
        assert kwargs["cursor_info"].bVisible == 0
        assert kwargs["cursor_info"].dwSize == CURSOR_SIZE

    @patch.object(_win32_console, "SetConsoleCursorInfo", return_value=None)
    def test_show_cursor(SetConsoleCursorInfo, win32_console_getters, win32_handle):
        term = LegacyWindowsTerm(sys.stdout)
        term.show_cursor()

        call_args = SetConsoleCursorInfo.call_args_list

        assert len(call_args) == 1

        args, kwargs = call_args[0]
        assert kwargs["cursor_info"].bVisible == 1
        assert kwargs["cursor_info"].dwSize == CURSOR_SIZE

    @patch.object(_win32_console, "SetConsoleTitle", return_value=None)
    def test_set_title(SetConsoleTitle, win32_console_getters):
        term = LegacyWindowsTerm(sys.stdout)
        term.set_title("title")

        SetConsoleTitle.assert_called_once_with("title")

    @patch.object(_win32_console, "SetConsoleTitle", return_value=None)
    def test_set_title_too_long(_, win32_console_getters):
        term = LegacyWindowsTerm(sys.stdout)

        with pytest.raises(AssertionError):
            term.set_title("a" * 255)



================================================
FILE: tests/test_windows_renderer.py
================================================
import sys
from unittest.mock import call, create_autospec

import pytest

try:
    from rich._win32_console import LegacyWindowsTerm, WindowsCoordinates
    from rich._windows_renderer import legacy_windows_render
except:
    # These modules can only be imported on Windows
    pass
from rich.segment import ControlType, Segment
from rich.style import Style

pytestmark = pytest.mark.skipif(sys.platform != "win32", reason="windows only")


@pytest.fixture
def legacy_term_mock():
    return create_autospec(LegacyWindowsTerm)


def test_text_only(legacy_term_mock):
    text = "Hello, world!"
    buffer = [Segment(text)]
    legacy_windows_render(buffer, legacy_term_mock)

    legacy_term_mock.write_text.assert_called_once_with(text)


def test_text_multiple_segments(legacy_term_mock):
    buffer = [Segment("Hello, "), Segment("world!")]
    legacy_windows_render(buffer, legacy_term_mock)

    assert legacy_term_mock.write_text.call_args_list == [
        call("Hello, "),
        call("world!"),
    ]


def test_text_with_style(legacy_term_mock):
    text = "Hello, world!"
    style = Style.parse("black on red")
    buffer = [Segment(text, style)]

    legacy_windows_render(buffer, legacy_term_mock)

    legacy_term_mock.write_styled.assert_called_once_with(text, style)


def test_control_cursor_move_to(legacy_term_mock):
    buffer = [Segment("", None, [(ControlType.CURSOR_MOVE_TO, 20, 30)])]

    legacy_windows_render(buffer, legacy_term_mock)

    legacy_term_mock.move_cursor_to.assert_called_once_with(
        WindowsCoordinates(row=29, col=19)
    )


def test_control_carriage_return(legacy_term_mock):
    buffer = [Segment("", None, [(ControlType.CARRIAGE_RETURN,)])]

    legacy_windows_render(buffer, legacy_term_mock)

    legacy_term_mock.write_text.assert_called_once_with("\r")


def test_control_home(legacy_term_mock):
    buffer = [Segment("", None, [(ControlType.HOME,)])]

    legacy_windows_render(buffer, legacy_term_mock)

    legacy_term_mock.move_cursor_to.assert_called_once_with(WindowsCoordinates(0, 0))


@pytest.mark.parametrize(
    "control_type, method_name",
    [
        (ControlType.CURSOR_UP, "move_cursor_up"),
        (ControlType.CURSOR_DOWN, "move_cursor_down"),
        (ControlType.CURSOR_FORWARD, "move_cursor_forward"),
        (ControlType.CURSOR_BACKWARD, "move_cursor_backward"),
    ],
)
def test_control_cursor_single_cell_movement(
    legacy_term_mock, control_type, method_name
):
    buffer = [Segment("", None, [(control_type,)])]

    legacy_windows_render(buffer, legacy_term_mock)

    getattr(legacy_term_mock, method_name).assert_called_once_with()


@pytest.mark.parametrize(
    "erase_mode, method_name",
    [
        (0, "erase_end_of_line"),
        (1, "erase_start_of_line"),
        (2, "erase_line"),
    ],
)
def test_control_erase_line(legacy_term_mock, erase_mode, method_name):
    buffer = [Segment("", None, [(ControlType.ERASE_IN_LINE, erase_mode)])]

    legacy_windows_render(buffer, legacy_term_mock)

    getattr(legacy_term_mock, method_name).assert_called_once_with()


def test_control_show_cursor(legacy_term_mock):
    buffer = [Segment("", None, [(ControlType.SHOW_CURSOR,)])]

    legacy_windows_render(buffer, legacy_term_mock)

    legacy_term_mock.show_cursor.assert_called_once_with()


def test_control_hide_cursor(legacy_term_mock):
    buffer = [Segment("", None, [(ControlType.HIDE_CURSOR,)])]

    legacy_windows_render(buffer, legacy_term_mock)

    legacy_term_mock.hide_cursor.assert_called_once_with()


def test_control_cursor_move_to_column(legacy_term_mock):
    buffer = [Segment("", None, [(ControlType.CURSOR_MOVE_TO_COLUMN, 3)])]

    legacy_windows_render(buffer, legacy_term_mock)

    legacy_term_mock.move_cursor_to_column.assert_called_once_with(2)


def test_control_set_terminal_window_title(legacy_term_mock):
    buffer = [Segment("", None, [(ControlType.SET_WINDOW_TITLE, "Hello, world!")])]

    legacy_windows_render(buffer, legacy_term_mock)

    legacy_term_mock.set_title.assert_called_once_with("Hello, world!")



================================================
FILE: tools/README.md
================================================
# Tools

These are scripts used in the development of Rich, and aren't for general use. But feel free to look around.

Some ~~strikethrough~~ text.



================================================
FILE: tools/cats.json
================================================
Error reading file with 'cp936': 'gbk' codec can't decode byte 0x94 in position 14140: illegal multibyte sequence


================================================
FILE: tools/make_emoji.py
================================================
try:
    import emoji
except ImportError:
    print("pip install emoji")
    raise

from emoji.unicode_codes import EMOJI_ALIAS_UNICODE

emoji = {k.lower().strip(":"): v for k, v in EMOJI_ALIAS_UNICODE.items()}

with open("_emoji_codes.py", "wt") as f:
    f.write("EMOJI=" + str(emoji))



================================================
FILE: tools/make_terminal_widths.py
================================================
import subprocess
from typing import List, Tuple
import sys

from rich.progress import Progress

from wcwidth import wcwidth


progress = Progress()


def make_widths_table() -> List[Tuple[int, int, int]]:
    table: List[Tuple[int, int, int]] = []
    append = table.append

    make_table_task = progress.add_task("Calculating table...")

    widths = (
        (codepoint, wcwidth(chr(codepoint)))
        for codepoint in range(0, sys.maxunicode + 1)
    )

    _widths = [(codepoint, width) for codepoint, width in widths if width != 1]
    iter_widths = iter(_widths)

    endpoint, group_cell_size = next(iter_widths)
    start_codepoint = end_codepoint = endpoint
    for codepoint, cell_size in progress.track(
        iter_widths, task_id=make_table_task, total=len(_widths) - 1
    ):
        if cell_size != group_cell_size or codepoint != end_codepoint + 1:
            append((start_codepoint, end_codepoint, group_cell_size))
            start_codepoint = end_codepoint = codepoint
            group_cell_size = cell_size
        else:
            end_codepoint = codepoint
    append((start_codepoint, end_codepoint, group_cell_size))
    return table


def get_cell_size(table: List[Tuple[int, int, int]], character: str) -> int:
    codepoint = ord(character)
    lower_bound = 0
    upper_bound = len(table) - 1
    index = (lower_bound + upper_bound) // 2
    while True:
        start, end, width = table[index]
        if codepoint < start:
            upper_bound = index - 1
        elif codepoint > end:
            lower_bound = index + 1
        else:
            return width
        if upper_bound < lower_bound:
            break
        index = (lower_bound + upper_bound) // 2
    return 1


def test(widths_table):
    for codepoint in progress.track(
        range(0, sys.maxunicode + 1), description="Testing..."
    ):
        character = chr(codepoint)
        width1 = get_cell_size(widths_table, character)
        width2 = wcwidth(character)
        if width1 != width2:
            print(f"{width1} != {width2}")
            break


def run():
    with progress:
        widths_table = make_widths_table()
        test(widths_table)
    table_file = f"""# Auto generated by make_terminal_widths.py

CELL_WIDTHS = {widths_table!r}

"""
    with open("../rich/_cell_widths.py", "wt") as fh:
        fh.write(table_file)

    subprocess.run("black ../rich/_cell_widths.py", shell=True)


if __name__ == "__main__":
    run()



================================================
FILE: tools/movies.md
================================================
# Top 80's Movies

The 1980's was an era that produced some of the most iconic movies of all time. This page provides a brief overview of some of the most popular movies from this decade.

## Box Office Hits

Here are the top 5 highest-grossing films of the 1980s:

| Year |                     Title                      | Director          |  Box Office (USD) |
|------|:----------------------------------------------:|:------------------|------------------:|
| 1982 |          *E.T. the Extra-Terrestrial*          | Steven Spielberg  |    $792.9 million |
| 1980 | Star Wars: Episode V – The Empire Strikes Back | Irvin Kershner    |    $538.4 million |
| 1983 |   Star Wars: Episode VI – Return of the Jedi   | Richard Marquand  |    $475.1 million |
| 1981 |            Raiders of the Lost Ark             | Steven Spielberg  |    $389.9 million |
| 1984 |      Indiana Jones and the Temple of Doom      | Steven Spielberg  |    $333.1 million |

## Oscar Winners

The following table displays the films from the '80s that won the Oscar for Best Picture:

| Year | Movie               | Director              |
|------|---------------------|-----------------------|
| 1980 | Ordinary People     | Robert Redford        |
| 1981 | Chariots of Fire    | Hugh Hudson           |
| 1982 | Gandhi              | Richard Attenborough  |
| 1983 | Terms of Endearment | James L. Brooks       |
| 1984 | Amadeus             | Milos Forman          |
| 1985 | Out of Africa       | Sydney Pollack        |
| 1986 | Platoon             | Oliver Stone          |
| 1987 | The Last Emperor    | Bernardo Bertolucci   |
| 1988 | Rain Man            | Barry Levinson        |
| 1989 | Driving Miss Daisy  | Bruce Beresford       |

## Cult Classics

The 80s also produced a number of cult classics. Here are a few notable ones:

| Year | Movie              | Director        |
|------|--------------------|-----------------|
| 1985 | The Goonies        | Richard Donner  |
| 1988 | Beetlejuice        | Tim Burton      |
| 1984 | Ghostbusters       | Ivan Reitman    |
| 1985 | Back to the Future | Robert Zemeckis |
| 1987 | The Princess Bride | Rob Reiner      |



================================================
FILE: tools/profile_divide.py
================================================
from rich.segment import Segment

text = """Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."""


segments = [Segment(text[n : n + 7]) for n in range(0, len(text), 7)]


from time import perf_counter

start = perf_counter()
for _ in range(10000):
    list(Segment.divide(segments, [0, 1, 20, 24, 65, len(text)]))
print(perf_counter() - start)



================================================
FILE: tools/profile_pretty.py
================================================
import json
import io
from time import time
from rich.console import Console
from rich.pretty import Pretty


console = Console(file=io.StringIO(), color_system="truecolor", width=100)

with open("cats.json") as fh:
    cats = json.load(fh)


console.begin_capture()
start = time()
pretty = Pretty(cats)
console.print(pretty, overflow="ignore", crop=False)
result = console.end_capture()
taken = (time() - start) * 1000
print(result)

print(console.file.getvalue())
print(f"{taken:.1f}")



================================================
FILE: tools/stress_test_pretty.py
================================================
from rich.console import Console
from rich.panel import Panel
from rich.pretty import Pretty
from rich._timer import timer

DATA = {
    "foo": [1, 2, 3, (), {}, (1, 2, 3), {4, 5, 6, (7, 8, 9)}, "Hello, World"],
    "bar": [None, (False, True)] * 2,
    "Dune": {
        "names": {
            "Paul Atreides",
            "Vladimir Harkonnen",
            "Thufir Hawat",
            "Duncan Idaho",
        }
    },
}
console = Console()
with timer("Stress test"):
    for w in range(130):
        console.print(Panel(Pretty(DATA, indent_guides=True), width=w))



================================================
FILE: .faq/FAQ.md
================================================

# Frequently Asked Questions 

{%- for question in questions %}
- [{{ question.title }}](#{{ question.slug }})
{%- endfor %}


{%- for question in questions %}

<a name="{{ question.slug }}"></a>
## {{ question.title }}

{{ question.body }}

{%- endfor %}

<hr>

Generated by [FAQtory](https://github.com/willmcgugan/faqtory)



================================================
FILE: .faq/suggest.md
================================================
{%- if questions -%}
{% if questions|length == 1 %}
We found the following entry in the [FAQ]({{ faq_url }}) which you may find helpful:
{%- else %}
We found the following entries in the [FAQ]({{ faq_url }}) which you may find helpful:
{%- endif %}

{% for question in questions %}
- [{{ question.title }}]({{ faq_url }}#{{ question.slug }})
{%- endfor %}

Feel free to close this issue if you found an answer in the FAQ. Otherwise, please give us a little time to review.

{%- else -%}
Thank you for your issue. Give us a little time to review it.

PS. You might want to check the [FAQ]({{ faq_url }}) if you haven't done so already.
{%- endif %}

Rich was created by Will McGugan. Consider [sponsoring Will's work on Rich](https://github.com/sponsors/willmcgugan).

This is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)



================================================
FILE: .github/dependabot.yml
================================================
# To get started with Dependabot version updates, you'll need to specify which
# package ecosystems to update and where the package manifests are located.
# Please see the documentation for all configuration options:
# https://help.github.com/github/administering-a-repository/configuration-options-for-dependency-updates

version: 2
updates:
  - package-ecosystem: "pip" # See documentation for possible values
    directory: "/" # Location of package manifests
    schedule:
      interval: "daily"
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "daily"



================================================
FILE: .github/FUNDING.yml
================================================
# These are supported funding model platforms

github: willmcgugan



================================================
FILE: .github/pull_request_template.md
================================================

<!--
Please note that Rich isn't accepting any new features at this point.

If a feature can be implemented without modifying the core library, then
they should be released as a third-party module. I can accept updates to the
core library that make it easier to extend (think hooks).

Bugfixes are always welcome of course.

Sometimes it is not clear what is a feature and what is a bug fix.
If there is any doubt, please open a discussion first.

-->

## Type of changes

- [ ] Bug fix
- [ ] New feature
- [ ] Documentation / docstrings
- [ ] Tests
- [ ] Other

## Checklist

- [ ] I've run the latest [black](https://github.com/psf/black) with default args on new code.
- [ ] I've updated CHANGELOG.md and CONTRIBUTORS.md where appropriate.
- [ ] I've added tests for new code.
- [ ] I accept that @willmcgugan may be pedantic in the code review.

## Description

Please describe your changes here. If this fixes a bug, please link to the issue, if possible.



================================================
FILE: .github/ISSUE_TEMPLATE/bug_report.md
================================================
---
name: Bug report
about: Create a report to help us improve
title: "[BUG]"
labels: Needs triage
assignees: ""
---

- [ ] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.
- [ ] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).

<!-- 
WAIT! Is this a feature request?

Rich isn't accepting new features. If it can be implemented in a third-party library, then that is what I recommend.

Rich *may* accept enhancements to existing features, if they don't have a disruptive impact on the API.

If you think your feature is exceptional, then please make your case in a discussion.
-->

**Describe the bug**

Edit this with a clear and concise description of what the bug.

Provide a minimal code example that demonstrates the issue if you can.
Please ensure that your example runs without modification (don't forget imports).

If the issue is visual in nature, consider posting a screenshot.

**Platform**
<details>
<summary>Click to expand</summary>

What platform (Win/Linux/Mac) are you running on? What terminal software are you using?

I may ask you to copy and paste the output of the following commands. It may save some time if you do it now.

If you're using Rich in a terminal:

```
python -m rich.diagnose
pip freeze | grep rich
```

If you're using Rich in a Jupyter Notebook, run the following snippet in a cell
and paste the output in your bug report.

```python
from rich.diagnose import report
report()
```

</details>



================================================
FILE: .github/ISSUE_TEMPLATE/feature_request.md
================================================
---
name: Feature request
about: Suggest an idea for this project
title: "[REQUEST]"
labels: Needs triage
assignees: ''

---

NOTE: If a feature could be implemented in a third-party library, then it is unlikely to be accepted as part of the core library.

NOTE: Feature requests will not be considered unless first approved in discussions (https://github.com/textualize/rich/discussions)

Have you checked the issues for a similar suggestions?

**How would you improve Rich?**

Give as much detail as you can. Example code of how you would like it to work would help.

**What problem does it solve for you?**

What problem do you have that this feature would solve? I may be able to suggest an existing way of solving it.



================================================
FILE: .github/workflows/codeql.yml
================================================
name: "CodeQL"

on:
  push:
    branches: [ 'master' ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ 'master' ]
  schedule:
    - cron: '38 19 * * 5'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    # 鈩癸笍 Command-line programs to run using the OS shell.
    # 馃摎 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"



================================================
FILE: .github/workflows/codespell.yml
================================================
name: codespell
on: [pull_request, push]
jobs:
  codespell:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: python3 -m pip install codespell
      - run: codespell --ignore-words-list="ba,fo,hel,revered,womens"
          --skip="./README.*.md,*.svg,*.ai,./benchmarks/snippets.py,./tests,./tools,*.lock"



================================================
FILE: .github/workflows/comment.yml
================================================
name: issues
on:
  issues:
    types: [closed]
jobs:
  add-comment:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Did I solve your problem?
        uses: peter-evans/create-or-update-comment@a35cf36e5301d70b76f316e867e7788a55a31dae
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            I hope I helped!
            
            Consider [sponsoring](https://github.com/sponsors/willmcgugan) my work on Rich. I give tech support for free, in addition to maintaining Rich and Textual.
            
            If you like using Rich, you might also enjoy [Textual](https://textual.textualize.io).

            Will McGugan
            



================================================
FILE: .github/workflows/newissue.yml
================================================
name: issues
on:
  issues:
    types: [opened]
jobs:
  add-comment:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
      - name: Install FAQtory
        run: pip install FAQtory
      - name: Run Suggest
        env:
          TITLE: ${{ github.event.issue.title }}
        run: faqtory suggest "$TITLE" > suggest.md   
      - name: Read suggest.md
        id: suggest
        uses: juliangruber/read-file-action@v1
        with:
          path: ./suggest.md
      - name: Suggest FAQ
        uses: peter-evans/create-or-update-comment@a35cf36e5301d70b76f316e867e7788a55a31dae
        with:
          issue-number: ${{ github.event.issue.number }}
          body: ${{ steps.suggest.outputs.content }}



================================================
FILE: .github/workflows/pythonpackage.yml
================================================
name: Test Rich module

on: [pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        exclude:
          - { os: windows-latest, python-version: "3.13" }
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - name: Install and configure Poetry
        # TODO: workaround for https://github.com/snok/install-poetry/issues/94
        uses: snok/install-poetry@v1.3.4
        with:
          version: 1.3.1
          virtualenvs-in-project: true
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Format check with black
        run: |
          source $VENV
          make format-check
      - name: Typecheck with mypy
        run: |
          source $VENV
          make typecheck
      - name: Test with pytest (with coverage)
        run: |
          source $VENV
          pytest tests -v --cov=./rich --cov-report=xml:./coverage.xml --cov-report term-missing
      - name: Upload code coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          name: rich
          flags: unittests
          env_vars: OS,PYTHON



================================================
FILE: .github/workflows/readmechanged.yml
================================================
name: README.md Changed

on: 
  push:
    branches:
      - master
    paths:
      - 'README.md'

jobs:
  send_notification:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Send notification to README Authors
      env:
        GITHUB_TOKEN: ${{ secrets.GHP_README_WORKFLOW }}
        GIT_SHA: ${{ github.sha }}
      run: |
        COMMIT=$(git rev-parse --short "$GIT_SHA")
        AUTHORS='@willmcgugan @oleksis @Adilius'
        BODY="🤓 $AUTHORS README.md changed 📝. Check the [commit $COMMIT](https://github.com/willmcgugan/rich/commit/$GIT_SHA) 👀"
        DISCUSSIONID='MDEwOkRpc2N1c3Npb24zMzI2NzM0'
        gh api graphql -H 'GraphQL-Features: discussions_api' -f body="$BODY" -F discussionId="$DISCUSSIONID" -f query='mutation($body: String!, $discussionId: ID!){addDiscussionComment(input:{body: $body , discussionId: $discussionId}){comment{id}}}'


